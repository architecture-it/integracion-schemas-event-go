// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     VtexSucursalesUpdateEvent.avsc
 */
package VtexEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type UserInfo struct {
	Email string `json:"Email"`

	VtexURL string `json:"VtexURL"`

	VtexAppKey string `json:"VtexAppKey"`

	VtexAppToken string `json:"VtexAppToken"`

	Usuario_login int64 `json:"Usuario_login"`

	Aol_id int64 `json:"Aol_id"`

	Hostname string `json:"Hostname"`

	Contratos []Contrato `json:"Contratos"`
}

const UserInfoAvroCRC64Fingerprint = "'\x7f\x9a\x0f.\xe7M:"

func NewUserInfo() UserInfo {
	r := UserInfo{}
	r.Contratos = make([]Contrato, 0)

	return r
}

func DeserializeUserInfo(r io.Reader) (UserInfo, error) {
	t := NewUserInfo()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeUserInfoFromSchema(r io.Reader, schema string) (UserInfo, error) {
	t := NewUserInfo()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeUserInfo(r UserInfo, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Email, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.VtexURL, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.VtexAppKey, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.VtexAppToken, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Usuario_login, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Aol_id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Hostname, w)
	if err != nil {
		return err
	}
	err = writeArrayContrato(r.Contratos, w)
	if err != nil {
		return err
	}
	return err
}

func (r UserInfo) Serialize(w io.Writer) error {
	return writeUserInfo(r, w)
}

func (r UserInfo) Schema() string {
	return "{\"fields\":[{\"name\":\"Email\",\"type\":\"string\"},{\"name\":\"VtexURL\",\"type\":\"string\"},{\"name\":\"VtexAppKey\",\"type\":\"string\"},{\"name\":\"VtexAppToken\",\"type\":\"string\"},{\"name\":\"Usuario_login\",\"type\":\"long\"},{\"name\":\"Aol_id\",\"type\":\"long\"},{\"name\":\"Hostname\",\"type\":\"string\"},{\"name\":\"Contratos\",\"type\":{\"items\":{\"fields\":[{\"name\":\"Id\",\"type\":\"string\"},{\"name\":\"Nombre\",\"type\":\"string\"},{\"name\":\"Numero\",\"type\":\"string\"},{\"name\":\"Descripcion\",\"type\":\"string\"},{\"name\":\"TipoDeEnvio\",\"type\":\"string\"},{\"name\":\"ModoDeEntrega\",\"type\":\"string\"},{\"default\":false,\"name\":\"admitePuntosHop\",\"type\":\"boolean\"}],\"name\":\"Contrato\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Andreani.Vtex.Events.Record.VtexSucursalesOnboarding.UserInfo\",\"type\":\"record\"}"
}

func (r UserInfo) SchemaName() string {
	return "Andreani.Vtex.Events.Record.VtexSucursalesOnboarding.UserInfo"
}

func (_ UserInfo) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ UserInfo) SetInt(v int32)       { panic("Unsupported operation") }
func (_ UserInfo) SetLong(v int64)      { panic("Unsupported operation") }
func (_ UserInfo) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ UserInfo) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ UserInfo) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ UserInfo) SetString(v string)   { panic("Unsupported operation") }
func (_ UserInfo) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *UserInfo) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Email}

		return w

	case 1:
		w := types.String{Target: &r.VtexURL}

		return w

	case 2:
		w := types.String{Target: &r.VtexAppKey}

		return w

	case 3:
		w := types.String{Target: &r.VtexAppToken}

		return w

	case 4:
		w := types.Long{Target: &r.Usuario_login}

		return w

	case 5:
		w := types.Long{Target: &r.Aol_id}

		return w

	case 6:
		w := types.String{Target: &r.Hostname}

		return w

	case 7:
		r.Contratos = make([]Contrato, 0)

		w := ArrayContratoWrapper{Target: &r.Contratos}

		return w

	}
	panic("Unknown field index")
}

func (r *UserInfo) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *UserInfo) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ UserInfo) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ UserInfo) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ UserInfo) HintSize(int)                     { panic("Unsupported operation") }
func (_ UserInfo) Finalize()                        {}

func (_ UserInfo) AvroCRC64Fingerprint() []byte {
	return []byte(UserInfoAvroCRC64Fingerprint)
}

func (r UserInfo) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Email"], err = json.Marshal(r.Email)
	if err != nil {
		return nil, err
	}
	output["VtexURL"], err = json.Marshal(r.VtexURL)
	if err != nil {
		return nil, err
	}
	output["VtexAppKey"], err = json.Marshal(r.VtexAppKey)
	if err != nil {
		return nil, err
	}
	output["VtexAppToken"], err = json.Marshal(r.VtexAppToken)
	if err != nil {
		return nil, err
	}
	output["Usuario_login"], err = json.Marshal(r.Usuario_login)
	if err != nil {
		return nil, err
	}
	output["Aol_id"], err = json.Marshal(r.Aol_id)
	if err != nil {
		return nil, err
	}
	output["Hostname"], err = json.Marshal(r.Hostname)
	if err != nil {
		return nil, err
	}
	output["Contratos"], err = json.Marshal(r.Contratos)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *UserInfo) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Email"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Email); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Email")
	}
	val = func() json.RawMessage {
		if v, ok := fields["VtexURL"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VtexURL); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for VtexURL")
	}
	val = func() json.RawMessage {
		if v, ok := fields["VtexAppKey"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VtexAppKey); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for VtexAppKey")
	}
	val = func() json.RawMessage {
		if v, ok := fields["VtexAppToken"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VtexAppToken); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for VtexAppToken")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Usuario_login"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Usuario_login); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Usuario_login")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Aol_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Aol_id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Aol_id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Hostname"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Hostname); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Hostname")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Contratos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contratos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Contratos")
	}
	return nil
}
