// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     VtexSucursalesCreationNotificationEvent.avsc
 */
package VtexEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type VtexSucursalesCreationNotificationEvent struct {
	User UserInfo `json:"User"`

	CarrierSucursalesList []CarrierSucursales `json:"CarrierSucursalesList"`
}

const VtexSucursalesCreationNotificationEventAvroCRC64Fingerprint = "\xedm\x1c\x99\xf5\x8b\\\x9c"

func NewVtexSucursalesCreationNotificationEvent() VtexSucursalesCreationNotificationEvent {
	r := VtexSucursalesCreationNotificationEvent{}
	r.User = NewUserInfo()

	r.CarrierSucursalesList = make([]CarrierSucursales, 0)

	return r
}

func DeserializeVtexSucursalesCreationNotificationEvent(r io.Reader) (VtexSucursalesCreationNotificationEvent, error) {
	t := NewVtexSucursalesCreationNotificationEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeVtexSucursalesCreationNotificationEventFromSchema(r io.Reader, schema string) (VtexSucursalesCreationNotificationEvent, error) {
	t := NewVtexSucursalesCreationNotificationEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeVtexSucursalesCreationNotificationEvent(r VtexSucursalesCreationNotificationEvent, w io.Writer) error {
	var err error
	err = writeUserInfo(r.User, w)
	if err != nil {
		return err
	}
	err = writeArrayCarrierSucursales(r.CarrierSucursalesList, w)
	if err != nil {
		return err
	}
	return err
}

func (r VtexSucursalesCreationNotificationEvent) Serialize(w io.Writer) error {
	return writeVtexSucursalesCreationNotificationEvent(r, w)
}

func (r VtexSucursalesCreationNotificationEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"User\",\"type\":{\"fields\":[{\"name\":\"Email\",\"type\":\"string\"},{\"name\":\"VtexURL\",\"type\":\"string\"},{\"name\":\"VtexAppKey\",\"type\":\"string\"},{\"name\":\"VtexAppToken\",\"type\":\"string\"},{\"name\":\"Usuario_login\",\"type\":\"long\"},{\"name\":\"Aol_id\",\"type\":\"long\"},{\"name\":\"Hostname\",\"type\":\"string\"},{\"name\":\"Contratos\",\"type\":{\"items\":{\"fields\":[{\"name\":\"Id\",\"type\":\"string\"},{\"name\":\"Nombre\",\"type\":\"string\"},{\"name\":\"Numero\",\"type\":\"string\"},{\"name\":\"Descripcion\",\"type\":\"string\"},{\"name\":\"TipoDeEnvio\",\"type\":\"string\"},{\"name\":\"ModoDeEntrega\",\"type\":\"string\"},{\"default\":false,\"name\":\"admitePuntosHop\",\"type\":\"boolean\"}],\"name\":\"Contrato\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"UserInfo\",\"namespace\":\"Andreani.Vtex.Events.Record.VtexSucursalesOnboarding\",\"type\":\"record\"}},{\"name\":\"CarrierSucursalesList\",\"type\":{\"items\":{\"fields\":[{\"name\":\"CarrierType\",\"type\":{\"name\":\"CarrierType\",\"symbols\":[\"AndreaniSucursal\",\"AndreaniBigger\"],\"type\":\"enum\"}},{\"name\":\"SucursalesIds\",\"type\":{\"items\":\"int\",\"type\":\"array\"}}],\"name\":\"CarrierSucursales\",\"namespace\":\"Andreani.Vtex.Events.Record.VtexSucursalesCreationNotification\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Andreani.Vtex.Events.Record.VtexSucursalesCreationNotificationEvent\",\"type\":\"record\"}"
}

func (r VtexSucursalesCreationNotificationEvent) SchemaName() string {
	return "Andreani.Vtex.Events.Record.VtexSucursalesCreationNotificationEvent"
}

func (_ VtexSucursalesCreationNotificationEvent) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ VtexSucursalesCreationNotificationEvent) SetInt(v int32)      { panic("Unsupported operation") }
func (_ VtexSucursalesCreationNotificationEvent) SetLong(v int64)     { panic("Unsupported operation") }
func (_ VtexSucursalesCreationNotificationEvent) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ VtexSucursalesCreationNotificationEvent) SetDouble(v float64) { panic("Unsupported operation") }
func (_ VtexSucursalesCreationNotificationEvent) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ VtexSucursalesCreationNotificationEvent) SetString(v string)  { panic("Unsupported operation") }
func (_ VtexSucursalesCreationNotificationEvent) SetUnionElem(v int64) {
	panic("Unsupported operation")
}

func (r *VtexSucursalesCreationNotificationEvent) Get(i int) types.Field {
	switch i {
	case 0:
		r.User = NewUserInfo()

		w := types.Record{Target: &r.User}

		return w

	case 1:
		r.CarrierSucursalesList = make([]CarrierSucursales, 0)

		w := ArrayCarrierSucursalesWrapper{Target: &r.CarrierSucursalesList}

		return w

	}
	panic("Unknown field index")
}

func (r *VtexSucursalesCreationNotificationEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *VtexSucursalesCreationNotificationEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ VtexSucursalesCreationNotificationEvent) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ VtexSucursalesCreationNotificationEvent) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ VtexSucursalesCreationNotificationEvent) HintSize(int) { panic("Unsupported operation") }
func (_ VtexSucursalesCreationNotificationEvent) Finalize()    {}

func (_ VtexSucursalesCreationNotificationEvent) AvroCRC64Fingerprint() []byte {
	return []byte(VtexSucursalesCreationNotificationEventAvroCRC64Fingerprint)
}

func (r VtexSucursalesCreationNotificationEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["User"], err = json.Marshal(r.User)
	if err != nil {
		return nil, err
	}
	output["CarrierSucursalesList"], err = json.Marshal(r.CarrierSucursalesList)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *VtexSucursalesCreationNotificationEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["User"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.User); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for User")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CarrierSucursalesList"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CarrierSucursalesList); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CarrierSucursalesList")
	}
	return nil
}
