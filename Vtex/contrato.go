// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     VtexSucursalesUpdateEvent.avsc
 */
package VtexEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Contrato struct {
	Id string `json:"Id"`

	Nombre string `json:"Nombre"`

	Descripcion string `json:"Descripcion"`

	TipoDeEnvio string `json:"TipoDeEnvio"`

	ModoDeEntrega string `json:"ModoDeEntrega"`
}

const ContratoAvroCRC64Fingerprint = "\xdb\x03͢Ѕ-\xef"

func NewContrato() Contrato {
	r := Contrato{}
	return r
}

func DeserializeContrato(r io.Reader) (Contrato, error) {
	t := NewContrato()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeContratoFromSchema(r io.Reader, schema string) (Contrato, error) {
	t := NewContrato()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeContrato(r Contrato, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Nombre, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Descripcion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.TipoDeEnvio, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ModoDeEntrega, w)
	if err != nil {
		return err
	}
	return err
}

func (r Contrato) Serialize(w io.Writer) error {
	return writeContrato(r, w)
}

func (r Contrato) Schema() string {
	return "{\"fields\":[{\"name\":\"Id\",\"type\":\"string\"},{\"name\":\"Nombre\",\"type\":\"string\"},{\"name\":\"Descripcion\",\"type\":\"string\"},{\"name\":\"TipoDeEnvio\",\"type\":\"string\"},{\"name\":\"ModoDeEntrega\",\"type\":\"string\"}],\"name\":\"Andreani.Vtex.Events.Record.VtexSucursalesOnboarding.Contrato\",\"type\":\"record\"}"
}

func (r Contrato) SchemaName() string {
	return "Andreani.Vtex.Events.Record.VtexSucursalesOnboarding.Contrato"
}

func (_ Contrato) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Contrato) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Contrato) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Contrato) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Contrato) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Contrato) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Contrato) SetString(v string)   { panic("Unsupported operation") }
func (_ Contrato) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Contrato) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.Nombre}

		return w

	case 2:
		w := types.String{Target: &r.Descripcion}

		return w

	case 3:
		w := types.String{Target: &r.TipoDeEnvio}

		return w

	case 4:
		w := types.String{Target: &r.ModoDeEntrega}

		return w

	}
	panic("Unknown field index")
}

func (r *Contrato) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Contrato) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Contrato) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Contrato) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Contrato) HintSize(int)                     { panic("Unsupported operation") }
func (_ Contrato) Finalize()                        {}

func (_ Contrato) AvroCRC64Fingerprint() []byte {
	return []byte(ContratoAvroCRC64Fingerprint)
}

func (r Contrato) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["Nombre"], err = json.Marshal(r.Nombre)
	if err != nil {
		return nil, err
	}
	output["Descripcion"], err = json.Marshal(r.Descripcion)
	if err != nil {
		return nil, err
	}
	output["TipoDeEnvio"], err = json.Marshal(r.TipoDeEnvio)
	if err != nil {
		return nil, err
	}
	output["ModoDeEntrega"], err = json.Marshal(r.ModoDeEntrega)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Contrato) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Nombre"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nombre); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Nombre")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Descripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Descripcion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Descripcion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoDeEnvio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoDeEnvio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoDeEnvio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ModoDeEntrega"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ModoDeEntrega); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ModoDeEntrega")
	}
	return nil
}
