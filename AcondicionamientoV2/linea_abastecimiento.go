// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     LineaAbastecimiento.avsc
 */
package AcondicionamientoV2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type LineaAbastecimiento struct {
	Codigo *UnionNullString `json:"codigo"`

	CantidadPedida *UnionNullString `json:"cantidadPedida"`

	AlmacenWMS *UnionNullString `json:"almacenWMS"`

	TipoAcondicionamiento *UnionNullString `json:"tipoAcondicionamiento"`

	LoteDeFabricante *UnionNullString `json:"loteDeFabricante"`

	LoteSecundario *UnionNullString `json:"loteSecundario"`

	FechaDeVencimiento *UnionNullString `json:"fechaDeVencimiento"`

	EstadoLote *UnionNullString `json:"estadoLote"`
}

const LineaAbastecimientoAvroCRC64Fingerprint = "\xa7\xe9\xc1\xf3\xea<X\xf0"

func NewLineaAbastecimiento() LineaAbastecimiento {
	r := LineaAbastecimiento{}
	r.Codigo = nil
	r.CantidadPedida = nil
	r.AlmacenWMS = nil
	r.TipoAcondicionamiento = nil
	r.LoteDeFabricante = nil
	r.LoteSecundario = nil
	r.FechaDeVencimiento = nil
	r.EstadoLote = nil
	return r
}

func DeserializeLineaAbastecimiento(r io.Reader) (LineaAbastecimiento, error) {
	t := NewLineaAbastecimiento()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeLineaAbastecimientoFromSchema(r io.Reader, schema string) (LineaAbastecimiento, error) {
	t := NewLineaAbastecimiento()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeLineaAbastecimiento(r LineaAbastecimiento, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Codigo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CantidadPedida, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.AlmacenWMS, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoAcondicionamiento, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LoteDeFabricante, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LoteSecundario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.FechaDeVencimiento, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EstadoLote, w)
	if err != nil {
		return err
	}
	return err
}

func (r LineaAbastecimiento) Serialize(w io.Writer) error {
	return writeLineaAbastecimiento(r, w)
}

func (r LineaAbastecimiento) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"codigo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"cantidadPedida\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"almacenWMS\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"tipoAcondicionamiento\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"loteDeFabricante\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"loteSecundario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"fechaDeVencimiento\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"estadoLote\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.ApiAcondicionamientoV2.Events.Common.LineaAbastecimiento\",\"type\":\"record\"}"
}

func (r LineaAbastecimiento) SchemaName() string {
	return "Andreani.ApiAcondicionamientoV2.Events.Common.LineaAbastecimiento"
}

func (_ LineaAbastecimiento) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ LineaAbastecimiento) SetInt(v int32)       { panic("Unsupported operation") }
func (_ LineaAbastecimiento) SetLong(v int64)      { panic("Unsupported operation") }
func (_ LineaAbastecimiento) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ LineaAbastecimiento) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ LineaAbastecimiento) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ LineaAbastecimiento) SetString(v string)   { panic("Unsupported operation") }
func (_ LineaAbastecimiento) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *LineaAbastecimiento) Get(i int) types.Field {
	switch i {
	case 0:
		r.Codigo = NewUnionNullString()

		return r.Codigo
	case 1:
		r.CantidadPedida = NewUnionNullString()

		return r.CantidadPedida
	case 2:
		r.AlmacenWMS = NewUnionNullString()

		return r.AlmacenWMS
	case 3:
		r.TipoAcondicionamiento = NewUnionNullString()

		return r.TipoAcondicionamiento
	case 4:
		r.LoteDeFabricante = NewUnionNullString()

		return r.LoteDeFabricante
	case 5:
		r.LoteSecundario = NewUnionNullString()

		return r.LoteSecundario
	case 6:
		r.FechaDeVencimiento = NewUnionNullString()

		return r.FechaDeVencimiento
	case 7:
		r.EstadoLote = NewUnionNullString()

		return r.EstadoLote
	}
	panic("Unknown field index")
}

func (r *LineaAbastecimiento) SetDefault(i int) {
	switch i {
	case 0:
		r.Codigo = nil
		return
	case 1:
		r.CantidadPedida = nil
		return
	case 2:
		r.AlmacenWMS = nil
		return
	case 3:
		r.TipoAcondicionamiento = nil
		return
	case 4:
		r.LoteDeFabricante = nil
		return
	case 5:
		r.LoteSecundario = nil
		return
	case 6:
		r.FechaDeVencimiento = nil
		return
	case 7:
		r.EstadoLote = nil
		return
	}
	panic("Unknown field index")
}

func (r *LineaAbastecimiento) NullField(i int) {
	switch i {
	case 0:
		r.Codigo = nil
		return
	case 1:
		r.CantidadPedida = nil
		return
	case 2:
		r.AlmacenWMS = nil
		return
	case 3:
		r.TipoAcondicionamiento = nil
		return
	case 4:
		r.LoteDeFabricante = nil
		return
	case 5:
		r.LoteSecundario = nil
		return
	case 6:
		r.FechaDeVencimiento = nil
		return
	case 7:
		r.EstadoLote = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ LineaAbastecimiento) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ LineaAbastecimiento) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ LineaAbastecimiento) HintSize(int)                     { panic("Unsupported operation") }
func (_ LineaAbastecimiento) Finalize()                        {}

func (_ LineaAbastecimiento) AvroCRC64Fingerprint() []byte {
	return []byte(LineaAbastecimientoAvroCRC64Fingerprint)
}

func (r LineaAbastecimiento) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["codigo"], err = json.Marshal(r.Codigo)
	if err != nil {
		return nil, err
	}
	output["cantidadPedida"], err = json.Marshal(r.CantidadPedida)
	if err != nil {
		return nil, err
	}
	output["almacenWMS"], err = json.Marshal(r.AlmacenWMS)
	if err != nil {
		return nil, err
	}
	output["tipoAcondicionamiento"], err = json.Marshal(r.TipoAcondicionamiento)
	if err != nil {
		return nil, err
	}
	output["loteDeFabricante"], err = json.Marshal(r.LoteDeFabricante)
	if err != nil {
		return nil, err
	}
	output["loteSecundario"], err = json.Marshal(r.LoteSecundario)
	if err != nil {
		return nil, err
	}
	output["fechaDeVencimiento"], err = json.Marshal(r.FechaDeVencimiento)
	if err != nil {
		return nil, err
	}
	output["estadoLote"], err = json.Marshal(r.EstadoLote)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *LineaAbastecimiento) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["codigo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Codigo); err != nil {
			return err
		}
	} else {
		r.Codigo = NewUnionNullString()

		r.Codigo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["cantidadPedida"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CantidadPedida); err != nil {
			return err
		}
	} else {
		r.CantidadPedida = NewUnionNullString()

		r.CantidadPedida = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["almacenWMS"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AlmacenWMS); err != nil {
			return err
		}
	} else {
		r.AlmacenWMS = NewUnionNullString()

		r.AlmacenWMS = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["tipoAcondicionamiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoAcondicionamiento); err != nil {
			return err
		}
	} else {
		r.TipoAcondicionamiento = NewUnionNullString()

		r.TipoAcondicionamiento = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteDeFabricante"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteDeFabricante); err != nil {
			return err
		}
	} else {
		r.LoteDeFabricante = NewUnionNullString()

		r.LoteDeFabricante = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteSecundario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteSecundario); err != nil {
			return err
		}
	} else {
		r.LoteSecundario = NewUnionNullString()

		r.LoteSecundario = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaDeVencimiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaDeVencimiento); err != nil {
			return err
		}
	} else {
		r.FechaDeVencimiento = NewUnionNullString()

		r.FechaDeVencimiento = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["estadoLote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EstadoLote); err != nil {
			return err
		}
	} else {
		r.EstadoLote = NewUnionNullString()

		r.EstadoLote = nil
	}
	return nil
}
