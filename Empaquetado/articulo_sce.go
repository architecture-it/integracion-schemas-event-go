// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     PedidoSce.avsc
 */
package EmpaquetadoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ArticuloSce struct {
	Sku string `json:"Sku"`

	Cantidad int32 `json:"Cantidad"`
}

const ArticuloSceAvroCRC64Fingerprint = "ิบ\xf7\x9bQZ\xd7H"

func NewArticuloSce() ArticuloSce {
	r := ArticuloSce{}
	return r
}

func DeserializeArticuloSce(r io.Reader) (ArticuloSce, error) {
	t := NewArticuloSce()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeArticuloSceFromSchema(r io.Reader, schema string) (ArticuloSce, error) {
	t := NewArticuloSce()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeArticuloSce(r ArticuloSce, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Sku, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Cantidad, w)
	if err != nil {
		return err
	}
	return err
}

func (r ArticuloSce) Serialize(w io.Writer) error {
	return writeArticuloSce(r, w)
}

func (r ArticuloSce) Schema() string {
	return "{\"fields\":[{\"name\":\"Sku\",\"type\":\"string\"},{\"name\":\"Cantidad\",\"type\":\"int\"}],\"name\":\"Andreani.Empaquetado.Events.Common.ArticuloSce\",\"type\":\"record\"}"
}

func (r ArticuloSce) SchemaName() string {
	return "Andreani.Empaquetado.Events.Common.ArticuloSce"
}

func (_ ArticuloSce) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ArticuloSce) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ArticuloSce) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ArticuloSce) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ArticuloSce) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ArticuloSce) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ArticuloSce) SetString(v string)   { panic("Unsupported operation") }
func (_ ArticuloSce) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ArticuloSce) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Sku}

		return w

	case 1:
		w := types.Int{Target: &r.Cantidad}

		return w

	}
	panic("Unknown field index")
}

func (r *ArticuloSce) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ArticuloSce) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ ArticuloSce) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ArticuloSce) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ArticuloSce) HintSize(int)                     { panic("Unsupported operation") }
func (_ ArticuloSce) Finalize()                        {}

func (_ ArticuloSce) AvroCRC64Fingerprint() []byte {
	return []byte(ArticuloSceAvroCRC64Fingerprint)
}

func (r ArticuloSce) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Sku"], err = json.Marshal(r.Sku)
	if err != nil {
		return nil, err
	}
	output["Cantidad"], err = json.Marshal(r.Cantidad)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ArticuloSce) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Sku"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sku); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Sku")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Cantidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cantidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Cantidad")
	}
	return nil
}
