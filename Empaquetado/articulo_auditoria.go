// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     PedidoAuditar.avsc
 */
package EmpaquetadoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ArticuloAuditoria struct {
	Sku string `json:"Sku"`

	Descripcion string `json:"Descripcion"`

	Ean *UnionNullString `json:"Ean"`

	NroLineaPedido string `json:"NroLineaPedido"`

	CantidadPedido int32 `json:"CantidadPedido"`

	CantidadPickeada int32 `json:"CantidadPickeada"`

	CantidadEmpacada int32 `json:"CantidadEmpacada"`

	Diferencia *UnionNullInt `json:"Diferencia"`

	Error *UnionNullString `json:"Error"`
}

const ArticuloAuditoriaAvroCRC64Fingerprint = "\xdb\xcb\x05|9Qf\x0e"

func NewArticuloAuditoria() ArticuloAuditoria {
	r := ArticuloAuditoria{}
	r.Ean = nil
	r.Diferencia = nil
	r.Error = nil
	return r
}

func DeserializeArticuloAuditoria(r io.Reader) (ArticuloAuditoria, error) {
	t := NewArticuloAuditoria()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeArticuloAuditoriaFromSchema(r io.Reader, schema string) (ArticuloAuditoria, error) {
	t := NewArticuloAuditoria()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeArticuloAuditoria(r ArticuloAuditoria, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Sku, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Descripcion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Ean, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NroLineaPedido, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.CantidadPedido, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.CantidadPickeada, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.CantidadEmpacada, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.Diferencia, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Error, w)
	if err != nil {
		return err
	}
	return err
}

func (r ArticuloAuditoria) Serialize(w io.Writer) error {
	return writeArticuloAuditoria(r, w)
}

func (r ArticuloAuditoria) Schema() string {
	return "{\"fields\":[{\"name\":\"Sku\",\"type\":\"string\"},{\"name\":\"Descripcion\",\"type\":\"string\"},{\"default\":null,\"name\":\"Ean\",\"type\":[\"null\",\"string\"]},{\"name\":\"NroLineaPedido\",\"type\":\"string\"},{\"name\":\"CantidadPedido\",\"type\":\"int\"},{\"name\":\"CantidadPickeada\",\"type\":\"int\"},{\"name\":\"CantidadEmpacada\",\"type\":\"int\"},{\"default\":null,\"name\":\"Diferencia\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"Error\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.Empaquetado.Events.Common.ArticuloAuditoria\",\"type\":\"record\"}"
}

func (r ArticuloAuditoria) SchemaName() string {
	return "Andreani.Empaquetado.Events.Common.ArticuloAuditoria"
}

func (_ ArticuloAuditoria) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ArticuloAuditoria) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ArticuloAuditoria) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ArticuloAuditoria) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ArticuloAuditoria) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ArticuloAuditoria) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ArticuloAuditoria) SetString(v string)   { panic("Unsupported operation") }
func (_ ArticuloAuditoria) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ArticuloAuditoria) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Sku}

		return w

	case 1:
		w := types.String{Target: &r.Descripcion}

		return w

	case 2:
		r.Ean = NewUnionNullString()

		return r.Ean
	case 3:
		w := types.String{Target: &r.NroLineaPedido}

		return w

	case 4:
		w := types.Int{Target: &r.CantidadPedido}

		return w

	case 5:
		w := types.Int{Target: &r.CantidadPickeada}

		return w

	case 6:
		w := types.Int{Target: &r.CantidadEmpacada}

		return w

	case 7:
		r.Diferencia = NewUnionNullInt()

		return r.Diferencia
	case 8:
		r.Error = NewUnionNullString()

		return r.Error
	}
	panic("Unknown field index")
}

func (r *ArticuloAuditoria) SetDefault(i int) {
	switch i {
	case 2:
		r.Ean = nil
		return
	case 7:
		r.Diferencia = nil
		return
	case 8:
		r.Error = nil
		return
	}
	panic("Unknown field index")
}

func (r *ArticuloAuditoria) NullField(i int) {
	switch i {
	case 2:
		r.Ean = nil
		return
	case 7:
		r.Diferencia = nil
		return
	case 8:
		r.Error = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ArticuloAuditoria) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ArticuloAuditoria) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ArticuloAuditoria) HintSize(int)                     { panic("Unsupported operation") }
func (_ ArticuloAuditoria) Finalize()                        {}

func (_ ArticuloAuditoria) AvroCRC64Fingerprint() []byte {
	return []byte(ArticuloAuditoriaAvroCRC64Fingerprint)
}

func (r ArticuloAuditoria) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Sku"], err = json.Marshal(r.Sku)
	if err != nil {
		return nil, err
	}
	output["Descripcion"], err = json.Marshal(r.Descripcion)
	if err != nil {
		return nil, err
	}
	output["Ean"], err = json.Marshal(r.Ean)
	if err != nil {
		return nil, err
	}
	output["NroLineaPedido"], err = json.Marshal(r.NroLineaPedido)
	if err != nil {
		return nil, err
	}
	output["CantidadPedido"], err = json.Marshal(r.CantidadPedido)
	if err != nil {
		return nil, err
	}
	output["CantidadPickeada"], err = json.Marshal(r.CantidadPickeada)
	if err != nil {
		return nil, err
	}
	output["CantidadEmpacada"], err = json.Marshal(r.CantidadEmpacada)
	if err != nil {
		return nil, err
	}
	output["Diferencia"], err = json.Marshal(r.Diferencia)
	if err != nil {
		return nil, err
	}
	output["Error"], err = json.Marshal(r.Error)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ArticuloAuditoria) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Sku"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sku); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Sku")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Descripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Descripcion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Descripcion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Ean"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ean); err != nil {
			return err
		}
	} else {
		r.Ean = NewUnionNullString()

		r.Ean = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NroLineaPedido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NroLineaPedido); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NroLineaPedido")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CantidadPedido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CantidadPedido); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CantidadPedido")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CantidadPickeada"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CantidadPickeada); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CantidadPickeada")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CantidadEmpacada"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CantidadEmpacada); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CantidadEmpacada")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Diferencia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Diferencia); err != nil {
			return err
		}
	} else {
		r.Diferencia = NewUnionNullInt()

		r.Diferencia = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Error"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Error); err != nil {
			return err
		}
	} else {
		r.Error = NewUnionNullString()

		r.Error = nil
	}
	return nil
}
