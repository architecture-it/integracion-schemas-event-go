// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     SugerenciaContenedores.avsc
 */
package EmpaquetadoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ContenedorEmbalaje struct {
	ContenedorId string `json:"ContenedorId"`

	ContenedorDescripcion string `json:"ContenedorDescripcion"`

	Longuitud *UnionNullFloat `json:"Longuitud"`

	Altura *UnionNullFloat `json:"Altura"`

	Ancho *UnionNullFloat `json:"Ancho"`

	Peso *UnionNullFloat `json:"Peso"`

	EsRetornable bool `json:"EsRetornable"`
}

const ContenedorEmbalajeAvroCRC64Fingerprint = "\x05Û¥uU*\xaf\xe4"

func NewContenedorEmbalaje() ContenedorEmbalaje {
	r := ContenedorEmbalaje{}
	r.Longuitud = nil
	r.Altura = nil
	r.Ancho = nil
	r.Peso = nil
	return r
}

func DeserializeContenedorEmbalaje(r io.Reader) (ContenedorEmbalaje, error) {
	t := NewContenedorEmbalaje()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeContenedorEmbalajeFromSchema(r io.Reader, schema string) (ContenedorEmbalaje, error) {
	t := NewContenedorEmbalaje()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeContenedorEmbalaje(r ContenedorEmbalaje, w io.Writer) error {
	var err error
	err = vm.WriteString(r.ContenedorId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ContenedorDescripcion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.Longuitud, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.Altura, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.Ancho, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.Peso, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.EsRetornable, w)
	if err != nil {
		return err
	}
	return err
}

func (r ContenedorEmbalaje) Serialize(w io.Writer) error {
	return writeContenedorEmbalaje(r, w)
}

func (r ContenedorEmbalaje) Schema() string {
	return "{\"fields\":[{\"name\":\"ContenedorId\",\"type\":\"string\"},{\"name\":\"ContenedorDescripcion\",\"type\":\"string\"},{\"default\":null,\"name\":\"Longuitud\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"Altura\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"Ancho\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"Peso\",\"type\":[\"null\",\"float\"]},{\"name\":\"EsRetornable\",\"type\":\"boolean\"}],\"name\":\"Andreani.Empaquetado.Events.Common.ContenedorEmbalaje\",\"type\":\"record\"}"
}

func (r ContenedorEmbalaje) SchemaName() string {
	return "Andreani.Empaquetado.Events.Common.ContenedorEmbalaje"
}

func (_ ContenedorEmbalaje) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ContenedorEmbalaje) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ContenedorEmbalaje) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ContenedorEmbalaje) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ContenedorEmbalaje) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ContenedorEmbalaje) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ContenedorEmbalaje) SetString(v string)   { panic("Unsupported operation") }
func (_ ContenedorEmbalaje) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ContenedorEmbalaje) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.ContenedorId}

		return w

	case 1:
		w := types.String{Target: &r.ContenedorDescripcion}

		return w

	case 2:
		r.Longuitud = NewUnionNullFloat()

		return r.Longuitud
	case 3:
		r.Altura = NewUnionNullFloat()

		return r.Altura
	case 4:
		r.Ancho = NewUnionNullFloat()

		return r.Ancho
	case 5:
		r.Peso = NewUnionNullFloat()

		return r.Peso
	case 6:
		w := types.Boolean{Target: &r.EsRetornable}

		return w

	}
	panic("Unknown field index")
}

func (r *ContenedorEmbalaje) SetDefault(i int) {
	switch i {
	case 2:
		r.Longuitud = nil
		return
	case 3:
		r.Altura = nil
		return
	case 4:
		r.Ancho = nil
		return
	case 5:
		r.Peso = nil
		return
	}
	panic("Unknown field index")
}

func (r *ContenedorEmbalaje) NullField(i int) {
	switch i {
	case 2:
		r.Longuitud = nil
		return
	case 3:
		r.Altura = nil
		return
	case 4:
		r.Ancho = nil
		return
	case 5:
		r.Peso = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ContenedorEmbalaje) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ContenedorEmbalaje) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ContenedorEmbalaje) HintSize(int)                     { panic("Unsupported operation") }
func (_ ContenedorEmbalaje) Finalize()                        {}

func (_ ContenedorEmbalaje) AvroCRC64Fingerprint() []byte {
	return []byte(ContenedorEmbalajeAvroCRC64Fingerprint)
}

func (r ContenedorEmbalaje) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["ContenedorId"], err = json.Marshal(r.ContenedorId)
	if err != nil {
		return nil, err
	}
	output["ContenedorDescripcion"], err = json.Marshal(r.ContenedorDescripcion)
	if err != nil {
		return nil, err
	}
	output["Longuitud"], err = json.Marshal(r.Longuitud)
	if err != nil {
		return nil, err
	}
	output["Altura"], err = json.Marshal(r.Altura)
	if err != nil {
		return nil, err
	}
	output["Ancho"], err = json.Marshal(r.Ancho)
	if err != nil {
		return nil, err
	}
	output["Peso"], err = json.Marshal(r.Peso)
	if err != nil {
		return nil, err
	}
	output["EsRetornable"], err = json.Marshal(r.EsRetornable)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ContenedorEmbalaje) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["ContenedorId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ContenedorId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ContenedorId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ContenedorDescripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ContenedorDescripcion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ContenedorDescripcion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Longuitud"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Longuitud); err != nil {
			return err
		}
	} else {
		r.Longuitud = NewUnionNullFloat()

		r.Longuitud = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Altura"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Altura); err != nil {
			return err
		}
	} else {
		r.Altura = NewUnionNullFloat()

		r.Altura = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Ancho"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ancho); err != nil {
			return err
		}
	} else {
		r.Ancho = NewUnionNullFloat()

		r.Ancho = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Peso"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Peso); err != nil {
			return err
		}
	} else {
		r.Peso = NewUnionNullFloat()

		r.Peso = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EsRetornable"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EsRetornable); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EsRetornable")
	}
	return nil
}
