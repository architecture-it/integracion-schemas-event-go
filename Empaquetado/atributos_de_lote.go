// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     AtributosDeLote.avsc
 */
package EmpaquetadoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type AtributosDeLote struct {
	Propietario string `json:"Propietario"`

	Sku string `json:"Sku"`

	Lote string `json:"Lote"`

	Atributo1 *UnionNullString `json:"Atributo1"`

	Atributo2 *UnionNullString `json:"Atributo2"`

	Atributo3 *UnionNullString `json:"Atributo3"`

	Atributo4 *UnionNullString `json:"Atributo4"`

	Atributo5 *UnionNullString `json:"Atributo5"`

	Atributo6 *UnionNullString `json:"Atributo6"`

	Atributo7 *UnionNullString `json:"Atributo7"`

	Atributo8 *UnionNullString `json:"Atributo8"`

	Atributo9 *UnionNullString `json:"Atributo9"`

	Atributo10 *UnionNullString `json:"Atributo10"`

	Atributo11 *UnionNullString `json:"Atributo11"`

	Atributo12 *UnionNullString `json:"Atributo12"`
}

const AtributosDeLoteAvroCRC64Fingerprint = "0\xb0\xc9\xf6\xa4\x96\xaa\v"

func NewAtributosDeLote() AtributosDeLote {
	r := AtributosDeLote{}
	r.Atributo1 = nil
	r.Atributo2 = nil
	r.Atributo3 = nil
	r.Atributo4 = nil
	r.Atributo5 = nil
	r.Atributo6 = nil
	r.Atributo7 = nil
	r.Atributo8 = nil
	r.Atributo9 = nil
	r.Atributo10 = nil
	r.Atributo11 = nil
	r.Atributo12 = nil
	return r
}

func DeserializeAtributosDeLote(r io.Reader) (AtributosDeLote, error) {
	t := NewAtributosDeLote()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAtributosDeLoteFromSchema(r io.Reader, schema string) (AtributosDeLote, error) {
	t := NewAtributosDeLote()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAtributosDeLote(r AtributosDeLote, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Propietario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Sku, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Lote, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Atributo1, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Atributo2, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Atributo3, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Atributo4, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Atributo5, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Atributo6, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Atributo7, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Atributo8, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Atributo9, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Atributo10, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Atributo11, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Atributo12, w)
	if err != nil {
		return err
	}
	return err
}

func (r AtributosDeLote) Serialize(w io.Writer) error {
	return writeAtributosDeLote(r, w)
}

func (r AtributosDeLote) Schema() string {
	return "{\"fields\":[{\"name\":\"Propietario\",\"type\":\"string\"},{\"name\":\"Sku\",\"type\":\"string\"},{\"name\":\"Lote\",\"type\":\"string\"},{\"default\":null,\"name\":\"Atributo1\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Atributo2\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Atributo3\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Atributo4\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Atributo5\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Atributo6\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Atributo7\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Atributo8\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Atributo9\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Atributo10\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Atributo11\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Atributo12\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.Empaquetado.Events.Common.AtributosDeLote\",\"type\":\"record\"}"
}

func (r AtributosDeLote) SchemaName() string {
	return "Andreani.Empaquetado.Events.Common.AtributosDeLote"
}

func (_ AtributosDeLote) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ AtributosDeLote) SetInt(v int32)       { panic("Unsupported operation") }
func (_ AtributosDeLote) SetLong(v int64)      { panic("Unsupported operation") }
func (_ AtributosDeLote) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ AtributosDeLote) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ AtributosDeLote) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ AtributosDeLote) SetString(v string)   { panic("Unsupported operation") }
func (_ AtributosDeLote) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *AtributosDeLote) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Propietario}

		return w

	case 1:
		w := types.String{Target: &r.Sku}

		return w

	case 2:
		w := types.String{Target: &r.Lote}

		return w

	case 3:
		r.Atributo1 = NewUnionNullString()

		return r.Atributo1
	case 4:
		r.Atributo2 = NewUnionNullString()

		return r.Atributo2
	case 5:
		r.Atributo3 = NewUnionNullString()

		return r.Atributo3
	case 6:
		r.Atributo4 = NewUnionNullString()

		return r.Atributo4
	case 7:
		r.Atributo5 = NewUnionNullString()

		return r.Atributo5
	case 8:
		r.Atributo6 = NewUnionNullString()

		return r.Atributo6
	case 9:
		r.Atributo7 = NewUnionNullString()

		return r.Atributo7
	case 10:
		r.Atributo8 = NewUnionNullString()

		return r.Atributo8
	case 11:
		r.Atributo9 = NewUnionNullString()

		return r.Atributo9
	case 12:
		r.Atributo10 = NewUnionNullString()

		return r.Atributo10
	case 13:
		r.Atributo11 = NewUnionNullString()

		return r.Atributo11
	case 14:
		r.Atributo12 = NewUnionNullString()

		return r.Atributo12
	}
	panic("Unknown field index")
}

func (r *AtributosDeLote) SetDefault(i int) {
	switch i {
	case 3:
		r.Atributo1 = nil
		return
	case 4:
		r.Atributo2 = nil
		return
	case 5:
		r.Atributo3 = nil
		return
	case 6:
		r.Atributo4 = nil
		return
	case 7:
		r.Atributo5 = nil
		return
	case 8:
		r.Atributo6 = nil
		return
	case 9:
		r.Atributo7 = nil
		return
	case 10:
		r.Atributo8 = nil
		return
	case 11:
		r.Atributo9 = nil
		return
	case 12:
		r.Atributo10 = nil
		return
	case 13:
		r.Atributo11 = nil
		return
	case 14:
		r.Atributo12 = nil
		return
	}
	panic("Unknown field index")
}

func (r *AtributosDeLote) NullField(i int) {
	switch i {
	case 3:
		r.Atributo1 = nil
		return
	case 4:
		r.Atributo2 = nil
		return
	case 5:
		r.Atributo3 = nil
		return
	case 6:
		r.Atributo4 = nil
		return
	case 7:
		r.Atributo5 = nil
		return
	case 8:
		r.Atributo6 = nil
		return
	case 9:
		r.Atributo7 = nil
		return
	case 10:
		r.Atributo8 = nil
		return
	case 11:
		r.Atributo9 = nil
		return
	case 12:
		r.Atributo10 = nil
		return
	case 13:
		r.Atributo11 = nil
		return
	case 14:
		r.Atributo12 = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ AtributosDeLote) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ AtributosDeLote) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ AtributosDeLote) HintSize(int)                     { panic("Unsupported operation") }
func (_ AtributosDeLote) Finalize()                        {}

func (_ AtributosDeLote) AvroCRC64Fingerprint() []byte {
	return []byte(AtributosDeLoteAvroCRC64Fingerprint)
}

func (r AtributosDeLote) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["Sku"], err = json.Marshal(r.Sku)
	if err != nil {
		return nil, err
	}
	output["Lote"], err = json.Marshal(r.Lote)
	if err != nil {
		return nil, err
	}
	output["Atributo1"], err = json.Marshal(r.Atributo1)
	if err != nil {
		return nil, err
	}
	output["Atributo2"], err = json.Marshal(r.Atributo2)
	if err != nil {
		return nil, err
	}
	output["Atributo3"], err = json.Marshal(r.Atributo3)
	if err != nil {
		return nil, err
	}
	output["Atributo4"], err = json.Marshal(r.Atributo4)
	if err != nil {
		return nil, err
	}
	output["Atributo5"], err = json.Marshal(r.Atributo5)
	if err != nil {
		return nil, err
	}
	output["Atributo6"], err = json.Marshal(r.Atributo6)
	if err != nil {
		return nil, err
	}
	output["Atributo7"], err = json.Marshal(r.Atributo7)
	if err != nil {
		return nil, err
	}
	output["Atributo8"], err = json.Marshal(r.Atributo8)
	if err != nil {
		return nil, err
	}
	output["Atributo9"], err = json.Marshal(r.Atributo9)
	if err != nil {
		return nil, err
	}
	output["Atributo10"], err = json.Marshal(r.Atributo10)
	if err != nil {
		return nil, err
	}
	output["Atributo11"], err = json.Marshal(r.Atributo11)
	if err != nil {
		return nil, err
	}
	output["Atributo12"], err = json.Marshal(r.Atributo12)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *AtributosDeLote) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Propietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Sku"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sku); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Sku")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Lote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Lote); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Lote")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Atributo1"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Atributo1); err != nil {
			return err
		}
	} else {
		r.Atributo1 = NewUnionNullString()

		r.Atributo1 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Atributo2"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Atributo2); err != nil {
			return err
		}
	} else {
		r.Atributo2 = NewUnionNullString()

		r.Atributo2 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Atributo3"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Atributo3); err != nil {
			return err
		}
	} else {
		r.Atributo3 = NewUnionNullString()

		r.Atributo3 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Atributo4"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Atributo4); err != nil {
			return err
		}
	} else {
		r.Atributo4 = NewUnionNullString()

		r.Atributo4 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Atributo5"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Atributo5); err != nil {
			return err
		}
	} else {
		r.Atributo5 = NewUnionNullString()

		r.Atributo5 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Atributo6"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Atributo6); err != nil {
			return err
		}
	} else {
		r.Atributo6 = NewUnionNullString()

		r.Atributo6 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Atributo7"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Atributo7); err != nil {
			return err
		}
	} else {
		r.Atributo7 = NewUnionNullString()

		r.Atributo7 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Atributo8"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Atributo8); err != nil {
			return err
		}
	} else {
		r.Atributo8 = NewUnionNullString()

		r.Atributo8 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Atributo9"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Atributo9); err != nil {
			return err
		}
	} else {
		r.Atributo9 = NewUnionNullString()

		r.Atributo9 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Atributo10"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Atributo10); err != nil {
			return err
		}
	} else {
		r.Atributo10 = NewUnionNullString()

		r.Atributo10 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Atributo11"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Atributo11); err != nil {
			return err
		}
	} else {
		r.Atributo11 = NewUnionNullString()

		r.Atributo11 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Atributo12"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Atributo12); err != nil {
			return err
		}
	} else {
		r.Atributo12 = NewUnionNullString()

		r.Atributo12 = nil
	}
	return nil
}
