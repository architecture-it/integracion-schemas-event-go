// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ConfirmacionRecepciones.avsc
 */
package ConfirmacionRecepcionSceEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ConfirmacionRecepciones struct {
	Almacen string `json:"almacen"`

	Contrato string `json:"contrato"`

	Planta string `json:"planta"`

	Remitente string `json:"remitente"`

	IdTransaccion string `json:"idTransaccion"`

	UriConsulta string `json:"uriConsulta"`

	ConfirmacionDeRecepcion ConfirmacionDeRecepcion `json:"confirmacionDeRecepcion"`
}

const ConfirmacionRecepcionesAvroCRC64Fingerprint = "\x1dh\xd2ÁÇê:("

func NewConfirmacionRecepciones() ConfirmacionRecepciones {
	r := ConfirmacionRecepciones{}
	r.ConfirmacionDeRecepcion = NewConfirmacionDeRecepcion()

	return r
}

func DeserializeConfirmacionRecepciones(r io.Reader) (ConfirmacionRecepciones, error) {
	t := NewConfirmacionRecepciones()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeConfirmacionRecepcionesFromSchema(r io.Reader, schema string) (ConfirmacionRecepciones, error) {
	t := NewConfirmacionRecepciones()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeConfirmacionRecepciones(r ConfirmacionRecepciones, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Almacen, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Contrato, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Planta, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Remitente, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.IdTransaccion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.UriConsulta, w)
	if err != nil {
		return err
	}
	err = writeConfirmacionDeRecepcion(r.ConfirmacionDeRecepcion, w)
	if err != nil {
		return err
	}
	return err
}

func (r ConfirmacionRecepciones) Serialize(w io.Writer) error {
	return writeConfirmacionRecepciones(r, w)
}

func (r ConfirmacionRecepciones) Schema() string {
	return "{\"fields\":[{\"name\":\"almacen\",\"type\":\"string\"},{\"name\":\"contrato\",\"type\":\"string\"},{\"name\":\"planta\",\"type\":\"string\"},{\"name\":\"remitente\",\"type\":\"string\"},{\"name\":\"idTransaccion\",\"type\":\"string\"},{\"name\":\"uriConsulta\",\"type\":\"string\"},{\"name\":\"confirmacionDeRecepcion\",\"type\":{\"fields\":[{\"name\":\"propietario\",\"type\":\"string\"},{\"name\":\"numeroDeRecepcion\",\"type\":\"string\"},{\"name\":\"remito\",\"type\":\"string\"},{\"name\":\"tipoDeRecepcion\",\"type\":\"string\"}],\"name\":\"ConfirmacionDeRecepcion\",\"type\":\"record\"}}],\"name\":\"Andreani.ConfirmacionRecepcionSce.Events.Record.ConfirmacionRecepciones\",\"type\":\"record\"}"
}

func (r ConfirmacionRecepciones) SchemaName() string {
	return "Andreani.ConfirmacionRecepcionSce.Events.Record.ConfirmacionRecepciones"
}

func (_ ConfirmacionRecepciones) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ConfirmacionRecepciones) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ConfirmacionRecepciones) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ConfirmacionRecepciones) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ConfirmacionRecepciones) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ConfirmacionRecepciones) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ConfirmacionRecepciones) SetString(v string)   { panic("Unsupported operation") }
func (_ ConfirmacionRecepciones) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ConfirmacionRecepciones) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Almacen}

		return w

	case 1:
		w := types.String{Target: &r.Contrato}

		return w

	case 2:
		w := types.String{Target: &r.Planta}

		return w

	case 3:
		w := types.String{Target: &r.Remitente}

		return w

	case 4:
		w := types.String{Target: &r.IdTransaccion}

		return w

	case 5:
		w := types.String{Target: &r.UriConsulta}

		return w

	case 6:
		r.ConfirmacionDeRecepcion = NewConfirmacionDeRecepcion()

		w := types.Record{Target: &r.ConfirmacionDeRecepcion}

		return w

	}
	panic("Unknown field index")
}

func (r *ConfirmacionRecepciones) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ConfirmacionRecepciones) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ ConfirmacionRecepciones) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ConfirmacionRecepciones) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ConfirmacionRecepciones) HintSize(int)                     { panic("Unsupported operation") }
func (_ ConfirmacionRecepciones) Finalize()                        {}

func (_ ConfirmacionRecepciones) AvroCRC64Fingerprint() []byte {
	return []byte(ConfirmacionRecepcionesAvroCRC64Fingerprint)
}

func (r ConfirmacionRecepciones) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["almacen"], err = json.Marshal(r.Almacen)
	if err != nil {
		return nil, err
	}
	output["contrato"], err = json.Marshal(r.Contrato)
	if err != nil {
		return nil, err
	}
	output["planta"], err = json.Marshal(r.Planta)
	if err != nil {
		return nil, err
	}
	output["remitente"], err = json.Marshal(r.Remitente)
	if err != nil {
		return nil, err
	}
	output["idTransaccion"], err = json.Marshal(r.IdTransaccion)
	if err != nil {
		return nil, err
	}
	output["uriConsulta"], err = json.Marshal(r.UriConsulta)
	if err != nil {
		return nil, err
	}
	output["confirmacionDeRecepcion"], err = json.Marshal(r.ConfirmacionDeRecepcion)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ConfirmacionRecepciones) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["almacen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Almacen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for almacen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["contrato"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contrato); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for contrato")
	}
	val = func() json.RawMessage {
		if v, ok := fields["planta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Planta); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for planta")
	}
	val = func() json.RawMessage {
		if v, ok := fields["remitente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Remitente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for remitente")
	}
	val = func() json.RawMessage {
		if v, ok := fields["idTransaccion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdTransaccion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for idTransaccion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["uriConsulta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UriConsulta); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for uriConsulta")
	}
	val = func() json.RawMessage {
		if v, ok := fields["confirmacionDeRecepcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ConfirmacionDeRecepcion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for confirmacionDeRecepcion")
	}
	return nil
}
