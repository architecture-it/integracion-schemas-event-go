// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ConfirmacionRecepciones.avsc
 */
package ConfirmacionRecepcionSceEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ConfirmacionDeRecepcion struct {
	Propietario string `json:"propietario"`

	NumeroDeRecepcion string `json:"numeroDeRecepcion"`

	Remito string `json:"remito"`

	TipoDeRecepcion string `json:"tipoDeRecepcion"`
}

const ConfirmacionDeRecepcionAvroCRC64Fingerprint = "\xfe\xd9T](_\x96B"

func NewConfirmacionDeRecepcion() ConfirmacionDeRecepcion {
	r := ConfirmacionDeRecepcion{}
	return r
}

func DeserializeConfirmacionDeRecepcion(r io.Reader) (ConfirmacionDeRecepcion, error) {
	t := NewConfirmacionDeRecepcion()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeConfirmacionDeRecepcionFromSchema(r io.Reader, schema string) (ConfirmacionDeRecepcion, error) {
	t := NewConfirmacionDeRecepcion()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeConfirmacionDeRecepcion(r ConfirmacionDeRecepcion, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Propietario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NumeroDeRecepcion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Remito, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.TipoDeRecepcion, w)
	if err != nil {
		return err
	}
	return err
}

func (r ConfirmacionDeRecepcion) Serialize(w io.Writer) error {
	return writeConfirmacionDeRecepcion(r, w)
}

func (r ConfirmacionDeRecepcion) Schema() string {
	return "{\"fields\":[{\"name\":\"propietario\",\"type\":\"string\"},{\"name\":\"numeroDeRecepcion\",\"type\":\"string\"},{\"name\":\"remito\",\"type\":\"string\"},{\"name\":\"tipoDeRecepcion\",\"type\":\"string\"}],\"name\":\"Andreani.ConfirmacionRecepcionSce.Events.Record.ConfirmacionDeRecepcion\",\"type\":\"record\"}"
}

func (r ConfirmacionDeRecepcion) SchemaName() string {
	return "Andreani.ConfirmacionRecepcionSce.Events.Record.ConfirmacionDeRecepcion"
}

func (_ ConfirmacionDeRecepcion) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ConfirmacionDeRecepcion) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ConfirmacionDeRecepcion) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ConfirmacionDeRecepcion) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ConfirmacionDeRecepcion) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ConfirmacionDeRecepcion) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ConfirmacionDeRecepcion) SetString(v string)   { panic("Unsupported operation") }
func (_ ConfirmacionDeRecepcion) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ConfirmacionDeRecepcion) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Propietario}

		return w

	case 1:
		w := types.String{Target: &r.NumeroDeRecepcion}

		return w

	case 2:
		w := types.String{Target: &r.Remito}

		return w

	case 3:
		w := types.String{Target: &r.TipoDeRecepcion}

		return w

	}
	panic("Unknown field index")
}

func (r *ConfirmacionDeRecepcion) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ConfirmacionDeRecepcion) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ ConfirmacionDeRecepcion) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ConfirmacionDeRecepcion) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ConfirmacionDeRecepcion) HintSize(int)                     { panic("Unsupported operation") }
func (_ ConfirmacionDeRecepcion) Finalize()                        {}

func (_ ConfirmacionDeRecepcion) AvroCRC64Fingerprint() []byte {
	return []byte(ConfirmacionDeRecepcionAvroCRC64Fingerprint)
}

func (r ConfirmacionDeRecepcion) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["numeroDeRecepcion"], err = json.Marshal(r.NumeroDeRecepcion)
	if err != nil {
		return nil, err
	}
	output["remito"], err = json.Marshal(r.Remito)
	if err != nil {
		return nil, err
	}
	output["tipoDeRecepcion"], err = json.Marshal(r.TipoDeRecepcion)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ConfirmacionDeRecepcion) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for propietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numeroDeRecepcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeRecepcion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroDeRecepcion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["remito"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Remito); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for remito")
	}
	val = func() json.RawMessage {
		if v, ok := fields["tipoDeRecepcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoDeRecepcion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for tipoDeRecepcion")
	}
	return nil
}
