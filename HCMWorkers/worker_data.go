// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     WorkerData.avsc
 */
package HCMWorkersEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type WorkerData struct {
	PersonId int64 `json:"PersonId"`

	PersonNumber string `json:"PersonNumber"`

	CorrespondenceLanguage *UnionNullString `json:"CorrespondenceLanguage"`

	BloodType *UnionNullString `json:"BloodType"`

	DateOfBirth *UnionNullString `json:"DateOfBirth"`

	DateOfDeath *UnionNullString `json:"DateOfDeath"`

	CountryOfBirth *UnionNullString `json:"CountryOfBirth"`

	RegionOfBirth *UnionNullString `json:"RegionOfBirth"`

	TownOfBirth *UnionNullString `json:"TownOfBirth"`

	ApplicantNumber *UnionNullString `json:"ApplicantNumber"`

	CreatedBy string `json:"CreatedBy"`

	CreationDate string `json:"CreationDate"`

	LastUpdatedBy string `json:"LastUpdatedBy"`

	LastUpdateDate string `json:"LastUpdateDate"`

	Links []LinkData `json:"links"`
}

const WorkerDataAvroCRC64Fingerprint = "\tk\xffV\x7f\x19\xca!"

func NewWorkerData() WorkerData {
	r := WorkerData{}
	r.CorrespondenceLanguage = nil
	r.BloodType = nil
	r.DateOfBirth = nil
	r.DateOfDeath = nil
	r.CountryOfBirth = nil
	r.RegionOfBirth = nil
	r.TownOfBirth = nil
	r.ApplicantNumber = nil
	r.Links = make([]LinkData, 0)

	return r
}

func DeserializeWorkerData(r io.Reader) (WorkerData, error) {
	t := NewWorkerData()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeWorkerDataFromSchema(r io.Reader, schema string) (WorkerData, error) {
	t := NewWorkerData()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeWorkerData(r WorkerData, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.PersonId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.PersonNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CorrespondenceLanguage, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.BloodType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DateOfBirth, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DateOfDeath, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CountryOfBirth, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.RegionOfBirth, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TownOfBirth, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ApplicantNumber, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CreatedBy, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CreationDate, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LastUpdatedBy, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LastUpdateDate, w)
	if err != nil {
		return err
	}
	err = writeArrayLinkData(r.Links, w)
	if err != nil {
		return err
	}
	return err
}

func (r WorkerData) Serialize(w io.Writer) error {
	return writeWorkerData(r, w)
}

func (r WorkerData) Schema() string {
	return "{\"fields\":[{\"name\":\"PersonId\",\"type\":\"long\"},{\"name\":\"PersonNumber\",\"type\":\"string\"},{\"default\":null,\"name\":\"CorrespondenceLanguage\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"BloodType\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"DateOfBirth\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"DateOfDeath\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CountryOfBirth\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"RegionOfBirth\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TownOfBirth\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ApplicantNumber\",\"type\":[\"null\",\"string\"]},{\"name\":\"CreatedBy\",\"type\":\"string\"},{\"name\":\"CreationDate\",\"type\":\"string\"},{\"name\":\"LastUpdatedBy\",\"type\":\"string\"},{\"name\":\"LastUpdateDate\",\"type\":\"string\"},{\"name\":\"links\",\"type\":{\"items\":{\"fields\":[{\"name\":\"rel\",\"type\":\"string\"},{\"name\":\"href\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"kind\",\"type\":\"string\"},{\"default\":null,\"name\":\"properties\",\"type\":[\"null\",{\"fields\":[{\"name\":\"changeIndicator\",\"type\":\"string\"}],\"name\":\"PropertiesData\",\"type\":\"record\"}]}],\"name\":\"LinkData\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Andreani.HCMWorkers.Events.Record.WorkerData\",\"type\":\"record\"}"
}

func (r WorkerData) SchemaName() string {
	return "Andreani.HCMWorkers.Events.Record.WorkerData"
}

func (_ WorkerData) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ WorkerData) SetInt(v int32)       { panic("Unsupported operation") }
func (_ WorkerData) SetLong(v int64)      { panic("Unsupported operation") }
func (_ WorkerData) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ WorkerData) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ WorkerData) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ WorkerData) SetString(v string)   { panic("Unsupported operation") }
func (_ WorkerData) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *WorkerData) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Long{Target: &r.PersonId}

		return w

	case 1:
		w := types.String{Target: &r.PersonNumber}

		return w

	case 2:
		r.CorrespondenceLanguage = NewUnionNullString()

		return r.CorrespondenceLanguage
	case 3:
		r.BloodType = NewUnionNullString()

		return r.BloodType
	case 4:
		r.DateOfBirth = NewUnionNullString()

		return r.DateOfBirth
	case 5:
		r.DateOfDeath = NewUnionNullString()

		return r.DateOfDeath
	case 6:
		r.CountryOfBirth = NewUnionNullString()

		return r.CountryOfBirth
	case 7:
		r.RegionOfBirth = NewUnionNullString()

		return r.RegionOfBirth
	case 8:
		r.TownOfBirth = NewUnionNullString()

		return r.TownOfBirth
	case 9:
		r.ApplicantNumber = NewUnionNullString()

		return r.ApplicantNumber
	case 10:
		w := types.String{Target: &r.CreatedBy}

		return w

	case 11:
		w := types.String{Target: &r.CreationDate}

		return w

	case 12:
		w := types.String{Target: &r.LastUpdatedBy}

		return w

	case 13:
		w := types.String{Target: &r.LastUpdateDate}

		return w

	case 14:
		r.Links = make([]LinkData, 0)

		w := ArrayLinkDataWrapper{Target: &r.Links}

		return w

	}
	panic("Unknown field index")
}

func (r *WorkerData) SetDefault(i int) {
	switch i {
	case 2:
		r.CorrespondenceLanguage = nil
		return
	case 3:
		r.BloodType = nil
		return
	case 4:
		r.DateOfBirth = nil
		return
	case 5:
		r.DateOfDeath = nil
		return
	case 6:
		r.CountryOfBirth = nil
		return
	case 7:
		r.RegionOfBirth = nil
		return
	case 8:
		r.TownOfBirth = nil
		return
	case 9:
		r.ApplicantNumber = nil
		return
	}
	panic("Unknown field index")
}

func (r *WorkerData) NullField(i int) {
	switch i {
	case 2:
		r.CorrespondenceLanguage = nil
		return
	case 3:
		r.BloodType = nil
		return
	case 4:
		r.DateOfBirth = nil
		return
	case 5:
		r.DateOfDeath = nil
		return
	case 6:
		r.CountryOfBirth = nil
		return
	case 7:
		r.RegionOfBirth = nil
		return
	case 8:
		r.TownOfBirth = nil
		return
	case 9:
		r.ApplicantNumber = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ WorkerData) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ WorkerData) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ WorkerData) HintSize(int)                     { panic("Unsupported operation") }
func (_ WorkerData) Finalize()                        {}

func (_ WorkerData) AvroCRC64Fingerprint() []byte {
	return []byte(WorkerDataAvroCRC64Fingerprint)
}

func (r WorkerData) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["PersonId"], err = json.Marshal(r.PersonId)
	if err != nil {
		return nil, err
	}
	output["PersonNumber"], err = json.Marshal(r.PersonNumber)
	if err != nil {
		return nil, err
	}
	output["CorrespondenceLanguage"], err = json.Marshal(r.CorrespondenceLanguage)
	if err != nil {
		return nil, err
	}
	output["BloodType"], err = json.Marshal(r.BloodType)
	if err != nil {
		return nil, err
	}
	output["DateOfBirth"], err = json.Marshal(r.DateOfBirth)
	if err != nil {
		return nil, err
	}
	output["DateOfDeath"], err = json.Marshal(r.DateOfDeath)
	if err != nil {
		return nil, err
	}
	output["CountryOfBirth"], err = json.Marshal(r.CountryOfBirth)
	if err != nil {
		return nil, err
	}
	output["RegionOfBirth"], err = json.Marshal(r.RegionOfBirth)
	if err != nil {
		return nil, err
	}
	output["TownOfBirth"], err = json.Marshal(r.TownOfBirth)
	if err != nil {
		return nil, err
	}
	output["ApplicantNumber"], err = json.Marshal(r.ApplicantNumber)
	if err != nil {
		return nil, err
	}
	output["CreatedBy"], err = json.Marshal(r.CreatedBy)
	if err != nil {
		return nil, err
	}
	output["CreationDate"], err = json.Marshal(r.CreationDate)
	if err != nil {
		return nil, err
	}
	output["LastUpdatedBy"], err = json.Marshal(r.LastUpdatedBy)
	if err != nil {
		return nil, err
	}
	output["LastUpdateDate"], err = json.Marshal(r.LastUpdateDate)
	if err != nil {
		return nil, err
	}
	output["links"], err = json.Marshal(r.Links)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *WorkerData) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["PersonId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PersonId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PersonId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PersonNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PersonNumber); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PersonNumber")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CorrespondenceLanguage"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CorrespondenceLanguage); err != nil {
			return err
		}
	} else {
		r.CorrespondenceLanguage = NewUnionNullString()

		r.CorrespondenceLanguage = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["BloodType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BloodType); err != nil {
			return err
		}
	} else {
		r.BloodType = NewUnionNullString()

		r.BloodType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["DateOfBirth"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DateOfBirth); err != nil {
			return err
		}
	} else {
		r.DateOfBirth = NewUnionNullString()

		r.DateOfBirth = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["DateOfDeath"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DateOfDeath); err != nil {
			return err
		}
	} else {
		r.DateOfDeath = NewUnionNullString()

		r.DateOfDeath = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CountryOfBirth"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CountryOfBirth); err != nil {
			return err
		}
	} else {
		r.CountryOfBirth = NewUnionNullString()

		r.CountryOfBirth = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["RegionOfBirth"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RegionOfBirth); err != nil {
			return err
		}
	} else {
		r.RegionOfBirth = NewUnionNullString()

		r.RegionOfBirth = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TownOfBirth"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TownOfBirth); err != nil {
			return err
		}
	} else {
		r.TownOfBirth = NewUnionNullString()

		r.TownOfBirth = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ApplicantNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ApplicantNumber); err != nil {
			return err
		}
	} else {
		r.ApplicantNumber = NewUnionNullString()

		r.ApplicantNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CreatedBy"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreatedBy); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CreatedBy")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CreationDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreationDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CreationDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["LastUpdatedBy"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastUpdatedBy); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for LastUpdatedBy")
	}
	val = func() json.RawMessage {
		if v, ok := fields["LastUpdateDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastUpdateDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for LastUpdateDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["links"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Links); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for links")
	}
	return nil
}
