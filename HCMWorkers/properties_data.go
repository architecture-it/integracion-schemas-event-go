// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     WorkerData.avsc
 */
package HCMWorkersEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type PropertiesData struct {
	ChangeIndicator string `json:"changeIndicator"`
}

const PropertiesDataAvroCRC64Fingerprint = "az\x16Y\xc1\x06\x05\x9c"

func NewPropertiesData() PropertiesData {
	r := PropertiesData{}
	return r
}

func DeserializePropertiesData(r io.Reader) (PropertiesData, error) {
	t := NewPropertiesData()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePropertiesDataFromSchema(r io.Reader, schema string) (PropertiesData, error) {
	t := NewPropertiesData()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePropertiesData(r PropertiesData, w io.Writer) error {
	var err error
	err = vm.WriteString(r.ChangeIndicator, w)
	if err != nil {
		return err
	}
	return err
}

func (r PropertiesData) Serialize(w io.Writer) error {
	return writePropertiesData(r, w)
}

func (r PropertiesData) Schema() string {
	return "{\"fields\":[{\"name\":\"changeIndicator\",\"type\":\"string\"}],\"name\":\"Andreani.HCMWorkers.Events.Common.PropertiesData\",\"type\":\"record\"}"
}

func (r PropertiesData) SchemaName() string {
	return "Andreani.HCMWorkers.Events.Common.PropertiesData"
}

func (_ PropertiesData) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ PropertiesData) SetInt(v int32)       { panic("Unsupported operation") }
func (_ PropertiesData) SetLong(v int64)      { panic("Unsupported operation") }
func (_ PropertiesData) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ PropertiesData) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ PropertiesData) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ PropertiesData) SetString(v string)   { panic("Unsupported operation") }
func (_ PropertiesData) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *PropertiesData) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.ChangeIndicator}

		return w

	}
	panic("Unknown field index")
}

func (r *PropertiesData) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *PropertiesData) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ PropertiesData) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ PropertiesData) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ PropertiesData) HintSize(int)                     { panic("Unsupported operation") }
func (_ PropertiesData) Finalize()                        {}

func (_ PropertiesData) AvroCRC64Fingerprint() []byte {
	return []byte(PropertiesDataAvroCRC64Fingerprint)
}

func (r PropertiesData) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["changeIndicator"], err = json.Marshal(r.ChangeIndicator)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *PropertiesData) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["changeIndicator"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ChangeIndicator); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for changeIndicator")
	}
	return nil
}
