// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ListLegislativeInfo.avsc
 */
package HCMWorkersEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type LegislativeInfoData struct {
	PersonLegislativeId int64 `json:"PersonLegislativeId"`

	EffectiveStartDate string `json:"EffectiveStartDate"`

	EffectiveEndDate *UnionNullString `json:"EffectiveEndDate"`

	LegislationCode string `json:"LegislationCode"`

	Gender string `json:"Gender"`

	MaritalStatus *UnionNullString `json:"MaritalStatus"`

	MaritalStatusChangeDate *UnionNullString `json:"MaritalStatusChangeDate"`

	HighestEducationLevel *UnionNullString `json:"HighestEducationLevel"`

	CreatedBy string `json:"CreatedBy"`

	CreationDate string `json:"CreationDate"`

	LastUpdatedBy string `json:"LastUpdatedBy"`

	LastUpdateDate string `json:"LastUpdateDate"`

	Links []LinkData `json:"links"`
}

const LegislativeInfoDataAvroCRC64Fingerprint = "i\xc2c\xfe\xd9a\v\xa9"

func NewLegislativeInfoData() LegislativeInfoData {
	r := LegislativeInfoData{}
	r.EffectiveEndDate = nil
	r.MaritalStatus = nil
	r.MaritalStatusChangeDate = nil
	r.HighestEducationLevel = nil
	r.Links = make([]LinkData, 0)

	return r
}

func DeserializeLegislativeInfoData(r io.Reader) (LegislativeInfoData, error) {
	t := NewLegislativeInfoData()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeLegislativeInfoDataFromSchema(r io.Reader, schema string) (LegislativeInfoData, error) {
	t := NewLegislativeInfoData()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeLegislativeInfoData(r LegislativeInfoData, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.PersonLegislativeId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.EffectiveStartDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EffectiveEndDate, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LegislationCode, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Gender, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MaritalStatus, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MaritalStatusChangeDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.HighestEducationLevel, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CreatedBy, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CreationDate, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LastUpdatedBy, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LastUpdateDate, w)
	if err != nil {
		return err
	}
	err = writeArrayLinkData(r.Links, w)
	if err != nil {
		return err
	}
	return err
}

func (r LegislativeInfoData) Serialize(w io.Writer) error {
	return writeLegislativeInfoData(r, w)
}

func (r LegislativeInfoData) Schema() string {
	return "{\"fields\":[{\"name\":\"PersonLegislativeId\",\"type\":\"long\"},{\"name\":\"EffectiveStartDate\",\"type\":\"string\"},{\"default\":null,\"name\":\"EffectiveEndDate\",\"type\":[\"null\",\"string\"]},{\"name\":\"LegislationCode\",\"type\":\"string\"},{\"name\":\"Gender\",\"type\":\"string\"},{\"default\":null,\"name\":\"MaritalStatus\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"MaritalStatusChangeDate\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"HighestEducationLevel\",\"type\":[\"null\",\"string\"]},{\"name\":\"CreatedBy\",\"type\":\"string\"},{\"name\":\"CreationDate\",\"type\":\"string\"},{\"name\":\"LastUpdatedBy\",\"type\":\"string\"},{\"name\":\"LastUpdateDate\",\"type\":\"string\"},{\"name\":\"links\",\"type\":{\"items\":{\"fields\":[{\"name\":\"rel\",\"type\":\"string\"},{\"name\":\"href\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"kind\",\"type\":\"string\"},{\"default\":null,\"name\":\"properties\",\"type\":[\"null\",{\"fields\":[{\"name\":\"changeIndicator\",\"type\":\"string\"}],\"name\":\"PropertiesData\",\"type\":\"record\"}]}],\"name\":\"LinkData\",\"namespace\":\"Andreani.HCMWorkers.Events.Common\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Andreani.HCMWorkers.Events.Record.LegislativeInfoData\",\"type\":\"record\"}"
}

func (r LegislativeInfoData) SchemaName() string {
	return "Andreani.HCMWorkers.Events.Record.LegislativeInfoData"
}

func (_ LegislativeInfoData) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ LegislativeInfoData) SetInt(v int32)       { panic("Unsupported operation") }
func (_ LegislativeInfoData) SetLong(v int64)      { panic("Unsupported operation") }
func (_ LegislativeInfoData) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ LegislativeInfoData) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ LegislativeInfoData) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ LegislativeInfoData) SetString(v string)   { panic("Unsupported operation") }
func (_ LegislativeInfoData) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *LegislativeInfoData) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Long{Target: &r.PersonLegislativeId}

		return w

	case 1:
		w := types.String{Target: &r.EffectiveStartDate}

		return w

	case 2:
		r.EffectiveEndDate = NewUnionNullString()

		return r.EffectiveEndDate
	case 3:
		w := types.String{Target: &r.LegislationCode}

		return w

	case 4:
		w := types.String{Target: &r.Gender}

		return w

	case 5:
		r.MaritalStatus = NewUnionNullString()

		return r.MaritalStatus
	case 6:
		r.MaritalStatusChangeDate = NewUnionNullString()

		return r.MaritalStatusChangeDate
	case 7:
		r.HighestEducationLevel = NewUnionNullString()

		return r.HighestEducationLevel
	case 8:
		w := types.String{Target: &r.CreatedBy}

		return w

	case 9:
		w := types.String{Target: &r.CreationDate}

		return w

	case 10:
		w := types.String{Target: &r.LastUpdatedBy}

		return w

	case 11:
		w := types.String{Target: &r.LastUpdateDate}

		return w

	case 12:
		r.Links = make([]LinkData, 0)

		w := ArrayLinkDataWrapper{Target: &r.Links}

		return w

	}
	panic("Unknown field index")
}

func (r *LegislativeInfoData) SetDefault(i int) {
	switch i {
	case 2:
		r.EffectiveEndDate = nil
		return
	case 5:
		r.MaritalStatus = nil
		return
	case 6:
		r.MaritalStatusChangeDate = nil
		return
	case 7:
		r.HighestEducationLevel = nil
		return
	}
	panic("Unknown field index")
}

func (r *LegislativeInfoData) NullField(i int) {
	switch i {
	case 2:
		r.EffectiveEndDate = nil
		return
	case 5:
		r.MaritalStatus = nil
		return
	case 6:
		r.MaritalStatusChangeDate = nil
		return
	case 7:
		r.HighestEducationLevel = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ LegislativeInfoData) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ LegislativeInfoData) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ LegislativeInfoData) HintSize(int)                     { panic("Unsupported operation") }
func (_ LegislativeInfoData) Finalize()                        {}

func (_ LegislativeInfoData) AvroCRC64Fingerprint() []byte {
	return []byte(LegislativeInfoDataAvroCRC64Fingerprint)
}

func (r LegislativeInfoData) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["PersonLegislativeId"], err = json.Marshal(r.PersonLegislativeId)
	if err != nil {
		return nil, err
	}
	output["EffectiveStartDate"], err = json.Marshal(r.EffectiveStartDate)
	if err != nil {
		return nil, err
	}
	output["EffectiveEndDate"], err = json.Marshal(r.EffectiveEndDate)
	if err != nil {
		return nil, err
	}
	output["LegislationCode"], err = json.Marshal(r.LegislationCode)
	if err != nil {
		return nil, err
	}
	output["Gender"], err = json.Marshal(r.Gender)
	if err != nil {
		return nil, err
	}
	output["MaritalStatus"], err = json.Marshal(r.MaritalStatus)
	if err != nil {
		return nil, err
	}
	output["MaritalStatusChangeDate"], err = json.Marshal(r.MaritalStatusChangeDate)
	if err != nil {
		return nil, err
	}
	output["HighestEducationLevel"], err = json.Marshal(r.HighestEducationLevel)
	if err != nil {
		return nil, err
	}
	output["CreatedBy"], err = json.Marshal(r.CreatedBy)
	if err != nil {
		return nil, err
	}
	output["CreationDate"], err = json.Marshal(r.CreationDate)
	if err != nil {
		return nil, err
	}
	output["LastUpdatedBy"], err = json.Marshal(r.LastUpdatedBy)
	if err != nil {
		return nil, err
	}
	output["LastUpdateDate"], err = json.Marshal(r.LastUpdateDate)
	if err != nil {
		return nil, err
	}
	output["links"], err = json.Marshal(r.Links)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *LegislativeInfoData) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["PersonLegislativeId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PersonLegislativeId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PersonLegislativeId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EffectiveStartDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EffectiveStartDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EffectiveStartDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EffectiveEndDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EffectiveEndDate); err != nil {
			return err
		}
	} else {
		r.EffectiveEndDate = NewUnionNullString()

		r.EffectiveEndDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LegislationCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LegislationCode); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for LegislationCode")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Gender"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Gender); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Gender")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MaritalStatus"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MaritalStatus); err != nil {
			return err
		}
	} else {
		r.MaritalStatus = NewUnionNullString()

		r.MaritalStatus = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["MaritalStatusChangeDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MaritalStatusChangeDate); err != nil {
			return err
		}
	} else {
		r.MaritalStatusChangeDate = NewUnionNullString()

		r.MaritalStatusChangeDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["HighestEducationLevel"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HighestEducationLevel); err != nil {
			return err
		}
	} else {
		r.HighestEducationLevel = NewUnionNullString()

		r.HighestEducationLevel = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CreatedBy"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreatedBy); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CreatedBy")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CreationDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreationDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CreationDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["LastUpdatedBy"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastUpdatedBy); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for LastUpdatedBy")
	}
	val = func() json.RawMessage {
		if v, ok := fields["LastUpdateDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastUpdateDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for LastUpdateDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["links"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Links); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for links")
	}
	return nil
}
