// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     RemitoDigitalCreado.avsc
 */
package ApiMultimediaEnviosEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Anexo struct {
	Propietario string `json:"Propietario"`

	NumeroDePedido string `json:"NumeroDePedido"`

	NumeroFacturaLegal string `json:"NumeroFacturaLegal"`

	NumeroRemito string `json:"NumeroRemito"`

	RemitoURL string `json:"RemitoURL"`
}

const AnexoAvroCRC64Fingerprint = "X\xda\xd1h \xfb\x95\x86"

func NewAnexo() Anexo {
	r := Anexo{}
	return r
}

func DeserializeAnexo(r io.Reader) (Anexo, error) {
	t := NewAnexo()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAnexoFromSchema(r io.Reader, schema string) (Anexo, error) {
	t := NewAnexo()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAnexo(r Anexo, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Propietario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NumeroDePedido, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NumeroFacturaLegal, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NumeroRemito, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.RemitoURL, w)
	if err != nil {
		return err
	}
	return err
}

func (r Anexo) Serialize(w io.Writer) error {
	return writeAnexo(r, w)
}

func (r Anexo) Schema() string {
	return "{\"fields\":[{\"name\":\"Propietario\",\"type\":\"string\"},{\"name\":\"NumeroDePedido\",\"type\":\"string\"},{\"name\":\"NumeroFacturaLegal\",\"type\":\"string\"},{\"name\":\"NumeroRemito\",\"type\":\"string\"},{\"name\":\"RemitoURL\",\"type\":\"string\"}],\"name\":\"Andreani.ApiMultimediaEnvios.Events.Common.Anexo\",\"type\":\"record\"}"
}

func (r Anexo) SchemaName() string {
	return "Andreani.ApiMultimediaEnvios.Events.Common.Anexo"
}

func (_ Anexo) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Anexo) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Anexo) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Anexo) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Anexo) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Anexo) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Anexo) SetString(v string)   { panic("Unsupported operation") }
func (_ Anexo) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Anexo) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Propietario}

		return w

	case 1:
		w := types.String{Target: &r.NumeroDePedido}

		return w

	case 2:
		w := types.String{Target: &r.NumeroFacturaLegal}

		return w

	case 3:
		w := types.String{Target: &r.NumeroRemito}

		return w

	case 4:
		w := types.String{Target: &r.RemitoURL}

		return w

	}
	panic("Unknown field index")
}

func (r *Anexo) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Anexo) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Anexo) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Anexo) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Anexo) HintSize(int)                     { panic("Unsupported operation") }
func (_ Anexo) Finalize()                        {}

func (_ Anexo) AvroCRC64Fingerprint() []byte {
	return []byte(AnexoAvroCRC64Fingerprint)
}

func (r Anexo) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["NumeroDePedido"], err = json.Marshal(r.NumeroDePedido)
	if err != nil {
		return nil, err
	}
	output["NumeroFacturaLegal"], err = json.Marshal(r.NumeroFacturaLegal)
	if err != nil {
		return nil, err
	}
	output["NumeroRemito"], err = json.Marshal(r.NumeroRemito)
	if err != nil {
		return nil, err
	}
	output["RemitoURL"], err = json.Marshal(r.RemitoURL)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Anexo) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Propietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NumeroDePedido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDePedido); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NumeroDePedido")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NumeroFacturaLegal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroFacturaLegal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NumeroFacturaLegal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NumeroRemito"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroRemito); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NumeroRemito")
	}
	val = func() json.RawMessage {
		if v, ok := fields["RemitoURL"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RemitoURL); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for RemitoURL")
	}
	return nil
}
