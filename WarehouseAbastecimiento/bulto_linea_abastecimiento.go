// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     LineaAbastecimiento.avsc
 */
package WarehouseAbastecimientoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type BultoLineaAbastecimiento struct {
	Cantidad int32 `json:"Cantidad"`

	CodigoExterno string `json:"CodigoExterno"`

	BultoId string `json:"BultoId"`
}

const BultoLineaAbastecimientoAvroCRC64Fingerprint = "]r\xaa\xd4\xefRiP"

func NewBultoLineaAbastecimiento() BultoLineaAbastecimiento {
	r := BultoLineaAbastecimiento{}
	return r
}

func DeserializeBultoLineaAbastecimiento(r io.Reader) (BultoLineaAbastecimiento, error) {
	t := NewBultoLineaAbastecimiento()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeBultoLineaAbastecimientoFromSchema(r io.Reader, schema string) (BultoLineaAbastecimiento, error) {
	t := NewBultoLineaAbastecimiento()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeBultoLineaAbastecimiento(r BultoLineaAbastecimiento, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Cantidad, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodigoExterno, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.BultoId, w)
	if err != nil {
		return err
	}
	return err
}

func (r BultoLineaAbastecimiento) Serialize(w io.Writer) error {
	return writeBultoLineaAbastecimiento(r, w)
}

func (r BultoLineaAbastecimiento) Schema() string {
	return "{\"fields\":[{\"name\":\"Cantidad\",\"type\":\"int\"},{\"name\":\"CodigoExterno\",\"type\":\"string\"},{\"name\":\"BultoId\",\"type\":\"string\"}],\"name\":\"Andreani.WarehouseAbastecimiento.Events.Record.BultoLineaAbastecimiento\",\"type\":\"record\"}"
}

func (r BultoLineaAbastecimiento) SchemaName() string {
	return "Andreani.WarehouseAbastecimiento.Events.Record.BultoLineaAbastecimiento"
}

func (_ BultoLineaAbastecimiento) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ BultoLineaAbastecimiento) SetInt(v int32)       { panic("Unsupported operation") }
func (_ BultoLineaAbastecimiento) SetLong(v int64)      { panic("Unsupported operation") }
func (_ BultoLineaAbastecimiento) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ BultoLineaAbastecimiento) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ BultoLineaAbastecimiento) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ BultoLineaAbastecimiento) SetString(v string)   { panic("Unsupported operation") }
func (_ BultoLineaAbastecimiento) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *BultoLineaAbastecimiento) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.Cantidad}

		return w

	case 1:
		w := types.String{Target: &r.CodigoExterno}

		return w

	case 2:
		w := types.String{Target: &r.BultoId}

		return w

	}
	panic("Unknown field index")
}

func (r *BultoLineaAbastecimiento) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *BultoLineaAbastecimiento) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ BultoLineaAbastecimiento) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ BultoLineaAbastecimiento) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ BultoLineaAbastecimiento) HintSize(int)                     { panic("Unsupported operation") }
func (_ BultoLineaAbastecimiento) Finalize()                        {}

func (_ BultoLineaAbastecimiento) AvroCRC64Fingerprint() []byte {
	return []byte(BultoLineaAbastecimientoAvroCRC64Fingerprint)
}

func (r BultoLineaAbastecimiento) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Cantidad"], err = json.Marshal(r.Cantidad)
	if err != nil {
		return nil, err
	}
	output["CodigoExterno"], err = json.Marshal(r.CodigoExterno)
	if err != nil {
		return nil, err
	}
	output["BultoId"], err = json.Marshal(r.BultoId)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *BultoLineaAbastecimiento) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Cantidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cantidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Cantidad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoExterno"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoExterno); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoExterno")
	}
	val = func() json.RawMessage {
		if v, ok := fields["BultoId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BultoId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for BultoId")
	}
	return nil
}
