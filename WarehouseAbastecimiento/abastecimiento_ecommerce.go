// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     CreacionDeAsnSolicitadaEcommerce.avsc
 */
package WarehouseAbastecimientoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type AbastecimientoEcommerce struct {
	Propietario string `json:"Propietario"`

	Instancia *UnionNullString `json:"Instancia"`

	Almacen *UnionNullString `json:"Almacen"`

	ContratoDistribucion *UnionNullString `json:"ContratoDistribucion"`

	ContratoWarehouse *UnionNullString `json:"ContratoWarehouse"`

	NumeroOrdenExterna *UnionNullString `json:"NumeroOrdenExterna"`

	TransaccionId *UnionNullInt `json:"TransaccionId"`

	FechaOrdenExterna *UnionNullLong `json:"FechaOrdenExterna"`

	FechaDeRecepcionEsperada *UnionNullLong `json:"FechaDeRecepcionEsperada"`

	Lineas []LineaAbastecimientoEcommerce `json:"Lineas"`

	ValorDeclaradoTotal *UnionNullString `json:"ValorDeclaradoTotal"`

	NroOperacion *UnionNullString `json:"NroOperacion"`
}

const AbastecimientoEcommerceAvroCRC64Fingerprint = "\x01\xe3\x9f\a\x8d\x1d<Q"

func NewAbastecimientoEcommerce() AbastecimientoEcommerce {
	r := AbastecimientoEcommerce{}
	r.Instancia = nil
	r.Almacen = nil
	r.ContratoDistribucion = nil
	r.ContratoWarehouse = nil
	r.NumeroOrdenExterna = nil
	r.TransaccionId = nil
	r.FechaOrdenExterna = nil
	r.FechaDeRecepcionEsperada = nil
	r.Lineas = make([]LineaAbastecimientoEcommerce, 0)

	r.ValorDeclaradoTotal = nil
	r.NroOperacion = nil
	return r
}

func DeserializeAbastecimientoEcommerce(r io.Reader) (AbastecimientoEcommerce, error) {
	t := NewAbastecimientoEcommerce()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAbastecimientoEcommerceFromSchema(r io.Reader, schema string) (AbastecimientoEcommerce, error) {
	t := NewAbastecimientoEcommerce()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAbastecimientoEcommerce(r AbastecimientoEcommerce, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Propietario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Instancia, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Almacen, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ContratoDistribucion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ContratoWarehouse, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NumeroOrdenExterna, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.TransaccionId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaOrdenExterna, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaDeRecepcionEsperada, w)
	if err != nil {
		return err
	}
	err = writeArrayLineaAbastecimientoEcommerce(r.Lineas, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ValorDeclaradoTotal, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NroOperacion, w)
	if err != nil {
		return err
	}
	return err
}

func (r AbastecimientoEcommerce) Serialize(w io.Writer) error {
	return writeAbastecimientoEcommerce(r, w)
}

func (r AbastecimientoEcommerce) Schema() string {
	return "{\"fields\":[{\"name\":\"Propietario\",\"type\":\"string\"},{\"default\":null,\"name\":\"Instancia\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Almacen\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ContratoDistribucion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ContratoWarehouse\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NumeroOrdenExterna\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TransaccionId\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"FechaOrdenExterna\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"FechaDeRecepcionEsperada\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"Lineas\",\"type\":{\"items\":{\"fields\":[{\"name\":\"NumeroDeLinea\",\"type\":\"string\"},{\"name\":\"CantidadPedida\",\"type\":\"int\"},{\"name\":\"UnidadMedida\",\"type\":\"string\"},{\"name\":\"AlmacenWMS\",\"type\":\"string\"},{\"name\":\"CodigoArticulo\",\"type\":\"string\"},{\"default\":\"\",\"name\":\"TransaccionId\",\"type\":\"string\"},{\"name\":\"EstadoLote\",\"type\":\"string\"},{\"default\":false,\"name\":\"EsTrazable\",\"type\":\"boolean\"},{\"default\":null,\"name\":\"TipoAcondicionamiento\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"TipoControlCalidad\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"TipoTraza\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ProductoTrazable\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EventoAnmat\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"GLNDestino\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ValorDeclarado\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FechaVencimiento\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"LoteFabricante\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LoteSecundario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"AcondicionamientoSecundario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Bulto\",\"type\":[\"null\",{\"fields\":[{\"name\":\"Cantidad\",\"type\":\"int\"},{\"name\":\"CodigoExterno\",\"type\":\"string\"},{\"name\":\"BultoId\",\"type\":\"string\"}],\"name\":\"BultoLineaAbastecimientoEcommerce\",\"type\":\"record\"}]}],\"name\":\"LineaAbastecimientoEcommerce\",\"type\":\"record\"},\"type\":\"array\"}},{\"default\":null,\"name\":\"ValorDeclaradoTotal\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NroOperacion\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.WarehouseAbastecimiento.Events.Record.AbastecimientoEcommerce\",\"type\":\"record\"}"
}

func (r AbastecimientoEcommerce) SchemaName() string {
	return "Andreani.WarehouseAbastecimiento.Events.Record.AbastecimientoEcommerce"
}

func (_ AbastecimientoEcommerce) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ AbastecimientoEcommerce) SetInt(v int32)       { panic("Unsupported operation") }
func (_ AbastecimientoEcommerce) SetLong(v int64)      { panic("Unsupported operation") }
func (_ AbastecimientoEcommerce) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ AbastecimientoEcommerce) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ AbastecimientoEcommerce) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ AbastecimientoEcommerce) SetString(v string)   { panic("Unsupported operation") }
func (_ AbastecimientoEcommerce) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *AbastecimientoEcommerce) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Propietario}

		return w

	case 1:
		r.Instancia = NewUnionNullString()

		return r.Instancia
	case 2:
		r.Almacen = NewUnionNullString()

		return r.Almacen
	case 3:
		r.ContratoDistribucion = NewUnionNullString()

		return r.ContratoDistribucion
	case 4:
		r.ContratoWarehouse = NewUnionNullString()

		return r.ContratoWarehouse
	case 5:
		r.NumeroOrdenExterna = NewUnionNullString()

		return r.NumeroOrdenExterna
	case 6:
		r.TransaccionId = NewUnionNullInt()

		return r.TransaccionId
	case 7:
		r.FechaOrdenExterna = NewUnionNullLong()

		return r.FechaOrdenExterna
	case 8:
		r.FechaDeRecepcionEsperada = NewUnionNullLong()

		return r.FechaDeRecepcionEsperada
	case 9:
		r.Lineas = make([]LineaAbastecimientoEcommerce, 0)

		w := ArrayLineaAbastecimientoEcommerceWrapper{Target: &r.Lineas}

		return w

	case 10:
		r.ValorDeclaradoTotal = NewUnionNullString()

		return r.ValorDeclaradoTotal
	case 11:
		r.NroOperacion = NewUnionNullString()

		return r.NroOperacion
	}
	panic("Unknown field index")
}

func (r *AbastecimientoEcommerce) SetDefault(i int) {
	switch i {
	case 1:
		r.Instancia = nil
		return
	case 2:
		r.Almacen = nil
		return
	case 3:
		r.ContratoDistribucion = nil
		return
	case 4:
		r.ContratoWarehouse = nil
		return
	case 5:
		r.NumeroOrdenExterna = nil
		return
	case 6:
		r.TransaccionId = nil
		return
	case 7:
		r.FechaOrdenExterna = nil
		return
	case 8:
		r.FechaDeRecepcionEsperada = nil
		return
	case 10:
		r.ValorDeclaradoTotal = nil
		return
	case 11:
		r.NroOperacion = nil
		return
	}
	panic("Unknown field index")
}

func (r *AbastecimientoEcommerce) NullField(i int) {
	switch i {
	case 1:
		r.Instancia = nil
		return
	case 2:
		r.Almacen = nil
		return
	case 3:
		r.ContratoDistribucion = nil
		return
	case 4:
		r.ContratoWarehouse = nil
		return
	case 5:
		r.NumeroOrdenExterna = nil
		return
	case 6:
		r.TransaccionId = nil
		return
	case 7:
		r.FechaOrdenExterna = nil
		return
	case 8:
		r.FechaDeRecepcionEsperada = nil
		return
	case 10:
		r.ValorDeclaradoTotal = nil
		return
	case 11:
		r.NroOperacion = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ AbastecimientoEcommerce) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ AbastecimientoEcommerce) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ AbastecimientoEcommerce) HintSize(int)                     { panic("Unsupported operation") }
func (_ AbastecimientoEcommerce) Finalize()                        {}

func (_ AbastecimientoEcommerce) AvroCRC64Fingerprint() []byte {
	return []byte(AbastecimientoEcommerceAvroCRC64Fingerprint)
}

func (r AbastecimientoEcommerce) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["Instancia"], err = json.Marshal(r.Instancia)
	if err != nil {
		return nil, err
	}
	output["Almacen"], err = json.Marshal(r.Almacen)
	if err != nil {
		return nil, err
	}
	output["ContratoDistribucion"], err = json.Marshal(r.ContratoDistribucion)
	if err != nil {
		return nil, err
	}
	output["ContratoWarehouse"], err = json.Marshal(r.ContratoWarehouse)
	if err != nil {
		return nil, err
	}
	output["NumeroOrdenExterna"], err = json.Marshal(r.NumeroOrdenExterna)
	if err != nil {
		return nil, err
	}
	output["TransaccionId"], err = json.Marshal(r.TransaccionId)
	if err != nil {
		return nil, err
	}
	output["FechaOrdenExterna"], err = json.Marshal(r.FechaOrdenExterna)
	if err != nil {
		return nil, err
	}
	output["FechaDeRecepcionEsperada"], err = json.Marshal(r.FechaDeRecepcionEsperada)
	if err != nil {
		return nil, err
	}
	output["Lineas"], err = json.Marshal(r.Lineas)
	if err != nil {
		return nil, err
	}
	output["ValorDeclaradoTotal"], err = json.Marshal(r.ValorDeclaradoTotal)
	if err != nil {
		return nil, err
	}
	output["NroOperacion"], err = json.Marshal(r.NroOperacion)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *AbastecimientoEcommerce) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Propietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Instancia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Instancia); err != nil {
			return err
		}
	} else {
		r.Instancia = NewUnionNullString()

		r.Instancia = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Almacen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Almacen); err != nil {
			return err
		}
	} else {
		r.Almacen = NewUnionNullString()

		r.Almacen = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ContratoDistribucion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ContratoDistribucion); err != nil {
			return err
		}
	} else {
		r.ContratoDistribucion = NewUnionNullString()

		r.ContratoDistribucion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ContratoWarehouse"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ContratoWarehouse); err != nil {
			return err
		}
	} else {
		r.ContratoWarehouse = NewUnionNullString()

		r.ContratoWarehouse = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NumeroOrdenExterna"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroOrdenExterna); err != nil {
			return err
		}
	} else {
		r.NumeroOrdenExterna = NewUnionNullString()

		r.NumeroOrdenExterna = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TransaccionId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TransaccionId); err != nil {
			return err
		}
	} else {
		r.TransaccionId = NewUnionNullInt()

		r.TransaccionId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaOrdenExterna"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaOrdenExterna); err != nil {
			return err
		}
	} else {
		r.FechaOrdenExterna = NewUnionNullLong()

		r.FechaOrdenExterna = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaDeRecepcionEsperada"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaDeRecepcionEsperada); err != nil {
			return err
		}
	} else {
		r.FechaDeRecepcionEsperada = NewUnionNullLong()

		r.FechaDeRecepcionEsperada = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Lineas"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Lineas); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Lineas")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValorDeclaradoTotal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValorDeclaradoTotal); err != nil {
			return err
		}
	} else {
		r.ValorDeclaradoTotal = NewUnionNullString()

		r.ValorDeclaradoTotal = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NroOperacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NroOperacion); err != nil {
			return err
		}
	} else {
		r.NroOperacion = NewUnionNullString()

		r.NroOperacion = nil
	}
	return nil
}
