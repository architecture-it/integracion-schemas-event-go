// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     LineaAbastecimiento.avsc
 */
package WarehouseAbastecimientoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type LineaAbastecimiento struct {
	NumeroDeLinea string `json:"NumeroDeLinea"`

	CantidadPedida int32 `json:"CantidadPedida"`

	UnidadMedida string `json:"UnidadMedida"`

	AlmacenWMS string `json:"AlmacenWMS"`

	CodigoArticulo string `json:"CodigoArticulo"`

	EstadoLote string `json:"EstadoLote"`

	EsTrazable bool `json:"EsTrazable"`

	AccionControlCalidad *UnionNullArrayString `json:"AccionControlCalidad"`

	TipoAcondicionamiento *UnionNullArrayString `json:"TipoAcondicionamiento"`

	TipoControlCalidad *UnionNullArrayString `json:"TipoControlCalidad"`

	AvisoContraMuestra *UnionNullString `json:"AvisoContraMuestra"`

	EstatusOTdeTrazaporLPN *UnionNullString `json:"EstatusOTdeTrazaporLPN"`

	EstatusOtDeAcondporLpn *UnionNullString `json:"EstatusOtDeAcondporLpn"`

	ProductoTrazable *UnionNullString `json:"ProductoTrazable"`

	TipoTraza *UnionNullString `json:"TipoTraza"`

	UbicacionPredeterminada *UnionNullString `json:"UbicacionPredeterminada"`

	ValorDeclarado *UnionNullString `json:"ValorDeclarado"`

	VidaUtilDelLote *UnionNullString `json:"VidaUtilDelLote"`

	EventoAnmat *UnionNullString `json:"EventoAnmat"`

	GLNDestino *UnionNullString `json:"GLNDestino"`

	FechaVencimiento *UnionNullLong `json:"FechaVencimiento"`

	LoteFabricante *UnionNullString `json:"LoteFabricante"`

	LoteSecundario *UnionNullString `json:"LoteSecundario"`

	AcondicionamientoSecundario *UnionNullString `json:"AcondicionamientoSecundario"`

	Bulto *UnionNullBultoLineaAbastecimiento `json:"Bulto"`
}

const LineaAbastecimientoAvroCRC64Fingerprint = "\xb8_\x1d?\xd5\xcb\xce2"

func NewLineaAbastecimiento() LineaAbastecimiento {
	r := LineaAbastecimiento{}
	r.EsTrazable = false
	r.AccionControlCalidad = nil
	r.TipoAcondicionamiento = nil
	r.TipoControlCalidad = nil
	r.AvisoContraMuestra = nil
	r.EstatusOTdeTrazaporLPN = nil
	r.EstatusOtDeAcondporLpn = nil
	r.ProductoTrazable = nil
	r.TipoTraza = nil
	r.UbicacionPredeterminada = nil
	r.ValorDeclarado = nil
	r.VidaUtilDelLote = nil
	r.EventoAnmat = nil
	r.GLNDestino = nil
	r.FechaVencimiento = nil
	r.LoteFabricante = nil
	r.LoteSecundario = nil
	r.AcondicionamientoSecundario = nil
	r.Bulto = nil
	return r
}

func DeserializeLineaAbastecimiento(r io.Reader) (LineaAbastecimiento, error) {
	t := NewLineaAbastecimiento()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeLineaAbastecimientoFromSchema(r io.Reader, schema string) (LineaAbastecimiento, error) {
	t := NewLineaAbastecimiento()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeLineaAbastecimiento(r LineaAbastecimiento, w io.Writer) error {
	var err error
	err = vm.WriteString(r.NumeroDeLinea, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.CantidadPedida, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.UnidadMedida, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.AlmacenWMS, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodigoArticulo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.EstadoLote, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.EsTrazable, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayString(r.AccionControlCalidad, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayString(r.TipoAcondicionamiento, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayString(r.TipoControlCalidad, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.AvisoContraMuestra, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EstatusOTdeTrazaporLPN, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EstatusOtDeAcondporLpn, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ProductoTrazable, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoTraza, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.UbicacionPredeterminada, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ValorDeclarado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.VidaUtilDelLote, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EventoAnmat, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.GLNDestino, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaVencimiento, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LoteFabricante, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LoteSecundario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.AcondicionamientoSecundario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBultoLineaAbastecimiento(r.Bulto, w)
	if err != nil {
		return err
	}
	return err
}

func (r LineaAbastecimiento) Serialize(w io.Writer) error {
	return writeLineaAbastecimiento(r, w)
}

func (r LineaAbastecimiento) Schema() string {
	return "{\"fields\":[{\"name\":\"NumeroDeLinea\",\"type\":\"string\"},{\"name\":\"CantidadPedida\",\"type\":\"int\"},{\"name\":\"UnidadMedida\",\"type\":\"string\"},{\"name\":\"AlmacenWMS\",\"type\":\"string\"},{\"name\":\"CodigoArticulo\",\"type\":\"string\"},{\"name\":\"EstadoLote\",\"type\":\"string\"},{\"default\":false,\"name\":\"EsTrazable\",\"type\":\"boolean\"},{\"default\":null,\"name\":\"AccionControlCalidad\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"TipoAcondicionamiento\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"TipoControlCalidad\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"AvisoContraMuestra\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EstatusOTdeTrazaporLPN\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EstatusOtDeAcondporLpn\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ProductoTrazable\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TipoTraza\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"UbicacionPredeterminada\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ValorDeclarado\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"VidaUtilDelLote\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EventoAnmat\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"GLNDestino\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FechaVencimiento\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"LoteFabricante\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LoteSecundario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"AcondicionamientoSecundario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Bulto\",\"type\":[\"null\",{\"fields\":[{\"name\":\"Cantidad\",\"type\":\"int\"},{\"name\":\"CodigoExterno\",\"type\":\"string\"},{\"name\":\"BultoId\",\"type\":\"string\"}],\"name\":\"BultoLineaAbastecimiento\",\"type\":\"record\"}]}],\"name\":\"Andreani.WarehouseAbastecimiento.Events.Record.LineaAbastecimiento\",\"type\":\"record\"}"
}

func (r LineaAbastecimiento) SchemaName() string {
	return "Andreani.WarehouseAbastecimiento.Events.Record.LineaAbastecimiento"
}

func (_ LineaAbastecimiento) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ LineaAbastecimiento) SetInt(v int32)       { panic("Unsupported operation") }
func (_ LineaAbastecimiento) SetLong(v int64)      { panic("Unsupported operation") }
func (_ LineaAbastecimiento) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ LineaAbastecimiento) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ LineaAbastecimiento) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ LineaAbastecimiento) SetString(v string)   { panic("Unsupported operation") }
func (_ LineaAbastecimiento) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *LineaAbastecimiento) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.NumeroDeLinea}

		return w

	case 1:
		w := types.Int{Target: &r.CantidadPedida}

		return w

	case 2:
		w := types.String{Target: &r.UnidadMedida}

		return w

	case 3:
		w := types.String{Target: &r.AlmacenWMS}

		return w

	case 4:
		w := types.String{Target: &r.CodigoArticulo}

		return w

	case 5:
		w := types.String{Target: &r.EstadoLote}

		return w

	case 6:
		w := types.Boolean{Target: &r.EsTrazable}

		return w

	case 7:
		r.AccionControlCalidad = NewUnionNullArrayString()

		return r.AccionControlCalidad
	case 8:
		r.TipoAcondicionamiento = NewUnionNullArrayString()

		return r.TipoAcondicionamiento
	case 9:
		r.TipoControlCalidad = NewUnionNullArrayString()

		return r.TipoControlCalidad
	case 10:
		r.AvisoContraMuestra = NewUnionNullString()

		return r.AvisoContraMuestra
	case 11:
		r.EstatusOTdeTrazaporLPN = NewUnionNullString()

		return r.EstatusOTdeTrazaporLPN
	case 12:
		r.EstatusOtDeAcondporLpn = NewUnionNullString()

		return r.EstatusOtDeAcondporLpn
	case 13:
		r.ProductoTrazable = NewUnionNullString()

		return r.ProductoTrazable
	case 14:
		r.TipoTraza = NewUnionNullString()

		return r.TipoTraza
	case 15:
		r.UbicacionPredeterminada = NewUnionNullString()

		return r.UbicacionPredeterminada
	case 16:
		r.ValorDeclarado = NewUnionNullString()

		return r.ValorDeclarado
	case 17:
		r.VidaUtilDelLote = NewUnionNullString()

		return r.VidaUtilDelLote
	case 18:
		r.EventoAnmat = NewUnionNullString()

		return r.EventoAnmat
	case 19:
		r.GLNDestino = NewUnionNullString()

		return r.GLNDestino
	case 20:
		r.FechaVencimiento = NewUnionNullLong()

		return r.FechaVencimiento
	case 21:
		r.LoteFabricante = NewUnionNullString()

		return r.LoteFabricante
	case 22:
		r.LoteSecundario = NewUnionNullString()

		return r.LoteSecundario
	case 23:
		r.AcondicionamientoSecundario = NewUnionNullString()

		return r.AcondicionamientoSecundario
	case 24:
		r.Bulto = NewUnionNullBultoLineaAbastecimiento()

		return r.Bulto
	}
	panic("Unknown field index")
}

func (r *LineaAbastecimiento) SetDefault(i int) {
	switch i {
	case 6:
		r.EsTrazable = false
		return
	case 7:
		r.AccionControlCalidad = nil
		return
	case 8:
		r.TipoAcondicionamiento = nil
		return
	case 9:
		r.TipoControlCalidad = nil
		return
	case 10:
		r.AvisoContraMuestra = nil
		return
	case 11:
		r.EstatusOTdeTrazaporLPN = nil
		return
	case 12:
		r.EstatusOtDeAcondporLpn = nil
		return
	case 13:
		r.ProductoTrazable = nil
		return
	case 14:
		r.TipoTraza = nil
		return
	case 15:
		r.UbicacionPredeterminada = nil
		return
	case 16:
		r.ValorDeclarado = nil
		return
	case 17:
		r.VidaUtilDelLote = nil
		return
	case 18:
		r.EventoAnmat = nil
		return
	case 19:
		r.GLNDestino = nil
		return
	case 20:
		r.FechaVencimiento = nil
		return
	case 21:
		r.LoteFabricante = nil
		return
	case 22:
		r.LoteSecundario = nil
		return
	case 23:
		r.AcondicionamientoSecundario = nil
		return
	case 24:
		r.Bulto = nil
		return
	}
	panic("Unknown field index")
}

func (r *LineaAbastecimiento) NullField(i int) {
	switch i {
	case 7:
		r.AccionControlCalidad = nil
		return
	case 8:
		r.TipoAcondicionamiento = nil
		return
	case 9:
		r.TipoControlCalidad = nil
		return
	case 10:
		r.AvisoContraMuestra = nil
		return
	case 11:
		r.EstatusOTdeTrazaporLPN = nil
		return
	case 12:
		r.EstatusOtDeAcondporLpn = nil
		return
	case 13:
		r.ProductoTrazable = nil
		return
	case 14:
		r.TipoTraza = nil
		return
	case 15:
		r.UbicacionPredeterminada = nil
		return
	case 16:
		r.ValorDeclarado = nil
		return
	case 17:
		r.VidaUtilDelLote = nil
		return
	case 18:
		r.EventoAnmat = nil
		return
	case 19:
		r.GLNDestino = nil
		return
	case 20:
		r.FechaVencimiento = nil
		return
	case 21:
		r.LoteFabricante = nil
		return
	case 22:
		r.LoteSecundario = nil
		return
	case 23:
		r.AcondicionamientoSecundario = nil
		return
	case 24:
		r.Bulto = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ LineaAbastecimiento) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ LineaAbastecimiento) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ LineaAbastecimiento) HintSize(int)                     { panic("Unsupported operation") }
func (_ LineaAbastecimiento) Finalize()                        {}

func (_ LineaAbastecimiento) AvroCRC64Fingerprint() []byte {
	return []byte(LineaAbastecimientoAvroCRC64Fingerprint)
}

func (r LineaAbastecimiento) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["NumeroDeLinea"], err = json.Marshal(r.NumeroDeLinea)
	if err != nil {
		return nil, err
	}
	output["CantidadPedida"], err = json.Marshal(r.CantidadPedida)
	if err != nil {
		return nil, err
	}
	output["UnidadMedida"], err = json.Marshal(r.UnidadMedida)
	if err != nil {
		return nil, err
	}
	output["AlmacenWMS"], err = json.Marshal(r.AlmacenWMS)
	if err != nil {
		return nil, err
	}
	output["CodigoArticulo"], err = json.Marshal(r.CodigoArticulo)
	if err != nil {
		return nil, err
	}
	output["EstadoLote"], err = json.Marshal(r.EstadoLote)
	if err != nil {
		return nil, err
	}
	output["EsTrazable"], err = json.Marshal(r.EsTrazable)
	if err != nil {
		return nil, err
	}
	output["AccionControlCalidad"], err = json.Marshal(r.AccionControlCalidad)
	if err != nil {
		return nil, err
	}
	output["TipoAcondicionamiento"], err = json.Marshal(r.TipoAcondicionamiento)
	if err != nil {
		return nil, err
	}
	output["TipoControlCalidad"], err = json.Marshal(r.TipoControlCalidad)
	if err != nil {
		return nil, err
	}
	output["AvisoContraMuestra"], err = json.Marshal(r.AvisoContraMuestra)
	if err != nil {
		return nil, err
	}
	output["EstatusOTdeTrazaporLPN"], err = json.Marshal(r.EstatusOTdeTrazaporLPN)
	if err != nil {
		return nil, err
	}
	output["EstatusOtDeAcondporLpn"], err = json.Marshal(r.EstatusOtDeAcondporLpn)
	if err != nil {
		return nil, err
	}
	output["ProductoTrazable"], err = json.Marshal(r.ProductoTrazable)
	if err != nil {
		return nil, err
	}
	output["TipoTraza"], err = json.Marshal(r.TipoTraza)
	if err != nil {
		return nil, err
	}
	output["UbicacionPredeterminada"], err = json.Marshal(r.UbicacionPredeterminada)
	if err != nil {
		return nil, err
	}
	output["ValorDeclarado"], err = json.Marshal(r.ValorDeclarado)
	if err != nil {
		return nil, err
	}
	output["VidaUtilDelLote"], err = json.Marshal(r.VidaUtilDelLote)
	if err != nil {
		return nil, err
	}
	output["EventoAnmat"], err = json.Marshal(r.EventoAnmat)
	if err != nil {
		return nil, err
	}
	output["GLNDestino"], err = json.Marshal(r.GLNDestino)
	if err != nil {
		return nil, err
	}
	output["FechaVencimiento"], err = json.Marshal(r.FechaVencimiento)
	if err != nil {
		return nil, err
	}
	output["LoteFabricante"], err = json.Marshal(r.LoteFabricante)
	if err != nil {
		return nil, err
	}
	output["LoteSecundario"], err = json.Marshal(r.LoteSecundario)
	if err != nil {
		return nil, err
	}
	output["AcondicionamientoSecundario"], err = json.Marshal(r.AcondicionamientoSecundario)
	if err != nil {
		return nil, err
	}
	output["Bulto"], err = json.Marshal(r.Bulto)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *LineaAbastecimiento) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["NumeroDeLinea"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeLinea); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NumeroDeLinea")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CantidadPedida"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CantidadPedida); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CantidadPedida")
	}
	val = func() json.RawMessage {
		if v, ok := fields["UnidadMedida"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UnidadMedida); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for UnidadMedida")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AlmacenWMS"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AlmacenWMS); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AlmacenWMS")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoArticulo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoArticulo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoArticulo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EstadoLote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EstadoLote); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EstadoLote")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EsTrazable"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EsTrazable); err != nil {
			return err
		}
	} else {
		r.EsTrazable = false
	}
	val = func() json.RawMessage {
		if v, ok := fields["AccionControlCalidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AccionControlCalidad); err != nil {
			return err
		}
	} else {
		r.AccionControlCalidad = NewUnionNullArrayString()

		r.AccionControlCalidad = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoAcondicionamiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoAcondicionamiento); err != nil {
			return err
		}
	} else {
		r.TipoAcondicionamiento = NewUnionNullArrayString()

		r.TipoAcondicionamiento = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoControlCalidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoControlCalidad); err != nil {
			return err
		}
	} else {
		r.TipoControlCalidad = NewUnionNullArrayString()

		r.TipoControlCalidad = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["AvisoContraMuestra"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AvisoContraMuestra); err != nil {
			return err
		}
	} else {
		r.AvisoContraMuestra = NewUnionNullString()

		r.AvisoContraMuestra = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EstatusOTdeTrazaporLPN"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EstatusOTdeTrazaporLPN); err != nil {
			return err
		}
	} else {
		r.EstatusOTdeTrazaporLPN = NewUnionNullString()

		r.EstatusOTdeTrazaporLPN = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EstatusOtDeAcondporLpn"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EstatusOtDeAcondporLpn); err != nil {
			return err
		}
	} else {
		r.EstatusOtDeAcondporLpn = NewUnionNullString()

		r.EstatusOtDeAcondporLpn = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ProductoTrazable"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ProductoTrazable); err != nil {
			return err
		}
	} else {
		r.ProductoTrazable = NewUnionNullString()

		r.ProductoTrazable = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoTraza"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoTraza); err != nil {
			return err
		}
	} else {
		r.TipoTraza = NewUnionNullString()

		r.TipoTraza = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["UbicacionPredeterminada"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UbicacionPredeterminada); err != nil {
			return err
		}
	} else {
		r.UbicacionPredeterminada = NewUnionNullString()

		r.UbicacionPredeterminada = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValorDeclarado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValorDeclarado); err != nil {
			return err
		}
	} else {
		r.ValorDeclarado = NewUnionNullString()

		r.ValorDeclarado = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["VidaUtilDelLote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VidaUtilDelLote); err != nil {
			return err
		}
	} else {
		r.VidaUtilDelLote = NewUnionNullString()

		r.VidaUtilDelLote = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EventoAnmat"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EventoAnmat); err != nil {
			return err
		}
	} else {
		r.EventoAnmat = NewUnionNullString()

		r.EventoAnmat = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["GLNDestino"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.GLNDestino); err != nil {
			return err
		}
	} else {
		r.GLNDestino = NewUnionNullString()

		r.GLNDestino = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaVencimiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaVencimiento); err != nil {
			return err
		}
	} else {
		r.FechaVencimiento = NewUnionNullLong()

		r.FechaVencimiento = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LoteFabricante"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteFabricante); err != nil {
			return err
		}
	} else {
		r.LoteFabricante = NewUnionNullString()

		r.LoteFabricante = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LoteSecundario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteSecundario); err != nil {
			return err
		}
	} else {
		r.LoteSecundario = NewUnionNullString()

		r.LoteSecundario = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["AcondicionamientoSecundario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AcondicionamientoSecundario); err != nil {
			return err
		}
	} else {
		r.AcondicionamientoSecundario = NewUnionNullString()

		r.AcondicionamientoSecundario = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Bulto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Bulto); err != nil {
			return err
		}
	} else {
		r.Bulto = NewUnionNullBultoLineaAbastecimiento()

		r.Bulto = nil
	}
	return nil
}
