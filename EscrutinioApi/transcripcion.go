// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Transcripcion.avsc
 */
package EscrutinioApiEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Transcripcion struct {
	Fecha int64 `json:"fecha"`

	Contenido string `json:"contenido"`

	Certificado string `json:"certificado"`

	Mesa string `json:"mesa"`

	Eleccion string `json:"eleccion"`

	EleccionId string `json:"eleccionId"`
}

const TranscripcionAvroCRC64Fingerprint = "{\x18\xad\xe4(é¶®"

func NewTranscripcion() Transcripcion {
	r := Transcripcion{}
	return r
}

func DeserializeTranscripcion(r io.Reader) (Transcripcion, error) {
	t := NewTranscripcion()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTranscripcionFromSchema(r io.Reader, schema string) (Transcripcion, error) {
	t := NewTranscripcion()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTranscripcion(r Transcripcion, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.Fecha, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Contenido, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Certificado, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Mesa, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Eleccion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.EleccionId, w)
	if err != nil {
		return err
	}
	return err
}

func (r Transcripcion) Serialize(w io.Writer) error {
	return writeTranscripcion(r, w)
}

func (r Transcripcion) Schema() string {
	return "{\"fields\":[{\"name\":\"fecha\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"contenido\",\"type\":\"string\"},{\"name\":\"certificado\",\"type\":\"string\"},{\"name\":\"mesa\",\"type\":\"string\"},{\"name\":\"eleccion\",\"type\":\"string\"},{\"name\":\"eleccionId\",\"type\":\"string\"}],\"name\":\"Andreani.EscrutinioApi.Events.Record.Transcripcion\",\"type\":\"record\"}"
}

func (r Transcripcion) SchemaName() string {
	return "Andreani.EscrutinioApi.Events.Record.Transcripcion"
}

func (_ Transcripcion) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Transcripcion) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Transcripcion) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Transcripcion) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Transcripcion) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Transcripcion) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Transcripcion) SetString(v string)   { panic("Unsupported operation") }
func (_ Transcripcion) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Transcripcion) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Long{Target: &r.Fecha}

		return w

	case 1:
		w := types.String{Target: &r.Contenido}

		return w

	case 2:
		w := types.String{Target: &r.Certificado}

		return w

	case 3:
		w := types.String{Target: &r.Mesa}

		return w

	case 4:
		w := types.String{Target: &r.Eleccion}

		return w

	case 5:
		w := types.String{Target: &r.EleccionId}

		return w

	}
	panic("Unknown field index")
}

func (r *Transcripcion) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Transcripcion) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Transcripcion) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Transcripcion) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Transcripcion) HintSize(int)                     { panic("Unsupported operation") }
func (_ Transcripcion) Finalize()                        {}

func (_ Transcripcion) AvroCRC64Fingerprint() []byte {
	return []byte(TranscripcionAvroCRC64Fingerprint)
}

func (r Transcripcion) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["fecha"], err = json.Marshal(r.Fecha)
	if err != nil {
		return nil, err
	}
	output["contenido"], err = json.Marshal(r.Contenido)
	if err != nil {
		return nil, err
	}
	output["certificado"], err = json.Marshal(r.Certificado)
	if err != nil {
		return nil, err
	}
	output["mesa"], err = json.Marshal(r.Mesa)
	if err != nil {
		return nil, err
	}
	output["eleccion"], err = json.Marshal(r.Eleccion)
	if err != nil {
		return nil, err
	}
	output["eleccionId"], err = json.Marshal(r.EleccionId)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Transcripcion) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["fecha"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Fecha); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fecha")
	}
	val = func() json.RawMessage {
		if v, ok := fields["contenido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contenido); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for contenido")
	}
	val = func() json.RawMessage {
		if v, ok := fields["certificado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Certificado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for certificado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["mesa"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Mesa); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for mesa")
	}
	val = func() json.RawMessage {
		if v, ok := fields["eleccion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Eleccion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for eleccion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["eleccionId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EleccionId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for eleccionId")
	}
	return nil
}
