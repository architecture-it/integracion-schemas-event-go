// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Remito.avsc
 */
package WarehousePedidoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Remito struct {
	NumeroEntidad string `json:"numeroEntidad"`

	Documento string `json:"documento"`
}

const RemitoAvroCRC64Fingerprint = "\x92\xdc\xd5\xd4eIÿè"

func NewRemito() Remito {
	r := Remito{}
	return r
}

func DeserializeRemito(r io.Reader) (Remito, error) {
	t := NewRemito()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeRemitoFromSchema(r io.Reader, schema string) (Remito, error) {
	t := NewRemito()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeRemito(r Remito, w io.Writer) error {
	var err error
	err = vm.WriteString(r.NumeroEntidad, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Documento, w)
	if err != nil {
		return err
	}
	return err
}

func (r Remito) Serialize(w io.Writer) error {
	return writeRemito(r, w)
}

func (r Remito) Schema() string {
	return "{\"fields\":[{\"name\":\"numeroEntidad\",\"type\":\"string\"},{\"name\":\"documento\",\"type\":\"string\"}],\"name\":\"Andreani.WarehouseAbastecimiento.Events.Record.Remito\",\"type\":\"record\"}"
}

func (r Remito) SchemaName() string {
	return "Andreani.WarehouseAbastecimiento.Events.Record.Remito"
}

func (_ Remito) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Remito) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Remito) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Remito) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Remito) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Remito) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Remito) SetString(v string)   { panic("Unsupported operation") }
func (_ Remito) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Remito) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.NumeroEntidad}

		return w

	case 1:
		w := types.String{Target: &r.Documento}

		return w

	}
	panic("Unknown field index")
}

func (r *Remito) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Remito) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Remito) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Remito) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Remito) HintSize(int)                     { panic("Unsupported operation") }
func (_ Remito) Finalize()                        {}

func (_ Remito) AvroCRC64Fingerprint() []byte {
	return []byte(RemitoAvroCRC64Fingerprint)
}

func (r Remito) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["numeroEntidad"], err = json.Marshal(r.NumeroEntidad)
	if err != nil {
		return nil, err
	}
	output["documento"], err = json.Marshal(r.Documento)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Remito) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["numeroEntidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroEntidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroEntidad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["documento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Documento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for documento")
	}
	return nil
}
