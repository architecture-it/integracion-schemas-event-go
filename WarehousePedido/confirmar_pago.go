// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ConfirmarPago.avsc
 */
package WarehousePedidoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ConfirmarPago struct {
	PedidosBatch PedidoBatch `json:"pedidosBatch"`
}

const ConfirmarPagoAvroCRC64Fingerprint = "\xfb41\x1ab3\xe2-"

func NewConfirmarPago() ConfirmarPago {
	r := ConfirmarPago{}
	r.PedidosBatch = NewPedidoBatch()

	return r
}

func DeserializeConfirmarPago(r io.Reader) (ConfirmarPago, error) {
	t := NewConfirmarPago()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeConfirmarPagoFromSchema(r io.Reader, schema string) (ConfirmarPago, error) {
	t := NewConfirmarPago()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeConfirmarPago(r ConfirmarPago, w io.Writer) error {
	var err error
	err = writePedidoBatch(r.PedidosBatch, w)
	if err != nil {
		return err
	}
	return err
}

func (r ConfirmarPago) Serialize(w io.Writer) error {
	return writeConfirmarPago(r, w)
}

func (r ConfirmarPago) Schema() string {
	return "{\"fields\":[{\"name\":\"pedidosBatch\",\"type\":{\"fields\":[{\"name\":\"batchId\",\"type\":\"string\"},{\"name\":\"idPagoExterno\",\"type\":\"string\"},{\"name\":\"proveedorPago\",\"type\":\"string\"}],\"name\":\"PedidoBatch\",\"type\":\"record\"}}],\"name\":\"Andreani.WarehousePedido.Events.Record.ConfirmarPago\",\"type\":\"record\"}"
}

func (r ConfirmarPago) SchemaName() string {
	return "Andreani.WarehousePedido.Events.Record.ConfirmarPago"
}

func (_ ConfirmarPago) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ConfirmarPago) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ConfirmarPago) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ConfirmarPago) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ConfirmarPago) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ConfirmarPago) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ConfirmarPago) SetString(v string)   { panic("Unsupported operation") }
func (_ ConfirmarPago) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ConfirmarPago) Get(i int) types.Field {
	switch i {
	case 0:
		r.PedidosBatch = NewPedidoBatch()

		w := types.Record{Target: &r.PedidosBatch}

		return w

	}
	panic("Unknown field index")
}

func (r *ConfirmarPago) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ConfirmarPago) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ ConfirmarPago) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ConfirmarPago) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ConfirmarPago) HintSize(int)                     { panic("Unsupported operation") }
func (_ ConfirmarPago) Finalize()                        {}

func (_ ConfirmarPago) AvroCRC64Fingerprint() []byte {
	return []byte(ConfirmarPagoAvroCRC64Fingerprint)
}

func (r ConfirmarPago) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["pedidosBatch"], err = json.Marshal(r.PedidosBatch)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ConfirmarPago) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["pedidosBatch"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PedidosBatch); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for pedidosBatch")
	}
	return nil
}
