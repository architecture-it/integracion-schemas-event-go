// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     PedidoDeAlmacenSCE.avsc
 */
package WarehousePedidoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Direccion struct {
	Calle *UnionNullString `json:"calle"`

	Numero *UnionNullString `json:"numero"`

	Piso *UnionNullString `json:"piso"`

	Departamento *UnionNullString `json:"departamento"`

	Referenciadedomicilio *UnionNullString `json:"referenciadedomicilio"`

	CodigoPostal *UnionNullString `json:"codigoPostal"`

	Localidad *UnionNullString `json:"localidad"`

	Provincia *UnionNullString `json:"provincia"`

	Pais *UnionNullString `json:"pais"`
}

const DireccionAvroCRC64Fingerprint = "\x03\x99$\xf8\xd2]Íª"

func NewDireccion() Direccion {
	r := Direccion{}
	r.Calle = nil
	r.Numero = nil
	r.Piso = nil
	r.Departamento = nil
	r.Referenciadedomicilio = nil
	r.CodigoPostal = nil
	r.Localidad = nil
	r.Provincia = nil
	r.Pais = nil
	return r
}

func DeserializeDireccion(r io.Reader) (Direccion, error) {
	t := NewDireccion()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDireccionFromSchema(r io.Reader, schema string) (Direccion, error) {
	t := NewDireccion()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDireccion(r Direccion, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Calle, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Numero, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Piso, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Departamento, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Referenciadedomicilio, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoPostal, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Localidad, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Provincia, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Pais, w)
	if err != nil {
		return err
	}
	return err
}

func (r Direccion) Serialize(w io.Writer) error {
	return writeDireccion(r, w)
}

func (r Direccion) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"calle\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"numero\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"piso\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"departamento\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"referenciadedomicilio\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"codigoPostal\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"localidad\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"provincia\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"pais\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.WarehouseAbastecimiento.Events.Record.Direccion\",\"type\":\"record\"}"
}

func (r Direccion) SchemaName() string {
	return "Andreani.WarehouseAbastecimiento.Events.Record.Direccion"
}

func (_ Direccion) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Direccion) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Direccion) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Direccion) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Direccion) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Direccion) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Direccion) SetString(v string)   { panic("Unsupported operation") }
func (_ Direccion) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Direccion) Get(i int) types.Field {
	switch i {
	case 0:
		r.Calle = NewUnionNullString()

		return r.Calle
	case 1:
		r.Numero = NewUnionNullString()

		return r.Numero
	case 2:
		r.Piso = NewUnionNullString()

		return r.Piso
	case 3:
		r.Departamento = NewUnionNullString()

		return r.Departamento
	case 4:
		r.Referenciadedomicilio = NewUnionNullString()

		return r.Referenciadedomicilio
	case 5:
		r.CodigoPostal = NewUnionNullString()

		return r.CodigoPostal
	case 6:
		r.Localidad = NewUnionNullString()

		return r.Localidad
	case 7:
		r.Provincia = NewUnionNullString()

		return r.Provincia
	case 8:
		r.Pais = NewUnionNullString()

		return r.Pais
	}
	panic("Unknown field index")
}

func (r *Direccion) SetDefault(i int) {
	switch i {
	case 0:
		r.Calle = nil
		return
	case 1:
		r.Numero = nil
		return
	case 2:
		r.Piso = nil
		return
	case 3:
		r.Departamento = nil
		return
	case 4:
		r.Referenciadedomicilio = nil
		return
	case 5:
		r.CodigoPostal = nil
		return
	case 6:
		r.Localidad = nil
		return
	case 7:
		r.Provincia = nil
		return
	case 8:
		r.Pais = nil
		return
	}
	panic("Unknown field index")
}

func (r *Direccion) NullField(i int) {
	switch i {
	case 0:
		r.Calle = nil
		return
	case 1:
		r.Numero = nil
		return
	case 2:
		r.Piso = nil
		return
	case 3:
		r.Departamento = nil
		return
	case 4:
		r.Referenciadedomicilio = nil
		return
	case 5:
		r.CodigoPostal = nil
		return
	case 6:
		r.Localidad = nil
		return
	case 7:
		r.Provincia = nil
		return
	case 8:
		r.Pais = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Direccion) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Direccion) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Direccion) HintSize(int)                     { panic("Unsupported operation") }
func (_ Direccion) Finalize()                        {}

func (_ Direccion) AvroCRC64Fingerprint() []byte {
	return []byte(DireccionAvroCRC64Fingerprint)
}

func (r Direccion) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["calle"], err = json.Marshal(r.Calle)
	if err != nil {
		return nil, err
	}
	output["numero"], err = json.Marshal(r.Numero)
	if err != nil {
		return nil, err
	}
	output["piso"], err = json.Marshal(r.Piso)
	if err != nil {
		return nil, err
	}
	output["departamento"], err = json.Marshal(r.Departamento)
	if err != nil {
		return nil, err
	}
	output["referenciadedomicilio"], err = json.Marshal(r.Referenciadedomicilio)
	if err != nil {
		return nil, err
	}
	output["codigoPostal"], err = json.Marshal(r.CodigoPostal)
	if err != nil {
		return nil, err
	}
	output["localidad"], err = json.Marshal(r.Localidad)
	if err != nil {
		return nil, err
	}
	output["provincia"], err = json.Marshal(r.Provincia)
	if err != nil {
		return nil, err
	}
	output["pais"], err = json.Marshal(r.Pais)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Direccion) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["calle"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Calle); err != nil {
			return err
		}
	} else {
		r.Calle = NewUnionNullString()

		r.Calle = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["numero"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Numero); err != nil {
			return err
		}
	} else {
		r.Numero = NewUnionNullString()

		r.Numero = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["piso"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Piso); err != nil {
			return err
		}
	} else {
		r.Piso = NewUnionNullString()

		r.Piso = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["departamento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Departamento); err != nil {
			return err
		}
	} else {
		r.Departamento = NewUnionNullString()

		r.Departamento = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["referenciadedomicilio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Referenciadedomicilio); err != nil {
			return err
		}
	} else {
		r.Referenciadedomicilio = NewUnionNullString()

		r.Referenciadedomicilio = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoPostal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoPostal); err != nil {
			return err
		}
	} else {
		r.CodigoPostal = NewUnionNullString()

		r.CodigoPostal = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["localidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Localidad); err != nil {
			return err
		}
	} else {
		r.Localidad = NewUnionNullString()

		r.Localidad = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["provincia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Provincia); err != nil {
			return err
		}
	} else {
		r.Provincia = NewUnionNullString()

		r.Provincia = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["pais"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Pais); err != nil {
			return err
		}
	} else {
		r.Pais = NewUnionNullString()

		r.Pais = nil
	}
	return nil
}
