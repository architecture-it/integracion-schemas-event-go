// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EliminarPedido.avsc
 */
package WarehousePedidoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EliminarPedido struct {
	Pedido Pedido `json:"pedido"`
}

const EliminarPedidoAvroCRC64Fingerprint = "\x19CS\xe8y\xf1+\xac"

func NewEliminarPedido() EliminarPedido {
	r := EliminarPedido{}
	r.Pedido = NewPedido()

	return r
}

func DeserializeEliminarPedido(r io.Reader) (EliminarPedido, error) {
	t := NewEliminarPedido()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEliminarPedidoFromSchema(r io.Reader, schema string) (EliminarPedido, error) {
	t := NewEliminarPedido()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEliminarPedido(r EliminarPedido, w io.Writer) error {
	var err error
	err = writePedido(r.Pedido, w)
	if err != nil {
		return err
	}
	return err
}

func (r EliminarPedido) Serialize(w io.Writer) error {
	return writeEliminarPedido(r, w)
}

func (r EliminarPedido) Schema() string {
	return "{\"fields\":[{\"name\":\"pedido\",\"type\":{\"fields\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"Pedido\",\"type\":\"record\"}}],\"name\":\"Andreani.WarehousePedido.Events.Record.EliminarPedido\",\"type\":\"record\"}"
}

func (r EliminarPedido) SchemaName() string {
	return "Andreani.WarehousePedido.Events.Record.EliminarPedido"
}

func (_ EliminarPedido) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EliminarPedido) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EliminarPedido) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EliminarPedido) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EliminarPedido) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EliminarPedido) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EliminarPedido) SetString(v string)   { panic("Unsupported operation") }
func (_ EliminarPedido) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EliminarPedido) Get(i int) types.Field {
	switch i {
	case 0:
		r.Pedido = NewPedido()

		w := types.Record{Target: &r.Pedido}

		return w

	}
	panic("Unknown field index")
}

func (r *EliminarPedido) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *EliminarPedido) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ EliminarPedido) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EliminarPedido) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EliminarPedido) HintSize(int)                     { panic("Unsupported operation") }
func (_ EliminarPedido) Finalize()                        {}

func (_ EliminarPedido) AvroCRC64Fingerprint() []byte {
	return []byte(EliminarPedidoAvroCRC64Fingerprint)
}

func (r EliminarPedido) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["pedido"], err = json.Marshal(r.Pedido)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EliminarPedido) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["pedido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Pedido); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for pedido")
	}
	return nil
}
