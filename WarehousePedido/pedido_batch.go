// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     PedidoBatch.avsc
 */
package WarehousePedidoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type PedidoBatch struct {
	BatchId string `json:"batchId"`

	IdPagoExterno string `json:"idPagoExterno"`

	ProveedorPago string `json:"proveedorPago"`
}

const PedidoBatchAvroCRC64Fingerprint = "\xb7;\xb4\xd81\x83\xfa\x05"

func NewPedidoBatch() PedidoBatch {
	r := PedidoBatch{}
	return r
}

func DeserializePedidoBatch(r io.Reader) (PedidoBatch, error) {
	t := NewPedidoBatch()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePedidoBatchFromSchema(r io.Reader, schema string) (PedidoBatch, error) {
	t := NewPedidoBatch()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePedidoBatch(r PedidoBatch, w io.Writer) error {
	var err error
	err = vm.WriteString(r.BatchId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.IdPagoExterno, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ProveedorPago, w)
	if err != nil {
		return err
	}
	return err
}

func (r PedidoBatch) Serialize(w io.Writer) error {
	return writePedidoBatch(r, w)
}

func (r PedidoBatch) Schema() string {
	return "{\"fields\":[{\"name\":\"batchId\",\"type\":\"string\"},{\"name\":\"idPagoExterno\",\"type\":\"string\"},{\"name\":\"proveedorPago\",\"type\":\"string\"}],\"name\":\"Andreani.WarehousePedido.Events.Record.PedidoBatch\",\"type\":\"record\"}"
}

func (r PedidoBatch) SchemaName() string {
	return "Andreani.WarehousePedido.Events.Record.PedidoBatch"
}

func (_ PedidoBatch) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ PedidoBatch) SetInt(v int32)       { panic("Unsupported operation") }
func (_ PedidoBatch) SetLong(v int64)      { panic("Unsupported operation") }
func (_ PedidoBatch) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ PedidoBatch) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ PedidoBatch) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ PedidoBatch) SetString(v string)   { panic("Unsupported operation") }
func (_ PedidoBatch) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *PedidoBatch) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.BatchId}

		return w

	case 1:
		w := types.String{Target: &r.IdPagoExterno}

		return w

	case 2:
		w := types.String{Target: &r.ProveedorPago}

		return w

	}
	panic("Unknown field index")
}

func (r *PedidoBatch) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *PedidoBatch) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ PedidoBatch) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ PedidoBatch) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ PedidoBatch) HintSize(int)                     { panic("Unsupported operation") }
func (_ PedidoBatch) Finalize()                        {}

func (_ PedidoBatch) AvroCRC64Fingerprint() []byte {
	return []byte(PedidoBatchAvroCRC64Fingerprint)
}

func (r PedidoBatch) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["batchId"], err = json.Marshal(r.BatchId)
	if err != nil {
		return nil, err
	}
	output["idPagoExterno"], err = json.Marshal(r.IdPagoExterno)
	if err != nil {
		return nil, err
	}
	output["proveedorPago"], err = json.Marshal(r.ProveedorPago)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *PedidoBatch) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["batchId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BatchId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for batchId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["idPagoExterno"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdPagoExterno); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for idPagoExterno")
	}
	val = func() json.RawMessage {
		if v, ok := fields["proveedorPago"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ProveedorPago); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for proveedorPago")
	}
	return nil
}
