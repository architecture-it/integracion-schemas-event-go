// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ConfirmacionPedidos.avsc
 */
package ConfirmacionPedidosSceEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ConfirmacionPedidos struct {
	Almacen string `json:"almacen"`

	Contrato string `json:"contrato"`

	Planta string `json:"planta"`

	Remitente string `json:"remitente"`

	IdTransaccion string `json:"idTransaccion"`

	UriConsulta string `json:"uriConsulta"`

	NumeroDeOrden string `json:"numeroDeOrden"`

	ConfirmacionDePreparacionDePedido ConfirmacionDePreparacionDePedido `json:"confirmacionDePreparacionDePedido"`
}

const ConfirmacionPedidosAvroCRC64Fingerprint = "\x81U\xccj\x99\xadj\x98"

func NewConfirmacionPedidos() ConfirmacionPedidos {
	r := ConfirmacionPedidos{}
	r.ConfirmacionDePreparacionDePedido = NewConfirmacionDePreparacionDePedido()

	return r
}

func DeserializeConfirmacionPedidos(r io.Reader) (ConfirmacionPedidos, error) {
	t := NewConfirmacionPedidos()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeConfirmacionPedidosFromSchema(r io.Reader, schema string) (ConfirmacionPedidos, error) {
	t := NewConfirmacionPedidos()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeConfirmacionPedidos(r ConfirmacionPedidos, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Almacen, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Contrato, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Planta, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Remitente, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.IdTransaccion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.UriConsulta, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NumeroDeOrden, w)
	if err != nil {
		return err
	}
	err = writeConfirmacionDePreparacionDePedido(r.ConfirmacionDePreparacionDePedido, w)
	if err != nil {
		return err
	}
	return err
}

func (r ConfirmacionPedidos) Serialize(w io.Writer) error {
	return writeConfirmacionPedidos(r, w)
}

func (r ConfirmacionPedidos) Schema() string {
	return "{\"fields\":[{\"name\":\"almacen\",\"type\":\"string\"},{\"name\":\"contrato\",\"type\":\"string\"},{\"name\":\"planta\",\"type\":\"string\"},{\"name\":\"remitente\",\"type\":\"string\"},{\"name\":\"idTransaccion\",\"type\":\"string\"},{\"name\":\"uriConsulta\",\"type\":\"string\"},{\"name\":\"numeroDeOrden\",\"type\":\"string\"},{\"name\":\"confirmacionDePreparacionDePedido\",\"type\":{\"fields\":[{\"name\":\"propietario\",\"type\":\"string\"},{\"name\":\"numeroDePedidoInterno\",\"type\":\"string\"},{\"name\":\"remito\",\"type\":\"string\"},{\"name\":\"numeroDePedidoDeCliente\",\"type\":\"string\"},{\"name\":\"tipoDePedido\",\"type\":\"string\"}],\"name\":\"ConfirmacionDePreparacionDePedido\",\"type\":\"record\"}}],\"name\":\"Andreani.ConfirmacionPedidosSce.Events.Record.ConfirmacionPedidos\",\"type\":\"record\"}"
}

func (r ConfirmacionPedidos) SchemaName() string {
	return "Andreani.ConfirmacionPedidosSce.Events.Record.ConfirmacionPedidos"
}

func (_ ConfirmacionPedidos) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ConfirmacionPedidos) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ConfirmacionPedidos) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ConfirmacionPedidos) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ConfirmacionPedidos) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ConfirmacionPedidos) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ConfirmacionPedidos) SetString(v string)   { panic("Unsupported operation") }
func (_ ConfirmacionPedidos) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ConfirmacionPedidos) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Almacen}

		return w

	case 1:
		w := types.String{Target: &r.Contrato}

		return w

	case 2:
		w := types.String{Target: &r.Planta}

		return w

	case 3:
		w := types.String{Target: &r.Remitente}

		return w

	case 4:
		w := types.String{Target: &r.IdTransaccion}

		return w

	case 5:
		w := types.String{Target: &r.UriConsulta}

		return w

	case 6:
		w := types.String{Target: &r.NumeroDeOrden}

		return w

	case 7:
		r.ConfirmacionDePreparacionDePedido = NewConfirmacionDePreparacionDePedido()

		w := types.Record{Target: &r.ConfirmacionDePreparacionDePedido}

		return w

	}
	panic("Unknown field index")
}

func (r *ConfirmacionPedidos) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ConfirmacionPedidos) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ ConfirmacionPedidos) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ConfirmacionPedidos) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ConfirmacionPedidos) HintSize(int)                     { panic("Unsupported operation") }
func (_ ConfirmacionPedidos) Finalize()                        {}

func (_ ConfirmacionPedidos) AvroCRC64Fingerprint() []byte {
	return []byte(ConfirmacionPedidosAvroCRC64Fingerprint)
}

func (r ConfirmacionPedidos) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["almacen"], err = json.Marshal(r.Almacen)
	if err != nil {
		return nil, err
	}
	output["contrato"], err = json.Marshal(r.Contrato)
	if err != nil {
		return nil, err
	}
	output["planta"], err = json.Marshal(r.Planta)
	if err != nil {
		return nil, err
	}
	output["remitente"], err = json.Marshal(r.Remitente)
	if err != nil {
		return nil, err
	}
	output["idTransaccion"], err = json.Marshal(r.IdTransaccion)
	if err != nil {
		return nil, err
	}
	output["uriConsulta"], err = json.Marshal(r.UriConsulta)
	if err != nil {
		return nil, err
	}
	output["numeroDeOrden"], err = json.Marshal(r.NumeroDeOrden)
	if err != nil {
		return nil, err
	}
	output["confirmacionDePreparacionDePedido"], err = json.Marshal(r.ConfirmacionDePreparacionDePedido)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ConfirmacionPedidos) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["almacen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Almacen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for almacen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["contrato"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contrato); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for contrato")
	}
	val = func() json.RawMessage {
		if v, ok := fields["planta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Planta); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for planta")
	}
	val = func() json.RawMessage {
		if v, ok := fields["remitente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Remitente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for remitente")
	}
	val = func() json.RawMessage {
		if v, ok := fields["idTransaccion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdTransaccion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for idTransaccion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["uriConsulta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UriConsulta); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for uriConsulta")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numeroDeOrden"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeOrden); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroDeOrden")
	}
	val = func() json.RawMessage {
		if v, ok := fields["confirmacionDePreparacionDePedido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ConfirmacionDePreparacionDePedido); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for confirmacionDePreparacionDePedido")
	}
	return nil
}
