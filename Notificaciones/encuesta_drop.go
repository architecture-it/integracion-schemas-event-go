// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EncuestaDrop.avsc
 */
package NotificacionesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EncuestaDrop struct {
	RemitenteMail *UnionNullString `json:"remitenteMail"`

	RemitenteNombre *UnionNullString `json:"remitenteNombre"`

	RemitenteTelefono *UnionNullString `json:"remitenteTelefono"`
}

const EncuestaDropAvroCRC64Fingerprint = "%\x8e\x0e3\xea\xe4\x00\x17"

func NewEncuestaDrop() EncuestaDrop {
	r := EncuestaDrop{}
	r.RemitenteMail = nil
	r.RemitenteNombre = nil
	r.RemitenteTelefono = nil
	return r
}

func DeserializeEncuestaDrop(r io.Reader) (EncuestaDrop, error) {
	t := NewEncuestaDrop()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEncuestaDropFromSchema(r io.Reader, schema string) (EncuestaDrop, error) {
	t := NewEncuestaDrop()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEncuestaDrop(r EncuestaDrop, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.RemitenteMail, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.RemitenteNombre, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.RemitenteTelefono, w)
	if err != nil {
		return err
	}
	return err
}

func (r EncuestaDrop) Serialize(w io.Writer) error {
	return writeEncuestaDrop(r, w)
}

func (r EncuestaDrop) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"remitenteMail\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"remitenteNombre\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"remitenteTelefono\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.Notificaciones.Events.Records.EncuestaDrop\",\"type\":\"record\"}"
}

func (r EncuestaDrop) SchemaName() string {
	return "Andreani.Notificaciones.Events.Records.EncuestaDrop"
}

func (_ EncuestaDrop) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EncuestaDrop) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EncuestaDrop) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EncuestaDrop) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EncuestaDrop) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EncuestaDrop) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EncuestaDrop) SetString(v string)   { panic("Unsupported operation") }
func (_ EncuestaDrop) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EncuestaDrop) Get(i int) types.Field {
	switch i {
	case 0:
		r.RemitenteMail = NewUnionNullString()

		return r.RemitenteMail
	case 1:
		r.RemitenteNombre = NewUnionNullString()

		return r.RemitenteNombre
	case 2:
		r.RemitenteTelefono = NewUnionNullString()

		return r.RemitenteTelefono
	}
	panic("Unknown field index")
}

func (r *EncuestaDrop) SetDefault(i int) {
	switch i {
	case 0:
		r.RemitenteMail = nil
		return
	case 1:
		r.RemitenteNombre = nil
		return
	case 2:
		r.RemitenteTelefono = nil
		return
	}
	panic("Unknown field index")
}

func (r *EncuestaDrop) NullField(i int) {
	switch i {
	case 0:
		r.RemitenteMail = nil
		return
	case 1:
		r.RemitenteNombre = nil
		return
	case 2:
		r.RemitenteTelefono = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ EncuestaDrop) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EncuestaDrop) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EncuestaDrop) HintSize(int)                     { panic("Unsupported operation") }
func (_ EncuestaDrop) Finalize()                        {}

func (_ EncuestaDrop) AvroCRC64Fingerprint() []byte {
	return []byte(EncuestaDropAvroCRC64Fingerprint)
}

func (r EncuestaDrop) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["remitenteMail"], err = json.Marshal(r.RemitenteMail)
	if err != nil {
		return nil, err
	}
	output["remitenteNombre"], err = json.Marshal(r.RemitenteNombre)
	if err != nil {
		return nil, err
	}
	output["remitenteTelefono"], err = json.Marshal(r.RemitenteTelefono)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EncuestaDrop) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["remitenteMail"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RemitenteMail); err != nil {
			return err
		}
	} else {
		r.RemitenteMail = NewUnionNullString()

		r.RemitenteMail = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["remitenteNombre"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RemitenteNombre); err != nil {
			return err
		}
	} else {
		r.RemitenteNombre = NewUnionNullString()

		r.RemitenteNombre = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["remitenteTelefono"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RemitenteTelefono); err != nil {
			return err
		}
	} else {
		r.RemitenteTelefono = NewUnionNullString()

		r.RemitenteTelefono = nil
	}
	return nil
}
