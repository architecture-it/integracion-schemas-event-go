// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     NovedadEventual.avsc
 */
package NotificacionesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type NovedadEventual struct {
	IdModelo int64 `json:"idModelo"`

	DestinatarioEmail string `json:"destinatarioEmail"`

	DestinatarioTelefono string `json:"destinatarioTelefono"`

	Canal string `json:"canal"`

	CodigoDeEnvio string `json:"codigoDeEnvio"`

	SucursalActual string `json:"sucursalActual"`

	Segmento string `json:"segmento"`

	Cliente string `json:"cliente"`

	CodigoDeContratoInterno string `json:"codigoDeContratoInterno"`

	TipoContacto string `json:"tipoContacto"`

	CodigoPostal string `json:"codigoPostal"`

	Provincia string `json:"provincia"`
}

const NovedadEventualAvroCRC64Fingerprint = "\x80`M\xa7\x17\x85\x18\xd4"

func NewNovedadEventual() NovedadEventual {
	r := NovedadEventual{}
	return r
}

func DeserializeNovedadEventual(r io.Reader) (NovedadEventual, error) {
	t := NewNovedadEventual()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeNovedadEventualFromSchema(r io.Reader, schema string) (NovedadEventual, error) {
	t := NewNovedadEventual()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeNovedadEventual(r NovedadEventual, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.IdModelo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.DestinatarioEmail, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.DestinatarioTelefono, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Canal, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodigoDeEnvio, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.SucursalActual, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Segmento, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Cliente, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodigoDeContratoInterno, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.TipoContacto, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodigoPostal, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Provincia, w)
	if err != nil {
		return err
	}
	return err
}

func (r NovedadEventual) Serialize(w io.Writer) error {
	return writeNovedadEventual(r, w)
}

func (r NovedadEventual) Schema() string {
	return "{\"fields\":[{\"name\":\"idModelo\",\"type\":\"long\"},{\"name\":\"destinatarioEmail\",\"type\":\"string\"},{\"name\":\"destinatarioTelefono\",\"type\":\"string\"},{\"name\":\"canal\",\"type\":\"string\"},{\"name\":\"codigoDeEnvio\",\"type\":\"string\"},{\"name\":\"sucursalActual\",\"type\":\"string\"},{\"name\":\"segmento\",\"type\":\"string\"},{\"name\":\"cliente\",\"type\":\"string\"},{\"name\":\"codigoDeContratoInterno\",\"type\":\"string\"},{\"name\":\"tipoContacto\",\"type\":\"string\"},{\"name\":\"codigoPostal\",\"type\":\"string\"},{\"name\":\"provincia\",\"type\":\"string\"}],\"name\":\"Andreani.Notificaciones.Events.Records.NovedadEventual\",\"type\":\"record\"}"
}

func (r NovedadEventual) SchemaName() string {
	return "Andreani.Notificaciones.Events.Records.NovedadEventual"
}

func (_ NovedadEventual) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ NovedadEventual) SetInt(v int32)       { panic("Unsupported operation") }
func (_ NovedadEventual) SetLong(v int64)      { panic("Unsupported operation") }
func (_ NovedadEventual) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ NovedadEventual) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ NovedadEventual) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ NovedadEventual) SetString(v string)   { panic("Unsupported operation") }
func (_ NovedadEventual) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *NovedadEventual) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Long{Target: &r.IdModelo}

		return w

	case 1:
		w := types.String{Target: &r.DestinatarioEmail}

		return w

	case 2:
		w := types.String{Target: &r.DestinatarioTelefono}

		return w

	case 3:
		w := types.String{Target: &r.Canal}

		return w

	case 4:
		w := types.String{Target: &r.CodigoDeEnvio}

		return w

	case 5:
		w := types.String{Target: &r.SucursalActual}

		return w

	case 6:
		w := types.String{Target: &r.Segmento}

		return w

	case 7:
		w := types.String{Target: &r.Cliente}

		return w

	case 8:
		w := types.String{Target: &r.CodigoDeContratoInterno}

		return w

	case 9:
		w := types.String{Target: &r.TipoContacto}

		return w

	case 10:
		w := types.String{Target: &r.CodigoPostal}

		return w

	case 11:
		w := types.String{Target: &r.Provincia}

		return w

	}
	panic("Unknown field index")
}

func (r *NovedadEventual) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *NovedadEventual) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ NovedadEventual) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ NovedadEventual) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ NovedadEventual) HintSize(int)                     { panic("Unsupported operation") }
func (_ NovedadEventual) Finalize()                        {}

func (_ NovedadEventual) AvroCRC64Fingerprint() []byte {
	return []byte(NovedadEventualAvroCRC64Fingerprint)
}

func (r NovedadEventual) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["idModelo"], err = json.Marshal(r.IdModelo)
	if err != nil {
		return nil, err
	}
	output["destinatarioEmail"], err = json.Marshal(r.DestinatarioEmail)
	if err != nil {
		return nil, err
	}
	output["destinatarioTelefono"], err = json.Marshal(r.DestinatarioTelefono)
	if err != nil {
		return nil, err
	}
	output["canal"], err = json.Marshal(r.Canal)
	if err != nil {
		return nil, err
	}
	output["codigoDeEnvio"], err = json.Marshal(r.CodigoDeEnvio)
	if err != nil {
		return nil, err
	}
	output["sucursalActual"], err = json.Marshal(r.SucursalActual)
	if err != nil {
		return nil, err
	}
	output["segmento"], err = json.Marshal(r.Segmento)
	if err != nil {
		return nil, err
	}
	output["cliente"], err = json.Marshal(r.Cliente)
	if err != nil {
		return nil, err
	}
	output["codigoDeContratoInterno"], err = json.Marshal(r.CodigoDeContratoInterno)
	if err != nil {
		return nil, err
	}
	output["tipoContacto"], err = json.Marshal(r.TipoContacto)
	if err != nil {
		return nil, err
	}
	output["codigoPostal"], err = json.Marshal(r.CodigoPostal)
	if err != nil {
		return nil, err
	}
	output["provincia"], err = json.Marshal(r.Provincia)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *NovedadEventual) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["idModelo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdModelo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for idModelo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["destinatarioEmail"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinatarioEmail); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for destinatarioEmail")
	}
	val = func() json.RawMessage {
		if v, ok := fields["destinatarioTelefono"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinatarioTelefono); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for destinatarioTelefono")
	}
	val = func() json.RawMessage {
		if v, ok := fields["canal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Canal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for canal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoDeEnvio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoDeEnvio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for codigoDeEnvio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["sucursalActual"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SucursalActual); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for sucursalActual")
	}
	val = func() json.RawMessage {
		if v, ok := fields["segmento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Segmento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for segmento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["cliente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cliente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for cliente")
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoDeContratoInterno"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoDeContratoInterno); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for codigoDeContratoInterno")
	}
	val = func() json.RawMessage {
		if v, ok := fields["tipoContacto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoContacto); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for tipoContacto")
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoPostal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoPostal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for codigoPostal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["provincia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Provincia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for provincia")
	}
	return nil
}
