// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     AvisoCustodia.avsc
 */
package NotificacionesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type AvisoCustodia struct {
	Sistema string `json:"sistema"`

	CodigoDeEnvio string `json:"codigoDeEnvio"`

	NombreDestinatario string `json:"nombreDestinatario"`

	Cuando int64 `json:"cuando"`

	FechaIngresoCustodia int64 `json:"fechaIngresoCustodia"`

	FechaVencimientoCustodia *UnionNullString `json:"fechaVencimientoCustodia"`

	SucursalActual Sucursal `json:"sucursalActual"`
}

const AvisoCustodiaAvroCRC64Fingerprint = "\x91\xed\xe1\xf0\xf5r\xf4\xaf"

func NewAvisoCustodia() AvisoCustodia {
	r := AvisoCustodia{}
	r.FechaVencimientoCustodia = nil
	r.SucursalActual = NewSucursal()

	return r
}

func DeserializeAvisoCustodia(r io.Reader) (AvisoCustodia, error) {
	t := NewAvisoCustodia()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAvisoCustodiaFromSchema(r io.Reader, schema string) (AvisoCustodia, error) {
	t := NewAvisoCustodia()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAvisoCustodia(r AvisoCustodia, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Sistema, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodigoDeEnvio, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NombreDestinatario, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Cuando, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.FechaIngresoCustodia, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.FechaVencimientoCustodia, w)
	if err != nil {
		return err
	}
	err = writeSucursal(r.SucursalActual, w)
	if err != nil {
		return err
	}
	return err
}

func (r AvisoCustodia) Serialize(w io.Writer) error {
	return writeAvisoCustodia(r, w)
}

func (r AvisoCustodia) Schema() string {
	return "{\"fields\":[{\"name\":\"sistema\",\"type\":\"string\"},{\"name\":\"codigoDeEnvio\",\"type\":\"string\"},{\"name\":\"nombreDestinatario\",\"type\":\"string\"},{\"name\":\"cuando\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"fechaIngresoCustodia\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"default\":null,\"name\":\"fechaVencimientoCustodia\",\"type\":[\"null\",\"string\"]},{\"name\":\"sucursalActual\",\"type\":{\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"codigo\",\"type\":\"string\"},{\"name\":\"descripcion\",\"type\":\"string\"},{\"name\":\"direccion\",\"type\":\"string\"},{\"name\":\"horarioAtencion\",\"type\":\"string\"},{\"name\":\"codigoPostal\",\"type\":\"string\"}],\"name\":\"Sucursal\",\"type\":\"record\"}}],\"name\":\"Andreani.Notificaciones.Events.Records.AvisoCustodia\",\"type\":\"record\"}"
}

func (r AvisoCustodia) SchemaName() string {
	return "Andreani.Notificaciones.Events.Records.AvisoCustodia"
}

func (_ AvisoCustodia) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ AvisoCustodia) SetInt(v int32)       { panic("Unsupported operation") }
func (_ AvisoCustodia) SetLong(v int64)      { panic("Unsupported operation") }
func (_ AvisoCustodia) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ AvisoCustodia) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ AvisoCustodia) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ AvisoCustodia) SetString(v string)   { panic("Unsupported operation") }
func (_ AvisoCustodia) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *AvisoCustodia) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Sistema}

		return w

	case 1:
		w := types.String{Target: &r.CodigoDeEnvio}

		return w

	case 2:
		w := types.String{Target: &r.NombreDestinatario}

		return w

	case 3:
		w := types.Long{Target: &r.Cuando}

		return w

	case 4:
		w := types.Long{Target: &r.FechaIngresoCustodia}

		return w

	case 5:
		r.FechaVencimientoCustodia = NewUnionNullString()

		return r.FechaVencimientoCustodia
	case 6:
		r.SucursalActual = NewSucursal()

		w := types.Record{Target: &r.SucursalActual}

		return w

	}
	panic("Unknown field index")
}

func (r *AvisoCustodia) SetDefault(i int) {
	switch i {
	case 5:
		r.FechaVencimientoCustodia = nil
		return
	}
	panic("Unknown field index")
}

func (r *AvisoCustodia) NullField(i int) {
	switch i {
	case 5:
		r.FechaVencimientoCustodia = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ AvisoCustodia) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ AvisoCustodia) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ AvisoCustodia) HintSize(int)                     { panic("Unsupported operation") }
func (_ AvisoCustodia) Finalize()                        {}

func (_ AvisoCustodia) AvroCRC64Fingerprint() []byte {
	return []byte(AvisoCustodiaAvroCRC64Fingerprint)
}

func (r AvisoCustodia) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["sistema"], err = json.Marshal(r.Sistema)
	if err != nil {
		return nil, err
	}
	output["codigoDeEnvio"], err = json.Marshal(r.CodigoDeEnvio)
	if err != nil {
		return nil, err
	}
	output["nombreDestinatario"], err = json.Marshal(r.NombreDestinatario)
	if err != nil {
		return nil, err
	}
	output["cuando"], err = json.Marshal(r.Cuando)
	if err != nil {
		return nil, err
	}
	output["fechaIngresoCustodia"], err = json.Marshal(r.FechaIngresoCustodia)
	if err != nil {
		return nil, err
	}
	output["fechaVencimientoCustodia"], err = json.Marshal(r.FechaVencimientoCustodia)
	if err != nil {
		return nil, err
	}
	output["sucursalActual"], err = json.Marshal(r.SucursalActual)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *AvisoCustodia) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["sistema"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sistema); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for sistema")
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoDeEnvio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoDeEnvio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for codigoDeEnvio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["nombreDestinatario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NombreDestinatario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for nombreDestinatario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["cuando"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cuando); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for cuando")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaIngresoCustodia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaIngresoCustodia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fechaIngresoCustodia")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaVencimientoCustodia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaVencimientoCustodia); err != nil {
			return err
		}
	} else {
		r.FechaVencimientoCustodia = NewUnionNullString()

		r.FechaVencimientoCustodia = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["sucursalActual"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SucursalActual); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for sucursalActual")
	}
	return nil
}
