// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     NotificacionesMKT.avsc
 */
package NotificacionesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type NotificacionesMKT struct {
	IdModelo int64 `json:"idModelo"`

	ClienteId string `json:"clienteId"`

	Destinatario string `json:"destinatario"`

	ClienteNombre string `json:"clienteNombre"`

	FechaNotificacion int64 `json:"fechaNotificacion"`

	FechaEvento int64 `json:"fechaEvento"`

	DestinatarioEstado string `json:"destinatarioEstado"`

	DestinatarioObservacion string `json:"destinatarioObservacion"`

	IdEvento int32 `json:"idEvento"`

	DestinatarioNotificacion string `json:"destinatarioNotificacion"`
}

const NotificacionesMKTAvroCRC64Fingerprint = "\xae\xd3\xc9C\x86(>\x95"

func NewNotificacionesMKT() NotificacionesMKT {
	r := NotificacionesMKT{}
	return r
}

func DeserializeNotificacionesMKT(r io.Reader) (NotificacionesMKT, error) {
	t := NewNotificacionesMKT()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeNotificacionesMKTFromSchema(r io.Reader, schema string) (NotificacionesMKT, error) {
	t := NewNotificacionesMKT()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeNotificacionesMKT(r NotificacionesMKT, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.IdModelo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ClienteId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Destinatario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ClienteNombre, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.FechaNotificacion, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.FechaEvento, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.DestinatarioEstado, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.DestinatarioObservacion, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.IdEvento, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.DestinatarioNotificacion, w)
	if err != nil {
		return err
	}
	return err
}

func (r NotificacionesMKT) Serialize(w io.Writer) error {
	return writeNotificacionesMKT(r, w)
}

func (r NotificacionesMKT) Schema() string {
	return "{\"fields\":[{\"name\":\"idModelo\",\"type\":\"long\"},{\"name\":\"clienteId\",\"type\":\"string\"},{\"name\":\"destinatario\",\"type\":\"string\"},{\"name\":\"clienteNombre\",\"type\":\"string\"},{\"name\":\"fechaNotificacion\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"fechaEvento\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"destinatarioEstado\",\"type\":\"string\"},{\"name\":\"destinatarioObservacion\",\"type\":\"string\"},{\"name\":\"idEvento\",\"type\":\"int\"},{\"name\":\"destinatarioNotificacion\",\"type\":\"string\"}],\"name\":\"Andreani.Notificaciones.Events.Records.NotificacionesMKT\",\"type\":\"record\"}"
}

func (r NotificacionesMKT) SchemaName() string {
	return "Andreani.Notificaciones.Events.Records.NotificacionesMKT"
}

func (_ NotificacionesMKT) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ NotificacionesMKT) SetInt(v int32)       { panic("Unsupported operation") }
func (_ NotificacionesMKT) SetLong(v int64)      { panic("Unsupported operation") }
func (_ NotificacionesMKT) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ NotificacionesMKT) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ NotificacionesMKT) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ NotificacionesMKT) SetString(v string)   { panic("Unsupported operation") }
func (_ NotificacionesMKT) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *NotificacionesMKT) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Long{Target: &r.IdModelo}

		return w

	case 1:
		w := types.String{Target: &r.ClienteId}

		return w

	case 2:
		w := types.String{Target: &r.Destinatario}

		return w

	case 3:
		w := types.String{Target: &r.ClienteNombre}

		return w

	case 4:
		w := types.Long{Target: &r.FechaNotificacion}

		return w

	case 5:
		w := types.Long{Target: &r.FechaEvento}

		return w

	case 6:
		w := types.String{Target: &r.DestinatarioEstado}

		return w

	case 7:
		w := types.String{Target: &r.DestinatarioObservacion}

		return w

	case 8:
		w := types.Int{Target: &r.IdEvento}

		return w

	case 9:
		w := types.String{Target: &r.DestinatarioNotificacion}

		return w

	}
	panic("Unknown field index")
}

func (r *NotificacionesMKT) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *NotificacionesMKT) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ NotificacionesMKT) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ NotificacionesMKT) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ NotificacionesMKT) HintSize(int)                     { panic("Unsupported operation") }
func (_ NotificacionesMKT) Finalize()                        {}

func (_ NotificacionesMKT) AvroCRC64Fingerprint() []byte {
	return []byte(NotificacionesMKTAvroCRC64Fingerprint)
}

func (r NotificacionesMKT) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["idModelo"], err = json.Marshal(r.IdModelo)
	if err != nil {
		return nil, err
	}
	output["clienteId"], err = json.Marshal(r.ClienteId)
	if err != nil {
		return nil, err
	}
	output["destinatario"], err = json.Marshal(r.Destinatario)
	if err != nil {
		return nil, err
	}
	output["clienteNombre"], err = json.Marshal(r.ClienteNombre)
	if err != nil {
		return nil, err
	}
	output["fechaNotificacion"], err = json.Marshal(r.FechaNotificacion)
	if err != nil {
		return nil, err
	}
	output["fechaEvento"], err = json.Marshal(r.FechaEvento)
	if err != nil {
		return nil, err
	}
	output["destinatarioEstado"], err = json.Marshal(r.DestinatarioEstado)
	if err != nil {
		return nil, err
	}
	output["destinatarioObservacion"], err = json.Marshal(r.DestinatarioObservacion)
	if err != nil {
		return nil, err
	}
	output["idEvento"], err = json.Marshal(r.IdEvento)
	if err != nil {
		return nil, err
	}
	output["destinatarioNotificacion"], err = json.Marshal(r.DestinatarioNotificacion)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *NotificacionesMKT) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["idModelo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdModelo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for idModelo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["clienteId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ClienteId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for clienteId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["destinatario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Destinatario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for destinatario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["clienteNombre"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ClienteNombre); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for clienteNombre")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaNotificacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaNotificacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fechaNotificacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaEvento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaEvento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fechaEvento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["destinatarioEstado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinatarioEstado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for destinatarioEstado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["destinatarioObservacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinatarioObservacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for destinatarioObservacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["idEvento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdEvento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for idEvento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["destinatarioNotificacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinatarioNotificacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for destinatarioNotificacion")
	}
	return nil
}
