// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     NotificacionFord.avsc
 */
package NotificacionesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullMaestroConcesionarioTypeEnum int

const (
	UnionNullMaestroConcesionarioTypeEnumMaestroConcesionario UnionNullMaestroConcesionarioTypeEnum = 1
)

type UnionNullMaestroConcesionario struct {
	Null                 *types.NullVal
	MaestroConcesionario MaestroConcesionario
	UnionType            UnionNullMaestroConcesionarioTypeEnum
}

func writeUnionNullMaestroConcesionario(r *UnionNullMaestroConcesionario, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullMaestroConcesionarioTypeEnumMaestroConcesionario:
		return writeMaestroConcesionario(r.MaestroConcesionario, w)
	}
	return fmt.Errorf("invalid value for *UnionNullMaestroConcesionario")
}

func NewUnionNullMaestroConcesionario() *UnionNullMaestroConcesionario {
	return &UnionNullMaestroConcesionario{}
}

func (r *UnionNullMaestroConcesionario) Serialize(w io.Writer) error {
	return writeUnionNullMaestroConcesionario(r, w)
}

func DeserializeUnionNullMaestroConcesionario(r io.Reader) (*UnionNullMaestroConcesionario, error) {
	t := NewUnionNullMaestroConcesionario()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullMaestroConcesionarioFromSchema(r io.Reader, schema string) (*UnionNullMaestroConcesionario, error) {
	t := NewUnionNullMaestroConcesionario()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullMaestroConcesionario) Schema() string {
	return "[\"null\",{\"fields\":[{\"default\":null,\"name\":\"id_concesionario\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"razon_social\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"direccion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"localidad\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"provincia\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"cp_origen\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"cp_destino\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"codigo_cliente\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"contrato\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"sla\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"corte_horario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"email_1\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"email_2\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"email_3\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"email_4\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"email_5\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"email_6\",\"type\":[\"null\",\"string\"]}],\"name\":\"MaestroConcesionario\",\"type\":\"record\"}]"
}

func (_ *UnionNullMaestroConcesionario) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullMaestroConcesionario) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullMaestroConcesionario) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullMaestroConcesionario) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullMaestroConcesionario) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullMaestroConcesionario) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullMaestroConcesionario) SetLong(v int64) {

	r.UnionType = (UnionNullMaestroConcesionarioTypeEnum)(v)
}

func (r *UnionNullMaestroConcesionario) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.MaestroConcesionario = NewMaestroConcesionario()
		return &types.Record{Target: (&r.MaestroConcesionario)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullMaestroConcesionario) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullMaestroConcesionario) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullMaestroConcesionario) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullMaestroConcesionario) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullMaestroConcesionario) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *UnionNullMaestroConcesionario) Finalize()                {}

func (r *UnionNullMaestroConcesionario) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullMaestroConcesionarioTypeEnumMaestroConcesionario:
		return json.Marshal(map[string]interface{}{"Andreani.Notificaciones.Events.Records.MaestroConcesionario": r.MaestroConcesionario})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullMaestroConcesionario")
}

func (r *UnionNullMaestroConcesionario) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["Andreani.Notificaciones.Events.Records.MaestroConcesionario"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.MaestroConcesionario)
	}
	return fmt.Errorf("invalid value for *UnionNullMaestroConcesionario")
}
