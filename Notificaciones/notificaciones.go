// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Notificaciones.avsc
 */
package NotificacionesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Notificaciones struct {
	Id string `json:"Id"`

	IdModelo int64 `json:"IdModelo"`

	FechaNotificacion int64 `json:"FechaNotificacion"`

	FechaEvento int64 `json:"FechaEvento"`

	IdSistema int32 `json:"IdSistema"`

	Sistema string `json:"Sistema"`

	Contrato string `json:"Contrato"`

	Envio string `json:"Envio"`

	IdEvento int32 `json:"IdEvento"`

	Evento string `json:"Evento"`

	IdMotivo *UnionNullInt `json:"IdMotivo"`

	Motivo *UnionNullString `json:"Motivo"`

	IdSalida int32 `json:"IdSalida"`

	Salida string `json:"Salida"`

	UrlSalida string `json:"UrlSalida"`

	Destinatario *UnionNullString `json:"Destinatario"`

	DestinatarioNotificacion *UnionNullString `json:"DestinatarioNotificacion"`

	DestinatarioEstado *UnionNullString `json:"DestinatarioEstado"`

	DestinatarioObservacion *UnionNullString `json:"DestinatarioObservacion"`

	Remitente *UnionNullString `json:"Remitente"`

	RemitenteNotificacion *UnionNullString `json:"RemitenteNotificacion"`

	RemitenteEstado *UnionNullString `json:"RemitenteEstado"`

	RemitenteObservacion *UnionNullString `json:"RemitenteObservacion"`

	DestinatarioNotificacionCaracteres *UnionNullInt `json:"DestinatarioNotificacionCaracteres"`

	RemitenteNotificacionCaracteres *UnionNullInt `json:"RemitenteNotificacionCaracteres"`

	ProveedorSMS *UnionNullString `json:"ProveedorSMS"`
}

const NotificacionesAvroCRC64Fingerprint = ",\xc4o\a’Ñ\xfb\xfa"

func NewNotificaciones() Notificaciones {
	r := Notificaciones{}
	r.IdMotivo = nil
	r.Motivo = nil
	r.Destinatario = nil
	r.DestinatarioNotificacion = nil
	r.DestinatarioEstado = nil
	r.DestinatarioObservacion = nil
	r.Remitente = nil
	r.RemitenteNotificacion = nil
	r.RemitenteEstado = nil
	r.RemitenteObservacion = nil
	r.DestinatarioNotificacionCaracteres = nil
	r.RemitenteNotificacionCaracteres = nil
	r.ProveedorSMS = nil
	return r
}

func DeserializeNotificaciones(r io.Reader) (Notificaciones, error) {
	t := NewNotificaciones()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeNotificacionesFromSchema(r io.Reader, schema string) (Notificaciones, error) {
	t := NewNotificaciones()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeNotificaciones(r Notificaciones, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.IdModelo, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.FechaNotificacion, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.FechaEvento, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.IdSistema, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Sistema, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Contrato, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Envio, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.IdEvento, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Evento, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.IdMotivo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Motivo, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.IdSalida, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Salida, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.UrlSalida, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Destinatario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DestinatarioNotificacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DestinatarioEstado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DestinatarioObservacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Remitente, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.RemitenteNotificacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.RemitenteEstado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.RemitenteObservacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.DestinatarioNotificacionCaracteres, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.RemitenteNotificacionCaracteres, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ProveedorSMS, w)
	if err != nil {
		return err
	}
	return err
}

func (r Notificaciones) Serialize(w io.Writer) error {
	return writeNotificaciones(r, w)
}

func (r Notificaciones) Schema() string {
	return "{\"fields\":[{\"name\":\"Id\",\"type\":\"string\"},{\"name\":\"IdModelo\",\"type\":\"long\"},{\"name\":\"FechaNotificacion\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"FechaEvento\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"IdSistema\",\"type\":\"int\"},{\"name\":\"Sistema\",\"type\":\"string\"},{\"name\":\"Contrato\",\"type\":\"string\"},{\"name\":\"Envio\",\"type\":\"string\"},{\"name\":\"IdEvento\",\"type\":\"int\"},{\"name\":\"Evento\",\"type\":\"string\"},{\"default\":null,\"name\":\"IdMotivo\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"Motivo\",\"type\":[\"null\",\"string\"]},{\"name\":\"IdSalida\",\"type\":\"int\"},{\"name\":\"Salida\",\"type\":\"string\"},{\"name\":\"UrlSalida\",\"type\":\"string\"},{\"default\":null,\"name\":\"Destinatario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"DestinatarioNotificacion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"DestinatarioEstado\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"DestinatarioObservacion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Remitente\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"RemitenteNotificacion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"RemitenteEstado\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"RemitenteObservacion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"DestinatarioNotificacionCaracteres\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"RemitenteNotificacionCaracteres\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"ProveedorSMS\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.Notificaciones.Events.Records.Notificaciones\",\"type\":\"record\"}"
}

func (r Notificaciones) SchemaName() string {
	return "Andreani.Notificaciones.Events.Records.Notificaciones"
}

func (_ Notificaciones) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Notificaciones) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Notificaciones) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Notificaciones) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Notificaciones) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Notificaciones) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Notificaciones) SetString(v string)   { panic("Unsupported operation") }
func (_ Notificaciones) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Notificaciones) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Id}

		return w

	case 1:
		w := types.Long{Target: &r.IdModelo}

		return w

	case 2:
		w := types.Long{Target: &r.FechaNotificacion}

		return w

	case 3:
		w := types.Long{Target: &r.FechaEvento}

		return w

	case 4:
		w := types.Int{Target: &r.IdSistema}

		return w

	case 5:
		w := types.String{Target: &r.Sistema}

		return w

	case 6:
		w := types.String{Target: &r.Contrato}

		return w

	case 7:
		w := types.String{Target: &r.Envio}

		return w

	case 8:
		w := types.Int{Target: &r.IdEvento}

		return w

	case 9:
		w := types.String{Target: &r.Evento}

		return w

	case 10:
		r.IdMotivo = NewUnionNullInt()

		return r.IdMotivo
	case 11:
		r.Motivo = NewUnionNullString()

		return r.Motivo
	case 12:
		w := types.Int{Target: &r.IdSalida}

		return w

	case 13:
		w := types.String{Target: &r.Salida}

		return w

	case 14:
		w := types.String{Target: &r.UrlSalida}

		return w

	case 15:
		r.Destinatario = NewUnionNullString()

		return r.Destinatario
	case 16:
		r.DestinatarioNotificacion = NewUnionNullString()

		return r.DestinatarioNotificacion
	case 17:
		r.DestinatarioEstado = NewUnionNullString()

		return r.DestinatarioEstado
	case 18:
		r.DestinatarioObservacion = NewUnionNullString()

		return r.DestinatarioObservacion
	case 19:
		r.Remitente = NewUnionNullString()

		return r.Remitente
	case 20:
		r.RemitenteNotificacion = NewUnionNullString()

		return r.RemitenteNotificacion
	case 21:
		r.RemitenteEstado = NewUnionNullString()

		return r.RemitenteEstado
	case 22:
		r.RemitenteObservacion = NewUnionNullString()

		return r.RemitenteObservacion
	case 23:
		r.DestinatarioNotificacionCaracteres = NewUnionNullInt()

		return r.DestinatarioNotificacionCaracteres
	case 24:
		r.RemitenteNotificacionCaracteres = NewUnionNullInt()

		return r.RemitenteNotificacionCaracteres
	case 25:
		r.ProveedorSMS = NewUnionNullString()

		return r.ProveedorSMS
	}
	panic("Unknown field index")
}

func (r *Notificaciones) SetDefault(i int) {
	switch i {
	case 10:
		r.IdMotivo = nil
		return
	case 11:
		r.Motivo = nil
		return
	case 15:
		r.Destinatario = nil
		return
	case 16:
		r.DestinatarioNotificacion = nil
		return
	case 17:
		r.DestinatarioEstado = nil
		return
	case 18:
		r.DestinatarioObservacion = nil
		return
	case 19:
		r.Remitente = nil
		return
	case 20:
		r.RemitenteNotificacion = nil
		return
	case 21:
		r.RemitenteEstado = nil
		return
	case 22:
		r.RemitenteObservacion = nil
		return
	case 23:
		r.DestinatarioNotificacionCaracteres = nil
		return
	case 24:
		r.RemitenteNotificacionCaracteres = nil
		return
	case 25:
		r.ProveedorSMS = nil
		return
	}
	panic("Unknown field index")
}

func (r *Notificaciones) NullField(i int) {
	switch i {
	case 10:
		r.IdMotivo = nil
		return
	case 11:
		r.Motivo = nil
		return
	case 15:
		r.Destinatario = nil
		return
	case 16:
		r.DestinatarioNotificacion = nil
		return
	case 17:
		r.DestinatarioEstado = nil
		return
	case 18:
		r.DestinatarioObservacion = nil
		return
	case 19:
		r.Remitente = nil
		return
	case 20:
		r.RemitenteNotificacion = nil
		return
	case 21:
		r.RemitenteEstado = nil
		return
	case 22:
		r.RemitenteObservacion = nil
		return
	case 23:
		r.DestinatarioNotificacionCaracteres = nil
		return
	case 24:
		r.RemitenteNotificacionCaracteres = nil
		return
	case 25:
		r.ProveedorSMS = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Notificaciones) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Notificaciones) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Notificaciones) HintSize(int)                     { panic("Unsupported operation") }
func (_ Notificaciones) Finalize()                        {}

func (_ Notificaciones) AvroCRC64Fingerprint() []byte {
	return []byte(NotificacionesAvroCRC64Fingerprint)
}

func (r Notificaciones) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["IdModelo"], err = json.Marshal(r.IdModelo)
	if err != nil {
		return nil, err
	}
	output["FechaNotificacion"], err = json.Marshal(r.FechaNotificacion)
	if err != nil {
		return nil, err
	}
	output["FechaEvento"], err = json.Marshal(r.FechaEvento)
	if err != nil {
		return nil, err
	}
	output["IdSistema"], err = json.Marshal(r.IdSistema)
	if err != nil {
		return nil, err
	}
	output["Sistema"], err = json.Marshal(r.Sistema)
	if err != nil {
		return nil, err
	}
	output["Contrato"], err = json.Marshal(r.Contrato)
	if err != nil {
		return nil, err
	}
	output["Envio"], err = json.Marshal(r.Envio)
	if err != nil {
		return nil, err
	}
	output["IdEvento"], err = json.Marshal(r.IdEvento)
	if err != nil {
		return nil, err
	}
	output["Evento"], err = json.Marshal(r.Evento)
	if err != nil {
		return nil, err
	}
	output["IdMotivo"], err = json.Marshal(r.IdMotivo)
	if err != nil {
		return nil, err
	}
	output["Motivo"], err = json.Marshal(r.Motivo)
	if err != nil {
		return nil, err
	}
	output["IdSalida"], err = json.Marshal(r.IdSalida)
	if err != nil {
		return nil, err
	}
	output["Salida"], err = json.Marshal(r.Salida)
	if err != nil {
		return nil, err
	}
	output["UrlSalida"], err = json.Marshal(r.UrlSalida)
	if err != nil {
		return nil, err
	}
	output["Destinatario"], err = json.Marshal(r.Destinatario)
	if err != nil {
		return nil, err
	}
	output["DestinatarioNotificacion"], err = json.Marshal(r.DestinatarioNotificacion)
	if err != nil {
		return nil, err
	}
	output["DestinatarioEstado"], err = json.Marshal(r.DestinatarioEstado)
	if err != nil {
		return nil, err
	}
	output["DestinatarioObservacion"], err = json.Marshal(r.DestinatarioObservacion)
	if err != nil {
		return nil, err
	}
	output["Remitente"], err = json.Marshal(r.Remitente)
	if err != nil {
		return nil, err
	}
	output["RemitenteNotificacion"], err = json.Marshal(r.RemitenteNotificacion)
	if err != nil {
		return nil, err
	}
	output["RemitenteEstado"], err = json.Marshal(r.RemitenteEstado)
	if err != nil {
		return nil, err
	}
	output["RemitenteObservacion"], err = json.Marshal(r.RemitenteObservacion)
	if err != nil {
		return nil, err
	}
	output["DestinatarioNotificacionCaracteres"], err = json.Marshal(r.DestinatarioNotificacionCaracteres)
	if err != nil {
		return nil, err
	}
	output["RemitenteNotificacionCaracteres"], err = json.Marshal(r.RemitenteNotificacionCaracteres)
	if err != nil {
		return nil, err
	}
	output["ProveedorSMS"], err = json.Marshal(r.ProveedorSMS)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Notificaciones) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdModelo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdModelo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdModelo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaNotificacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaNotificacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FechaNotificacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaEvento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaEvento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FechaEvento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdSistema"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdSistema); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdSistema")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Sistema"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sistema); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Sistema")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Contrato"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contrato); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Contrato")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Envio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Envio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Envio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdEvento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdEvento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdEvento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Evento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Evento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Evento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdMotivo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdMotivo); err != nil {
			return err
		}
	} else {
		r.IdMotivo = NewUnionNullInt()

		r.IdMotivo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Motivo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Motivo); err != nil {
			return err
		}
	} else {
		r.Motivo = NewUnionNullString()

		r.Motivo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdSalida"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdSalida); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdSalida")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Salida"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Salida); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Salida")
	}
	val = func() json.RawMessage {
		if v, ok := fields["UrlSalida"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UrlSalida); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for UrlSalida")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Destinatario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Destinatario); err != nil {
			return err
		}
	} else {
		r.Destinatario = NewUnionNullString()

		r.Destinatario = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["DestinatarioNotificacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinatarioNotificacion); err != nil {
			return err
		}
	} else {
		r.DestinatarioNotificacion = NewUnionNullString()

		r.DestinatarioNotificacion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["DestinatarioEstado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinatarioEstado); err != nil {
			return err
		}
	} else {
		r.DestinatarioEstado = NewUnionNullString()

		r.DestinatarioEstado = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["DestinatarioObservacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinatarioObservacion); err != nil {
			return err
		}
	} else {
		r.DestinatarioObservacion = NewUnionNullString()

		r.DestinatarioObservacion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Remitente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Remitente); err != nil {
			return err
		}
	} else {
		r.Remitente = NewUnionNullString()

		r.Remitente = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["RemitenteNotificacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RemitenteNotificacion); err != nil {
			return err
		}
	} else {
		r.RemitenteNotificacion = NewUnionNullString()

		r.RemitenteNotificacion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["RemitenteEstado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RemitenteEstado); err != nil {
			return err
		}
	} else {
		r.RemitenteEstado = NewUnionNullString()

		r.RemitenteEstado = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["RemitenteObservacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RemitenteObservacion); err != nil {
			return err
		}
	} else {
		r.RemitenteObservacion = NewUnionNullString()

		r.RemitenteObservacion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["DestinatarioNotificacionCaracteres"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinatarioNotificacionCaracteres); err != nil {
			return err
		}
	} else {
		r.DestinatarioNotificacionCaracteres = NewUnionNullInt()

		r.DestinatarioNotificacionCaracteres = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["RemitenteNotificacionCaracteres"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RemitenteNotificacionCaracteres); err != nil {
			return err
		}
	} else {
		r.RemitenteNotificacionCaracteres = NewUnionNullInt()

		r.RemitenteNotificacionCaracteres = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ProveedorSMS"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ProveedorSMS); err != nil {
			return err
		}
	} else {
		r.ProveedorSMS = NewUnionNullString()

		r.ProveedorSMS = nil
	}
	return nil
}
