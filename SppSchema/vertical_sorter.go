// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     VerticalSorter.avsc
 */
package SppSchemaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type VerticalSorter struct {
	Datos string `json:"Datos"`

	Fecha string `json:"Fecha"`

	Id int32 `json:"Id"`

	TipoEvento string `json:"TipoEvento"`

	Origen string `json:"Origen"`
}

const VerticalSorterAvroCRC64Fingerprint = "\x12\xb6\xd8\xea\xe6\xc8c\xed"

func NewVerticalSorter() VerticalSorter {
	r := VerticalSorter{}
	return r
}

func DeserializeVerticalSorter(r io.Reader) (VerticalSorter, error) {
	t := NewVerticalSorter()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeVerticalSorterFromSchema(r io.Reader, schema string) (VerticalSorter, error) {
	t := NewVerticalSorter()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeVerticalSorter(r VerticalSorter, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Datos, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Fecha, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.TipoEvento, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Origen, w)
	if err != nil {
		return err
	}
	return err
}

func (r VerticalSorter) Serialize(w io.Writer) error {
	return writeVerticalSorter(r, w)
}

func (r VerticalSorter) Schema() string {
	return "{\"fields\":[{\"name\":\"Datos\",\"type\":\"string\"},{\"name\":\"Fecha\",\"type\":\"string\"},{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"TipoEvento\",\"type\":\"string\"},{\"name\":\"Origen\",\"type\":\"string\"}],\"name\":\"Andreani.SppSchema.Events.VerticalSorter\",\"type\":\"record\"}"
}

func (r VerticalSorter) SchemaName() string {
	return "Andreani.SppSchema.Events.VerticalSorter"
}

func (_ VerticalSorter) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ VerticalSorter) SetInt(v int32)       { panic("Unsupported operation") }
func (_ VerticalSorter) SetLong(v int64)      { panic("Unsupported operation") }
func (_ VerticalSorter) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ VerticalSorter) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ VerticalSorter) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ VerticalSorter) SetString(v string)   { panic("Unsupported operation") }
func (_ VerticalSorter) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *VerticalSorter) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Datos}

		return w

	case 1:
		w := types.String{Target: &r.Fecha}

		return w

	case 2:
		w := types.Int{Target: &r.Id}

		return w

	case 3:
		w := types.String{Target: &r.TipoEvento}

		return w

	case 4:
		w := types.String{Target: &r.Origen}

		return w

	}
	panic("Unknown field index")
}

func (r *VerticalSorter) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *VerticalSorter) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ VerticalSorter) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ VerticalSorter) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ VerticalSorter) HintSize(int)                     { panic("Unsupported operation") }
func (_ VerticalSorter) Finalize()                        {}

func (_ VerticalSorter) AvroCRC64Fingerprint() []byte {
	return []byte(VerticalSorterAvroCRC64Fingerprint)
}

func (r VerticalSorter) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Datos"], err = json.Marshal(r.Datos)
	if err != nil {
		return nil, err
	}
	output["Fecha"], err = json.Marshal(r.Fecha)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["TipoEvento"], err = json.Marshal(r.TipoEvento)
	if err != nil {
		return nil, err
	}
	output["Origen"], err = json.Marshal(r.Origen)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *VerticalSorter) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Datos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Datos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Datos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Fecha"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Fecha); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Fecha")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoEvento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoEvento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoEvento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Origen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Origen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Origen")
	}
	return nil
}
