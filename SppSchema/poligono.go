// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Poligono.avsc
 */
package SppSchemaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Poligono struct {
	Resolution8 *UnionNullString `json:"resolution8"`

	Resolution9 *UnionNullString `json:"resolution9"`

	Resolution10 *UnionNullString `json:"resolution10"`

	Resolution11 *UnionNullString `json:"resolution11"`

	Resolution12 *UnionNullString `json:"resolution12"`
}

const PoligonoAvroCRC64Fingerprint = "\v\xde\f…ë\x02^\xda"

func NewPoligono() Poligono {
	r := Poligono{}
	r.Resolution8 = nil
	r.Resolution9 = nil
	r.Resolution10 = nil
	r.Resolution11 = nil
	r.Resolution12 = nil
	return r
}

func DeserializePoligono(r io.Reader) (Poligono, error) {
	t := NewPoligono()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePoligonoFromSchema(r io.Reader, schema string) (Poligono, error) {
	t := NewPoligono()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePoligono(r Poligono, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Resolution8, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Resolution9, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Resolution10, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Resolution11, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Resolution12, w)
	if err != nil {
		return err
	}
	return err
}

func (r Poligono) Serialize(w io.Writer) error {
	return writePoligono(r, w)
}

func (r Poligono) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"resolution8\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"resolution9\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"resolution10\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"resolution11\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"resolution12\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.SppSchema.Events.Poligono\",\"type\":\"record\"}"
}

func (r Poligono) SchemaName() string {
	return "Andreani.SppSchema.Events.Poligono"
}

func (_ Poligono) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Poligono) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Poligono) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Poligono) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Poligono) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Poligono) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Poligono) SetString(v string)   { panic("Unsupported operation") }
func (_ Poligono) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Poligono) Get(i int) types.Field {
	switch i {
	case 0:
		r.Resolution8 = NewUnionNullString()

		return r.Resolution8
	case 1:
		r.Resolution9 = NewUnionNullString()

		return r.Resolution9
	case 2:
		r.Resolution10 = NewUnionNullString()

		return r.Resolution10
	case 3:
		r.Resolution11 = NewUnionNullString()

		return r.Resolution11
	case 4:
		r.Resolution12 = NewUnionNullString()

		return r.Resolution12
	}
	panic("Unknown field index")
}

func (r *Poligono) SetDefault(i int) {
	switch i {
	case 0:
		r.Resolution8 = nil
		return
	case 1:
		r.Resolution9 = nil
		return
	case 2:
		r.Resolution10 = nil
		return
	case 3:
		r.Resolution11 = nil
		return
	case 4:
		r.Resolution12 = nil
		return
	}
	panic("Unknown field index")
}

func (r *Poligono) NullField(i int) {
	switch i {
	case 0:
		r.Resolution8 = nil
		return
	case 1:
		r.Resolution9 = nil
		return
	case 2:
		r.Resolution10 = nil
		return
	case 3:
		r.Resolution11 = nil
		return
	case 4:
		r.Resolution12 = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Poligono) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Poligono) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Poligono) HintSize(int)                     { panic("Unsupported operation") }
func (_ Poligono) Finalize()                        {}

func (_ Poligono) AvroCRC64Fingerprint() []byte {
	return []byte(PoligonoAvroCRC64Fingerprint)
}

func (r Poligono) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["resolution8"], err = json.Marshal(r.Resolution8)
	if err != nil {
		return nil, err
	}
	output["resolution9"], err = json.Marshal(r.Resolution9)
	if err != nil {
		return nil, err
	}
	output["resolution10"], err = json.Marshal(r.Resolution10)
	if err != nil {
		return nil, err
	}
	output["resolution11"], err = json.Marshal(r.Resolution11)
	if err != nil {
		return nil, err
	}
	output["resolution12"], err = json.Marshal(r.Resolution12)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Poligono) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["resolution8"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Resolution8); err != nil {
			return err
		}
	} else {
		r.Resolution8 = NewUnionNullString()

		r.Resolution8 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["resolution9"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Resolution9); err != nil {
			return err
		}
	} else {
		r.Resolution9 = NewUnionNullString()

		r.Resolution9 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["resolution10"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Resolution10); err != nil {
			return err
		}
	} else {
		r.Resolution10 = NewUnionNullString()

		r.Resolution10 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["resolution11"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Resolution11); err != nil {
			return err
		}
	} else {
		r.Resolution11 = NewUnionNullString()

		r.Resolution11 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["resolution12"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Resolution12); err != nil {
			return err
		}
	} else {
		r.Resolution12 = NewUnionNullString()

		r.Resolution12 = nil
	}
	return nil
}
