// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     AsignacionCustodia.avsc
 */
package SppSchemaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type AsignacionCustodia struct {
	NumeroEnvio string `json:"numeroEnvio"`

	SucursalOrigen DatosSucursal `json:"sucursalOrigen"`

	SucursalDestino DatosSucursal `json:"sucursalDestino"`

	CodigoPostal string `json:"codigoPostal"`

	Fecha string `json:"fecha"`
}

const AsignacionCustodiaAvroCRC64Fingerprint = "Юه\x17L\r\xb1"

func NewAsignacionCustodia() AsignacionCustodia {
	r := AsignacionCustodia{}
	r.SucursalOrigen = NewDatosSucursal()

	r.SucursalDestino = NewDatosSucursal()

	return r
}

func DeserializeAsignacionCustodia(r io.Reader) (AsignacionCustodia, error) {
	t := NewAsignacionCustodia()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAsignacionCustodiaFromSchema(r io.Reader, schema string) (AsignacionCustodia, error) {
	t := NewAsignacionCustodia()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAsignacionCustodia(r AsignacionCustodia, w io.Writer) error {
	var err error
	err = vm.WriteString(r.NumeroEnvio, w)
	if err != nil {
		return err
	}
	err = writeDatosSucursal(r.SucursalOrigen, w)
	if err != nil {
		return err
	}
	err = writeDatosSucursal(r.SucursalDestino, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodigoPostal, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Fecha, w)
	if err != nil {
		return err
	}
	return err
}

func (r AsignacionCustodia) Serialize(w io.Writer) error {
	return writeAsignacionCustodia(r, w)
}

func (r AsignacionCustodia) Schema() string {
	return "{\"fields\":[{\"name\":\"numeroEnvio\",\"type\":\"string\"},{\"name\":\"sucursalOrigen\",\"type\":{\"fields\":[{\"name\":\"codigo\",\"type\":[\"null\",\"string\"]},{\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"name\":\"nombre\",\"type\":[\"null\",\"string\"]}],\"name\":\"DatosSucursal\",\"type\":\"record\"}},{\"name\":\"sucursalDestino\",\"type\":\"Andreani.SppSchema.Events.DatosSucursal\"},{\"name\":\"codigoPostal\",\"type\":\"string\"},{\"name\":\"fecha\",\"type\":\"string\"}],\"name\":\"Andreani.SppSchema.Events.AsignacionCustodia\",\"type\":\"record\"}"
}

func (r AsignacionCustodia) SchemaName() string {
	return "Andreani.SppSchema.Events.AsignacionCustodia"
}

func (_ AsignacionCustodia) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ AsignacionCustodia) SetInt(v int32)       { panic("Unsupported operation") }
func (_ AsignacionCustodia) SetLong(v int64)      { panic("Unsupported operation") }
func (_ AsignacionCustodia) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ AsignacionCustodia) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ AsignacionCustodia) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ AsignacionCustodia) SetString(v string)   { panic("Unsupported operation") }
func (_ AsignacionCustodia) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *AsignacionCustodia) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.NumeroEnvio}

		return w

	case 1:
		r.SucursalOrigen = NewDatosSucursal()

		w := types.Record{Target: &r.SucursalOrigen}

		return w

	case 2:
		r.SucursalDestino = NewDatosSucursal()

		w := types.Record{Target: &r.SucursalDestino}

		return w

	case 3:
		w := types.String{Target: &r.CodigoPostal}

		return w

	case 4:
		w := types.String{Target: &r.Fecha}

		return w

	}
	panic("Unknown field index")
}

func (r *AsignacionCustodia) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *AsignacionCustodia) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ AsignacionCustodia) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ AsignacionCustodia) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ AsignacionCustodia) HintSize(int)                     { panic("Unsupported operation") }
func (_ AsignacionCustodia) Finalize()                        {}

func (_ AsignacionCustodia) AvroCRC64Fingerprint() []byte {
	return []byte(AsignacionCustodiaAvroCRC64Fingerprint)
}

func (r AsignacionCustodia) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["numeroEnvio"], err = json.Marshal(r.NumeroEnvio)
	if err != nil {
		return nil, err
	}
	output["sucursalOrigen"], err = json.Marshal(r.SucursalOrigen)
	if err != nil {
		return nil, err
	}
	output["sucursalDestino"], err = json.Marshal(r.SucursalDestino)
	if err != nil {
		return nil, err
	}
	output["codigoPostal"], err = json.Marshal(r.CodigoPostal)
	if err != nil {
		return nil, err
	}
	output["fecha"], err = json.Marshal(r.Fecha)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *AsignacionCustodia) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["numeroEnvio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroEnvio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroEnvio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["sucursalOrigen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SucursalOrigen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for sucursalOrigen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["sucursalDestino"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SucursalDestino); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for sucursalDestino")
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoPostal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoPostal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for codigoPostal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fecha"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Fecha); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fecha")
	}
	return nil
}
