// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     BultoInformadoPorSorter.avsc
 */
package SppSchemaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type BultoInformadoPorSorter struct {
	AltoEnCm *UnionNullDouble `json:"altoEnCm"`

	AnchoEnCm *UnionNullDouble `json:"anchoEnCm"`

	CodigoEnEtiqueta *UnionNullString `json:"codigoEnEtiqueta"`

	Desvio *UnionNullString `json:"Desvio"`

	Donde *UnionNullDatosSucursal `json:"donde"`

	LargoEnCm *UnionNullDouble `json:"largoEnCm"`

	Modo *UnionNullString `json:"Modo"`

	PesoEnKg *UnionNullDouble `json:"pesoEnKg"`

	VolumenEnCm3 *UnionNullDouble `json:"volumenEnCm3"`

	ResultadoClasificacion *UnionNullEstadoClasificacion `json:"resultadoClasificacion"`
}

const BultoInformadoPorSorterAvroCRC64Fingerprint = "\xccT\xf3\x14\xe9Yo-"

func NewBultoInformadoPorSorter() BultoInformadoPorSorter {
	r := BultoInformadoPorSorter{}
	r.ResultadoClasificacion = nil
	return r
}

func DeserializeBultoInformadoPorSorter(r io.Reader) (BultoInformadoPorSorter, error) {
	t := NewBultoInformadoPorSorter()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeBultoInformadoPorSorterFromSchema(r io.Reader, schema string) (BultoInformadoPorSorter, error) {
	t := NewBultoInformadoPorSorter()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeBultoInformadoPorSorter(r BultoInformadoPorSorter, w io.Writer) error {
	var err error
	err = writeUnionNullDouble(r.AltoEnCm, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.AnchoEnCm, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoEnEtiqueta, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Desvio, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDatosSucursal(r.Donde, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.LargoEnCm, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Modo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.PesoEnKg, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.VolumenEnCm3, w)
	if err != nil {
		return err
	}
	err = writeUnionNullEstadoClasificacion(r.ResultadoClasificacion, w)
	if err != nil {
		return err
	}
	return err
}

func (r BultoInformadoPorSorter) Serialize(w io.Writer) error {
	return writeBultoInformadoPorSorter(r, w)
}

func (r BultoInformadoPorSorter) Schema() string {
	return "{\"fields\":[{\"name\":\"altoEnCm\",\"type\":[\"null\",\"double\"]},{\"name\":\"anchoEnCm\",\"type\":[\"null\",\"double\"]},{\"name\":\"codigoEnEtiqueta\",\"type\":[\"null\",\"string\"]},{\"name\":\"Desvio\",\"type\":[\"null\",\"string\"]},{\"name\":\"donde\",\"type\":[\"null\",{\"fields\":[{\"name\":\"codigo\",\"type\":[\"null\",\"string\"]},{\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"name\":\"nombre\",\"type\":[\"null\",\"string\"]}],\"name\":\"DatosSucursal\",\"type\":\"record\"}]},{\"name\":\"largoEnCm\",\"type\":[\"null\",\"double\"]},{\"name\":\"Modo\",\"type\":[\"null\",\"string\"]},{\"name\":\"pesoEnKg\",\"type\":[\"null\",\"double\"]},{\"name\":\"volumenEnCm3\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"resultadoClasificacion\",\"type\":[\"null\",{\"name\":\"EstadoClasificacion\",\"symbols\":[\"Normal\",\"SalidaCerrada\",\"NoOutputRampOTimeOut\",\"PaquetePerdido\",\"Recirculacion\",\"SinVolumenOPeso\",\"FueraDeRangoDimensionPeso\",\"OtroError\",\"Undefined\",\"NoRead\"],\"type\":\"enum\"}]}],\"name\":\"Andreani.SppSchema.Events.BultoInformadoPorSorter\",\"type\":\"record\"}"
}

func (r BultoInformadoPorSorter) SchemaName() string {
	return "Andreani.SppSchema.Events.BultoInformadoPorSorter"
}

func (_ BultoInformadoPorSorter) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ BultoInformadoPorSorter) SetInt(v int32)       { panic("Unsupported operation") }
func (_ BultoInformadoPorSorter) SetLong(v int64)      { panic("Unsupported operation") }
func (_ BultoInformadoPorSorter) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ BultoInformadoPorSorter) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ BultoInformadoPorSorter) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ BultoInformadoPorSorter) SetString(v string)   { panic("Unsupported operation") }
func (_ BultoInformadoPorSorter) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *BultoInformadoPorSorter) Get(i int) types.Field {
	switch i {
	case 0:
		r.AltoEnCm = NewUnionNullDouble()

		return r.AltoEnCm
	case 1:
		r.AnchoEnCm = NewUnionNullDouble()

		return r.AnchoEnCm
	case 2:
		r.CodigoEnEtiqueta = NewUnionNullString()

		return r.CodigoEnEtiqueta
	case 3:
		r.Desvio = NewUnionNullString()

		return r.Desvio
	case 4:
		r.Donde = NewUnionNullDatosSucursal()

		return r.Donde
	case 5:
		r.LargoEnCm = NewUnionNullDouble()

		return r.LargoEnCm
	case 6:
		r.Modo = NewUnionNullString()

		return r.Modo
	case 7:
		r.PesoEnKg = NewUnionNullDouble()

		return r.PesoEnKg
	case 8:
		r.VolumenEnCm3 = NewUnionNullDouble()

		return r.VolumenEnCm3
	case 9:
		r.ResultadoClasificacion = NewUnionNullEstadoClasificacion()

		return r.ResultadoClasificacion
	}
	panic("Unknown field index")
}

func (r *BultoInformadoPorSorter) SetDefault(i int) {
	switch i {
	case 9:
		r.ResultadoClasificacion = nil
		return
	}
	panic("Unknown field index")
}

func (r *BultoInformadoPorSorter) NullField(i int) {
	switch i {
	case 0:
		r.AltoEnCm = nil
		return
	case 1:
		r.AnchoEnCm = nil
		return
	case 2:
		r.CodigoEnEtiqueta = nil
		return
	case 3:
		r.Desvio = nil
		return
	case 4:
		r.Donde = nil
		return
	case 5:
		r.LargoEnCm = nil
		return
	case 6:
		r.Modo = nil
		return
	case 7:
		r.PesoEnKg = nil
		return
	case 8:
		r.VolumenEnCm3 = nil
		return
	case 9:
		r.ResultadoClasificacion = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ BultoInformadoPorSorter) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ BultoInformadoPorSorter) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ BultoInformadoPorSorter) HintSize(int)                     { panic("Unsupported operation") }
func (_ BultoInformadoPorSorter) Finalize()                        {}

func (_ BultoInformadoPorSorter) AvroCRC64Fingerprint() []byte {
	return []byte(BultoInformadoPorSorterAvroCRC64Fingerprint)
}

func (r BultoInformadoPorSorter) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["altoEnCm"], err = json.Marshal(r.AltoEnCm)
	if err != nil {
		return nil, err
	}
	output["anchoEnCm"], err = json.Marshal(r.AnchoEnCm)
	if err != nil {
		return nil, err
	}
	output["codigoEnEtiqueta"], err = json.Marshal(r.CodigoEnEtiqueta)
	if err != nil {
		return nil, err
	}
	output["Desvio"], err = json.Marshal(r.Desvio)
	if err != nil {
		return nil, err
	}
	output["donde"], err = json.Marshal(r.Donde)
	if err != nil {
		return nil, err
	}
	output["largoEnCm"], err = json.Marshal(r.LargoEnCm)
	if err != nil {
		return nil, err
	}
	output["Modo"], err = json.Marshal(r.Modo)
	if err != nil {
		return nil, err
	}
	output["pesoEnKg"], err = json.Marshal(r.PesoEnKg)
	if err != nil {
		return nil, err
	}
	output["volumenEnCm3"], err = json.Marshal(r.VolumenEnCm3)
	if err != nil {
		return nil, err
	}
	output["resultadoClasificacion"], err = json.Marshal(r.ResultadoClasificacion)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *BultoInformadoPorSorter) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["altoEnCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AltoEnCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for altoEnCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["anchoEnCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AnchoEnCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for anchoEnCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoEnEtiqueta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoEnEtiqueta); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for codigoEnEtiqueta")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Desvio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Desvio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Desvio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["donde"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Donde); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for donde")
	}
	val = func() json.RawMessage {
		if v, ok := fields["largoEnCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LargoEnCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for largoEnCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Modo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Modo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Modo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["pesoEnKg"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoEnKg); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for pesoEnKg")
	}
	val = func() json.RawMessage {
		if v, ok := fields["volumenEnCm3"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VolumenEnCm3); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for volumenEnCm3")
	}
	val = func() json.RawMessage {
		if v, ok := fields["resultadoClasificacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ResultadoClasificacion); err != nil {
			return err
		}
	} else {
		r.ResultadoClasificacion = NewUnionNullEstadoClasificacion()

		r.ResultadoClasificacion = nil
	}
	return nil
}
