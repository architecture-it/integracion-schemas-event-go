// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     SistemaOrigen.avsc
 */
package SppSchemaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SistemaOrigen int32

const (
	SistemaOrigenUndefined SistemaOrigen = 0
	SistemaOrigenINTEGRA   SistemaOrigen = 1
	SistemaOrigenALERTRAN  SistemaOrigen = 2
	SistemaOrigenEXTERNO   SistemaOrigen = 3
	SistemaOrigenDMS       SistemaOrigen = 4
)

func (e SistemaOrigen) String() string {
	switch e {
	case SistemaOrigenUndefined:
		return "undefined"
	case SistemaOrigenINTEGRA:
		return "INTEGRA"
	case SistemaOrigenALERTRAN:
		return "ALERTRAN"
	case SistemaOrigenEXTERNO:
		return "EXTERNO"
	case SistemaOrigenDMS:
		return "DMS"
	}
	return "unknown"
}

func writeSistemaOrigen(r SistemaOrigen, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewSistemaOrigenValue(raw string) (r SistemaOrigen, err error) {
	switch raw {
	case "undefined":
		return SistemaOrigenUndefined, nil
	case "INTEGRA":
		return SistemaOrigenINTEGRA, nil
	case "ALERTRAN":
		return SistemaOrigenALERTRAN, nil
	case "EXTERNO":
		return SistemaOrigenEXTERNO, nil
	case "DMS":
		return SistemaOrigenDMS, nil
	}

	return -1, fmt.Errorf("invalid value for SistemaOrigen: '%s'", raw)

}

func (b SistemaOrigen) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *SistemaOrigen) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewSistemaOrigenValue(stringVal)
	*b = val
	return err
}

type SistemaOrigenWrapper struct {
	Target *SistemaOrigen
}

func (b SistemaOrigenWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b SistemaOrigenWrapper) SetInt(v int32) {
	*(b.Target) = SistemaOrigen(v)
}

func (b SistemaOrigenWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b SistemaOrigenWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b SistemaOrigenWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b SistemaOrigenWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b SistemaOrigenWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b SistemaOrigenWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b SistemaOrigenWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b SistemaOrigenWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b SistemaOrigenWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b SistemaOrigenWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b SistemaOrigenWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b SistemaOrigenWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b SistemaOrigenWrapper) Finalize() {}
