// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ReporteLectura.avsc
 */
package SppSchemaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ReporteLectura int32

const (
	ReporteLecturaNoRead   ReporteLectura = 0
	ReporteLecturaTooLong  ReporteLectura = 1
	ReporteLecturaTooShort ReporteLectura = 2
	ReporteLecturaOk       ReporteLectura = 3
)

func (e ReporteLectura) String() string {
	switch e {
	case ReporteLecturaNoRead:
		return "noRead"
	case ReporteLecturaTooLong:
		return "tooLong"
	case ReporteLecturaTooShort:
		return "tooShort"
	case ReporteLecturaOk:
		return "ok"
	}
	return "unknown"
}

func writeReporteLectura(r ReporteLectura, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewReporteLecturaValue(raw string) (r ReporteLectura, err error) {
	switch raw {
	case "noRead":
		return ReporteLecturaNoRead, nil
	case "tooLong":
		return ReporteLecturaTooLong, nil
	case "tooShort":
		return ReporteLecturaTooShort, nil
	case "ok":
		return ReporteLecturaOk, nil
	}

	return -1, fmt.Errorf("invalid value for ReporteLectura: '%s'", raw)

}

func (b ReporteLectura) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *ReporteLectura) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewReporteLecturaValue(stringVal)
	*b = val
	return err
}

type ReporteLecturaWrapper struct {
	Target *ReporteLectura
}

func (b ReporteLecturaWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b ReporteLecturaWrapper) SetInt(v int32) {
	*(b.Target) = ReporteLectura(v)
}

func (b ReporteLecturaWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b ReporteLecturaWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b ReporteLecturaWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b ReporteLecturaWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b ReporteLecturaWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b ReporteLecturaWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b ReporteLecturaWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b ReporteLecturaWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b ReporteLecturaWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b ReporteLecturaWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b ReporteLecturaWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b ReporteLecturaWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b ReporteLecturaWrapper) Finalize() {}
