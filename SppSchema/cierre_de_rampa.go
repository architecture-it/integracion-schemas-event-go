// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     CierreDeRampa.avsc
 */
package SppSchemaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CierreDeRampa struct {
	Contenedor string `json:"contenedor"`

	FechaProcesamiento string `json:"fechaProcesamiento"`
}

const CierreDeRampaAvroCRC64Fingerprint = "\xc1\b\xdf\x13\xfe\x14\xbd\""

func NewCierreDeRampa() CierreDeRampa {
	r := CierreDeRampa{}
	return r
}

func DeserializeCierreDeRampa(r io.Reader) (CierreDeRampa, error) {
	t := NewCierreDeRampa()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCierreDeRampaFromSchema(r io.Reader, schema string) (CierreDeRampa, error) {
	t := NewCierreDeRampa()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCierreDeRampa(r CierreDeRampa, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Contenedor, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.FechaProcesamiento, w)
	if err != nil {
		return err
	}
	return err
}

func (r CierreDeRampa) Serialize(w io.Writer) error {
	return writeCierreDeRampa(r, w)
}

func (r CierreDeRampa) Schema() string {
	return "{\"fields\":[{\"name\":\"contenedor\",\"type\":\"string\"},{\"name\":\"fechaProcesamiento\",\"type\":\"string\"}],\"name\":\"Andreani.SppSchema.Events.CierreDeRampa\",\"type\":\"record\"}"
}

func (r CierreDeRampa) SchemaName() string {
	return "Andreani.SppSchema.Events.CierreDeRampa"
}

func (_ CierreDeRampa) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CierreDeRampa) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CierreDeRampa) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CierreDeRampa) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CierreDeRampa) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CierreDeRampa) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CierreDeRampa) SetString(v string)   { panic("Unsupported operation") }
func (_ CierreDeRampa) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CierreDeRampa) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Contenedor}

		return w

	case 1:
		w := types.String{Target: &r.FechaProcesamiento}

		return w

	}
	panic("Unknown field index")
}

func (r *CierreDeRampa) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *CierreDeRampa) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ CierreDeRampa) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CierreDeRampa) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CierreDeRampa) HintSize(int)                     { panic("Unsupported operation") }
func (_ CierreDeRampa) Finalize()                        {}

func (_ CierreDeRampa) AvroCRC64Fingerprint() []byte {
	return []byte(CierreDeRampaAvroCRC64Fingerprint)
}

func (r CierreDeRampa) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["contenedor"], err = json.Marshal(r.Contenedor)
	if err != nil {
		return nil, err
	}
	output["fechaProcesamiento"], err = json.Marshal(r.FechaProcesamiento)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CierreDeRampa) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["contenedor"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contenedor); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for contenedor")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaProcesamiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaProcesamiento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fechaProcesamiento")
	}
	return nil
}
