// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Geocerca.avsc
 */
package SppSchemaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Geocerca struct {
	Topic string `json:"topic"`

	Numero string `json:"numero"`

	SucursalOrigen *UnionNullDatosSucursal `json:"sucursalOrigen"`

	SucursalDestino *UnionNullDatosSucursal `json:"sucursalDestino"`

	CodigoPostal *UnionNullString `json:"codigoPostal"`

	ZonaReparto *UnionNullString `json:"zonaReparto"`

	Latitud *UnionNullString `json:"latitud"`

	Longitud *UnionNullString `json:"longitud"`

	HexagonoH3Id *UnionNullPoligono `json:"hexagonoH3Id"`

	PuntoHop *UnionNullDatosSucursal `json:"puntoHop"`
}

const GeocercaAvroCRC64Fingerprint = "f\xd5g\x9f\xc7aT\xb3"

func NewGeocerca() Geocerca {
	r := Geocerca{}
	r.SucursalOrigen = nil
	r.SucursalDestino = nil
	r.CodigoPostal = nil
	r.ZonaReparto = nil
	r.Latitud = nil
	r.Longitud = nil
	r.HexagonoH3Id = nil
	r.PuntoHop = nil
	return r
}

func DeserializeGeocerca(r io.Reader) (Geocerca, error) {
	t := NewGeocerca()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeGeocercaFromSchema(r io.Reader, schema string) (Geocerca, error) {
	t := NewGeocerca()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeGeocerca(r Geocerca, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Topic, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Numero, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDatosSucursal(r.SucursalOrigen, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDatosSucursal(r.SucursalDestino, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoPostal, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ZonaReparto, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Latitud, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Longitud, w)
	if err != nil {
		return err
	}
	err = writeUnionNullPoligono(r.HexagonoH3Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDatosSucursal(r.PuntoHop, w)
	if err != nil {
		return err
	}
	return err
}

func (r Geocerca) Serialize(w io.Writer) error {
	return writeGeocerca(r, w)
}

func (r Geocerca) Schema() string {
	return "{\"fields\":[{\"name\":\"topic\",\"type\":\"string\"},{\"name\":\"numero\",\"type\":\"string\"},{\"default\":null,\"name\":\"sucursalOrigen\",\"type\":[\"null\",{\"fields\":[{\"name\":\"codigo\",\"type\":[\"null\",\"string\"]},{\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"name\":\"nombre\",\"type\":[\"null\",\"string\"]}],\"name\":\"DatosSucursal\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"sucursalDestino\",\"type\":[\"null\",\"Andreani.SppSchema.Events.DatosSucursal\"]},{\"default\":null,\"name\":\"codigoPostal\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"zonaReparto\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"latitud\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"longitud\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"hexagonoH3Id\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"resolution8\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"resolution9\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"resolution10\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"resolution11\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"resolution12\",\"type\":[\"null\",\"string\"]}],\"name\":\"Poligono\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"puntoHop\",\"type\":[\"null\",\"Andreani.SppSchema.Events.DatosSucursal\"]}],\"name\":\"Andreani.SppSchema.Events.Geocerca\",\"type\":\"record\"}"
}

func (r Geocerca) SchemaName() string {
	return "Andreani.SppSchema.Events.Geocerca"
}

func (_ Geocerca) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Geocerca) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Geocerca) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Geocerca) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Geocerca) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Geocerca) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Geocerca) SetString(v string)   { panic("Unsupported operation") }
func (_ Geocerca) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Geocerca) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Topic}

		return w

	case 1:
		w := types.String{Target: &r.Numero}

		return w

	case 2:
		r.SucursalOrigen = NewUnionNullDatosSucursal()

		return r.SucursalOrigen
	case 3:
		r.SucursalDestino = NewUnionNullDatosSucursal()

		return r.SucursalDestino
	case 4:
		r.CodigoPostal = NewUnionNullString()

		return r.CodigoPostal
	case 5:
		r.ZonaReparto = NewUnionNullString()

		return r.ZonaReparto
	case 6:
		r.Latitud = NewUnionNullString()

		return r.Latitud
	case 7:
		r.Longitud = NewUnionNullString()

		return r.Longitud
	case 8:
		r.HexagonoH3Id = NewUnionNullPoligono()

		return r.HexagonoH3Id
	case 9:
		r.PuntoHop = NewUnionNullDatosSucursal()

		return r.PuntoHop
	}
	panic("Unknown field index")
}

func (r *Geocerca) SetDefault(i int) {
	switch i {
	case 2:
		r.SucursalOrigen = nil
		return
	case 3:
		r.SucursalDestino = nil
		return
	case 4:
		r.CodigoPostal = nil
		return
	case 5:
		r.ZonaReparto = nil
		return
	case 6:
		r.Latitud = nil
		return
	case 7:
		r.Longitud = nil
		return
	case 8:
		r.HexagonoH3Id = nil
		return
	case 9:
		r.PuntoHop = nil
		return
	}
	panic("Unknown field index")
}

func (r *Geocerca) NullField(i int) {
	switch i {
	case 2:
		r.SucursalOrigen = nil
		return
	case 3:
		r.SucursalDestino = nil
		return
	case 4:
		r.CodigoPostal = nil
		return
	case 5:
		r.ZonaReparto = nil
		return
	case 6:
		r.Latitud = nil
		return
	case 7:
		r.Longitud = nil
		return
	case 8:
		r.HexagonoH3Id = nil
		return
	case 9:
		r.PuntoHop = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Geocerca) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Geocerca) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Geocerca) HintSize(int)                     { panic("Unsupported operation") }
func (_ Geocerca) Finalize()                        {}

func (_ Geocerca) AvroCRC64Fingerprint() []byte {
	return []byte(GeocercaAvroCRC64Fingerprint)
}

func (r Geocerca) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["topic"], err = json.Marshal(r.Topic)
	if err != nil {
		return nil, err
	}
	output["numero"], err = json.Marshal(r.Numero)
	if err != nil {
		return nil, err
	}
	output["sucursalOrigen"], err = json.Marshal(r.SucursalOrigen)
	if err != nil {
		return nil, err
	}
	output["sucursalDestino"], err = json.Marshal(r.SucursalDestino)
	if err != nil {
		return nil, err
	}
	output["codigoPostal"], err = json.Marshal(r.CodigoPostal)
	if err != nil {
		return nil, err
	}
	output["zonaReparto"], err = json.Marshal(r.ZonaReparto)
	if err != nil {
		return nil, err
	}
	output["latitud"], err = json.Marshal(r.Latitud)
	if err != nil {
		return nil, err
	}
	output["longitud"], err = json.Marshal(r.Longitud)
	if err != nil {
		return nil, err
	}
	output["hexagonoH3Id"], err = json.Marshal(r.HexagonoH3Id)
	if err != nil {
		return nil, err
	}
	output["puntoHop"], err = json.Marshal(r.PuntoHop)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Geocerca) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["topic"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Topic); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for topic")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numero"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Numero); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numero")
	}
	val = func() json.RawMessage {
		if v, ok := fields["sucursalOrigen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SucursalOrigen); err != nil {
			return err
		}
	} else {
		r.SucursalOrigen = NewUnionNullDatosSucursal()

		r.SucursalOrigen = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["sucursalDestino"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SucursalDestino); err != nil {
			return err
		}
	} else {
		r.SucursalDestino = NewUnionNullDatosSucursal()

		r.SucursalDestino = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoPostal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoPostal); err != nil {
			return err
		}
	} else {
		r.CodigoPostal = NewUnionNullString()

		r.CodigoPostal = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["zonaReparto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ZonaReparto); err != nil {
			return err
		}
	} else {
		r.ZonaReparto = NewUnionNullString()

		r.ZonaReparto = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["latitud"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Latitud); err != nil {
			return err
		}
	} else {
		r.Latitud = NewUnionNullString()

		r.Latitud = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["longitud"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Longitud); err != nil {
			return err
		}
	} else {
		r.Longitud = NewUnionNullString()

		r.Longitud = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["hexagonoH3Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HexagonoH3Id); err != nil {
			return err
		}
	} else {
		r.HexagonoH3Id = NewUnionNullPoligono()

		r.HexagonoH3Id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["puntoHop"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PuntoHop); err != nil {
			return err
		}
	} else {
		r.PuntoHop = NewUnionNullDatosSucursal()

		r.PuntoHop = nil
	}
	return nil
}
