// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     GenerarContenedor.avsc
 */
package SppSchemaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type GenerarContenedor struct {
	Contenedor string `json:"contenedor"`

	Envios *UnionNullListaDeObjetos `json:"envios"`

	FechaProcesamiento string `json:"fechaProcesamiento"`

	SistemaOrigen string `json:"sistemaOrigen"`

	Sorter string `json:"sorter"`

	SucursalOrigen DatosSucursal `json:"sucursalOrigen"`

	SucursalDestino DatosSucursal `json:"sucursalDestino"`

	MedioDeExpedicion TiposDePruebas `json:"medioDeExpedicion"`

	TipoContenedor *UnionNullString `json:"TipoContenedor"`

	NroPrecinto *UnionNullString `json:"NroPrecinto"`
}

const GenerarContenedorAvroCRC64Fingerprint = ";\vym\x01\xb6 o"

func NewGenerarContenedor() GenerarContenedor {
	r := GenerarContenedor{}
	r.SucursalOrigen = NewDatosSucursal()

	r.SucursalDestino = NewDatosSucursal()

	r.TipoContenedor = nil
	r.NroPrecinto = nil
	return r
}

func DeserializeGenerarContenedor(r io.Reader) (GenerarContenedor, error) {
	t := NewGenerarContenedor()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeGenerarContenedorFromSchema(r io.Reader, schema string) (GenerarContenedor, error) {
	t := NewGenerarContenedor()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeGenerarContenedor(r GenerarContenedor, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Contenedor, w)
	if err != nil {
		return err
	}
	err = writeUnionNullListaDeObjetos(r.Envios, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.FechaProcesamiento, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.SistemaOrigen, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Sorter, w)
	if err != nil {
		return err
	}
	err = writeDatosSucursal(r.SucursalOrigen, w)
	if err != nil {
		return err
	}
	err = writeDatosSucursal(r.SucursalDestino, w)
	if err != nil {
		return err
	}
	err = writeTiposDePruebas(r.MedioDeExpedicion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoContenedor, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NroPrecinto, w)
	if err != nil {
		return err
	}
	return err
}

func (r GenerarContenedor) Serialize(w io.Writer) error {
	return writeGenerarContenedor(r, w)
}

func (r GenerarContenedor) Schema() string {
	return "{\"fields\":[{\"name\":\"contenedor\",\"type\":\"string\"},{\"name\":\"envios\",\"type\":[\"null\",{\"fields\":[{\"name\":\"objetos\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]}],\"name\":\"ListaDeObjetos\",\"type\":\"record\"}]},{\"name\":\"fechaProcesamiento\",\"type\":\"string\"},{\"name\":\"sistemaOrigen\",\"type\":\"string\"},{\"name\":\"sorter\",\"type\":\"string\"},{\"name\":\"sucursalOrigen\",\"type\":{\"fields\":[{\"name\":\"codigo\",\"type\":[\"null\",\"string\"]},{\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"name\":\"nombre\",\"type\":[\"null\",\"string\"]}],\"name\":\"DatosSucursal\",\"type\":\"record\"}},{\"name\":\"sucursalDestino\",\"type\":\"Andreani.SppSchema.Events.DatosSucursal\"},{\"name\":\"medioDeExpedicion\",\"type\":{\"name\":\"TiposDePruebas\",\"symbols\":[\"ALSA\",\"DMS\",\"CASA\"],\"type\":\"enum\"}},{\"default\":null,\"name\":\"TipoContenedor\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NroPrecinto\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.SppSchema.Events.GenerarContenedor\",\"type\":\"record\"}"
}

func (r GenerarContenedor) SchemaName() string {
	return "Andreani.SppSchema.Events.GenerarContenedor"
}

func (_ GenerarContenedor) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ GenerarContenedor) SetInt(v int32)       { panic("Unsupported operation") }
func (_ GenerarContenedor) SetLong(v int64)      { panic("Unsupported operation") }
func (_ GenerarContenedor) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ GenerarContenedor) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ GenerarContenedor) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ GenerarContenedor) SetString(v string)   { panic("Unsupported operation") }
func (_ GenerarContenedor) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *GenerarContenedor) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Contenedor}

		return w

	case 1:
		r.Envios = NewUnionNullListaDeObjetos()

		return r.Envios
	case 2:
		w := types.String{Target: &r.FechaProcesamiento}

		return w

	case 3:
		w := types.String{Target: &r.SistemaOrigen}

		return w

	case 4:
		w := types.String{Target: &r.Sorter}

		return w

	case 5:
		r.SucursalOrigen = NewDatosSucursal()

		w := types.Record{Target: &r.SucursalOrigen}

		return w

	case 6:
		r.SucursalDestino = NewDatosSucursal()

		w := types.Record{Target: &r.SucursalDestino}

		return w

	case 7:
		w := TiposDePruebasWrapper{Target: &r.MedioDeExpedicion}

		return w

	case 8:
		r.TipoContenedor = NewUnionNullString()

		return r.TipoContenedor
	case 9:
		r.NroPrecinto = NewUnionNullString()

		return r.NroPrecinto
	}
	panic("Unknown field index")
}

func (r *GenerarContenedor) SetDefault(i int) {
	switch i {
	case 8:
		r.TipoContenedor = nil
		return
	case 9:
		r.NroPrecinto = nil
		return
	}
	panic("Unknown field index")
}

func (r *GenerarContenedor) NullField(i int) {
	switch i {
	case 1:
		r.Envios = nil
		return
	case 8:
		r.TipoContenedor = nil
		return
	case 9:
		r.NroPrecinto = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ GenerarContenedor) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ GenerarContenedor) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ GenerarContenedor) HintSize(int)                     { panic("Unsupported operation") }
func (_ GenerarContenedor) Finalize()                        {}

func (_ GenerarContenedor) AvroCRC64Fingerprint() []byte {
	return []byte(GenerarContenedorAvroCRC64Fingerprint)
}

func (r GenerarContenedor) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["contenedor"], err = json.Marshal(r.Contenedor)
	if err != nil {
		return nil, err
	}
	output["envios"], err = json.Marshal(r.Envios)
	if err != nil {
		return nil, err
	}
	output["fechaProcesamiento"], err = json.Marshal(r.FechaProcesamiento)
	if err != nil {
		return nil, err
	}
	output["sistemaOrigen"], err = json.Marshal(r.SistemaOrigen)
	if err != nil {
		return nil, err
	}
	output["sorter"], err = json.Marshal(r.Sorter)
	if err != nil {
		return nil, err
	}
	output["sucursalOrigen"], err = json.Marshal(r.SucursalOrigen)
	if err != nil {
		return nil, err
	}
	output["sucursalDestino"], err = json.Marshal(r.SucursalDestino)
	if err != nil {
		return nil, err
	}
	output["medioDeExpedicion"], err = json.Marshal(r.MedioDeExpedicion)
	if err != nil {
		return nil, err
	}
	output["TipoContenedor"], err = json.Marshal(r.TipoContenedor)
	if err != nil {
		return nil, err
	}
	output["NroPrecinto"], err = json.Marshal(r.NroPrecinto)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *GenerarContenedor) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["contenedor"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contenedor); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for contenedor")
	}
	val = func() json.RawMessage {
		if v, ok := fields["envios"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Envios); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for envios")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaProcesamiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaProcesamiento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fechaProcesamiento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["sistemaOrigen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SistemaOrigen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for sistemaOrigen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["sorter"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sorter); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for sorter")
	}
	val = func() json.RawMessage {
		if v, ok := fields["sucursalOrigen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SucursalOrigen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for sucursalOrigen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["sucursalDestino"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SucursalDestino); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for sucursalDestino")
	}
	val = func() json.RawMessage {
		if v, ok := fields["medioDeExpedicion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MedioDeExpedicion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for medioDeExpedicion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoContenedor"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoContenedor); err != nil {
			return err
		}
	} else {
		r.TipoContenedor = NewUnionNullString()

		r.TipoContenedor = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NroPrecinto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NroPrecinto); err != nil {
			return err
		}
	} else {
		r.NroPrecinto = NewUnionNullString()

		r.NroPrecinto = nil
	}
	return nil
}
