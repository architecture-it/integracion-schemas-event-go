// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     CierreRampa.avsc
 */
package SppSchemaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CierreRampa struct {
	Contenedor string `json:"contenedor"`

	FechaProcesamiento string `json:"fechaProcesamiento"`
}

const CierreRampaAvroCRC64Fingerprint = "\x15\xeb\xe1M,\xd4\xe9\x1d"

func NewCierreRampa() CierreRampa {
	r := CierreRampa{}
	return r
}

func DeserializeCierreRampa(r io.Reader) (CierreRampa, error) {
	t := NewCierreRampa()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCierreRampaFromSchema(r io.Reader, schema string) (CierreRampa, error) {
	t := NewCierreRampa()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCierreRampa(r CierreRampa, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Contenedor, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.FechaProcesamiento, w)
	if err != nil {
		return err
	}
	return err
}

func (r CierreRampa) Serialize(w io.Writer) error {
	return writeCierreRampa(r, w)
}

func (r CierreRampa) Schema() string {
	return "{\"fields\":[{\"name\":\"contenedor\",\"type\":\"string\"},{\"name\":\"fechaProcesamiento\",\"type\":\"string\"}],\"name\":\"Andreani.SppSchema.Events.CierreRampa\",\"type\":\"record\"}"
}

func (r CierreRampa) SchemaName() string {
	return "Andreani.SppSchema.Events.CierreRampa"
}

func (_ CierreRampa) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CierreRampa) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CierreRampa) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CierreRampa) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CierreRampa) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CierreRampa) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CierreRampa) SetString(v string)   { panic("Unsupported operation") }
func (_ CierreRampa) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CierreRampa) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Contenedor}

		return w

	case 1:
		w := types.String{Target: &r.FechaProcesamiento}

		return w

	}
	panic("Unknown field index")
}

func (r *CierreRampa) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *CierreRampa) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ CierreRampa) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CierreRampa) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CierreRampa) HintSize(int)                     { panic("Unsupported operation") }
func (_ CierreRampa) Finalize()                        {}

func (_ CierreRampa) AvroCRC64Fingerprint() []byte {
	return []byte(CierreRampaAvroCRC64Fingerprint)
}

func (r CierreRampa) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["contenedor"], err = json.Marshal(r.Contenedor)
	if err != nil {
		return nil, err
	}
	output["fechaProcesamiento"], err = json.Marshal(r.FechaProcesamiento)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CierreRampa) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["contenedor"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contenedor); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for contenedor")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaProcesamiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaProcesamiento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fechaProcesamiento")
	}
	return nil
}
