// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Telefonos.avsc
 */
package PreEnvioBackendEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Telefonos struct {
	Tipo *UnionNullInt `json:"Tipo"`

	Numero *UnionNullString `json:"Numero"`
}

const TelefonosAvroCRC64Fingerprint = "9|\xb0\xdc%zÌ¬"

func NewTelefonos() Telefonos {
	r := Telefonos{}
	r.Tipo = nil
	r.Numero = nil
	return r
}

func DeserializeTelefonos(r io.Reader) (Telefonos, error) {
	t := NewTelefonos()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTelefonosFromSchema(r io.Reader, schema string) (Telefonos, error) {
	t := NewTelefonos()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTelefonos(r Telefonos, w io.Writer) error {
	var err error
	err = writeUnionNullInt(r.Tipo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Numero, w)
	if err != nil {
		return err
	}
	return err
}

func (r Telefonos) Serialize(w io.Writer) error {
	return writeTelefonos(r, w)
}

func (r Telefonos) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Tipo\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"Numero\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.PreEnvioBackend.Events.Preenvio.Common.Telefonos\",\"type\":\"record\"}"
}

func (r Telefonos) SchemaName() string {
	return "Andreani.PreEnvioBackend.Events.Preenvio.Common.Telefonos"
}

func (_ Telefonos) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Telefonos) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Telefonos) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Telefonos) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Telefonos) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Telefonos) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Telefonos) SetString(v string)   { panic("Unsupported operation") }
func (_ Telefonos) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Telefonos) Get(i int) types.Field {
	switch i {
	case 0:
		r.Tipo = NewUnionNullInt()

		return r.Tipo
	case 1:
		r.Numero = NewUnionNullString()

		return r.Numero
	}
	panic("Unknown field index")
}

func (r *Telefonos) SetDefault(i int) {
	switch i {
	case 0:
		r.Tipo = nil
		return
	case 1:
		r.Numero = nil
		return
	}
	panic("Unknown field index")
}

func (r *Telefonos) NullField(i int) {
	switch i {
	case 0:
		r.Tipo = nil
		return
	case 1:
		r.Numero = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Telefonos) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Telefonos) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Telefonos) HintSize(int)                     { panic("Unsupported operation") }
func (_ Telefonos) Finalize()                        {}

func (_ Telefonos) AvroCRC64Fingerprint() []byte {
	return []byte(TelefonosAvroCRC64Fingerprint)
}

func (r Telefonos) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Tipo"], err = json.Marshal(r.Tipo)
	if err != nil {
		return nil, err
	}
	output["Numero"], err = json.Marshal(r.Numero)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Telefonos) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Tipo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Tipo); err != nil {
			return err
		}
	} else {
		r.Tipo = NewUnionNullInt()

		r.Tipo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Numero"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Numero); err != nil {
			return err
		}
	} else {
		r.Numero = NewUnionNullString()

		r.Numero = nil
	}
	return nil
}
