// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Print.avsc
 */
package WosTrazaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Print struct {
	Propietario *UnionNullString `json:"Propietario"`

	Tarea *UnionNullString `json:"Tarea"`

	Serie *UnionNullString `json:"Serie"`

	IP *UnionNullString `json:"IP"`

	Zpl *UnionNullString `json:"Zpl"`
}

const PrintAvroCRC64Fingerprint = "\xedl\xbb\xf7\xff\x96\xdaH"

func NewPrint() Print {
	r := Print{}
	r.Propietario = nil
	r.Tarea = nil
	r.Serie = nil
	return r
}

func DeserializePrint(r io.Reader) (Print, error) {
	t := NewPrint()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePrintFromSchema(r io.Reader, schema string) (Print, error) {
	t := NewPrint()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePrint(r Print, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Propietario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Tarea, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Serie, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.IP, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Zpl, w)
	if err != nil {
		return err
	}
	return err
}

func (r Print) Serialize(w io.Writer) error {
	return writePrint(r, w)
}

func (r Print) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Propietario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Tarea\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Serie\",\"type\":[\"null\",\"string\"]},{\"name\":\"IP\",\"type\":[\"null\",\"string\"]},{\"name\":\"Zpl\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.WosTrazaPrint.Events.Record.Print\",\"type\":\"record\"}"
}

func (r Print) SchemaName() string {
	return "Andreani.WosTrazaPrint.Events.Record.Print"
}

func (_ Print) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Print) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Print) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Print) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Print) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Print) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Print) SetString(v string)   { panic("Unsupported operation") }
func (_ Print) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Print) Get(i int) types.Field {
	switch i {
	case 0:
		r.Propietario = NewUnionNullString()

		return r.Propietario
	case 1:
		r.Tarea = NewUnionNullString()

		return r.Tarea
	case 2:
		r.Serie = NewUnionNullString()

		return r.Serie
	case 3:
		r.IP = NewUnionNullString()

		return r.IP
	case 4:
		r.Zpl = NewUnionNullString()

		return r.Zpl
	}
	panic("Unknown field index")
}

func (r *Print) SetDefault(i int) {
	switch i {
	case 0:
		r.Propietario = nil
		return
	case 1:
		r.Tarea = nil
		return
	case 2:
		r.Serie = nil
		return
	}
	panic("Unknown field index")
}

func (r *Print) NullField(i int) {
	switch i {
	case 0:
		r.Propietario = nil
		return
	case 1:
		r.Tarea = nil
		return
	case 2:
		r.Serie = nil
		return
	case 3:
		r.IP = nil
		return
	case 4:
		r.Zpl = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Print) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Print) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Print) HintSize(int)                     { panic("Unsupported operation") }
func (_ Print) Finalize()                        {}

func (_ Print) AvroCRC64Fingerprint() []byte {
	return []byte(PrintAvroCRC64Fingerprint)
}

func (r Print) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["Tarea"], err = json.Marshal(r.Tarea)
	if err != nil {
		return nil, err
	}
	output["Serie"], err = json.Marshal(r.Serie)
	if err != nil {
		return nil, err
	}
	output["IP"], err = json.Marshal(r.IP)
	if err != nil {
		return nil, err
	}
	output["Zpl"], err = json.Marshal(r.Zpl)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Print) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		r.Propietario = NewUnionNullString()

		r.Propietario = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Tarea"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Tarea); err != nil {
			return err
		}
	} else {
		r.Tarea = NewUnionNullString()

		r.Tarea = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Serie"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Serie); err != nil {
			return err
		}
	} else {
		r.Serie = NewUnionNullString()

		r.Serie = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["IP"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IP); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IP")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Zpl"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Zpl); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Zpl")
	}
	return nil
}
