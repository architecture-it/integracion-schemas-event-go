// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     PedidoTres.avsc
 */
package Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type PedidoTres struct {
Propietario                 string     `json:"propietario" validate:"required,max=15"`
		ClientePadre                string     `json:"clientePadre"` //datos request Farma
		IdPedido                    string     `json:"idPedido" validate:"max=32"`
		Numero                      string     `json:"numero" validate:"max=32"` //datos request anterior
		Tipo                        string     `json:"tipo" validate:"required,max=10"`
		PrioridadDePreparacion      string     `json:"prioridadDePreparacion" validate:"required,max=10"`
		FechaPedido                 string     `json:"fechaPedido" validate:"required"`
		FechaEntrega                string     `json:"fechaEntrega"`
		Remito                      string     `json:"remito" validate:"max=32"`
		IdCliente                   string     `json:"idCliente" validate:"max=30"`
		ReferenciaCliente           string     `json:"referenciaCliente" validate:"max=30"` //datos request anterior
		CodigoTransportista         string     `json:"codigoTransportista" validate:"max=15"`
		AcondicionamientoSecundario string     `json:"acondicionamientoSecundario"` //datos request Farma UDF
		Motivo                      string     `json:"motivo"`                      //datos request Farma UDF
		RamoDelDestinatario         string     `json:"ramoDelDestinatario"`         //datos request Farma UDF
		IDEjecucion                 string     `json:"idEjecucion"`                 //datos request Farma UDF
		Embalaje                    string     `json:"descripcionEmbalaje"`
		ZonaConsumo                 string     `json:"zonaConsumo"` //datos request Farma
		FacturaLegal                string     `json:"facturaLegal"`
		FacturaInterna              string     `json:"facturaInterna"`
		TieneGestionCobranza        string     `json:"tieneGestionCobranza"`
		ValorSeguro                 string     `json:"valorSeguro"`
		OrdenDeCompra               string     `json:"ordenDeCompra"`
		Notas                       []Metadato `json:"notas"`
		AdmiteCambioLoteDirigido    string     `json:"admiteCambioLoteDirigido"` //datos request Farma UDF
		AdmitePickingParcial        string     `json:"admitePickingParcial"`     //datos request Farma UDF
		ImprimeDocumentacion        bool       `json:"imprimeDocumentacion"`     //datos request Farma
		NROVale                     string     `json:"nroVale"`                  //datos request Farma UDF
		CamposLibres                []Metadato `json:"camposLibres"`
		SocioComercial              string     `json:"socioComercial" validate:"max=30"`
		ModoDeTransporte            string     `json:"modoDeTransporte" validate:"max=30"`
		Destinatario                struct {
			NumeroDeDocumento string            `json:"numeroDeDocumento"`
			IdDestinatario    string            `json:"idDestinatario"`
			IdInternoCliente  string            `json:"idInternoCliente"` //datos request anterior
			NombreCompleto    string            `json:"nombreCompleto" validate:"max=45"`
			Email             string            `json:"email" validate:"max=110"`
			Telefonos         []TelefonoRequest `json:"telefonos"`
			TipoDeDocumento   string            `json:"tipoDeDocumento" validate:"max=30"`
			Contacto          string            `json:"contacto" validate:"max=30"`
		} `json:"destinatario" validate:"required,dive"`
		Direccion struct {
			Calle                  string     `json:"calle" validate:"max=45"`
			Numero                 string     `json:"numero" validate:"max=45"`
			CodigoPostal           string     `json:"codigoPostal" validate:"max=18"`
			Localidad              string     `json:"localidad" validate:"max=45"`
			Provincia              string     `json:"provincia" validate:"max=25"`
			Pais                   string     `json:"pais" validate:"max=30"`
			Piso                   string     `json:"piso"`
			Departamento           string     `json:"Departamento"`
			ReferenciaDeDomicilio  string     `json:"referenciaDeDomicilio"`
			ComponentesDeDireccion []Metadato `json:"componentesDeDireccion"`
		} `json:"direccion" validate:"required,dive"`
		DetalleOrdenDeCompra struct {
			GS1NumeroDeLineaDeCliente string `json:"numeroDeLineaDeCliente"` //datos request Farma
			GS1OrdenDeCompra          string `json:"ordenDeCompraDeCliente"` //datos request Farma
			GS1FechaOrdenDeCompra     string `json:"fechaOrdenDeCompra"`     //datos request Farma
			GS1NumeroLinea            string `json:"numeroDeLinea"`          //datos request Farma
			GS1TipoMaterial           string `json:"tipoMaterial"`           //datos request Farma
			GS1CantidadPedida         string `json:"cantidadPedida"`         //datos request Farma
		} `json:"detalleordenDeCompra"`
		Detalles         []DetallePedidoRequest `json:"detalles" validate:"required,dive"`
		DatosAdicionales []Metadato             `json:"datosAdicionales"`
	} `json:"pedido" validate:"required,dive"`
}

const PedidoTresAvroCRC64Fingerprint = "\"\x898\x96\xcc\xe2\x10\xc0"

func NewPedidoTres() PedidoTres {
	r := PedidoTres{}
	return r
}

func DeserializePedidoTres(r io.Reader) (PedidoTres, error) {
	t := NewPedidoTres()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePedidoTresFromSchema(r io.Reader, schema string) (PedidoTres, error) {
	t := NewPedidoTres()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePedidoTres(r PedidoTres, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.NumeroDePedido, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Planta, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Almacen, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Contrato, w)
	if err != nil {
		return err
	}
	return err
}

func (r PedidoTres) Serialize(w io.Writer) error {
	return writePedidoTres(r, w)
}

func (r PedidoTres) Schema() string {
	return "{\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"numeroDePedido\",\"type\":\"int\"},{\"name\":\"planta\",\"type\":\"string\"},{\"name\":\"almacen\",\"type\":\"string\"},{\"name\":\"contrato\",\"type\":\"string\"}],\"name\":\"Andreani.Scheme.Onboarding.PedidoTres\",\"type\":\"record\"}"
}

func (r PedidoTres) SchemaName() string {
	return "Andreani.Scheme.Onboarding.PedidoTres"
}

func (_ PedidoTres) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ PedidoTres) SetInt(v int32)       { panic("Unsupported operation") }
func (_ PedidoTres) SetLong(v int64)      { panic("Unsupported operation") }
func (_ PedidoTres) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ PedidoTres) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ PedidoTres) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ PedidoTres) SetString(v string)   { panic("Unsupported operation") }
func (_ PedidoTres) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *PedidoTres) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Id}

		return w

	case 1:
		w := types.Int{Target: &r.NumeroDePedido}

		return w

	case 2:
		w := types.String{Target: &r.Planta}

		return w

	case 3:
		w := types.String{Target: &r.Almacen}

		return w

	case 4:
		w := types.String{Target: &r.Contrato}

		return w

	}
	panic("Unknown field index")
}

func (r *PedidoTres) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *PedidoTres) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ PedidoTres) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ PedidoTres) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ PedidoTres) HintSize(int)                     { panic("Unsupported operation") }
func (_ PedidoTres) Finalize()                        {}

func (_ PedidoTres) AvroCRC64Fingerprint() []byte {
	return []byte(PedidoTresAvroCRC64Fingerprint)
}

func (r PedidoTres) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["numeroDePedido"], err = json.Marshal(r.NumeroDePedido)
	if err != nil {
		return nil, err
	}
	output["planta"], err = json.Marshal(r.Planta)
	if err != nil {
		return nil, err
	}
	output["almacen"], err = json.Marshal(r.Almacen)
	if err != nil {
		return nil, err
	}
	output["contrato"], err = json.Marshal(r.Contrato)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *PedidoTres) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numeroDePedido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDePedido); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroDePedido")
	}
	val = func() json.RawMessage {
		if v, ok := fields["planta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Planta); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for planta")
	}
	val = func() json.RawMessage {
		if v, ok := fields["almacen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Almacen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for almacen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["contrato"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contrato); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for contrato")
	}
	return nil
}
