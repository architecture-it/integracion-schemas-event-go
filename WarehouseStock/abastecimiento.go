// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     CambioDeStock.avsc
 */
package WarehouseStockEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Abastecimiento struct {
	AbastecimientoId *UnionNullString `json:"AbastecimientoId"`

	AbastecimientoLineaId *UnionNullString `json:"AbastecimientoLineaId"`

	Estado *UnionNullCambioDeStockEstado `json:"Estado"`
}

const AbastecimientoAvroCRC64Fingerprint = "Z\xa4\xd6\xe3(\xc6e\x7f"

func NewAbastecimiento() Abastecimiento {
	r := Abastecimiento{}
	r.AbastecimientoId = nil
	r.AbastecimientoLineaId = nil
	r.Estado = nil
	return r
}

func DeserializeAbastecimiento(r io.Reader) (Abastecimiento, error) {
	t := NewAbastecimiento()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAbastecimientoFromSchema(r io.Reader, schema string) (Abastecimiento, error) {
	t := NewAbastecimiento()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAbastecimiento(r Abastecimiento, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.AbastecimientoId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.AbastecimientoLineaId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullCambioDeStockEstado(r.Estado, w)
	if err != nil {
		return err
	}
	return err
}

func (r Abastecimiento) Serialize(w io.Writer) error {
	return writeAbastecimiento(r, w)
}

func (r Abastecimiento) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"AbastecimientoId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"AbastecimientoLineaId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Estado\",\"type\":[\"null\",{\"name\":\"CambioDeStockEstado\",\"symbols\":[\"Solicitado\",\"Aceptado\",\"Rechazado\",\"Cancelado\"],\"type\":\"enum\"}]}],\"name\":\"Andreani.WarehouseStock.Events.StockCommon.Abastecimiento\",\"type\":\"record\"}"
}

func (r Abastecimiento) SchemaName() string {
	return "Andreani.WarehouseStock.Events.StockCommon.Abastecimiento"
}

func (_ Abastecimiento) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Abastecimiento) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Abastecimiento) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Abastecimiento) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Abastecimiento) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Abastecimiento) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Abastecimiento) SetString(v string)   { panic("Unsupported operation") }
func (_ Abastecimiento) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Abastecimiento) Get(i int) types.Field {
	switch i {
	case 0:
		r.AbastecimientoId = NewUnionNullString()

		return r.AbastecimientoId
	case 1:
		r.AbastecimientoLineaId = NewUnionNullString()

		return r.AbastecimientoLineaId
	case 2:
		r.Estado = NewUnionNullCambioDeStockEstado()

		return r.Estado
	}
	panic("Unknown field index")
}

func (r *Abastecimiento) SetDefault(i int) {
	switch i {
	case 0:
		r.AbastecimientoId = nil
		return
	case 1:
		r.AbastecimientoLineaId = nil
		return
	case 2:
		r.Estado = nil
		return
	}
	panic("Unknown field index")
}

func (r *Abastecimiento) NullField(i int) {
	switch i {
	case 0:
		r.AbastecimientoId = nil
		return
	case 1:
		r.AbastecimientoLineaId = nil
		return
	case 2:
		r.Estado = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Abastecimiento) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Abastecimiento) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Abastecimiento) HintSize(int)                     { panic("Unsupported operation") }
func (_ Abastecimiento) Finalize()                        {}

func (_ Abastecimiento) AvroCRC64Fingerprint() []byte {
	return []byte(AbastecimientoAvroCRC64Fingerprint)
}

func (r Abastecimiento) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["AbastecimientoId"], err = json.Marshal(r.AbastecimientoId)
	if err != nil {
		return nil, err
	}
	output["AbastecimientoLineaId"], err = json.Marshal(r.AbastecimientoLineaId)
	if err != nil {
		return nil, err
	}
	output["Estado"], err = json.Marshal(r.Estado)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Abastecimiento) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["AbastecimientoId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AbastecimientoId); err != nil {
			return err
		}
	} else {
		r.AbastecimientoId = NewUnionNullString()

		r.AbastecimientoId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["AbastecimientoLineaId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AbastecimientoLineaId); err != nil {
			return err
		}
	} else {
		r.AbastecimientoLineaId = NewUnionNullString()

		r.AbastecimientoLineaId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Estado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estado); err != nil {
			return err
		}
	} else {
		r.Estado = NewUnionNullCambioDeStockEstado()

		r.Estado = nil
	}
	return nil
}
