// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TipoEvento.avsc
 */
package WarehouseStockEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TipoEvento int32

const (
	TipoEventoPedido         TipoEvento = 0
	TipoEventoAbastecimiento TipoEvento = 1
	TipoEventoAjuste         TipoEvento = 2
	TipoEventoSincronizacion TipoEvento = 3
)

func (e TipoEvento) String() string {
	switch e {
	case TipoEventoPedido:
		return "Pedido"
	case TipoEventoAbastecimiento:
		return "Abastecimiento"
	case TipoEventoAjuste:
		return "Ajuste"
	case TipoEventoSincronizacion:
		return "Sincronizacion"
	}
	return "unknown"
}

func writeTipoEvento(r TipoEvento, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewTipoEventoValue(raw string) (r TipoEvento, err error) {
	switch raw {
	case "Pedido":
		return TipoEventoPedido, nil
	case "Abastecimiento":
		return TipoEventoAbastecimiento, nil
	case "Ajuste":
		return TipoEventoAjuste, nil
	case "Sincronizacion":
		return TipoEventoSincronizacion, nil
	}

	return -1, fmt.Errorf("invalid value for TipoEvento: '%s'", raw)

}

func (b TipoEvento) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *TipoEvento) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewTipoEventoValue(stringVal)
	*b = val
	return err
}

type TipoEventoWrapper struct {
	Target *TipoEvento
}

func (b TipoEventoWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b TipoEventoWrapper) SetInt(v int32) {
	*(b.Target) = TipoEvento(v)
}

func (b TipoEventoWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b TipoEventoWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b TipoEventoWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b TipoEventoWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b TipoEventoWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b TipoEventoWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b TipoEventoWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b TipoEventoWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b TipoEventoWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b TipoEventoWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b TipoEventoWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b TipoEventoWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b TipoEventoWrapper) Finalize() {}
