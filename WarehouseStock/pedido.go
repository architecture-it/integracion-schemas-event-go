// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Pedido.avsc
 */
package WarehouseStockEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Pedido struct {
	PedidoId *UnionNullString `json:"PedidoId"`

	PedidoLineaId *UnionNullString `json:"PedidoLineaId"`

	Estado *UnionNullCambioDeStockEstado `json:"Estado"`
}

const PedidoAvroCRC64Fingerprint = "\xbco[f\xa5\xb4[V"

func NewPedido() Pedido {
	r := Pedido{}
	r.PedidoId = nil
	r.PedidoLineaId = nil
	r.Estado = nil
	return r
}

func DeserializePedido(r io.Reader) (Pedido, error) {
	t := NewPedido()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePedidoFromSchema(r io.Reader, schema string) (Pedido, error) {
	t := NewPedido()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePedido(r Pedido, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.PedidoId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PedidoLineaId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullCambioDeStockEstado(r.Estado, w)
	if err != nil {
		return err
	}
	return err
}

func (r Pedido) Serialize(w io.Writer) error {
	return writePedido(r, w)
}

func (r Pedido) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"PedidoId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PedidoLineaId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Estado\",\"type\":[\"null\",{\"name\":\"CambioDeStockEstado\",\"symbols\":[\"Solicitado\",\"Aceptado\",\"Rechazado\",\"Cancelado\",\"Creado\",\"Confirmado\"],\"type\":\"enum\"}]}],\"name\":\"Andreani.WarehouseStock.Events.StockCommon.Pedido\",\"type\":\"record\"}"
}

func (r Pedido) SchemaName() string {
	return "Andreani.WarehouseStock.Events.StockCommon.Pedido"
}

func (_ Pedido) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Pedido) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Pedido) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Pedido) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Pedido) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Pedido) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Pedido) SetString(v string)   { panic("Unsupported operation") }
func (_ Pedido) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Pedido) Get(i int) types.Field {
	switch i {
	case 0:
		r.PedidoId = NewUnionNullString()

		return r.PedidoId
	case 1:
		r.PedidoLineaId = NewUnionNullString()

		return r.PedidoLineaId
	case 2:
		r.Estado = NewUnionNullCambioDeStockEstado()

		return r.Estado
	}
	panic("Unknown field index")
}

func (r *Pedido) SetDefault(i int) {
	switch i {
	case 0:
		r.PedidoId = nil
		return
	case 1:
		r.PedidoLineaId = nil
		return
	case 2:
		r.Estado = nil
		return
	}
	panic("Unknown field index")
}

func (r *Pedido) NullField(i int) {
	switch i {
	case 0:
		r.PedidoId = nil
		return
	case 1:
		r.PedidoLineaId = nil
		return
	case 2:
		r.Estado = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Pedido) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Pedido) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Pedido) HintSize(int)                     { panic("Unsupported operation") }
func (_ Pedido) Finalize()                        {}

func (_ Pedido) AvroCRC64Fingerprint() []byte {
	return []byte(PedidoAvroCRC64Fingerprint)
}

func (r Pedido) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["PedidoId"], err = json.Marshal(r.PedidoId)
	if err != nil {
		return nil, err
	}
	output["PedidoLineaId"], err = json.Marshal(r.PedidoLineaId)
	if err != nil {
		return nil, err
	}
	output["Estado"], err = json.Marshal(r.Estado)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Pedido) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["PedidoId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PedidoId); err != nil {
			return err
		}
	} else {
		r.PedidoId = NewUnionNullString()

		r.PedidoId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PedidoLineaId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PedidoLineaId); err != nil {
			return err
		}
	} else {
		r.PedidoLineaId = NewUnionNullString()

		r.PedidoLineaId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Estado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estado); err != nil {
			return err
		}
	} else {
		r.Estado = NewUnionNullCambioDeStockEstado()

		r.Estado = nil
	}
	return nil
}
