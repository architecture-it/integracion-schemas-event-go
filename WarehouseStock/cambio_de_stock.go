// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     CambioDeStock.avsc
 */
package WarehouseStockEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CambioDeStock struct {
	IdTransaccion *UnionNullString `json:"IdTransaccion"`

	IdEvento *UnionNullString `json:"IdEvento"`

	TipoEvento *UnionNullTipoEvento `json:"TipoEvento"`

	FechaHoraEventoNegocio int64 `json:"FechaHoraEventoNegocio"`

	Propietario string `json:"Propietario"`

	Instancia string `json:"Instancia"`

	Almacen string `json:"Almacen"`

	SKU string `json:"SKU"`

	Cantidad float32 `json:"Cantidad"`

	Pedido *UnionNullPedido `json:"Pedido"`

	Abastecimiento *UnionNullAbastecimiento `json:"Abastecimiento"`

	Ajuste *UnionNullAjuste `json:"Ajuste"`

	Sincronizacion *UnionNullSincronizacion `json:"Sincronizacion"`
}

const CambioDeStockAvroCRC64Fingerprint = "\ue0677\x97\xdaZ\xfe"

func NewCambioDeStock() CambioDeStock {
	r := CambioDeStock{}
	r.TipoEvento = nil
	r.Pedido = nil
	r.Abastecimiento = nil
	r.Ajuste = nil
	r.Sincronizacion = nil
	return r
}

func DeserializeCambioDeStock(r io.Reader) (CambioDeStock, error) {
	t := NewCambioDeStock()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCambioDeStockFromSchema(r io.Reader, schema string) (CambioDeStock, error) {
	t := NewCambioDeStock()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCambioDeStock(r CambioDeStock, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.IdTransaccion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.IdEvento, w)
	if err != nil {
		return err
	}
	err = writeUnionNullTipoEvento(r.TipoEvento, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.FechaHoraEventoNegocio, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Propietario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Instancia, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Almacen, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.SKU, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.Cantidad, w)
	if err != nil {
		return err
	}
	err = writeUnionNullPedido(r.Pedido, w)
	if err != nil {
		return err
	}
	err = writeUnionNullAbastecimiento(r.Abastecimiento, w)
	if err != nil {
		return err
	}
	err = writeUnionNullAjuste(r.Ajuste, w)
	if err != nil {
		return err
	}
	err = writeUnionNullSincronizacion(r.Sincronizacion, w)
	if err != nil {
		return err
	}
	return err
}

func (r CambioDeStock) Serialize(w io.Writer) error {
	return writeCambioDeStock(r, w)
}

func (r CambioDeStock) Schema() string {
	return "{\"fields\":[{\"name\":\"IdTransaccion\",\"type\":[\"null\",\"string\"]},{\"name\":\"IdEvento\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TipoEvento\",\"type\":[\"null\",{\"name\":\"TipoEvento\",\"symbols\":[\"Pedido\",\"Abastecimiento\",\"Ajuste\",\"Sincronizacion\"],\"type\":\"enum\"}]},{\"name\":\"FechaHoraEventoNegocio\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"Propietario\",\"type\":\"string\"},{\"name\":\"Instancia\",\"type\":\"string\"},{\"name\":\"Almacen\",\"type\":\"string\"},{\"name\":\"SKU\",\"type\":\"string\"},{\"name\":\"Cantidad\",\"type\":\"float\"},{\"default\":null,\"name\":\"Pedido\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"PedidoId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PedidoLineaId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Estado\",\"type\":[\"null\",{\"name\":\"CambioDeStockEstado\",\"symbols\":[\"Solicitado\",\"Aceptado\",\"Rechazado\",\"Cancelado\",\"Creado\",\"Confirmado\"],\"type\":\"enum\"}]}],\"name\":\"Pedido\",\"namespace\":\"Andreani.WarehouseStock.Events.StockCommon\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Abastecimiento\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"AbastecimientoId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"AbastecimientoLineaId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Estado\",\"type\":[\"null\",\"Andreani.WarehouseStock.Events.StockCommon.CambioDeStockEstado\"]}],\"name\":\"Abastecimiento\",\"namespace\":\"Andreani.WarehouseStock.Events.StockCommon\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Ajuste\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"StockTotal\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"StockDisponible\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"StockEnTransito\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"StockAnteriorAjuste\",\"type\":[\"null\",\"float\"]}],\"name\":\"Ajuste\",\"namespace\":\"Andreani.WarehouseStock.Events.StockCommon\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Sincronizacion\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"StockTotal\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"StockDisponible\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"StockNoDisponible\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"StockAsignado\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"StockPickeado\",\"type\":[\"null\",\"float\"]}],\"name\":\"Sincronizacion\",\"namespace\":\"Andreani.WarehouseStock.Events.StockCommon\",\"type\":\"record\"}]}],\"name\":\"Andreani.WarehouseStock.Events.Record.CambioDeStock\",\"type\":\"record\"}"
}

func (r CambioDeStock) SchemaName() string {
	return "Andreani.WarehouseStock.Events.Record.CambioDeStock"
}

func (_ CambioDeStock) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CambioDeStock) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CambioDeStock) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CambioDeStock) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CambioDeStock) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CambioDeStock) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CambioDeStock) SetString(v string)   { panic("Unsupported operation") }
func (_ CambioDeStock) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CambioDeStock) Get(i int) types.Field {
	switch i {
	case 0:
		r.IdTransaccion = NewUnionNullString()

		return r.IdTransaccion
	case 1:
		r.IdEvento = NewUnionNullString()

		return r.IdEvento
	case 2:
		r.TipoEvento = NewUnionNullTipoEvento()

		return r.TipoEvento
	case 3:
		w := types.Long{Target: &r.FechaHoraEventoNegocio}

		return w

	case 4:
		w := types.String{Target: &r.Propietario}

		return w

	case 5:
		w := types.String{Target: &r.Instancia}

		return w

	case 6:
		w := types.String{Target: &r.Almacen}

		return w

	case 7:
		w := types.String{Target: &r.SKU}

		return w

	case 8:
		w := types.Float{Target: &r.Cantidad}

		return w

	case 9:
		r.Pedido = NewUnionNullPedido()

		return r.Pedido
	case 10:
		r.Abastecimiento = NewUnionNullAbastecimiento()

		return r.Abastecimiento
	case 11:
		r.Ajuste = NewUnionNullAjuste()

		return r.Ajuste
	case 12:
		r.Sincronizacion = NewUnionNullSincronizacion()

		return r.Sincronizacion
	}
	panic("Unknown field index")
}

func (r *CambioDeStock) SetDefault(i int) {
	switch i {
	case 2:
		r.TipoEvento = nil
		return
	case 9:
		r.Pedido = nil
		return
	case 10:
		r.Abastecimiento = nil
		return
	case 11:
		r.Ajuste = nil
		return
	case 12:
		r.Sincronizacion = nil
		return
	}
	panic("Unknown field index")
}

func (r *CambioDeStock) NullField(i int) {
	switch i {
	case 0:
		r.IdTransaccion = nil
		return
	case 1:
		r.IdEvento = nil
		return
	case 2:
		r.TipoEvento = nil
		return
	case 9:
		r.Pedido = nil
		return
	case 10:
		r.Abastecimiento = nil
		return
	case 11:
		r.Ajuste = nil
		return
	case 12:
		r.Sincronizacion = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ CambioDeStock) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CambioDeStock) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CambioDeStock) HintSize(int)                     { panic("Unsupported operation") }
func (_ CambioDeStock) Finalize()                        {}

func (_ CambioDeStock) AvroCRC64Fingerprint() []byte {
	return []byte(CambioDeStockAvroCRC64Fingerprint)
}

func (r CambioDeStock) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["IdTransaccion"], err = json.Marshal(r.IdTransaccion)
	if err != nil {
		return nil, err
	}
	output["IdEvento"], err = json.Marshal(r.IdEvento)
	if err != nil {
		return nil, err
	}
	output["TipoEvento"], err = json.Marshal(r.TipoEvento)
	if err != nil {
		return nil, err
	}
	output["FechaHoraEventoNegocio"], err = json.Marshal(r.FechaHoraEventoNegocio)
	if err != nil {
		return nil, err
	}
	output["Propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["Instancia"], err = json.Marshal(r.Instancia)
	if err != nil {
		return nil, err
	}
	output["Almacen"], err = json.Marshal(r.Almacen)
	if err != nil {
		return nil, err
	}
	output["SKU"], err = json.Marshal(r.SKU)
	if err != nil {
		return nil, err
	}
	output["Cantidad"], err = json.Marshal(r.Cantidad)
	if err != nil {
		return nil, err
	}
	output["Pedido"], err = json.Marshal(r.Pedido)
	if err != nil {
		return nil, err
	}
	output["Abastecimiento"], err = json.Marshal(r.Abastecimiento)
	if err != nil {
		return nil, err
	}
	output["Ajuste"], err = json.Marshal(r.Ajuste)
	if err != nil {
		return nil, err
	}
	output["Sincronizacion"], err = json.Marshal(r.Sincronizacion)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CambioDeStock) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["IdTransaccion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdTransaccion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdTransaccion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdEvento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdEvento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdEvento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoEvento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoEvento); err != nil {
			return err
		}
	} else {
		r.TipoEvento = NewUnionNullTipoEvento()

		r.TipoEvento = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaHoraEventoNegocio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaHoraEventoNegocio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FechaHoraEventoNegocio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Propietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Instancia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Instancia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Instancia")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Almacen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Almacen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Almacen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["SKU"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SKU); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for SKU")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Cantidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cantidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Cantidad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Pedido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Pedido); err != nil {
			return err
		}
	} else {
		r.Pedido = NewUnionNullPedido()

		r.Pedido = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Abastecimiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Abastecimiento); err != nil {
			return err
		}
	} else {
		r.Abastecimiento = NewUnionNullAbastecimiento()

		r.Abastecimiento = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Ajuste"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ajuste); err != nil {
			return err
		}
	} else {
		r.Ajuste = NewUnionNullAjuste()

		r.Ajuste = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Sincronizacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sincronizacion); err != nil {
			return err
		}
	} else {
		r.Sincronizacion = NewUnionNullSincronizacion()

		r.Sincronizacion = nil
	}
	return nil
}
