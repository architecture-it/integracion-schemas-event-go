// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     PaqueteEtiqueta.avsc
 */
package CorporativoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type PaqueteEtiqueta struct {
	Item *UnionNullItemEtiqueta `json:"Item"`

	Alto *UnionNullString `json:"Alto"`

	Ancho *UnionNullString `json:"Ancho"`

	Largo *UnionNullString `json:"Largo"`

	Peso *UnionNullString `json:"Peso"`

	ValorDeclarado *UnionNullString `json:"ValorDeclarado"`

	NumeroDeBulto *UnionNullInt `json:"NumeroDeBulto"`

	TotalDeBultos *UnionNullInt `json:"TotalDeBultos"`

	NumeroDePaquete *UnionNullString `json:"NumeroDePaquete"`

	Volumen *UnionNullString `json:"Volumen"`
}

const PaqueteEtiquetaAvroCRC64Fingerprint = "\xae\xdb\xf5,\x99\x96P\x7f"

func NewPaqueteEtiqueta() PaqueteEtiqueta {
	r := PaqueteEtiqueta{}
	r.Item = nil
	r.Alto = nil
	r.Ancho = nil
	r.Largo = nil
	r.Peso = nil
	r.ValorDeclarado = nil
	r.NumeroDeBulto = nil
	r.TotalDeBultos = nil
	r.NumeroDePaquete = nil
	r.Volumen = nil
	return r
}

func DeserializePaqueteEtiqueta(r io.Reader) (PaqueteEtiqueta, error) {
	t := NewPaqueteEtiqueta()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePaqueteEtiquetaFromSchema(r io.Reader, schema string) (PaqueteEtiqueta, error) {
	t := NewPaqueteEtiqueta()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePaqueteEtiqueta(r PaqueteEtiqueta, w io.Writer) error {
	var err error
	err = writeUnionNullItemEtiqueta(r.Item, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Alto, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Ancho, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Largo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Peso, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ValorDeclarado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.NumeroDeBulto, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.TotalDeBultos, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NumeroDePaquete, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Volumen, w)
	if err != nil {
		return err
	}
	return err
}

func (r PaqueteEtiqueta) Serialize(w io.Writer) error {
	return writePaqueteEtiqueta(r, w)
}

func (r PaqueteEtiqueta) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Item\",\"type\":[\"null\",{\"fields\":[{\"name\":\"Nombre\",\"type\":\"string\"}],\"name\":\"ItemEtiqueta\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Alto\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Ancho\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Largo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Peso\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ValorDeclarado\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NumeroDeBulto\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"TotalDeBultos\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"NumeroDePaquete\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Volumen\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.Corporativo.Events.Record.PaqueteEtiqueta\",\"type\":\"record\"}"
}

func (r PaqueteEtiqueta) SchemaName() string {
	return "Andreani.Corporativo.Events.Record.PaqueteEtiqueta"
}

func (_ PaqueteEtiqueta) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ PaqueteEtiqueta) SetInt(v int32)       { panic("Unsupported operation") }
func (_ PaqueteEtiqueta) SetLong(v int64)      { panic("Unsupported operation") }
func (_ PaqueteEtiqueta) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ PaqueteEtiqueta) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ PaqueteEtiqueta) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ PaqueteEtiqueta) SetString(v string)   { panic("Unsupported operation") }
func (_ PaqueteEtiqueta) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *PaqueteEtiqueta) Get(i int) types.Field {
	switch i {
	case 0:
		r.Item = NewUnionNullItemEtiqueta()

		return r.Item
	case 1:
		r.Alto = NewUnionNullString()

		return r.Alto
	case 2:
		r.Ancho = NewUnionNullString()

		return r.Ancho
	case 3:
		r.Largo = NewUnionNullString()

		return r.Largo
	case 4:
		r.Peso = NewUnionNullString()

		return r.Peso
	case 5:
		r.ValorDeclarado = NewUnionNullString()

		return r.ValorDeclarado
	case 6:
		r.NumeroDeBulto = NewUnionNullInt()

		return r.NumeroDeBulto
	case 7:
		r.TotalDeBultos = NewUnionNullInt()

		return r.TotalDeBultos
	case 8:
		r.NumeroDePaquete = NewUnionNullString()

		return r.NumeroDePaquete
	case 9:
		r.Volumen = NewUnionNullString()

		return r.Volumen
	}
	panic("Unknown field index")
}

func (r *PaqueteEtiqueta) SetDefault(i int) {
	switch i {
	case 0:
		r.Item = nil
		return
	case 1:
		r.Alto = nil
		return
	case 2:
		r.Ancho = nil
		return
	case 3:
		r.Largo = nil
		return
	case 4:
		r.Peso = nil
		return
	case 5:
		r.ValorDeclarado = nil
		return
	case 6:
		r.NumeroDeBulto = nil
		return
	case 7:
		r.TotalDeBultos = nil
		return
	case 8:
		r.NumeroDePaquete = nil
		return
	case 9:
		r.Volumen = nil
		return
	}
	panic("Unknown field index")
}

func (r *PaqueteEtiqueta) NullField(i int) {
	switch i {
	case 0:
		r.Item = nil
		return
	case 1:
		r.Alto = nil
		return
	case 2:
		r.Ancho = nil
		return
	case 3:
		r.Largo = nil
		return
	case 4:
		r.Peso = nil
		return
	case 5:
		r.ValorDeclarado = nil
		return
	case 6:
		r.NumeroDeBulto = nil
		return
	case 7:
		r.TotalDeBultos = nil
		return
	case 8:
		r.NumeroDePaquete = nil
		return
	case 9:
		r.Volumen = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ PaqueteEtiqueta) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ PaqueteEtiqueta) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ PaqueteEtiqueta) HintSize(int)                     { panic("Unsupported operation") }
func (_ PaqueteEtiqueta) Finalize()                        {}

func (_ PaqueteEtiqueta) AvroCRC64Fingerprint() []byte {
	return []byte(PaqueteEtiquetaAvroCRC64Fingerprint)
}

func (r PaqueteEtiqueta) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Item"], err = json.Marshal(r.Item)
	if err != nil {
		return nil, err
	}
	output["Alto"], err = json.Marshal(r.Alto)
	if err != nil {
		return nil, err
	}
	output["Ancho"], err = json.Marshal(r.Ancho)
	if err != nil {
		return nil, err
	}
	output["Largo"], err = json.Marshal(r.Largo)
	if err != nil {
		return nil, err
	}
	output["Peso"], err = json.Marshal(r.Peso)
	if err != nil {
		return nil, err
	}
	output["ValorDeclarado"], err = json.Marshal(r.ValorDeclarado)
	if err != nil {
		return nil, err
	}
	output["NumeroDeBulto"], err = json.Marshal(r.NumeroDeBulto)
	if err != nil {
		return nil, err
	}
	output["TotalDeBultos"], err = json.Marshal(r.TotalDeBultos)
	if err != nil {
		return nil, err
	}
	output["NumeroDePaquete"], err = json.Marshal(r.NumeroDePaquete)
	if err != nil {
		return nil, err
	}
	output["Volumen"], err = json.Marshal(r.Volumen)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *PaqueteEtiqueta) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Item"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Item); err != nil {
			return err
		}
	} else {
		r.Item = NewUnionNullItemEtiqueta()

		r.Item = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Alto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Alto); err != nil {
			return err
		}
	} else {
		r.Alto = NewUnionNullString()

		r.Alto = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Ancho"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ancho); err != nil {
			return err
		}
	} else {
		r.Ancho = NewUnionNullString()

		r.Ancho = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Largo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Largo); err != nil {
			return err
		}
	} else {
		r.Largo = NewUnionNullString()

		r.Largo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Peso"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Peso); err != nil {
			return err
		}
	} else {
		r.Peso = NewUnionNullString()

		r.Peso = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValorDeclarado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValorDeclarado); err != nil {
			return err
		}
	} else {
		r.ValorDeclarado = NewUnionNullString()

		r.ValorDeclarado = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NumeroDeBulto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeBulto); err != nil {
			return err
		}
	} else {
		r.NumeroDeBulto = NewUnionNullInt()

		r.NumeroDeBulto = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TotalDeBultos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TotalDeBultos); err != nil {
			return err
		}
	} else {
		r.TotalDeBultos = NewUnionNullInt()

		r.TotalDeBultos = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NumeroDePaquete"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDePaquete); err != nil {
			return err
		}
	} else {
		r.NumeroDePaquete = NewUnionNullString()

		r.NumeroDePaquete = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Volumen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Volumen); err != nil {
			return err
		}
	} else {
		r.Volumen = NewUnionNullString()

		r.Volumen = nil
	}
	return nil
}
