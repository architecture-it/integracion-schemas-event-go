// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     OrigenEtiqueta.avsc
 */
package CorporativoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type OrigenEtiqueta struct {
	Tipo string `json:"Tipo"`

	Calle string `json:"Calle"`

	Numero string `json:"Numero"`

	Localidad string `json:"Localidad"`

	Provincia string `json:"Provincia"`

	CodigoPostal string `json:"CodigoPostal"`

	SucursalId string `json:"SucursalId"`
}

const OrigenEtiquetaAvroCRC64Fingerprint = "{\xfd\x02\\\xbd\xc0\xe1\x9e"

func NewOrigenEtiqueta() OrigenEtiqueta {
	r := OrigenEtiqueta{}
	return r
}

func DeserializeOrigenEtiqueta(r io.Reader) (OrigenEtiqueta, error) {
	t := NewOrigenEtiqueta()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeOrigenEtiquetaFromSchema(r io.Reader, schema string) (OrigenEtiqueta, error) {
	t := NewOrigenEtiqueta()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeOrigenEtiqueta(r OrigenEtiqueta, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Tipo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Calle, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Numero, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Localidad, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Provincia, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodigoPostal, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.SucursalId, w)
	if err != nil {
		return err
	}
	return err
}

func (r OrigenEtiqueta) Serialize(w io.Writer) error {
	return writeOrigenEtiqueta(r, w)
}

func (r OrigenEtiqueta) Schema() string {
	return "{\"fields\":[{\"name\":\"Tipo\",\"type\":\"string\"},{\"name\":\"Calle\",\"type\":\"string\"},{\"name\":\"Numero\",\"type\":\"string\"},{\"name\":\"Localidad\",\"type\":\"string\"},{\"name\":\"Provincia\",\"type\":\"string\"},{\"name\":\"CodigoPostal\",\"type\":\"string\"},{\"name\":\"SucursalId\",\"type\":\"string\"}],\"name\":\"Corporativo.Events.Record.OrigenEtiqueta\",\"type\":\"record\"}"
}

func (r OrigenEtiqueta) SchemaName() string {
	return "Corporativo.Events.Record.OrigenEtiqueta"
}

func (_ OrigenEtiqueta) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ OrigenEtiqueta) SetInt(v int32)       { panic("Unsupported operation") }
func (_ OrigenEtiqueta) SetLong(v int64)      { panic("Unsupported operation") }
func (_ OrigenEtiqueta) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ OrigenEtiqueta) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ OrigenEtiqueta) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ OrigenEtiqueta) SetString(v string)   { panic("Unsupported operation") }
func (_ OrigenEtiqueta) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *OrigenEtiqueta) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Tipo}

		return w

	case 1:
		w := types.String{Target: &r.Calle}

		return w

	case 2:
		w := types.String{Target: &r.Numero}

		return w

	case 3:
		w := types.String{Target: &r.Localidad}

		return w

	case 4:
		w := types.String{Target: &r.Provincia}

		return w

	case 5:
		w := types.String{Target: &r.CodigoPostal}

		return w

	case 6:
		w := types.String{Target: &r.SucursalId}

		return w

	}
	panic("Unknown field index")
}

func (r *OrigenEtiqueta) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *OrigenEtiqueta) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ OrigenEtiqueta) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ OrigenEtiqueta) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ OrigenEtiqueta) HintSize(int)                     { panic("Unsupported operation") }
func (_ OrigenEtiqueta) Finalize()                        {}

func (_ OrigenEtiqueta) AvroCRC64Fingerprint() []byte {
	return []byte(OrigenEtiquetaAvroCRC64Fingerprint)
}

func (r OrigenEtiqueta) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Tipo"], err = json.Marshal(r.Tipo)
	if err != nil {
		return nil, err
	}
	output["Calle"], err = json.Marshal(r.Calle)
	if err != nil {
		return nil, err
	}
	output["Numero"], err = json.Marshal(r.Numero)
	if err != nil {
		return nil, err
	}
	output["Localidad"], err = json.Marshal(r.Localidad)
	if err != nil {
		return nil, err
	}
	output["Provincia"], err = json.Marshal(r.Provincia)
	if err != nil {
		return nil, err
	}
	output["CodigoPostal"], err = json.Marshal(r.CodigoPostal)
	if err != nil {
		return nil, err
	}
	output["SucursalId"], err = json.Marshal(r.SucursalId)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *OrigenEtiqueta) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Tipo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Tipo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Tipo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Calle"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Calle); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Calle")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Numero"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Numero); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Numero")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Localidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Localidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Localidad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Provincia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Provincia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Provincia")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoPostal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoPostal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoPostal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["SucursalId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SucursalId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for SucursalId")
	}
	return nil
}
