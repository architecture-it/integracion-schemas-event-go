// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     UsuarioEtiqueta.avsc
 */
package CorporativoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type UsuarioEtiqueta struct {
	Cliente ClienteEtiqueta `json:"Cliente"`
}

const UsuarioEtiquetaAvroCRC64Fingerprint = "#1\xc1Y\x92\x1eM\xe7"

func NewUsuarioEtiqueta() UsuarioEtiqueta {
	r := UsuarioEtiqueta{}
	r.Cliente = NewClienteEtiqueta()

	return r
}

func DeserializeUsuarioEtiqueta(r io.Reader) (UsuarioEtiqueta, error) {
	t := NewUsuarioEtiqueta()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeUsuarioEtiquetaFromSchema(r io.Reader, schema string) (UsuarioEtiqueta, error) {
	t := NewUsuarioEtiqueta()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeUsuarioEtiqueta(r UsuarioEtiqueta, w io.Writer) error {
	var err error
	err = writeClienteEtiqueta(r.Cliente, w)
	if err != nil {
		return err
	}
	return err
}

func (r UsuarioEtiqueta) Serialize(w io.Writer) error {
	return writeUsuarioEtiqueta(r, w)
}

func (r UsuarioEtiqueta) Schema() string {
	return "{\"fields\":[{\"name\":\"Cliente\",\"type\":{\"fields\":[{\"name\":\"CodigoAndreani\",\"type\":\"string\"},{\"name\":\"Nombre\",\"type\":\"string\"},{\"name\":\"Logo\",\"type\":\"string\"}],\"name\":\"ClienteEtiqueta\",\"type\":\"record\"}}],\"name\":\"Corporativo.Events.Record.UsuarioEtiqueta\",\"type\":\"record\"}"
}

func (r UsuarioEtiqueta) SchemaName() string {
	return "Corporativo.Events.Record.UsuarioEtiqueta"
}

func (_ UsuarioEtiqueta) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ UsuarioEtiqueta) SetInt(v int32)       { panic("Unsupported operation") }
func (_ UsuarioEtiqueta) SetLong(v int64)      { panic("Unsupported operation") }
func (_ UsuarioEtiqueta) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ UsuarioEtiqueta) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ UsuarioEtiqueta) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ UsuarioEtiqueta) SetString(v string)   { panic("Unsupported operation") }
func (_ UsuarioEtiqueta) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *UsuarioEtiqueta) Get(i int) types.Field {
	switch i {
	case 0:
		r.Cliente = NewClienteEtiqueta()

		w := types.Record{Target: &r.Cliente}

		return w

	}
	panic("Unknown field index")
}

func (r *UsuarioEtiqueta) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *UsuarioEtiqueta) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ UsuarioEtiqueta) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ UsuarioEtiqueta) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ UsuarioEtiqueta) HintSize(int)                     { panic("Unsupported operation") }
func (_ UsuarioEtiqueta) Finalize()                        {}

func (_ UsuarioEtiqueta) AvroCRC64Fingerprint() []byte {
	return []byte(UsuarioEtiquetaAvroCRC64Fingerprint)
}

func (r UsuarioEtiqueta) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Cliente"], err = json.Marshal(r.Cliente)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *UsuarioEtiqueta) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Cliente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cliente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Cliente")
	}
	return nil
}
