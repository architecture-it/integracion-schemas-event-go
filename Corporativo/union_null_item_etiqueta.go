// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     PaqueteEtiqueta.avsc
 */
package CorporativoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullItemEtiquetaTypeEnum int

const (
	UnionNullItemEtiquetaTypeEnumItemEtiqueta UnionNullItemEtiquetaTypeEnum = 1
)

type UnionNullItemEtiqueta struct {
	Null         *types.NullVal
	ItemEtiqueta ItemEtiqueta
	UnionType    UnionNullItemEtiquetaTypeEnum
}

func writeUnionNullItemEtiqueta(r *UnionNullItemEtiqueta, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullItemEtiquetaTypeEnumItemEtiqueta:
		return writeItemEtiqueta(r.ItemEtiqueta, w)
	}
	return fmt.Errorf("invalid value for *UnionNullItemEtiqueta")
}

func NewUnionNullItemEtiqueta() *UnionNullItemEtiqueta {
	return &UnionNullItemEtiqueta{}
}

func (r *UnionNullItemEtiqueta) Serialize(w io.Writer) error {
	return writeUnionNullItemEtiqueta(r, w)
}

func DeserializeUnionNullItemEtiqueta(r io.Reader) (*UnionNullItemEtiqueta, error) {
	t := NewUnionNullItemEtiqueta()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullItemEtiquetaFromSchema(r io.Reader, schema string) (*UnionNullItemEtiqueta, error) {
	t := NewUnionNullItemEtiqueta()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullItemEtiqueta) Schema() string {
	return "[\"null\",{\"fields\":[{\"name\":\"Nombre\",\"type\":\"string\"}],\"name\":\"ItemEtiqueta\",\"type\":\"record\"}]"
}

func (_ *UnionNullItemEtiqueta) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullItemEtiqueta) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullItemEtiqueta) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullItemEtiqueta) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullItemEtiqueta) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullItemEtiqueta) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullItemEtiqueta) SetLong(v int64) {

	r.UnionType = (UnionNullItemEtiquetaTypeEnum)(v)
}

func (r *UnionNullItemEtiqueta) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ItemEtiqueta = NewItemEtiqueta()
		return &types.Record{Target: (&r.ItemEtiqueta)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullItemEtiqueta) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionNullItemEtiqueta) HintSize(i int)                   { panic("Unsupported operation") }
func (_ *UnionNullItemEtiqueta) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionNullItemEtiqueta) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullItemEtiqueta) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionNullItemEtiqueta) Finalize()                        {}

func (r *UnionNullItemEtiqueta) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullItemEtiquetaTypeEnumItemEtiqueta:
		return json.Marshal(map[string]interface{}{"Andreani.Corporativo.Events.Record.ItemEtiqueta": r.ItemEtiqueta})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullItemEtiqueta")
}

func (r *UnionNullItemEtiqueta) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["Andreani.Corporativo.Events.Record.ItemEtiqueta"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ItemEtiqueta)
	}
	return fmt.Errorf("invalid value for *UnionNullItemEtiqueta")
}
