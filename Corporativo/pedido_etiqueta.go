// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     PedidoEtiqueta.avsc
 */
package CorporativoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type PedidoEtiqueta struct {
	Usuario UsuarioEtiqueta `json:"Usuario"`
}

const PedidoEtiquetaAvroCRC64Fingerprint = "\xb3GI\a\xfd\xd4\xd5!"

func NewPedidoEtiqueta() PedidoEtiqueta {
	r := PedidoEtiqueta{}
	r.Usuario = NewUsuarioEtiqueta()

	return r
}

func DeserializePedidoEtiqueta(r io.Reader) (PedidoEtiqueta, error) {
	t := NewPedidoEtiqueta()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePedidoEtiquetaFromSchema(r io.Reader, schema string) (PedidoEtiqueta, error) {
	t := NewPedidoEtiqueta()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePedidoEtiqueta(r PedidoEtiqueta, w io.Writer) error {
	var err error
	err = writeUsuarioEtiqueta(r.Usuario, w)
	if err != nil {
		return err
	}
	return err
}

func (r PedidoEtiqueta) Serialize(w io.Writer) error {
	return writePedidoEtiqueta(r, w)
}

func (r PedidoEtiqueta) Schema() string {
	return "{\"fields\":[{\"name\":\"Usuario\",\"type\":{\"fields\":[{\"name\":\"Cliente\",\"type\":{\"fields\":[{\"name\":\"CodigoAndreani\",\"type\":\"string\"},{\"name\":\"Nombre\",\"type\":\"string\"},{\"name\":\"Logo\",\"type\":\"string\"}],\"name\":\"ClienteEtiqueta\",\"type\":\"record\"}}],\"name\":\"UsuarioEtiqueta\",\"type\":\"record\"}}],\"name\":\"Andreani.Corporativo.Events.Record.PedidoEtiqueta\",\"type\":\"record\"}"
}

func (r PedidoEtiqueta) SchemaName() string {
	return "Andreani.Corporativo.Events.Record.PedidoEtiqueta"
}

func (_ PedidoEtiqueta) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ PedidoEtiqueta) SetInt(v int32)       { panic("Unsupported operation") }
func (_ PedidoEtiqueta) SetLong(v int64)      { panic("Unsupported operation") }
func (_ PedidoEtiqueta) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ PedidoEtiqueta) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ PedidoEtiqueta) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ PedidoEtiqueta) SetString(v string)   { panic("Unsupported operation") }
func (_ PedidoEtiqueta) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *PedidoEtiqueta) Get(i int) types.Field {
	switch i {
	case 0:
		r.Usuario = NewUsuarioEtiqueta()

		w := types.Record{Target: &r.Usuario}

		return w

	}
	panic("Unknown field index")
}

func (r *PedidoEtiqueta) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *PedidoEtiqueta) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ PedidoEtiqueta) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ PedidoEtiqueta) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ PedidoEtiqueta) HintSize(int)                     { panic("Unsupported operation") }
func (_ PedidoEtiqueta) Finalize()                        {}

func (_ PedidoEtiqueta) AvroCRC64Fingerprint() []byte {
	return []byte(PedidoEtiquetaAvroCRC64Fingerprint)
}

func (r PedidoEtiqueta) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Usuario"], err = json.Marshal(r.Usuario)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *PedidoEtiqueta) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Usuario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Usuario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Usuario")
	}
	return nil
}
