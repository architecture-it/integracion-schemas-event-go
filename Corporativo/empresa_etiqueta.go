// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EmpresaEtiqueta.avsc
 */
package CorporativoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EmpresaEtiqueta struct {
	Nombre *UnionNullString `json:"Nombre"`

	RazonSocial *UnionNullString `json:"RazonSocial"`
}

const EmpresaEtiquetaAvroCRC64Fingerprint = "fjO\xb6\xa7\xf4\xb8\xf3"

func NewEmpresaEtiqueta() EmpresaEtiqueta {
	r := EmpresaEtiqueta{}
	r.Nombre = nil
	r.RazonSocial = nil
	return r
}

func DeserializeEmpresaEtiqueta(r io.Reader) (EmpresaEtiqueta, error) {
	t := NewEmpresaEtiqueta()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEmpresaEtiquetaFromSchema(r io.Reader, schema string) (EmpresaEtiqueta, error) {
	t := NewEmpresaEtiqueta()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEmpresaEtiqueta(r EmpresaEtiqueta, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Nombre, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.RazonSocial, w)
	if err != nil {
		return err
	}
	return err
}

func (r EmpresaEtiqueta) Serialize(w io.Writer) error {
	return writeEmpresaEtiqueta(r, w)
}

func (r EmpresaEtiqueta) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Nombre\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"RazonSocial\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.Corporativo.Events.Record.EmpresaEtiqueta\",\"type\":\"record\"}"
}

func (r EmpresaEtiqueta) SchemaName() string {
	return "Andreani.Corporativo.Events.Record.EmpresaEtiqueta"
}

func (_ EmpresaEtiqueta) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EmpresaEtiqueta) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EmpresaEtiqueta) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EmpresaEtiqueta) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EmpresaEtiqueta) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EmpresaEtiqueta) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EmpresaEtiqueta) SetString(v string)   { panic("Unsupported operation") }
func (_ EmpresaEtiqueta) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EmpresaEtiqueta) Get(i int) types.Field {
	switch i {
	case 0:
		r.Nombre = NewUnionNullString()

		return r.Nombre
	case 1:
		r.RazonSocial = NewUnionNullString()

		return r.RazonSocial
	}
	panic("Unknown field index")
}

func (r *EmpresaEtiqueta) SetDefault(i int) {
	switch i {
	case 0:
		r.Nombre = nil
		return
	case 1:
		r.RazonSocial = nil
		return
	}
	panic("Unknown field index")
}

func (r *EmpresaEtiqueta) NullField(i int) {
	switch i {
	case 0:
		r.Nombre = nil
		return
	case 1:
		r.RazonSocial = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ EmpresaEtiqueta) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EmpresaEtiqueta) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EmpresaEtiqueta) HintSize(int)                     { panic("Unsupported operation") }
func (_ EmpresaEtiqueta) Finalize()                        {}

func (_ EmpresaEtiqueta) AvroCRC64Fingerprint() []byte {
	return []byte(EmpresaEtiquetaAvroCRC64Fingerprint)
}

func (r EmpresaEtiqueta) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Nombre"], err = json.Marshal(r.Nombre)
	if err != nil {
		return nil, err
	}
	output["RazonSocial"], err = json.Marshal(r.RazonSocial)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EmpresaEtiqueta) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Nombre"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nombre); err != nil {
			return err
		}
	} else {
		r.Nombre = NewUnionNullString()

		r.Nombre = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["RazonSocial"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RazonSocial); err != nil {
			return err
		}
	} else {
		r.RazonSocial = NewUnionNullString()

		r.RazonSocial = nil
	}
	return nil
}
