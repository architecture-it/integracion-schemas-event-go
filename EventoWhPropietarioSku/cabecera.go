// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EventoWhPropietarioSkuCompletado.avsc
 */
package EventoWhPropietarioSkuEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Cabecera struct {
	TransferenciaWH string `json:"TransferenciaWH"`

	Estado *UnionNullString `json:"Estado"`

	ReferenciaCliente *UnionNullString `json:"ReferenciaCliente"`

	FechaFinalizacion *UnionNullLong `json:"FechaFinalizacion"`

	CodigoAcondi *UnionNullString `json:"CodigoAcondi"`

	DescripcionAcondi *UnionNullString `json:"DescripcionAcondi"`

	TipoTransferencia *UnionNullString `json:"TipoTransferencia"`
}

const CabeceraAvroCRC64Fingerprint = "$>\x02\xff…ô\x96\xf5"

func NewCabecera() Cabecera {
	r := Cabecera{}
	return r
}

func DeserializeCabecera(r io.Reader) (Cabecera, error) {
	t := NewCabecera()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCabeceraFromSchema(r io.Reader, schema string) (Cabecera, error) {
	t := NewCabecera()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCabecera(r Cabecera, w io.Writer) error {
	var err error
	err = vm.WriteString(r.TransferenciaWH, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Estado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ReferenciaCliente, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaFinalizacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoAcondi, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DescripcionAcondi, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoTransferencia, w)
	if err != nil {
		return err
	}
	return err
}

func (r Cabecera) Serialize(w io.Writer) error {
	return writeCabecera(r, w)
}

func (r Cabecera) Schema() string {
	return "{\"fields\":[{\"name\":\"TransferenciaWH\",\"type\":\"string\"},{\"name\":\"Estado\",\"type\":[\"null\",\"string\"]},{\"name\":\"ReferenciaCliente\",\"type\":[\"null\",\"string\"]},{\"name\":\"FechaFinalizacion\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"CodigoAcondi\",\"type\":[\"null\",\"string\"]},{\"name\":\"DescripcionAcondi\",\"type\":[\"null\",\"string\"]},{\"name\":\"TipoTransferencia\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.EventoWhPropietarioSku.Events.CompletadoCommon.Cabecera\",\"type\":\"record\"}"
}

func (r Cabecera) SchemaName() string {
	return "Andreani.EventoWhPropietarioSku.Events.CompletadoCommon.Cabecera"
}

func (_ Cabecera) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Cabecera) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Cabecera) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Cabecera) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Cabecera) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Cabecera) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Cabecera) SetString(v string)   { panic("Unsupported operation") }
func (_ Cabecera) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Cabecera) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.TransferenciaWH}

		return w

	case 1:
		r.Estado = NewUnionNullString()

		return r.Estado
	case 2:
		r.ReferenciaCliente = NewUnionNullString()

		return r.ReferenciaCliente
	case 3:
		r.FechaFinalizacion = NewUnionNullLong()

		return r.FechaFinalizacion
	case 4:
		r.CodigoAcondi = NewUnionNullString()

		return r.CodigoAcondi
	case 5:
		r.DescripcionAcondi = NewUnionNullString()

		return r.DescripcionAcondi
	case 6:
		r.TipoTransferencia = NewUnionNullString()

		return r.TipoTransferencia
	}
	panic("Unknown field index")
}

func (r *Cabecera) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Cabecera) NullField(i int) {
	switch i {
	case 1:
		r.Estado = nil
		return
	case 2:
		r.ReferenciaCliente = nil
		return
	case 3:
		r.FechaFinalizacion = nil
		return
	case 4:
		r.CodigoAcondi = nil
		return
	case 5:
		r.DescripcionAcondi = nil
		return
	case 6:
		r.TipoTransferencia = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Cabecera) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Cabecera) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Cabecera) HintSize(int)                     { panic("Unsupported operation") }
func (_ Cabecera) Finalize()                        {}

func (_ Cabecera) AvroCRC64Fingerprint() []byte {
	return []byte(CabeceraAvroCRC64Fingerprint)
}

func (r Cabecera) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["TransferenciaWH"], err = json.Marshal(r.TransferenciaWH)
	if err != nil {
		return nil, err
	}
	output["Estado"], err = json.Marshal(r.Estado)
	if err != nil {
		return nil, err
	}
	output["ReferenciaCliente"], err = json.Marshal(r.ReferenciaCliente)
	if err != nil {
		return nil, err
	}
	output["FechaFinalizacion"], err = json.Marshal(r.FechaFinalizacion)
	if err != nil {
		return nil, err
	}
	output["CodigoAcondi"], err = json.Marshal(r.CodigoAcondi)
	if err != nil {
		return nil, err
	}
	output["DescripcionAcondi"], err = json.Marshal(r.DescripcionAcondi)
	if err != nil {
		return nil, err
	}
	output["TipoTransferencia"], err = json.Marshal(r.TipoTransferencia)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Cabecera) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["TransferenciaWH"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TransferenciaWH); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TransferenciaWH")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Estado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Estado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ReferenciaCliente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ReferenciaCliente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ReferenciaCliente")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaFinalizacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaFinalizacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FechaFinalizacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoAcondi"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoAcondi); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoAcondi")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DescripcionAcondi"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DescripcionAcondi); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DescripcionAcondi")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoTransferencia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoTransferencia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoTransferencia")
	}
	return nil
}
