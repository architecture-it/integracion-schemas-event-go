// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Solicitud.avsc
 */
package GeneracionCOTEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Solicitud struct {
	Id int32 `json:"Id"`

	IdPropietario int32 `json:"IdPropietario"`

	NombrePropietario string `json:"NombrePropietario"`

	Numero string `json:"Numero"`

	Fecha int64 `json:"Fecha"`

	FechaSalidaTransporte int64 `json:"FechaSalidaTransporte"`

	CodComprobante string `json:"CodComprobante"`

	CentroEmisorComprobante int32 `json:"CentroEmisorComprobante"`

	NumeroComprobante int32 `json:"NumeroComprobante"`

	ImporteComprobante Bytes `json:"ImporteComprobante"`

	DestinatarioCUIT string `json:"DestinatarioCUIT"`

	DestinatarioRazonSocial string `json:"DestinatarioRazonSocial"`

	DestinatarioCalle string `json:"DestinatarioCalle"`

	DestinatarioNumero string `json:"DestinatarioNumero"`

	DestinatarioPiso *UnionNullString `json:"DestinatarioPiso"`

	DestinatarioDepartamento *UnionNullString `json:"DestinatarioDepartamento"`

	DestinatarioBarrio *UnionNullString `json:"DestinatarioBarrio"`

	DestinatarioCodigoPostal string `json:"DestinatarioCodigoPostal"`

	DestinatarioLocalidad string `json:"DestinatarioLocalidad"`

	DestinatarioProvincia string `json:"DestinatarioProvincia"`

	OrigenCUIT string `json:"OrigenCUIT"`

	OrigenRazonSocial string `json:"OrigenRazonSocial"`

	OrigenCalle string `json:"OrigenCalle"`

	OrigenNumero string `json:"OrigenNumero"`

	OrigenPiso *UnionNullString `json:"OrigenPiso"`

	OrigenDepartamento *UnionNullString `json:"OrigenDepartamento"`

	OrigenBarrio *UnionNullString `json:"OrigenBarrio"`

	OrigenCodigoPostal string `json:"OrigenCodigoPostal"`

	OrigenLocalidad string `json:"OrigenLocalidad"`

	OrigenProvincia string `json:"OrigenProvincia"`

	IdTransportista int32 `json:"IdTransportista"`

	RecorridoTipo *UnionNullString `json:"RecorridoTipo"`

	RecorridoLocalidad *UnionNullString `json:"RecorridoLocalidad"`

	RecorridoCalle *UnionNullString `json:"RecorridoCalle"`

	RecorridoRuta *UnionNullString `json:"RecorridoRuta"`

	PatenteVehiculo *UnionNullString `json:"PatenteVehiculo"`

	PatenteAcoplado *UnionNullString `json:"PatenteAcoplado"`

	Detalle []Linea `json:"detalle"`
}

const SolicitudAvroCRC64Fingerprint = "^\b\xe6\xe5\x15s\xd1\xe1"

func NewSolicitud() Solicitud {
	r := Solicitud{}
	r.Detalle = make([]Linea, 0)

	return r
}

func DeserializeSolicitud(r io.Reader) (Solicitud, error) {
	t := NewSolicitud()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSolicitudFromSchema(r io.Reader, schema string) (Solicitud, error) {
	t := NewSolicitud()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSolicitud(r Solicitud, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.IdPropietario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NombrePropietario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Numero, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Fecha, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.FechaSalidaTransporte, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodComprobante, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.CentroEmisorComprobante, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.NumeroComprobante, w)
	if err != nil {
		return err
	}
	err = vm.WriteBytes(r.ImporteComprobante, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.DestinatarioCUIT, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.DestinatarioRazonSocial, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.DestinatarioCalle, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.DestinatarioNumero, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DestinatarioPiso, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DestinatarioDepartamento, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DestinatarioBarrio, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.DestinatarioCodigoPostal, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.DestinatarioLocalidad, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.DestinatarioProvincia, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OrigenCUIT, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OrigenRazonSocial, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OrigenCalle, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OrigenNumero, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.OrigenPiso, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.OrigenDepartamento, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.OrigenBarrio, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OrigenCodigoPostal, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OrigenLocalidad, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OrigenProvincia, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.IdTransportista, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.RecorridoTipo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.RecorridoLocalidad, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.RecorridoCalle, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.RecorridoRuta, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PatenteVehiculo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PatenteAcoplado, w)
	if err != nil {
		return err
	}
	err = writeArrayLinea(r.Detalle, w)
	if err != nil {
		return err
	}
	return err
}

func (r Solicitud) Serialize(w io.Writer) error {
	return writeSolicitud(r, w)
}

func (r Solicitud) Schema() string {
	return "{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"IdPropietario\",\"type\":\"int\"},{\"name\":\"NombrePropietario\",\"type\":\"string\"},{\"name\":\"Numero\",\"type\":\"string\"},{\"name\":\"Fecha\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"FechaSalidaTransporte\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"CodComprobante\",\"type\":\"string\"},{\"name\":\"CentroEmisorComprobante\",\"type\":\"int\"},{\"name\":\"NumeroComprobante\",\"type\":\"int\"},{\"name\":\"ImporteComprobante\",\"type\":{\"logicalType\":\"decimal\",\"precision\":12,\"scale\":2,\"type\":\"bytes\"}},{\"name\":\"DestinatarioCUIT\",\"type\":\"string\"},{\"name\":\"DestinatarioRazonSocial\",\"type\":\"string\"},{\"name\":\"DestinatarioCalle\",\"type\":\"string\"},{\"name\":\"DestinatarioNumero\",\"type\":\"string\"},{\"name\":\"DestinatarioPiso\",\"type\":[\"null\",\"string\"]},{\"name\":\"DestinatarioDepartamento\",\"type\":[\"null\",\"string\"]},{\"name\":\"DestinatarioBarrio\",\"type\":[\"null\",\"string\"]},{\"name\":\"DestinatarioCodigoPostal\",\"type\":\"string\"},{\"name\":\"DestinatarioLocalidad\",\"type\":\"string\"},{\"name\":\"DestinatarioProvincia\",\"type\":\"string\"},{\"name\":\"OrigenCUIT\",\"type\":\"string\"},{\"name\":\"OrigenRazonSocial\",\"type\":\"string\"},{\"name\":\"OrigenCalle\",\"type\":\"string\"},{\"name\":\"OrigenNumero\",\"type\":\"string\"},{\"name\":\"OrigenPiso\",\"type\":[\"null\",\"string\"]},{\"name\":\"OrigenDepartamento\",\"type\":[\"null\",\"string\"]},{\"name\":\"OrigenBarrio\",\"type\":[\"null\",\"string\"]},{\"name\":\"OrigenCodigoPostal\",\"type\":\"string\"},{\"name\":\"OrigenLocalidad\",\"type\":\"string\"},{\"name\":\"OrigenProvincia\",\"type\":\"string\"},{\"name\":\"IdTransportista\",\"type\":\"int\"},{\"name\":\"RecorridoTipo\",\"type\":[\"null\",\"string\"]},{\"name\":\"RecorridoLocalidad\",\"type\":[\"null\",\"string\"]},{\"name\":\"RecorridoCalle\",\"type\":[\"null\",\"string\"]},{\"name\":\"RecorridoRuta\",\"type\":[\"null\",\"string\"]},{\"name\":\"PatenteVehiculo\",\"type\":[\"null\",\"string\"]},{\"name\":\"PatenteAcoplado\",\"type\":[\"null\",\"string\"]},{\"name\":\"detalle\",\"type\":{\"items\":{\"fields\":[{\"name\":\"NumeroDeLinea\",\"type\":\"int\"},{\"name\":\"CodigoDeProducto\",\"type\":\"string\"},{\"name\":\"DescripcionDeProducto\",\"type\":\"string\"},{\"name\":\"CodigoUOM\",\"type\":\"string\"},{\"name\":\"DescripcionUOM\",\"type\":\"string\"},{\"name\":\"Cantidad\",\"type\":\"int\"}],\"name\":\"Linea\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Andreani.GeneracionCOT.Events.Record.Solicitud\",\"type\":\"record\"}"
}

func (r Solicitud) SchemaName() string {
	return "Andreani.GeneracionCOT.Events.Record.Solicitud"
}

func (_ Solicitud) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Solicitud) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Solicitud) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Solicitud) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Solicitud) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Solicitud) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Solicitud) SetString(v string)   { panic("Unsupported operation") }
func (_ Solicitud) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Solicitud) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.Id}

		return w

	case 1:
		w := types.Int{Target: &r.IdPropietario}

		return w

	case 2:
		w := types.String{Target: &r.NombrePropietario}

		return w

	case 3:
		w := types.String{Target: &r.Numero}

		return w

	case 4:
		w := types.Long{Target: &r.Fecha}

		return w

	case 5:
		w := types.Long{Target: &r.FechaSalidaTransporte}

		return w

	case 6:
		w := types.String{Target: &r.CodComprobante}

		return w

	case 7:
		w := types.Int{Target: &r.CentroEmisorComprobante}

		return w

	case 8:
		w := types.Int{Target: &r.NumeroComprobante}

		return w

	case 9:
		w := BytesWrapper{Target: &r.ImporteComprobante}

		return w

	case 10:
		w := types.String{Target: &r.DestinatarioCUIT}

		return w

	case 11:
		w := types.String{Target: &r.DestinatarioRazonSocial}

		return w

	case 12:
		w := types.String{Target: &r.DestinatarioCalle}

		return w

	case 13:
		w := types.String{Target: &r.DestinatarioNumero}

		return w

	case 14:
		r.DestinatarioPiso = NewUnionNullString()

		return r.DestinatarioPiso
	case 15:
		r.DestinatarioDepartamento = NewUnionNullString()

		return r.DestinatarioDepartamento
	case 16:
		r.DestinatarioBarrio = NewUnionNullString()

		return r.DestinatarioBarrio
	case 17:
		w := types.String{Target: &r.DestinatarioCodigoPostal}

		return w

	case 18:
		w := types.String{Target: &r.DestinatarioLocalidad}

		return w

	case 19:
		w := types.String{Target: &r.DestinatarioProvincia}

		return w

	case 20:
		w := types.String{Target: &r.OrigenCUIT}

		return w

	case 21:
		w := types.String{Target: &r.OrigenRazonSocial}

		return w

	case 22:
		w := types.String{Target: &r.OrigenCalle}

		return w

	case 23:
		w := types.String{Target: &r.OrigenNumero}

		return w

	case 24:
		r.OrigenPiso = NewUnionNullString()

		return r.OrigenPiso
	case 25:
		r.OrigenDepartamento = NewUnionNullString()

		return r.OrigenDepartamento
	case 26:
		r.OrigenBarrio = NewUnionNullString()

		return r.OrigenBarrio
	case 27:
		w := types.String{Target: &r.OrigenCodigoPostal}

		return w

	case 28:
		w := types.String{Target: &r.OrigenLocalidad}

		return w

	case 29:
		w := types.String{Target: &r.OrigenProvincia}

		return w

	case 30:
		w := types.Int{Target: &r.IdTransportista}

		return w

	case 31:
		r.RecorridoTipo = NewUnionNullString()

		return r.RecorridoTipo
	case 32:
		r.RecorridoLocalidad = NewUnionNullString()

		return r.RecorridoLocalidad
	case 33:
		r.RecorridoCalle = NewUnionNullString()

		return r.RecorridoCalle
	case 34:
		r.RecorridoRuta = NewUnionNullString()

		return r.RecorridoRuta
	case 35:
		r.PatenteVehiculo = NewUnionNullString()

		return r.PatenteVehiculo
	case 36:
		r.PatenteAcoplado = NewUnionNullString()

		return r.PatenteAcoplado
	case 37:
		r.Detalle = make([]Linea, 0)

		w := ArrayLineaWrapper{Target: &r.Detalle}

		return w

	}
	panic("Unknown field index")
}

func (r *Solicitud) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Solicitud) NullField(i int) {
	switch i {
	case 14:
		r.DestinatarioPiso = nil
		return
	case 15:
		r.DestinatarioDepartamento = nil
		return
	case 16:
		r.DestinatarioBarrio = nil
		return
	case 24:
		r.OrigenPiso = nil
		return
	case 25:
		r.OrigenDepartamento = nil
		return
	case 26:
		r.OrigenBarrio = nil
		return
	case 31:
		r.RecorridoTipo = nil
		return
	case 32:
		r.RecorridoLocalidad = nil
		return
	case 33:
		r.RecorridoCalle = nil
		return
	case 34:
		r.RecorridoRuta = nil
		return
	case 35:
		r.PatenteVehiculo = nil
		return
	case 36:
		r.PatenteAcoplado = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Solicitud) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Solicitud) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Solicitud) HintSize(int)                     { panic("Unsupported operation") }
func (_ Solicitud) Finalize()                        {}

func (_ Solicitud) AvroCRC64Fingerprint() []byte {
	return []byte(SolicitudAvroCRC64Fingerprint)
}

func (r Solicitud) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["IdPropietario"], err = json.Marshal(r.IdPropietario)
	if err != nil {
		return nil, err
	}
	output["NombrePropietario"], err = json.Marshal(r.NombrePropietario)
	if err != nil {
		return nil, err
	}
	output["Numero"], err = json.Marshal(r.Numero)
	if err != nil {
		return nil, err
	}
	output["Fecha"], err = json.Marshal(r.Fecha)
	if err != nil {
		return nil, err
	}
	output["FechaSalidaTransporte"], err = json.Marshal(r.FechaSalidaTransporte)
	if err != nil {
		return nil, err
	}
	output["CodComprobante"], err = json.Marshal(r.CodComprobante)
	if err != nil {
		return nil, err
	}
	output["CentroEmisorComprobante"], err = json.Marshal(r.CentroEmisorComprobante)
	if err != nil {
		return nil, err
	}
	output["NumeroComprobante"], err = json.Marshal(r.NumeroComprobante)
	if err != nil {
		return nil, err
	}
	output["ImporteComprobante"], err = json.Marshal(r.ImporteComprobante)
	if err != nil {
		return nil, err
	}
	output["DestinatarioCUIT"], err = json.Marshal(r.DestinatarioCUIT)
	if err != nil {
		return nil, err
	}
	output["DestinatarioRazonSocial"], err = json.Marshal(r.DestinatarioRazonSocial)
	if err != nil {
		return nil, err
	}
	output["DestinatarioCalle"], err = json.Marshal(r.DestinatarioCalle)
	if err != nil {
		return nil, err
	}
	output["DestinatarioNumero"], err = json.Marshal(r.DestinatarioNumero)
	if err != nil {
		return nil, err
	}
	output["DestinatarioPiso"], err = json.Marshal(r.DestinatarioPiso)
	if err != nil {
		return nil, err
	}
	output["DestinatarioDepartamento"], err = json.Marshal(r.DestinatarioDepartamento)
	if err != nil {
		return nil, err
	}
	output["DestinatarioBarrio"], err = json.Marshal(r.DestinatarioBarrio)
	if err != nil {
		return nil, err
	}
	output["DestinatarioCodigoPostal"], err = json.Marshal(r.DestinatarioCodigoPostal)
	if err != nil {
		return nil, err
	}
	output["DestinatarioLocalidad"], err = json.Marshal(r.DestinatarioLocalidad)
	if err != nil {
		return nil, err
	}
	output["DestinatarioProvincia"], err = json.Marshal(r.DestinatarioProvincia)
	if err != nil {
		return nil, err
	}
	output["OrigenCUIT"], err = json.Marshal(r.OrigenCUIT)
	if err != nil {
		return nil, err
	}
	output["OrigenRazonSocial"], err = json.Marshal(r.OrigenRazonSocial)
	if err != nil {
		return nil, err
	}
	output["OrigenCalle"], err = json.Marshal(r.OrigenCalle)
	if err != nil {
		return nil, err
	}
	output["OrigenNumero"], err = json.Marshal(r.OrigenNumero)
	if err != nil {
		return nil, err
	}
	output["OrigenPiso"], err = json.Marshal(r.OrigenPiso)
	if err != nil {
		return nil, err
	}
	output["OrigenDepartamento"], err = json.Marshal(r.OrigenDepartamento)
	if err != nil {
		return nil, err
	}
	output["OrigenBarrio"], err = json.Marshal(r.OrigenBarrio)
	if err != nil {
		return nil, err
	}
	output["OrigenCodigoPostal"], err = json.Marshal(r.OrigenCodigoPostal)
	if err != nil {
		return nil, err
	}
	output["OrigenLocalidad"], err = json.Marshal(r.OrigenLocalidad)
	if err != nil {
		return nil, err
	}
	output["OrigenProvincia"], err = json.Marshal(r.OrigenProvincia)
	if err != nil {
		return nil, err
	}
	output["IdTransportista"], err = json.Marshal(r.IdTransportista)
	if err != nil {
		return nil, err
	}
	output["RecorridoTipo"], err = json.Marshal(r.RecorridoTipo)
	if err != nil {
		return nil, err
	}
	output["RecorridoLocalidad"], err = json.Marshal(r.RecorridoLocalidad)
	if err != nil {
		return nil, err
	}
	output["RecorridoCalle"], err = json.Marshal(r.RecorridoCalle)
	if err != nil {
		return nil, err
	}
	output["RecorridoRuta"], err = json.Marshal(r.RecorridoRuta)
	if err != nil {
		return nil, err
	}
	output["PatenteVehiculo"], err = json.Marshal(r.PatenteVehiculo)
	if err != nil {
		return nil, err
	}
	output["PatenteAcoplado"], err = json.Marshal(r.PatenteAcoplado)
	if err != nil {
		return nil, err
	}
	output["detalle"], err = json.Marshal(r.Detalle)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Solicitud) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdPropietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdPropietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdPropietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NombrePropietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NombrePropietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NombrePropietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Numero"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Numero); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Numero")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Fecha"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Fecha); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Fecha")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaSalidaTransporte"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaSalidaTransporte); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FechaSalidaTransporte")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodComprobante"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodComprobante); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodComprobante")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CentroEmisorComprobante"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CentroEmisorComprobante); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CentroEmisorComprobante")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NumeroComprobante"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroComprobante); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NumeroComprobante")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ImporteComprobante"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ImporteComprobante); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ImporteComprobante")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DestinatarioCUIT"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinatarioCUIT); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DestinatarioCUIT")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DestinatarioRazonSocial"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinatarioRazonSocial); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DestinatarioRazonSocial")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DestinatarioCalle"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinatarioCalle); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DestinatarioCalle")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DestinatarioNumero"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinatarioNumero); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DestinatarioNumero")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DestinatarioPiso"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinatarioPiso); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DestinatarioPiso")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DestinatarioDepartamento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinatarioDepartamento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DestinatarioDepartamento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DestinatarioBarrio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinatarioBarrio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DestinatarioBarrio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DestinatarioCodigoPostal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinatarioCodigoPostal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DestinatarioCodigoPostal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DestinatarioLocalidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinatarioLocalidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DestinatarioLocalidad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DestinatarioProvincia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinatarioProvincia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DestinatarioProvincia")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OrigenCUIT"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrigenCUIT); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OrigenCUIT")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OrigenRazonSocial"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrigenRazonSocial); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OrigenRazonSocial")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OrigenCalle"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrigenCalle); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OrigenCalle")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OrigenNumero"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrigenNumero); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OrigenNumero")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OrigenPiso"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrigenPiso); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OrigenPiso")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OrigenDepartamento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrigenDepartamento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OrigenDepartamento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OrigenBarrio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrigenBarrio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OrigenBarrio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OrigenCodigoPostal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrigenCodigoPostal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OrigenCodigoPostal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OrigenLocalidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrigenLocalidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OrigenLocalidad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OrigenProvincia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrigenProvincia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OrigenProvincia")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdTransportista"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdTransportista); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdTransportista")
	}
	val = func() json.RawMessage {
		if v, ok := fields["RecorridoTipo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RecorridoTipo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for RecorridoTipo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["RecorridoLocalidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RecorridoLocalidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for RecorridoLocalidad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["RecorridoCalle"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RecorridoCalle); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for RecorridoCalle")
	}
	val = func() json.RawMessage {
		if v, ok := fields["RecorridoRuta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RecorridoRuta); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for RecorridoRuta")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PatenteVehiculo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PatenteVehiculo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PatenteVehiculo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PatenteAcoplado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PatenteAcoplado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PatenteAcoplado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["detalle"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Detalle); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for detalle")
	}
	return nil
}
