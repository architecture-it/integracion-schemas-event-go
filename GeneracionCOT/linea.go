// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Solicitud.avsc
 */
package GeneracionCOTEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Linea struct {
	NumeroDeLinea int32 `json:"NumeroDeLinea"`

	CodigoDeProducto string `json:"CodigoDeProducto"`

	DescripcionDeProducto string `json:"DescripcionDeProducto"`

	CodigoUOM string `json:"CodigoUOM"`

	DescripcionUO string `json:"DescripcionUO"`

	Cantidad int32 `json:"Cantidad"`
}

const LineaAvroCRC64Fingerprint = "#K]@\xf2\xa4\xe2\x8b"

func NewLinea() Linea {
	r := Linea{}
	return r
}

func DeserializeLinea(r io.Reader) (Linea, error) {
	t := NewLinea()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeLineaFromSchema(r io.Reader, schema string) (Linea, error) {
	t := NewLinea()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeLinea(r Linea, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.NumeroDeLinea, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodigoDeProducto, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.DescripcionDeProducto, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodigoUOM, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.DescripcionUO, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Cantidad, w)
	if err != nil {
		return err
	}
	return err
}

func (r Linea) Serialize(w io.Writer) error {
	return writeLinea(r, w)
}

func (r Linea) Schema() string {
	return "{\"fields\":[{\"name\":\"NumeroDeLinea\",\"type\":\"int\"},{\"name\":\"CodigoDeProducto\",\"type\":\"string\"},{\"name\":\"DescripcionDeProducto\",\"type\":\"string\"},{\"name\":\"CodigoUOM\",\"type\":\"string\"},{\"name\":\"DescripcionUO\",\"type\":\"string\"},{\"name\":\"Cantidad\",\"type\":\"int\"}],\"name\":\"Andreani.GeneracionCOT.Events.Record.Linea\",\"type\":\"record\"}"
}

func (r Linea) SchemaName() string {
	return "Andreani.GeneracionCOT.Events.Record.Linea"
}

func (_ Linea) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Linea) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Linea) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Linea) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Linea) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Linea) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Linea) SetString(v string)   { panic("Unsupported operation") }
func (_ Linea) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Linea) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.NumeroDeLinea}

		return w

	case 1:
		w := types.String{Target: &r.CodigoDeProducto}

		return w

	case 2:
		w := types.String{Target: &r.DescripcionDeProducto}

		return w

	case 3:
		w := types.String{Target: &r.CodigoUOM}

		return w

	case 4:
		w := types.String{Target: &r.DescripcionUO}

		return w

	case 5:
		w := types.Int{Target: &r.Cantidad}

		return w

	}
	panic("Unknown field index")
}

func (r *Linea) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Linea) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Linea) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Linea) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Linea) HintSize(int)                     { panic("Unsupported operation") }
func (_ Linea) Finalize()                        {}

func (_ Linea) AvroCRC64Fingerprint() []byte {
	return []byte(LineaAvroCRC64Fingerprint)
}

func (r Linea) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["NumeroDeLinea"], err = json.Marshal(r.NumeroDeLinea)
	if err != nil {
		return nil, err
	}
	output["CodigoDeProducto"], err = json.Marshal(r.CodigoDeProducto)
	if err != nil {
		return nil, err
	}
	output["DescripcionDeProducto"], err = json.Marshal(r.DescripcionDeProducto)
	if err != nil {
		return nil, err
	}
	output["CodigoUOM"], err = json.Marshal(r.CodigoUOM)
	if err != nil {
		return nil, err
	}
	output["DescripcionUO"], err = json.Marshal(r.DescripcionUO)
	if err != nil {
		return nil, err
	}
	output["Cantidad"], err = json.Marshal(r.Cantidad)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Linea) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["NumeroDeLinea"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeLinea); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NumeroDeLinea")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoDeProducto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoDeProducto); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoDeProducto")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DescripcionDeProducto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DescripcionDeProducto); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DescripcionDeProducto")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoUOM"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoUOM); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoUOM")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DescripcionUO"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DescripcionUO); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DescripcionUO")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Cantidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cantidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Cantidad")
	}
	return nil
}
