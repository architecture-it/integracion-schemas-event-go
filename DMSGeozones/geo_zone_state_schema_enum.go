// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     GeoZoneStateSchemaEnum.avsc
 */
package DMSGeozonesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type GeoZoneStateSchemaEnum int32

const (
	GeoZoneStateSchemaEnumACTIVE    GeoZoneStateSchemaEnum = 0
	GeoZoneStateSchemaEnumSUSPENDED GeoZoneStateSchemaEnum = 1
	GeoZoneStateSchemaEnumDRAFT     GeoZoneStateSchemaEnum = 2
	GeoZoneStateSchemaEnumDELETED   GeoZoneStateSchemaEnum = 3
	GeoZoneStateSchemaEnumINACTIVE  GeoZoneStateSchemaEnum = 4
)

func (e GeoZoneStateSchemaEnum) String() string {
	switch e {
	case GeoZoneStateSchemaEnumACTIVE:
		return "ACTIVE"
	case GeoZoneStateSchemaEnumSUSPENDED:
		return "SUSPENDED"
	case GeoZoneStateSchemaEnumDRAFT:
		return "DRAFT"
	case GeoZoneStateSchemaEnumDELETED:
		return "DELETED"
	case GeoZoneStateSchemaEnumINACTIVE:
		return "INACTIVE"
	}
	return "unknown"
}

func writeGeoZoneStateSchemaEnum(r GeoZoneStateSchemaEnum, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewGeoZoneStateSchemaEnumValue(raw string) (r GeoZoneStateSchemaEnum, err error) {
	switch raw {
	case "ACTIVE":
		return GeoZoneStateSchemaEnumACTIVE, nil
	case "SUSPENDED":
		return GeoZoneStateSchemaEnumSUSPENDED, nil
	case "DRAFT":
		return GeoZoneStateSchemaEnumDRAFT, nil
	case "DELETED":
		return GeoZoneStateSchemaEnumDELETED, nil
	case "INACTIVE":
		return GeoZoneStateSchemaEnumINACTIVE, nil
	}

	return -1, fmt.Errorf("invalid value for GeoZoneStateSchemaEnum: '%s'", raw)

}

func (b GeoZoneStateSchemaEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *GeoZoneStateSchemaEnum) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewGeoZoneStateSchemaEnumValue(stringVal)
	*b = val
	return err
}

type GeoZoneStateSchemaEnumWrapper struct {
	Target *GeoZoneStateSchemaEnum
}

func (b GeoZoneStateSchemaEnumWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b GeoZoneStateSchemaEnumWrapper) SetInt(v int32) {
	*(b.Target) = GeoZoneStateSchemaEnum(v)
}

func (b GeoZoneStateSchemaEnumWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b GeoZoneStateSchemaEnumWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b GeoZoneStateSchemaEnumWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b GeoZoneStateSchemaEnumWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b GeoZoneStateSchemaEnumWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b GeoZoneStateSchemaEnumWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b GeoZoneStateSchemaEnumWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b GeoZoneStateSchemaEnumWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b GeoZoneStateSchemaEnumWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b GeoZoneStateSchemaEnumWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b GeoZoneStateSchemaEnumWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b GeoZoneStateSchemaEnumWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b GeoZoneStateSchemaEnumWrapper) Finalize() {}
