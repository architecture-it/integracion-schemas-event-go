// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     GeoZoneSchema.avsc
 */
package DMSGeozonesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullEventTypeEnumTypeEnum int

const (
	UnionNullEventTypeEnumTypeEnumEventTypeEnum UnionNullEventTypeEnumTypeEnum = 1
)

type UnionNullEventTypeEnum struct {
	Null          *types.NullVal
	EventTypeEnum EventTypeEnum
	UnionType     UnionNullEventTypeEnumTypeEnum
}

func writeUnionNullEventTypeEnum(r *UnionNullEventTypeEnum, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullEventTypeEnumTypeEnumEventTypeEnum:
		return writeEventTypeEnum(r.EventTypeEnum, w)
	}
	return fmt.Errorf("invalid value for *UnionNullEventTypeEnum")
}

func NewUnionNullEventTypeEnum() *UnionNullEventTypeEnum {
	return &UnionNullEventTypeEnum{}
}

func (r *UnionNullEventTypeEnum) Serialize(w io.Writer) error {
	return writeUnionNullEventTypeEnum(r, w)
}

func DeserializeUnionNullEventTypeEnum(r io.Reader) (*UnionNullEventTypeEnum, error) {
	t := NewUnionNullEventTypeEnum()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullEventTypeEnumFromSchema(r io.Reader, schema string) (*UnionNullEventTypeEnum, error) {
	t := NewUnionNullEventTypeEnum()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullEventTypeEnum) Schema() string {
	return "[\"null\",{\"name\":\"EventTypeEnum\",\"symbols\":[\"CREATED\",\"UPDATED\",\"DELETED\",\"SUSPEND\"],\"type\":\"enum\"}]"
}

func (_ *UnionNullEventTypeEnum) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullEventTypeEnum) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullEventTypeEnum) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullEventTypeEnum) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullEventTypeEnum) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullEventTypeEnum) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullEventTypeEnum) SetLong(v int64) {

	r.UnionType = (UnionNullEventTypeEnumTypeEnum)(v)
}

func (r *UnionNullEventTypeEnum) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		return &EventTypeEnumWrapper{Target: (&r.EventTypeEnum)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullEventTypeEnum) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionNullEventTypeEnum) HintSize(i int)                   { panic("Unsupported operation") }
func (_ *UnionNullEventTypeEnum) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionNullEventTypeEnum) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullEventTypeEnum) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionNullEventTypeEnum) Finalize()                        {}

func (r *UnionNullEventTypeEnum) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullEventTypeEnumTypeEnumEventTypeEnum:
		return json.Marshal(map[string]interface{}{"Andreani.DMSGeozones.Events.Record.EventTypeEnum": r.EventTypeEnum})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullEventTypeEnum")
}

func (r *UnionNullEventTypeEnum) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["Andreani.DMSGeozones.Events.Record.EventTypeEnum"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.EventTypeEnum)
	}
	return fmt.Errorf("invalid value for *UnionNullEventTypeEnum")
}
