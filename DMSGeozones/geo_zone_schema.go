// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     GeoZoneSchema.avsc
 */
package DMSGeozonesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type GeoZoneSchema struct {
	ZoneId *UnionNullString `json:"ZoneId"`

	Key *UnionNullString `json:"Key"`

	OperativeUnit *UnionNullOperativeUnitDto `json:"OperativeUnit"`

	Aggregator *UnionNullString `json:"Aggregator"`

	Zone *UnionNullString `json:"Zone"`

	MaxVolume *UnionNullInt `json:"MaxVolume"`

	ValidFrom *UnionNullLong `json:"ValidFrom"`

	ValidUntil *UnionNullLong `json:"ValidUntil"`

	VehicleType []string `json:"VehicleType"`

	ShipmentType []string `json:"ShipmentType"`

	State *UnionNullGeoZoneStateEnum `json:"State"`

	SuspensionDates []SuspensionDateDto `json:"SuspensionDates"`

	RequestedLogistics []string `json:"RequestedLogistics"`

	Continent []string `json:"Continent"`

	SLA []string `json:"SLA"`

	MobileForm []string `json:"MobileForm"`

	GeoPoints []GeoDto `json:"GeoPoints"`

	Contracts []string `json:"Contracts"`

	CreatedDate *UnionNullLong `json:"CreatedDate"`

	UpdatedDate *UnionNullLong `json:"UpdatedDate"`

	CreatedBy *UnionNullString `json:"CreatedBy"`

	UpdatedBy *UnionNullString `json:"UpdatedBy"`

	AggregatorType []string `json:"AggregatorType"`

	EventId *UnionNullString `json:"EventId"`

	EventType *UnionNullEventTypeEnum `json:"EventType"`

	EventTimestamp *UnionNullLong `json:"EventTimestamp"`

	SourceSystem *UnionNullString `json:"SourceSystem"`
}

const GeoZoneSchemaAvroCRC64Fingerprint = "(I\xb4\xac)#\xb7y"

func NewGeoZoneSchema() GeoZoneSchema {
	r := GeoZoneSchema{}
	r.ZoneId = nil
	r.Key = nil
	r.OperativeUnit = nil
	r.Aggregator = nil
	r.Zone = nil
	r.MaxVolume = nil
	r.ValidFrom = nil
	r.ValidUntil = nil
	r.VehicleType = make([]string, 0)

	r.VehicleType = make([]string, 0)

	r.ShipmentType = make([]string, 0)

	r.ShipmentType = make([]string, 0)

	r.State = nil
	r.SuspensionDates = make([]SuspensionDateDto, 0)

	r.SuspensionDates = make([]SuspensionDateDto, 0)

	r.RequestedLogistics = make([]string, 0)

	r.RequestedLogistics = make([]string, 0)

	r.Continent = make([]string, 0)

	r.Continent = make([]string, 0)

	r.SLA = make([]string, 0)

	r.SLA = make([]string, 0)

	r.MobileForm = make([]string, 0)

	r.MobileForm = make([]string, 0)

	r.GeoPoints = make([]GeoDto, 0)

	r.GeoPoints = make([]GeoDto, 0)

	r.Contracts = make([]string, 0)

	r.Contracts = make([]string, 0)

	r.CreatedDate = nil
	r.UpdatedDate = nil
	r.CreatedBy = nil
	r.UpdatedBy = nil
	r.AggregatorType = make([]string, 0)

	r.AggregatorType = make([]string, 0)

	r.EventId = nil
	r.EventType = nil
	r.EventTimestamp = nil
	r.SourceSystem = nil
	return r
}

func DeserializeGeoZoneSchema(r io.Reader) (GeoZoneSchema, error) {
	t := NewGeoZoneSchema()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeGeoZoneSchemaFromSchema(r io.Reader, schema string) (GeoZoneSchema, error) {
	t := NewGeoZoneSchema()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeGeoZoneSchema(r GeoZoneSchema, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.ZoneId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Key, w)
	if err != nil {
		return err
	}
	err = writeUnionNullOperativeUnitDto(r.OperativeUnit, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Aggregator, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Zone, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.MaxVolume, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.ValidFrom, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.ValidUntil, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.VehicleType, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.ShipmentType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullGeoZoneStateEnum(r.State, w)
	if err != nil {
		return err
	}
	err = writeArraySuspensionDateDto(r.SuspensionDates, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.RequestedLogistics, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.Continent, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.SLA, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.MobileForm, w)
	if err != nil {
		return err
	}
	err = writeArrayGeoDto(r.GeoPoints, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.Contracts, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.CreatedDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.UpdatedDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CreatedBy, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.UpdatedBy, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.AggregatorType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EventId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullEventTypeEnum(r.EventType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.EventTimestamp, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SourceSystem, w)
	if err != nil {
		return err
	}
	return err
}

func (r GeoZoneSchema) Serialize(w io.Writer) error {
	return writeGeoZoneSchema(r, w)
}

func (r GeoZoneSchema) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"ZoneId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Key\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"OperativeUnit\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NumberCode\",\"type\":[\"null\",\"string\"]}],\"name\":\"OperativeUnitDto\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Aggregator\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Zone\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"MaxVolume\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"ValidFrom\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"ValidUntil\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":[],\"name\":\"VehicleType\",\"type\":{\"items\":\"string\",\"type\":\"array\"}},{\"default\":[],\"name\":\"ShipmentType\",\"type\":{\"items\":\"string\",\"type\":\"array\"}},{\"default\":null,\"name\":\"State\",\"type\":[\"null\",{\"name\":\"GeoZoneStateEnum\",\"symbols\":[\"ACTIVE\",\"SUSPENDED\",\"DRAFT\",\"DELETED\",\"INACTIVE\"],\"type\":\"enum\"}]},{\"default\":[],\"name\":\"SuspensionDates\",\"type\":{\"items\":{\"fields\":[{\"default\":null,\"name\":\"From\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"Until\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]}],\"name\":\"SuspensionDateDto\",\"type\":\"record\"},\"type\":\"array\"}},{\"default\":[],\"name\":\"RequestedLogistics\",\"type\":{\"items\":\"string\",\"type\":\"array\"}},{\"default\":[],\"name\":\"Continent\",\"type\":{\"items\":\"string\",\"type\":\"array\"}},{\"default\":[],\"name\":\"SLA\",\"type\":{\"items\":\"string\",\"type\":\"array\"}},{\"default\":[],\"name\":\"MobileForm\",\"type\":{\"items\":\"string\",\"type\":\"array\"}},{\"default\":[],\"name\":\"GeoPoints\",\"type\":{\"items\":{\"fields\":[{\"default\":null,\"name\":\"Order\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"Lat\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"Lng\",\"type\":[\"null\",\"double\"]}],\"name\":\"GeoDto\",\"type\":\"record\"},\"type\":\"array\"}},{\"default\":[],\"name\":\"Contracts\",\"type\":{\"items\":\"string\",\"type\":\"array\"}},{\"default\":null,\"name\":\"CreatedDate\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"UpdatedDate\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"CreatedBy\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"UpdatedBy\",\"type\":[\"null\",\"string\"]},{\"default\":[],\"name\":\"AggregatorType\",\"type\":{\"items\":\"string\",\"type\":\"array\"}},{\"default\":null,\"name\":\"EventId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EventType\",\"type\":[\"null\",{\"name\":\"EventTypeEnum\",\"symbols\":[\"CREATED\",\"UPDATED\",\"DELETED\",\"SUSPEND\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"EventTimestamp\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"SourceSystem\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.DMSGeozones.Events.Record.GeoZoneSchema\",\"type\":\"record\"}"
}

func (r GeoZoneSchema) SchemaName() string {
	return "Andreani.DMSGeozones.Events.Record.GeoZoneSchema"
}

func (_ GeoZoneSchema) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ GeoZoneSchema) SetInt(v int32)       { panic("Unsupported operation") }
func (_ GeoZoneSchema) SetLong(v int64)      { panic("Unsupported operation") }
func (_ GeoZoneSchema) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ GeoZoneSchema) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ GeoZoneSchema) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ GeoZoneSchema) SetString(v string)   { panic("Unsupported operation") }
func (_ GeoZoneSchema) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *GeoZoneSchema) Get(i int) types.Field {
	switch i {
	case 0:
		r.ZoneId = NewUnionNullString()

		return r.ZoneId
	case 1:
		r.Key = NewUnionNullString()

		return r.Key
	case 2:
		r.OperativeUnit = NewUnionNullOperativeUnitDto()

		return r.OperativeUnit
	case 3:
		r.Aggregator = NewUnionNullString()

		return r.Aggregator
	case 4:
		r.Zone = NewUnionNullString()

		return r.Zone
	case 5:
		r.MaxVolume = NewUnionNullInt()

		return r.MaxVolume
	case 6:
		r.ValidFrom = NewUnionNullLong()

		return r.ValidFrom
	case 7:
		r.ValidUntil = NewUnionNullLong()

		return r.ValidUntil
	case 8:
		r.VehicleType = make([]string, 0)

		w := ArrayStringWrapper{Target: &r.VehicleType}

		return w

	case 9:
		r.ShipmentType = make([]string, 0)

		w := ArrayStringWrapper{Target: &r.ShipmentType}

		return w

	case 10:
		r.State = NewUnionNullGeoZoneStateEnum()

		return r.State
	case 11:
		r.SuspensionDates = make([]SuspensionDateDto, 0)

		w := ArraySuspensionDateDtoWrapper{Target: &r.SuspensionDates}

		return w

	case 12:
		r.RequestedLogistics = make([]string, 0)

		w := ArrayStringWrapper{Target: &r.RequestedLogistics}

		return w

	case 13:
		r.Continent = make([]string, 0)

		w := ArrayStringWrapper{Target: &r.Continent}

		return w

	case 14:
		r.SLA = make([]string, 0)

		w := ArrayStringWrapper{Target: &r.SLA}

		return w

	case 15:
		r.MobileForm = make([]string, 0)

		w := ArrayStringWrapper{Target: &r.MobileForm}

		return w

	case 16:
		r.GeoPoints = make([]GeoDto, 0)

		w := ArrayGeoDtoWrapper{Target: &r.GeoPoints}

		return w

	case 17:
		r.Contracts = make([]string, 0)

		w := ArrayStringWrapper{Target: &r.Contracts}

		return w

	case 18:
		r.CreatedDate = NewUnionNullLong()

		return r.CreatedDate
	case 19:
		r.UpdatedDate = NewUnionNullLong()

		return r.UpdatedDate
	case 20:
		r.CreatedBy = NewUnionNullString()

		return r.CreatedBy
	case 21:
		r.UpdatedBy = NewUnionNullString()

		return r.UpdatedBy
	case 22:
		r.AggregatorType = make([]string, 0)

		w := ArrayStringWrapper{Target: &r.AggregatorType}

		return w

	case 23:
		r.EventId = NewUnionNullString()

		return r.EventId
	case 24:
		r.EventType = NewUnionNullEventTypeEnum()

		return r.EventType
	case 25:
		r.EventTimestamp = NewUnionNullLong()

		return r.EventTimestamp
	case 26:
		r.SourceSystem = NewUnionNullString()

		return r.SourceSystem
	}
	panic("Unknown field index")
}

func (r *GeoZoneSchema) SetDefault(i int) {
	switch i {
	case 0:
		r.ZoneId = nil
		return
	case 1:
		r.Key = nil
		return
	case 2:
		r.OperativeUnit = nil
		return
	case 3:
		r.Aggregator = nil
		return
	case 4:
		r.Zone = nil
		return
	case 5:
		r.MaxVolume = nil
		return
	case 6:
		r.ValidFrom = nil
		return
	case 7:
		r.ValidUntil = nil
		return
	case 8:
		r.VehicleType = make([]string, 0)

		return
	case 9:
		r.ShipmentType = make([]string, 0)

		return
	case 10:
		r.State = nil
		return
	case 11:
		r.SuspensionDates = make([]SuspensionDateDto, 0)

		return
	case 12:
		r.RequestedLogistics = make([]string, 0)

		return
	case 13:
		r.Continent = make([]string, 0)

		return
	case 14:
		r.SLA = make([]string, 0)

		return
	case 15:
		r.MobileForm = make([]string, 0)

		return
	case 16:
		r.GeoPoints = make([]GeoDto, 0)

		return
	case 17:
		r.Contracts = make([]string, 0)

		return
	case 18:
		r.CreatedDate = nil
		return
	case 19:
		r.UpdatedDate = nil
		return
	case 20:
		r.CreatedBy = nil
		return
	case 21:
		r.UpdatedBy = nil
		return
	case 22:
		r.AggregatorType = make([]string, 0)

		return
	case 23:
		r.EventId = nil
		return
	case 24:
		r.EventType = nil
		return
	case 25:
		r.EventTimestamp = nil
		return
	case 26:
		r.SourceSystem = nil
		return
	}
	panic("Unknown field index")
}

func (r *GeoZoneSchema) NullField(i int) {
	switch i {
	case 0:
		r.ZoneId = nil
		return
	case 1:
		r.Key = nil
		return
	case 2:
		r.OperativeUnit = nil
		return
	case 3:
		r.Aggregator = nil
		return
	case 4:
		r.Zone = nil
		return
	case 5:
		r.MaxVolume = nil
		return
	case 6:
		r.ValidFrom = nil
		return
	case 7:
		r.ValidUntil = nil
		return
	case 10:
		r.State = nil
		return
	case 18:
		r.CreatedDate = nil
		return
	case 19:
		r.UpdatedDate = nil
		return
	case 20:
		r.CreatedBy = nil
		return
	case 21:
		r.UpdatedBy = nil
		return
	case 23:
		r.EventId = nil
		return
	case 24:
		r.EventType = nil
		return
	case 25:
		r.EventTimestamp = nil
		return
	case 26:
		r.SourceSystem = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ GeoZoneSchema) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ GeoZoneSchema) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ GeoZoneSchema) HintSize(int)                     { panic("Unsupported operation") }
func (_ GeoZoneSchema) Finalize()                        {}

func (_ GeoZoneSchema) AvroCRC64Fingerprint() []byte {
	return []byte(GeoZoneSchemaAvroCRC64Fingerprint)
}

func (r GeoZoneSchema) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["ZoneId"], err = json.Marshal(r.ZoneId)
	if err != nil {
		return nil, err
	}
	output["Key"], err = json.Marshal(r.Key)
	if err != nil {
		return nil, err
	}
	output["OperativeUnit"], err = json.Marshal(r.OperativeUnit)
	if err != nil {
		return nil, err
	}
	output["Aggregator"], err = json.Marshal(r.Aggregator)
	if err != nil {
		return nil, err
	}
	output["Zone"], err = json.Marshal(r.Zone)
	if err != nil {
		return nil, err
	}
	output["MaxVolume"], err = json.Marshal(r.MaxVolume)
	if err != nil {
		return nil, err
	}
	output["ValidFrom"], err = json.Marshal(r.ValidFrom)
	if err != nil {
		return nil, err
	}
	output["ValidUntil"], err = json.Marshal(r.ValidUntil)
	if err != nil {
		return nil, err
	}
	output["VehicleType"], err = json.Marshal(r.VehicleType)
	if err != nil {
		return nil, err
	}
	output["ShipmentType"], err = json.Marshal(r.ShipmentType)
	if err != nil {
		return nil, err
	}
	output["State"], err = json.Marshal(r.State)
	if err != nil {
		return nil, err
	}
	output["SuspensionDates"], err = json.Marshal(r.SuspensionDates)
	if err != nil {
		return nil, err
	}
	output["RequestedLogistics"], err = json.Marshal(r.RequestedLogistics)
	if err != nil {
		return nil, err
	}
	output["Continent"], err = json.Marshal(r.Continent)
	if err != nil {
		return nil, err
	}
	output["SLA"], err = json.Marshal(r.SLA)
	if err != nil {
		return nil, err
	}
	output["MobileForm"], err = json.Marshal(r.MobileForm)
	if err != nil {
		return nil, err
	}
	output["GeoPoints"], err = json.Marshal(r.GeoPoints)
	if err != nil {
		return nil, err
	}
	output["Contracts"], err = json.Marshal(r.Contracts)
	if err != nil {
		return nil, err
	}
	output["CreatedDate"], err = json.Marshal(r.CreatedDate)
	if err != nil {
		return nil, err
	}
	output["UpdatedDate"], err = json.Marshal(r.UpdatedDate)
	if err != nil {
		return nil, err
	}
	output["CreatedBy"], err = json.Marshal(r.CreatedBy)
	if err != nil {
		return nil, err
	}
	output["UpdatedBy"], err = json.Marshal(r.UpdatedBy)
	if err != nil {
		return nil, err
	}
	output["AggregatorType"], err = json.Marshal(r.AggregatorType)
	if err != nil {
		return nil, err
	}
	output["EventId"], err = json.Marshal(r.EventId)
	if err != nil {
		return nil, err
	}
	output["EventType"], err = json.Marshal(r.EventType)
	if err != nil {
		return nil, err
	}
	output["EventTimestamp"], err = json.Marshal(r.EventTimestamp)
	if err != nil {
		return nil, err
	}
	output["SourceSystem"], err = json.Marshal(r.SourceSystem)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *GeoZoneSchema) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["ZoneId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ZoneId); err != nil {
			return err
		}
	} else {
		r.ZoneId = NewUnionNullString()

		r.ZoneId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Key"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Key); err != nil {
			return err
		}
	} else {
		r.Key = NewUnionNullString()

		r.Key = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["OperativeUnit"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OperativeUnit); err != nil {
			return err
		}
	} else {
		r.OperativeUnit = NewUnionNullOperativeUnitDto()

		r.OperativeUnit = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Aggregator"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Aggregator); err != nil {
			return err
		}
	} else {
		r.Aggregator = NewUnionNullString()

		r.Aggregator = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Zone"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Zone); err != nil {
			return err
		}
	} else {
		r.Zone = NewUnionNullString()

		r.Zone = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["MaxVolume"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MaxVolume); err != nil {
			return err
		}
	} else {
		r.MaxVolume = NewUnionNullInt()

		r.MaxVolume = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValidFrom"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValidFrom); err != nil {
			return err
		}
	} else {
		r.ValidFrom = NewUnionNullLong()

		r.ValidFrom = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValidUntil"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValidUntil); err != nil {
			return err
		}
	} else {
		r.ValidUntil = NewUnionNullLong()

		r.ValidUntil = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["VehicleType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VehicleType); err != nil {
			return err
		}
	} else {
		r.VehicleType = make([]string, 0)

		r.VehicleType = make([]string, 0)

	}
	val = func() json.RawMessage {
		if v, ok := fields["ShipmentType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ShipmentType); err != nil {
			return err
		}
	} else {
		r.ShipmentType = make([]string, 0)

		r.ShipmentType = make([]string, 0)

	}
	val = func() json.RawMessage {
		if v, ok := fields["State"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.State); err != nil {
			return err
		}
	} else {
		r.State = NewUnionNullGeoZoneStateEnum()

		r.State = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SuspensionDates"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SuspensionDates); err != nil {
			return err
		}
	} else {
		r.SuspensionDates = make([]SuspensionDateDto, 0)

		r.SuspensionDates = make([]SuspensionDateDto, 0)

	}
	val = func() json.RawMessage {
		if v, ok := fields["RequestedLogistics"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RequestedLogistics); err != nil {
			return err
		}
	} else {
		r.RequestedLogistics = make([]string, 0)

		r.RequestedLogistics = make([]string, 0)

	}
	val = func() json.RawMessage {
		if v, ok := fields["Continent"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Continent); err != nil {
			return err
		}
	} else {
		r.Continent = make([]string, 0)

		r.Continent = make([]string, 0)

	}
	val = func() json.RawMessage {
		if v, ok := fields["SLA"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SLA); err != nil {
			return err
		}
	} else {
		r.SLA = make([]string, 0)

		r.SLA = make([]string, 0)

	}
	val = func() json.RawMessage {
		if v, ok := fields["MobileForm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MobileForm); err != nil {
			return err
		}
	} else {
		r.MobileForm = make([]string, 0)

		r.MobileForm = make([]string, 0)

	}
	val = func() json.RawMessage {
		if v, ok := fields["GeoPoints"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.GeoPoints); err != nil {
			return err
		}
	} else {
		r.GeoPoints = make([]GeoDto, 0)

		r.GeoPoints = make([]GeoDto, 0)

	}
	val = func() json.RawMessage {
		if v, ok := fields["Contracts"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contracts); err != nil {
			return err
		}
	} else {
		r.Contracts = make([]string, 0)

		r.Contracts = make([]string, 0)

	}
	val = func() json.RawMessage {
		if v, ok := fields["CreatedDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreatedDate); err != nil {
			return err
		}
	} else {
		r.CreatedDate = NewUnionNullLong()

		r.CreatedDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["UpdatedDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UpdatedDate); err != nil {
			return err
		}
	} else {
		r.UpdatedDate = NewUnionNullLong()

		r.UpdatedDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CreatedBy"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreatedBy); err != nil {
			return err
		}
	} else {
		r.CreatedBy = NewUnionNullString()

		r.CreatedBy = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["UpdatedBy"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UpdatedBy); err != nil {
			return err
		}
	} else {
		r.UpdatedBy = NewUnionNullString()

		r.UpdatedBy = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["AggregatorType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AggregatorType); err != nil {
			return err
		}
	} else {
		r.AggregatorType = make([]string, 0)

		r.AggregatorType = make([]string, 0)

	}
	val = func() json.RawMessage {
		if v, ok := fields["EventId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EventId); err != nil {
			return err
		}
	} else {
		r.EventId = NewUnionNullString()

		r.EventId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EventType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EventType); err != nil {
			return err
		}
	} else {
		r.EventType = NewUnionNullEventTypeEnum()

		r.EventType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EventTimestamp"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EventTimestamp); err != nil {
			return err
		}
	} else {
		r.EventTimestamp = NewUnionNullLong()

		r.EventTimestamp = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SourceSystem"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SourceSystem); err != nil {
			return err
		}
	} else {
		r.SourceSystem = NewUnionNullString()

		r.SourceSystem = nil
	}
	return nil
}
