// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     GeoZoneSchema.avsc
 */
package DMSGeozonesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EventTypeEnum int32

const (
	EventTypeEnumCREATED   EventTypeEnum = 0
	EventTypeEnumUPDATED   EventTypeEnum = 1
	EventTypeEnumDELETED   EventTypeEnum = 2
	EventTypeEnumSUSPEND   EventTypeEnum = 3
	EventTypeEnumACTIVATED EventTypeEnum = 4
)

func (e EventTypeEnum) String() string {
	switch e {
	case EventTypeEnumCREATED:
		return "CREATED"
	case EventTypeEnumUPDATED:
		return "UPDATED"
	case EventTypeEnumDELETED:
		return "DELETED"
	case EventTypeEnumSUSPEND:
		return "SUSPEND"
	case EventTypeEnumACTIVATED:
		return "ACTIVATED"
	}
	return "unknown"
}

func writeEventTypeEnum(r EventTypeEnum, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewEventTypeEnumValue(raw string) (r EventTypeEnum, err error) {
	switch raw {
	case "CREATED":
		return EventTypeEnumCREATED, nil
	case "UPDATED":
		return EventTypeEnumUPDATED, nil
	case "DELETED":
		return EventTypeEnumDELETED, nil
	case "SUSPEND":
		return EventTypeEnumSUSPEND, nil
	case "ACTIVATED":
		return EventTypeEnumACTIVATED, nil
	}

	return -1, fmt.Errorf("invalid value for EventTypeEnum: '%s'", raw)

}

func (b EventTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *EventTypeEnum) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewEventTypeEnumValue(stringVal)
	*b = val
	return err
}

type EventTypeEnumWrapper struct {
	Target *EventTypeEnum
}

func (b EventTypeEnumWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b EventTypeEnumWrapper) SetInt(v int32) {
	*(b.Target) = EventTypeEnum(v)
}

func (b EventTypeEnumWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b EventTypeEnumWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b EventTypeEnumWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b EventTypeEnumWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b EventTypeEnumWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b EventTypeEnumWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b EventTypeEnumWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b EventTypeEnumWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b EventTypeEnumWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b EventTypeEnumWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b EventTypeEnumWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b EventTypeEnumWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b EventTypeEnumWrapper) Finalize() {}
