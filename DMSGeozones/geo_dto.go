// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     GeoZoneSchema.avsc
 */
package DMSGeozonesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type GeoDto struct {
	Order *UnionNullInt `json:"Order"`

	Lat *UnionNullDouble `json:"Lat"`

	Lng *UnionNullDouble `json:"Lng"`
}

const GeoDtoAvroCRC64Fingerprint = "\xf1X\xf5`\xee\xe6\x038"

func NewGeoDto() GeoDto {
	r := GeoDto{}
	r.Order = nil
	r.Lat = nil
	r.Lng = nil
	return r
}

func DeserializeGeoDto(r io.Reader) (GeoDto, error) {
	t := NewGeoDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeGeoDtoFromSchema(r io.Reader, schema string) (GeoDto, error) {
	t := NewGeoDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeGeoDto(r GeoDto, w io.Writer) error {
	var err error
	err = writeUnionNullInt(r.Order, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.Lat, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.Lng, w)
	if err != nil {
		return err
	}
	return err
}

func (r GeoDto) Serialize(w io.Writer) error {
	return writeGeoDto(r, w)
}

func (r GeoDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Order\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"Lat\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"Lng\",\"type\":[\"null\",\"double\"]}],\"name\":\"Andreani.DMSGeozones.Events.Record.GeoDto\",\"type\":\"record\"}"
}

func (r GeoDto) SchemaName() string {
	return "Andreani.DMSGeozones.Events.Record.GeoDto"
}

func (_ GeoDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ GeoDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ GeoDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ GeoDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ GeoDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ GeoDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ GeoDto) SetString(v string)   { panic("Unsupported operation") }
func (_ GeoDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *GeoDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.Order = NewUnionNullInt()

		return r.Order
	case 1:
		r.Lat = NewUnionNullDouble()

		return r.Lat
	case 2:
		r.Lng = NewUnionNullDouble()

		return r.Lng
	}
	panic("Unknown field index")
}

func (r *GeoDto) SetDefault(i int) {
	switch i {
	case 0:
		r.Order = nil
		return
	case 1:
		r.Lat = nil
		return
	case 2:
		r.Lng = nil
		return
	}
	panic("Unknown field index")
}

func (r *GeoDto) NullField(i int) {
	switch i {
	case 0:
		r.Order = nil
		return
	case 1:
		r.Lat = nil
		return
	case 2:
		r.Lng = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ GeoDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ GeoDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ GeoDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ GeoDto) Finalize()                        {}

func (_ GeoDto) AvroCRC64Fingerprint() []byte {
	return []byte(GeoDtoAvroCRC64Fingerprint)
}

func (r GeoDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Order"], err = json.Marshal(r.Order)
	if err != nil {
		return nil, err
	}
	output["Lat"], err = json.Marshal(r.Lat)
	if err != nil {
		return nil, err
	}
	output["Lng"], err = json.Marshal(r.Lng)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *GeoDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Order"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Order); err != nil {
			return err
		}
	} else {
		r.Order = NewUnionNullInt()

		r.Order = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Lat"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Lat); err != nil {
			return err
		}
	} else {
		r.Lat = NewUnionNullDouble()

		r.Lat = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Lng"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Lng); err != nil {
			return err
		}
	} else {
		r.Lng = NewUnionNullDouble()

		r.Lng = nil
	}
	return nil
}
