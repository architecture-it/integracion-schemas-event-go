// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     SuspensionDateSchemaDto.avsc
 */
package DMSGeozonesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SuspensionDateSchemaDto struct {
	From *UnionNullLong `json:"From"`

	Until *UnionNullLong `json:"Until"`
}

const SuspensionDateSchemaDtoAvroCRC64Fingerprint = "\x9d:\x14:2\xef\x83'"

func NewSuspensionDateSchemaDto() SuspensionDateSchemaDto {
	r := SuspensionDateSchemaDto{}
	r.From = nil
	r.Until = nil
	return r
}

func DeserializeSuspensionDateSchemaDto(r io.Reader) (SuspensionDateSchemaDto, error) {
	t := NewSuspensionDateSchemaDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSuspensionDateSchemaDtoFromSchema(r io.Reader, schema string) (SuspensionDateSchemaDto, error) {
	t := NewSuspensionDateSchemaDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSuspensionDateSchemaDto(r SuspensionDateSchemaDto, w io.Writer) error {
	var err error
	err = writeUnionNullLong(r.From, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.Until, w)
	if err != nil {
		return err
	}
	return err
}

func (r SuspensionDateSchemaDto) Serialize(w io.Writer) error {
	return writeSuspensionDateSchemaDto(r, w)
}

func (r SuspensionDateSchemaDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"From\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"Until\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]}],\"name\":\"Andreani.DMSGeozones.Events.Record.SuspensionDateSchemaDto\",\"type\":\"record\"}"
}

func (r SuspensionDateSchemaDto) SchemaName() string {
	return "Andreani.DMSGeozones.Events.Record.SuspensionDateSchemaDto"
}

func (_ SuspensionDateSchemaDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ SuspensionDateSchemaDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ SuspensionDateSchemaDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ SuspensionDateSchemaDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ SuspensionDateSchemaDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ SuspensionDateSchemaDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ SuspensionDateSchemaDto) SetString(v string)   { panic("Unsupported operation") }
func (_ SuspensionDateSchemaDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SuspensionDateSchemaDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.From = NewUnionNullLong()

		return r.From
	case 1:
		r.Until = NewUnionNullLong()

		return r.Until
	}
	panic("Unknown field index")
}

func (r *SuspensionDateSchemaDto) SetDefault(i int) {
	switch i {
	case 0:
		r.From = nil
		return
	case 1:
		r.Until = nil
		return
	}
	panic("Unknown field index")
}

func (r *SuspensionDateSchemaDto) NullField(i int) {
	switch i {
	case 0:
		r.From = nil
		return
	case 1:
		r.Until = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ SuspensionDateSchemaDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ SuspensionDateSchemaDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ SuspensionDateSchemaDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ SuspensionDateSchemaDto) Finalize()                        {}

func (_ SuspensionDateSchemaDto) AvroCRC64Fingerprint() []byte {
	return []byte(SuspensionDateSchemaDtoAvroCRC64Fingerprint)
}

func (r SuspensionDateSchemaDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["From"], err = json.Marshal(r.From)
	if err != nil {
		return nil, err
	}
	output["Until"], err = json.Marshal(r.Until)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *SuspensionDateSchemaDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["From"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.From); err != nil {
			return err
		}
	} else {
		r.From = NewUnionNullLong()

		r.From = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Until"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Until); err != nil {
			return err
		}
	} else {
		r.Until = NewUnionNullLong()

		r.Until = nil
	}
	return nil
}
