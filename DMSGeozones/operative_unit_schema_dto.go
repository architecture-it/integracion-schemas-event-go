// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     OperativeUnitSchemaDto.avsc
 */
package DMSGeozonesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type OperativeUnitSchemaDto struct {
	Id *UnionNullString `json:"Id"`

	NumberCode *UnionNullString `json:"NumberCode"`
}

const OperativeUnitSchemaDtoAvroCRC64Fingerprint = "\xc2e44\xb6mo\xc9"

func NewOperativeUnitSchemaDto() OperativeUnitSchemaDto {
	r := OperativeUnitSchemaDto{}
	r.Id = nil
	r.NumberCode = nil
	return r
}

func DeserializeOperativeUnitSchemaDto(r io.Reader) (OperativeUnitSchemaDto, error) {
	t := NewOperativeUnitSchemaDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeOperativeUnitSchemaDtoFromSchema(r io.Reader, schema string) (OperativeUnitSchemaDto, error) {
	t := NewOperativeUnitSchemaDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeOperativeUnitSchemaDto(r OperativeUnitSchemaDto, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NumberCode, w)
	if err != nil {
		return err
	}
	return err
}

func (r OperativeUnitSchemaDto) Serialize(w io.Writer) error {
	return writeOperativeUnitSchemaDto(r, w)
}

func (r OperativeUnitSchemaDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NumberCode\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.DMSGeozones.Events.Record.OperativeUnitSchemaDto\",\"type\":\"record\"}"
}

func (r OperativeUnitSchemaDto) SchemaName() string {
	return "Andreani.DMSGeozones.Events.Record.OperativeUnitSchemaDto"
}

func (_ OperativeUnitSchemaDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ OperativeUnitSchemaDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ OperativeUnitSchemaDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ OperativeUnitSchemaDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ OperativeUnitSchemaDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ OperativeUnitSchemaDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ OperativeUnitSchemaDto) SetString(v string)   { panic("Unsupported operation") }
func (_ OperativeUnitSchemaDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *OperativeUnitSchemaDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.Id = NewUnionNullString()

		return r.Id
	case 1:
		r.NumberCode = NewUnionNullString()

		return r.NumberCode
	}
	panic("Unknown field index")
}

func (r *OperativeUnitSchemaDto) SetDefault(i int) {
	switch i {
	case 0:
		r.Id = nil
		return
	case 1:
		r.NumberCode = nil
		return
	}
	panic("Unknown field index")
}

func (r *OperativeUnitSchemaDto) NullField(i int) {
	switch i {
	case 0:
		r.Id = nil
		return
	case 1:
		r.NumberCode = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ OperativeUnitSchemaDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ OperativeUnitSchemaDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ OperativeUnitSchemaDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ OperativeUnitSchemaDto) Finalize()                        {}

func (_ OperativeUnitSchemaDto) AvroCRC64Fingerprint() []byte {
	return []byte(OperativeUnitSchemaDtoAvroCRC64Fingerprint)
}

func (r OperativeUnitSchemaDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["NumberCode"], err = json.Marshal(r.NumberCode)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *OperativeUnitSchemaDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		r.Id = NewUnionNullString()

		r.Id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NumberCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumberCode); err != nil {
			return err
		}
	} else {
		r.NumberCode = NewUnionNullString()

		r.NumberCode = nil
	}
	return nil
}
