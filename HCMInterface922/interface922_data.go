// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ListInterface922.avsc
 */
package HCMInterface922Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Interface922Data struct {
	Sigla string `json:"Sigla"`

	Documento string `json:"Documento"`

	TipoDeDomicilio string `json:"TipoDeDomicilio"`

	Calle string `json:"Calle"`

	Nro string `json:"Nro"`

	Kilometro string `json:"Kilometro"`

	Piso string `json:"Piso"`

	OficDepto string `json:"OficDepto"`

	Manzana string `json:"Manzana"`

	Cuerpo string `json:"Cuerpo"`

	Torre string `json:"Torre"`

	Lote string `json:"Lote"`

	Parcela string `json:"Parcela"`

	Bloque string `json:"Bloque"`

	Circunscripcion string `json:"Circunscripcion"`

	Seccion string `json:"Seccion"`

	Casa string `json:"Casa"`

	EntreLasCalles string `json:"EntreLasCalles"`

	Barrio string `json:"Barrio"`

	Email string `json:"Email"`

	Cpa string `json:"Cpa"`

	CodPostal string `json:"CodPostal"`

	Localidad string `json:"Localidad"`

	Partido string `json:"Partido"`

	Zona string `json:"Zona"`

	Provincia string `json:"Provincia"`

	Pais string `json:"Pais"`

	Latitud string `json:"Latitud"`

	Longitud string `json:"Longitud"`

	TipoDeTelefono1 string `json:"TipoDeTelefono1"`

	NumeroDeTelefono1 string `json:"NumeroDeTelefono1"`

	TipoDeTelefono2 string `json:"TipoDeTelefono2"`

	NumeroDeTelefono2 string `json:"NumeroDeTelefono2"`
}

const Interface922DataAvroCRC64Fingerprint = "\xaaw\xd7\xe3Ç´@\x05"

func NewInterface922Data() Interface922Data {
	r := Interface922Data{}
	return r
}

func DeserializeInterface922Data(r io.Reader) (Interface922Data, error) {
	t := NewInterface922Data()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeInterface922DataFromSchema(r io.Reader, schema string) (Interface922Data, error) {
	t := NewInterface922Data()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeInterface922Data(r Interface922Data, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Sigla, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Documento, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.TipoDeDomicilio, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Calle, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Nro, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Kilometro, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Piso, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OficDepto, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Manzana, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Cuerpo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Torre, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Lote, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Parcela, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Bloque, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Circunscripcion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Seccion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Casa, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.EntreLasCalles, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Barrio, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Email, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Cpa, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodPostal, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Localidad, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Partido, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Zona, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Provincia, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Pais, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Latitud, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Longitud, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.TipoDeTelefono1, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NumeroDeTelefono1, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.TipoDeTelefono2, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NumeroDeTelefono2, w)
	if err != nil {
		return err
	}
	return err
}

func (r Interface922Data) Serialize(w io.Writer) error {
	return writeInterface922Data(r, w)
}

func (r Interface922Data) Schema() string {
	return "{\"fields\":[{\"name\":\"Sigla\",\"type\":\"string\"},{\"name\":\"Documento\",\"type\":\"string\"},{\"name\":\"TipoDeDomicilio\",\"type\":\"string\"},{\"name\":\"Calle\",\"type\":\"string\"},{\"name\":\"Nro\",\"type\":\"string\"},{\"name\":\"Kilometro\",\"type\":\"string\"},{\"name\":\"Piso\",\"type\":\"string\"},{\"name\":\"OficDepto\",\"type\":\"string\"},{\"name\":\"Manzana\",\"type\":\"string\"},{\"name\":\"Cuerpo\",\"type\":\"string\"},{\"name\":\"Torre\",\"type\":\"string\"},{\"name\":\"Lote\",\"type\":\"string\"},{\"name\":\"Parcela\",\"type\":\"string\"},{\"name\":\"Bloque\",\"type\":\"string\"},{\"name\":\"Circunscripcion\",\"type\":\"string\"},{\"name\":\"Seccion\",\"type\":\"string\"},{\"name\":\"Casa\",\"type\":\"string\"},{\"name\":\"EntreLasCalles\",\"type\":\"string\"},{\"name\":\"Barrio\",\"type\":\"string\"},{\"name\":\"Email\",\"type\":\"string\"},{\"name\":\"Cpa\",\"type\":\"string\"},{\"name\":\"CodPostal\",\"type\":\"string\"},{\"name\":\"Localidad\",\"type\":\"string\"},{\"name\":\"Partido\",\"type\":\"string\"},{\"name\":\"Zona\",\"type\":\"string\"},{\"name\":\"Provincia\",\"type\":\"string\"},{\"name\":\"Pais\",\"type\":\"string\"},{\"name\":\"Latitud\",\"type\":\"string\"},{\"name\":\"Longitud\",\"type\":\"string\"},{\"name\":\"TipoDeTelefono1\",\"type\":\"string\"},{\"name\":\"NumeroDeTelefono1\",\"type\":\"string\"},{\"name\":\"TipoDeTelefono2\",\"type\":\"string\"},{\"name\":\"NumeroDeTelefono2\",\"type\":\"string\"}],\"name\":\"Andreani.HCMInterface922.Events.Record.Interface922Data\",\"type\":\"record\"}"
}

func (r Interface922Data) SchemaName() string {
	return "Andreani.HCMInterface922.Events.Record.Interface922Data"
}

func (_ Interface922Data) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Interface922Data) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Interface922Data) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Interface922Data) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Interface922Data) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Interface922Data) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Interface922Data) SetString(v string)   { panic("Unsupported operation") }
func (_ Interface922Data) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Interface922Data) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Sigla}

		return w

	case 1:
		w := types.String{Target: &r.Documento}

		return w

	case 2:
		w := types.String{Target: &r.TipoDeDomicilio}

		return w

	case 3:
		w := types.String{Target: &r.Calle}

		return w

	case 4:
		w := types.String{Target: &r.Nro}

		return w

	case 5:
		w := types.String{Target: &r.Kilometro}

		return w

	case 6:
		w := types.String{Target: &r.Piso}

		return w

	case 7:
		w := types.String{Target: &r.OficDepto}

		return w

	case 8:
		w := types.String{Target: &r.Manzana}

		return w

	case 9:
		w := types.String{Target: &r.Cuerpo}

		return w

	case 10:
		w := types.String{Target: &r.Torre}

		return w

	case 11:
		w := types.String{Target: &r.Lote}

		return w

	case 12:
		w := types.String{Target: &r.Parcela}

		return w

	case 13:
		w := types.String{Target: &r.Bloque}

		return w

	case 14:
		w := types.String{Target: &r.Circunscripcion}

		return w

	case 15:
		w := types.String{Target: &r.Seccion}

		return w

	case 16:
		w := types.String{Target: &r.Casa}

		return w

	case 17:
		w := types.String{Target: &r.EntreLasCalles}

		return w

	case 18:
		w := types.String{Target: &r.Barrio}

		return w

	case 19:
		w := types.String{Target: &r.Email}

		return w

	case 20:
		w := types.String{Target: &r.Cpa}

		return w

	case 21:
		w := types.String{Target: &r.CodPostal}

		return w

	case 22:
		w := types.String{Target: &r.Localidad}

		return w

	case 23:
		w := types.String{Target: &r.Partido}

		return w

	case 24:
		w := types.String{Target: &r.Zona}

		return w

	case 25:
		w := types.String{Target: &r.Provincia}

		return w

	case 26:
		w := types.String{Target: &r.Pais}

		return w

	case 27:
		w := types.String{Target: &r.Latitud}

		return w

	case 28:
		w := types.String{Target: &r.Longitud}

		return w

	case 29:
		w := types.String{Target: &r.TipoDeTelefono1}

		return w

	case 30:
		w := types.String{Target: &r.NumeroDeTelefono1}

		return w

	case 31:
		w := types.String{Target: &r.TipoDeTelefono2}

		return w

	case 32:
		w := types.String{Target: &r.NumeroDeTelefono2}

		return w

	}
	panic("Unknown field index")
}

func (r *Interface922Data) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Interface922Data) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Interface922Data) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Interface922Data) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Interface922Data) HintSize(int)                     { panic("Unsupported operation") }
func (_ Interface922Data) Finalize()                        {}

func (_ Interface922Data) AvroCRC64Fingerprint() []byte {
	return []byte(Interface922DataAvroCRC64Fingerprint)
}

func (r Interface922Data) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Sigla"], err = json.Marshal(r.Sigla)
	if err != nil {
		return nil, err
	}
	output["Documento"], err = json.Marshal(r.Documento)
	if err != nil {
		return nil, err
	}
	output["TipoDeDomicilio"], err = json.Marshal(r.TipoDeDomicilio)
	if err != nil {
		return nil, err
	}
	output["Calle"], err = json.Marshal(r.Calle)
	if err != nil {
		return nil, err
	}
	output["Nro"], err = json.Marshal(r.Nro)
	if err != nil {
		return nil, err
	}
	output["Kilometro"], err = json.Marshal(r.Kilometro)
	if err != nil {
		return nil, err
	}
	output["Piso"], err = json.Marshal(r.Piso)
	if err != nil {
		return nil, err
	}
	output["OficDepto"], err = json.Marshal(r.OficDepto)
	if err != nil {
		return nil, err
	}
	output["Manzana"], err = json.Marshal(r.Manzana)
	if err != nil {
		return nil, err
	}
	output["Cuerpo"], err = json.Marshal(r.Cuerpo)
	if err != nil {
		return nil, err
	}
	output["Torre"], err = json.Marshal(r.Torre)
	if err != nil {
		return nil, err
	}
	output["Lote"], err = json.Marshal(r.Lote)
	if err != nil {
		return nil, err
	}
	output["Parcela"], err = json.Marshal(r.Parcela)
	if err != nil {
		return nil, err
	}
	output["Bloque"], err = json.Marshal(r.Bloque)
	if err != nil {
		return nil, err
	}
	output["Circunscripcion"], err = json.Marshal(r.Circunscripcion)
	if err != nil {
		return nil, err
	}
	output["Seccion"], err = json.Marshal(r.Seccion)
	if err != nil {
		return nil, err
	}
	output["Casa"], err = json.Marshal(r.Casa)
	if err != nil {
		return nil, err
	}
	output["EntreLasCalles"], err = json.Marshal(r.EntreLasCalles)
	if err != nil {
		return nil, err
	}
	output["Barrio"], err = json.Marshal(r.Barrio)
	if err != nil {
		return nil, err
	}
	output["Email"], err = json.Marshal(r.Email)
	if err != nil {
		return nil, err
	}
	output["Cpa"], err = json.Marshal(r.Cpa)
	if err != nil {
		return nil, err
	}
	output["CodPostal"], err = json.Marshal(r.CodPostal)
	if err != nil {
		return nil, err
	}
	output["Localidad"], err = json.Marshal(r.Localidad)
	if err != nil {
		return nil, err
	}
	output["Partido"], err = json.Marshal(r.Partido)
	if err != nil {
		return nil, err
	}
	output["Zona"], err = json.Marshal(r.Zona)
	if err != nil {
		return nil, err
	}
	output["Provincia"], err = json.Marshal(r.Provincia)
	if err != nil {
		return nil, err
	}
	output["Pais"], err = json.Marshal(r.Pais)
	if err != nil {
		return nil, err
	}
	output["Latitud"], err = json.Marshal(r.Latitud)
	if err != nil {
		return nil, err
	}
	output["Longitud"], err = json.Marshal(r.Longitud)
	if err != nil {
		return nil, err
	}
	output["TipoDeTelefono1"], err = json.Marshal(r.TipoDeTelefono1)
	if err != nil {
		return nil, err
	}
	output["NumeroDeTelefono1"], err = json.Marshal(r.NumeroDeTelefono1)
	if err != nil {
		return nil, err
	}
	output["TipoDeTelefono2"], err = json.Marshal(r.TipoDeTelefono2)
	if err != nil {
		return nil, err
	}
	output["NumeroDeTelefono2"], err = json.Marshal(r.NumeroDeTelefono2)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Interface922Data) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Sigla"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sigla); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Sigla")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Documento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Documento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Documento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoDeDomicilio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoDeDomicilio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoDeDomicilio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Calle"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Calle); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Calle")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Nro"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nro); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Nro")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Kilometro"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Kilometro); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Kilometro")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Piso"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Piso); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Piso")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OficDepto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OficDepto); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OficDepto")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Manzana"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Manzana); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Manzana")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Cuerpo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cuerpo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Cuerpo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Torre"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Torre); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Torre")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Lote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Lote); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Lote")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Parcela"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Parcela); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Parcela")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Bloque"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Bloque); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Bloque")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Circunscripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Circunscripcion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Circunscripcion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Seccion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Seccion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Seccion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Casa"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Casa); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Casa")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EntreLasCalles"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EntreLasCalles); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EntreLasCalles")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Barrio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Barrio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Barrio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Email"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Email); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Email")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Cpa"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cpa); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Cpa")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodPostal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodPostal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodPostal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Localidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Localidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Localidad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Partido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Partido); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Partido")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Zona"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Zona); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Zona")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Provincia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Provincia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Provincia")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Pais"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Pais); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Pais")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Latitud"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Latitud); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Latitud")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Longitud"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Longitud); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Longitud")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoDeTelefono1"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoDeTelefono1); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoDeTelefono1")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NumeroDeTelefono1"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeTelefono1); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NumeroDeTelefono1")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoDeTelefono2"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoDeTelefono2); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoDeTelefono2")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NumeroDeTelefono2"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeTelefono2); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NumeroDeTelefono2")
	}
	return nil
}
