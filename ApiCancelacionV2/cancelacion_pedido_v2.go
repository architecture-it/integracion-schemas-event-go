// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     CancelacionPedidoV2.avsc
 */
package ApiCancelacionV2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CancelacionPedidoV2 struct {
	IdTransaccion string `json:"idTransaccion"`

	Almacen string `json:"almacen"`

	Instancia string `json:"instancia"`

	Propietario string `json:"propietario"`

	Pedido Pedido `json:"pedido"`
}

const CancelacionPedidoV2AvroCRC64Fingerprint = "\xc6\x11x\x19$Ô™\xe8"

func NewCancelacionPedidoV2() CancelacionPedidoV2 {
	r := CancelacionPedidoV2{}
	r.Pedido = NewPedido()

	return r
}

func DeserializeCancelacionPedidoV2(r io.Reader) (CancelacionPedidoV2, error) {
	t := NewCancelacionPedidoV2()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCancelacionPedidoV2FromSchema(r io.Reader, schema string) (CancelacionPedidoV2, error) {
	t := NewCancelacionPedidoV2()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCancelacionPedidoV2(r CancelacionPedidoV2, w io.Writer) error {
	var err error
	err = vm.WriteString(r.IdTransaccion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Almacen, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Instancia, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Propietario, w)
	if err != nil {
		return err
	}
	err = writePedido(r.Pedido, w)
	if err != nil {
		return err
	}
	return err
}

func (r CancelacionPedidoV2) Serialize(w io.Writer) error {
	return writeCancelacionPedidoV2(r, w)
}

func (r CancelacionPedidoV2) Schema() string {
	return "{\"fields\":[{\"name\":\"idTransaccion\",\"type\":\"string\"},{\"name\":\"almacen\",\"type\":\"string\"},{\"name\":\"instancia\",\"type\":\"string\"},{\"name\":\"propietario\",\"type\":\"string\"},{\"name\":\"pedido\",\"type\":{\"fields\":[{\"name\":\"OrdenExterna\",\"type\":\"string\"},{\"name\":\"Suspender\",\"type\":\"boolean\"},{\"name\":\"Cancelar\",\"type\":\"boolean\"}],\"name\":\"Pedido\",\"namespace\":\"Andreani.ApiCancelacionV2.Events.Common\",\"type\":\"record\"}}],\"name\":\"Andreani.ApiCancelacionV2.Events.Record.CancelacionPedidoV2\",\"type\":\"record\"}"
}

func (r CancelacionPedidoV2) SchemaName() string {
	return "Andreani.ApiCancelacionV2.Events.Record.CancelacionPedidoV2"
}

func (_ CancelacionPedidoV2) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CancelacionPedidoV2) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CancelacionPedidoV2) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CancelacionPedidoV2) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CancelacionPedidoV2) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CancelacionPedidoV2) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CancelacionPedidoV2) SetString(v string)   { panic("Unsupported operation") }
func (_ CancelacionPedidoV2) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CancelacionPedidoV2) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.IdTransaccion}

		return w

	case 1:
		w := types.String{Target: &r.Almacen}

		return w

	case 2:
		w := types.String{Target: &r.Instancia}

		return w

	case 3:
		w := types.String{Target: &r.Propietario}

		return w

	case 4:
		r.Pedido = NewPedido()

		w := types.Record{Target: &r.Pedido}

		return w

	}
	panic("Unknown field index")
}

func (r *CancelacionPedidoV2) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *CancelacionPedidoV2) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ CancelacionPedidoV2) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CancelacionPedidoV2) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CancelacionPedidoV2) HintSize(int)                     { panic("Unsupported operation") }
func (_ CancelacionPedidoV2) Finalize()                        {}

func (_ CancelacionPedidoV2) AvroCRC64Fingerprint() []byte {
	return []byte(CancelacionPedidoV2AvroCRC64Fingerprint)
}

func (r CancelacionPedidoV2) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["idTransaccion"], err = json.Marshal(r.IdTransaccion)
	if err != nil {
		return nil, err
	}
	output["almacen"], err = json.Marshal(r.Almacen)
	if err != nil {
		return nil, err
	}
	output["instancia"], err = json.Marshal(r.Instancia)
	if err != nil {
		return nil, err
	}
	output["propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["pedido"], err = json.Marshal(r.Pedido)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CancelacionPedidoV2) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["idTransaccion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdTransaccion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for idTransaccion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["almacen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Almacen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for almacen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["instancia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Instancia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for instancia")
	}
	val = func() json.RawMessage {
		if v, ok := fields["propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for propietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["pedido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Pedido); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for pedido")
	}
	return nil
}
