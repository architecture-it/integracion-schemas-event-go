// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TiposDeAcciones.avsc
 */
package Wapv2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TiposDeAcciones struct {
	TipoDeAccion int32 `json:"tipoDeAccion"`
}

const TiposDeAccionesAvroCRC64Fingerprint = "a\x85\xf0j\xa6\x9f~\xca"

func NewTiposDeAcciones() TiposDeAcciones {
	r := TiposDeAcciones{}
	return r
}

func DeserializeTiposDeAcciones(r io.Reader) (TiposDeAcciones, error) {
	t := NewTiposDeAcciones()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTiposDeAccionesFromSchema(r io.Reader, schema string) (TiposDeAcciones, error) {
	t := NewTiposDeAcciones()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTiposDeAcciones(r TiposDeAcciones, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.TipoDeAccion, w)
	if err != nil {
		return err
	}
	return err
}

func (r TiposDeAcciones) Serialize(w io.Writer) error {
	return writeTiposDeAcciones(r, w)
}

func (r TiposDeAcciones) Schema() string {
	return "{\"fields\":[{\"name\":\"tipoDeAccion\",\"type\":\"int\"}],\"name\":\"Andreani.Wapv2.Events.Record.TiposDeAcciones\",\"type\":\"record\"}"
}

func (r TiposDeAcciones) SchemaName() string {
	return "Andreani.Wapv2.Events.Record.TiposDeAcciones"
}

func (_ TiposDeAcciones) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TiposDeAcciones) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TiposDeAcciones) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TiposDeAcciones) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TiposDeAcciones) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TiposDeAcciones) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TiposDeAcciones) SetString(v string)   { panic("Unsupported operation") }
func (_ TiposDeAcciones) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TiposDeAcciones) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.TipoDeAccion}

		return w

	}
	panic("Unknown field index")
}

func (r *TiposDeAcciones) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *TiposDeAcciones) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ TiposDeAcciones) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TiposDeAcciones) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TiposDeAcciones) HintSize(int)                     { panic("Unsupported operation") }
func (_ TiposDeAcciones) Finalize()                        {}

func (_ TiposDeAcciones) AvroCRC64Fingerprint() []byte {
	return []byte(TiposDeAccionesAvroCRC64Fingerprint)
}

func (r TiposDeAcciones) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["tipoDeAccion"], err = json.Marshal(r.TipoDeAccion)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TiposDeAcciones) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["tipoDeAccion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoDeAccion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for tipoDeAccion")
	}
	return nil
}
