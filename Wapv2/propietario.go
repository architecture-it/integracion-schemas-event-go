// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Propietario.avsc
 */
package Wapv2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Propietario struct {
	PropietarioOrigen string `json:"propietarioOrigen"`

	PropietarioDestino string `json:"propietarioDestino"`

	Articulo *UnionNullString `json:"articulo"`

	Lote *UnionNullString `json:"lote"`

	Cantidad *UnionNullString `json:"cantidad"`

	Almacen *UnionNullString `json:"almacen"`

	EstadoDeLote *UnionNullString `json:"estadoDeLote"`

	LpnOrigen *UnionNullString `json:"lpnOrigen"`

	LpnDestino *UnionNullString `json:"lpnDestino"`
}

const PropietarioAvroCRC64Fingerprint = "t Æ\xfdi\xc1\xadk"

func NewPropietario() Propietario {
	r := Propietario{}
	r.Articulo = nil
	r.Lote = nil
	r.Cantidad = nil
	r.Almacen = nil
	r.EstadoDeLote = nil
	r.LpnOrigen = nil
	r.LpnDestino = nil
	return r
}

func DeserializePropietario(r io.Reader) (Propietario, error) {
	t := NewPropietario()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePropietarioFromSchema(r io.Reader, schema string) (Propietario, error) {
	t := NewPropietario()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePropietario(r Propietario, w io.Writer) error {
	var err error
	err = vm.WriteString(r.PropietarioOrigen, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.PropietarioDestino, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Articulo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Lote, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Cantidad, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Almacen, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EstadoDeLote, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LpnOrigen, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LpnDestino, w)
	if err != nil {
		return err
	}
	return err
}

func (r Propietario) Serialize(w io.Writer) error {
	return writePropietario(r, w)
}

func (r Propietario) Schema() string {
	return "{\"fields\":[{\"name\":\"propietarioOrigen\",\"type\":\"string\"},{\"name\":\"propietarioDestino\",\"type\":\"string\"},{\"default\":null,\"name\":\"articulo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"lote\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"cantidad\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"almacen\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"estadoDeLote\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"lpnOrigen\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"lpnDestino\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.Wapv2.Events.Record.Propietario\",\"type\":\"record\"}"
}

func (r Propietario) SchemaName() string {
	return "Andreani.Wapv2.Events.Record.Propietario"
}

func (_ Propietario) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Propietario) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Propietario) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Propietario) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Propietario) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Propietario) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Propietario) SetString(v string)   { panic("Unsupported operation") }
func (_ Propietario) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Propietario) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.PropietarioOrigen}

		return w

	case 1:
		w := types.String{Target: &r.PropietarioDestino}

		return w

	case 2:
		r.Articulo = NewUnionNullString()

		return r.Articulo
	case 3:
		r.Lote = NewUnionNullString()

		return r.Lote
	case 4:
		r.Cantidad = NewUnionNullString()

		return r.Cantidad
	case 5:
		r.Almacen = NewUnionNullString()

		return r.Almacen
	case 6:
		r.EstadoDeLote = NewUnionNullString()

		return r.EstadoDeLote
	case 7:
		r.LpnOrigen = NewUnionNullString()

		return r.LpnOrigen
	case 8:
		r.LpnDestino = NewUnionNullString()

		return r.LpnDestino
	}
	panic("Unknown field index")
}

func (r *Propietario) SetDefault(i int) {
	switch i {
	case 2:
		r.Articulo = nil
		return
	case 3:
		r.Lote = nil
		return
	case 4:
		r.Cantidad = nil
		return
	case 5:
		r.Almacen = nil
		return
	case 6:
		r.EstadoDeLote = nil
		return
	case 7:
		r.LpnOrigen = nil
		return
	case 8:
		r.LpnDestino = nil
		return
	}
	panic("Unknown field index")
}

func (r *Propietario) NullField(i int) {
	switch i {
	case 2:
		r.Articulo = nil
		return
	case 3:
		r.Lote = nil
		return
	case 4:
		r.Cantidad = nil
		return
	case 5:
		r.Almacen = nil
		return
	case 6:
		r.EstadoDeLote = nil
		return
	case 7:
		r.LpnOrigen = nil
		return
	case 8:
		r.LpnDestino = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Propietario) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Propietario) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Propietario) HintSize(int)                     { panic("Unsupported operation") }
func (_ Propietario) Finalize()                        {}

func (_ Propietario) AvroCRC64Fingerprint() []byte {
	return []byte(PropietarioAvroCRC64Fingerprint)
}

func (r Propietario) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["propietarioOrigen"], err = json.Marshal(r.PropietarioOrigen)
	if err != nil {
		return nil, err
	}
	output["propietarioDestino"], err = json.Marshal(r.PropietarioDestino)
	if err != nil {
		return nil, err
	}
	output["articulo"], err = json.Marshal(r.Articulo)
	if err != nil {
		return nil, err
	}
	output["lote"], err = json.Marshal(r.Lote)
	if err != nil {
		return nil, err
	}
	output["cantidad"], err = json.Marshal(r.Cantidad)
	if err != nil {
		return nil, err
	}
	output["almacen"], err = json.Marshal(r.Almacen)
	if err != nil {
		return nil, err
	}
	output["estadoDeLote"], err = json.Marshal(r.EstadoDeLote)
	if err != nil {
		return nil, err
	}
	output["lpnOrigen"], err = json.Marshal(r.LpnOrigen)
	if err != nil {
		return nil, err
	}
	output["lpnDestino"], err = json.Marshal(r.LpnDestino)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Propietario) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["propietarioOrigen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PropietarioOrigen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for propietarioOrigen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["propietarioDestino"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PropietarioDestino); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for propietarioDestino")
	}
	val = func() json.RawMessage {
		if v, ok := fields["articulo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Articulo); err != nil {
			return err
		}
	} else {
		r.Articulo = NewUnionNullString()

		r.Articulo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["lote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Lote); err != nil {
			return err
		}
	} else {
		r.Lote = NewUnionNullString()

		r.Lote = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["cantidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cantidad); err != nil {
			return err
		}
	} else {
		r.Cantidad = NewUnionNullString()

		r.Cantidad = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["almacen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Almacen); err != nil {
			return err
		}
	} else {
		r.Almacen = NewUnionNullString()

		r.Almacen = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["estadoDeLote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EstadoDeLote); err != nil {
			return err
		}
	} else {
		r.EstadoDeLote = NewUnionNullString()

		r.EstadoDeLote = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["lpnOrigen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LpnOrigen); err != nil {
			return err
		}
	} else {
		r.LpnOrigen = NewUnionNullString()

		r.LpnOrigen = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["lpnDestino"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LpnDestino); err != nil {
			return err
		}
	} else {
		r.LpnDestino = NewUnionNullString()

		r.LpnDestino = nil
	}
	return nil
}
