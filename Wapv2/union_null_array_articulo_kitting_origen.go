// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     OrdenDeKittingSolicitadaV2.avsc
 */
package Wapv2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayArticuloKittingOrigenTypeEnum int

const (
	UnionNullArrayArticuloKittingOrigenTypeEnumArrayArticuloKittingOrigen UnionNullArrayArticuloKittingOrigenTypeEnum = 1
)

type UnionNullArrayArticuloKittingOrigen struct {
	Null                       *types.NullVal
	ArrayArticuloKittingOrigen []ArticuloKittingOrigen
	UnionType                  UnionNullArrayArticuloKittingOrigenTypeEnum
}

func writeUnionNullArrayArticuloKittingOrigen(r *UnionNullArrayArticuloKittingOrigen, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayArticuloKittingOrigenTypeEnumArrayArticuloKittingOrigen:
		return writeArrayArticuloKittingOrigen(r.ArrayArticuloKittingOrigen, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayArticuloKittingOrigen")
}

func NewUnionNullArrayArticuloKittingOrigen() *UnionNullArrayArticuloKittingOrigen {
	return &UnionNullArrayArticuloKittingOrigen{}
}

func (r *UnionNullArrayArticuloKittingOrigen) Serialize(w io.Writer) error {
	return writeUnionNullArrayArticuloKittingOrigen(r, w)
}

func DeserializeUnionNullArrayArticuloKittingOrigen(r io.Reader) (*UnionNullArrayArticuloKittingOrigen, error) {
	t := NewUnionNullArrayArticuloKittingOrigen()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayArticuloKittingOrigenFromSchema(r io.Reader, schema string) (*UnionNullArrayArticuloKittingOrigen, error) {
	t := NewUnionNullArrayArticuloKittingOrigen()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayArticuloKittingOrigen) Schema() string {
	return "[\"null\",{\"items\":{\"fields\":[{\"name\":\"codigoArticulo\",\"type\":\"string\"},{\"name\":\"loteAlmacen\",\"type\":\"string\"},{\"name\":\"loteSecundario\",\"type\":\"string\"},{\"name\":\"loteProveedor\",\"type\":\"string\"},{\"name\":\"loteEstado\",\"type\":\"string\"}],\"name\":\"ArticuloKittingOrigen\",\"type\":\"record\"},\"type\":\"array\"}]"
}

func (_ *UnionNullArrayArticuloKittingOrigen) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullArrayArticuloKittingOrigen) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullArrayArticuloKittingOrigen) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullArrayArticuloKittingOrigen) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullArrayArticuloKittingOrigen) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullArrayArticuloKittingOrigen) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullArrayArticuloKittingOrigen) SetLong(v int64) {

	r.UnionType = (UnionNullArrayArticuloKittingOrigenTypeEnum)(v)
}

func (r *UnionNullArrayArticuloKittingOrigen) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayArticuloKittingOrigen = make([]ArticuloKittingOrigen, 0)
		return &ArrayArticuloKittingOrigenWrapper{Target: (&r.ArrayArticuloKittingOrigen)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayArticuloKittingOrigen) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullArrayArticuloKittingOrigen) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullArrayArticuloKittingOrigen) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullArrayArticuloKittingOrigen) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayArticuloKittingOrigen) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayArticuloKittingOrigen) Finalize() {}

func (r *UnionNullArrayArticuloKittingOrigen) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayArticuloKittingOrigenTypeEnumArrayArticuloKittingOrigen:
		return json.Marshal(map[string]interface{}{"array": r.ArrayArticuloKittingOrigen})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayArticuloKittingOrigen")
}

func (r *UnionNullArrayArticuloKittingOrigen) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayArticuloKittingOrigen)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayArticuloKittingOrigen")
}
