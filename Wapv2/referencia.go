// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Transporte.avsc
 */
package Wapv2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Referencia struct {
	Transportista *UnionNullString `json:"transportista"`

	Contenedor *UnionNullString `json:"contenedor"`

	MuelleRecepcion *UnionNullString `json:"muelleRecepcion"`

	NumeroCita *UnionNullString `json:"numeroCita"`

	NumeroGuia *UnionNullString `json:"numeroGuia"`

	Numero *UnionNullString `json:"numero"`

	Gln *UnionNullString `json:"gln"`

	Contacto *UnionNullString `json:"contacto"`

	CorreoElectronico *UnionNullString `json:"correoElectronico"`

	CodigoISOpais *UnionNullString `json:"codigoISOpais"`
}

const ReferenciaAvroCRC64Fingerprint = "\x04\xc2:\xe2\xed\xbf\xd8\x13"

func NewReferencia() Referencia {
	r := Referencia{}
	r.Transportista = nil
	r.Contenedor = nil
	r.MuelleRecepcion = nil
	r.NumeroCita = nil
	r.NumeroGuia = nil
	r.Numero = nil
	r.Gln = nil
	r.Contacto = nil
	r.CorreoElectronico = nil
	r.CodigoISOpais = nil
	return r
}

func DeserializeReferencia(r io.Reader) (Referencia, error) {
	t := NewReferencia()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeReferenciaFromSchema(r io.Reader, schema string) (Referencia, error) {
	t := NewReferencia()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeReferencia(r Referencia, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Transportista, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Contenedor, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MuelleRecepcion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NumeroCita, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NumeroGuia, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Numero, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Gln, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Contacto, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CorreoElectronico, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoISOpais, w)
	if err != nil {
		return err
	}
	return err
}

func (r Referencia) Serialize(w io.Writer) error {
	return writeReferencia(r, w)
}

func (r Referencia) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"transportista\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"contenedor\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"muelleRecepcion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"numeroCita\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"numeroGuia\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"numero\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"gln\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"contacto\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"correoElectronico\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"codigoISOpais\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.Wapv2.Events.Record.Referencia\",\"type\":\"record\"}"
}

func (r Referencia) SchemaName() string {
	return "Andreani.Wapv2.Events.Record.Referencia"
}

func (_ Referencia) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Referencia) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Referencia) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Referencia) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Referencia) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Referencia) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Referencia) SetString(v string)   { panic("Unsupported operation") }
func (_ Referencia) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Referencia) Get(i int) types.Field {
	switch i {
	case 0:
		r.Transportista = NewUnionNullString()

		return r.Transportista
	case 1:
		r.Contenedor = NewUnionNullString()

		return r.Contenedor
	case 2:
		r.MuelleRecepcion = NewUnionNullString()

		return r.MuelleRecepcion
	case 3:
		r.NumeroCita = NewUnionNullString()

		return r.NumeroCita
	case 4:
		r.NumeroGuia = NewUnionNullString()

		return r.NumeroGuia
	case 5:
		r.Numero = NewUnionNullString()

		return r.Numero
	case 6:
		r.Gln = NewUnionNullString()

		return r.Gln
	case 7:
		r.Contacto = NewUnionNullString()

		return r.Contacto
	case 8:
		r.CorreoElectronico = NewUnionNullString()

		return r.CorreoElectronico
	case 9:
		r.CodigoISOpais = NewUnionNullString()

		return r.CodigoISOpais
	}
	panic("Unknown field index")
}

func (r *Referencia) SetDefault(i int) {
	switch i {
	case 0:
		r.Transportista = nil
		return
	case 1:
		r.Contenedor = nil
		return
	case 2:
		r.MuelleRecepcion = nil
		return
	case 3:
		r.NumeroCita = nil
		return
	case 4:
		r.NumeroGuia = nil
		return
	case 5:
		r.Numero = nil
		return
	case 6:
		r.Gln = nil
		return
	case 7:
		r.Contacto = nil
		return
	case 8:
		r.CorreoElectronico = nil
		return
	case 9:
		r.CodigoISOpais = nil
		return
	}
	panic("Unknown field index")
}

func (r *Referencia) NullField(i int) {
	switch i {
	case 0:
		r.Transportista = nil
		return
	case 1:
		r.Contenedor = nil
		return
	case 2:
		r.MuelleRecepcion = nil
		return
	case 3:
		r.NumeroCita = nil
		return
	case 4:
		r.NumeroGuia = nil
		return
	case 5:
		r.Numero = nil
		return
	case 6:
		r.Gln = nil
		return
	case 7:
		r.Contacto = nil
		return
	case 8:
		r.CorreoElectronico = nil
		return
	case 9:
		r.CodigoISOpais = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Referencia) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Referencia) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Referencia) HintSize(int)                     { panic("Unsupported operation") }
func (_ Referencia) Finalize()                        {}

func (_ Referencia) AvroCRC64Fingerprint() []byte {
	return []byte(ReferenciaAvroCRC64Fingerprint)
}

func (r Referencia) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["transportista"], err = json.Marshal(r.Transportista)
	if err != nil {
		return nil, err
	}
	output["contenedor"], err = json.Marshal(r.Contenedor)
	if err != nil {
		return nil, err
	}
	output["muelleRecepcion"], err = json.Marshal(r.MuelleRecepcion)
	if err != nil {
		return nil, err
	}
	output["numeroCita"], err = json.Marshal(r.NumeroCita)
	if err != nil {
		return nil, err
	}
	output["numeroGuia"], err = json.Marshal(r.NumeroGuia)
	if err != nil {
		return nil, err
	}
	output["numero"], err = json.Marshal(r.Numero)
	if err != nil {
		return nil, err
	}
	output["gln"], err = json.Marshal(r.Gln)
	if err != nil {
		return nil, err
	}
	output["contacto"], err = json.Marshal(r.Contacto)
	if err != nil {
		return nil, err
	}
	output["correoElectronico"], err = json.Marshal(r.CorreoElectronico)
	if err != nil {
		return nil, err
	}
	output["codigoISOpais"], err = json.Marshal(r.CodigoISOpais)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Referencia) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["transportista"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Transportista); err != nil {
			return err
		}
	} else {
		r.Transportista = NewUnionNullString()

		r.Transportista = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["contenedor"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contenedor); err != nil {
			return err
		}
	} else {
		r.Contenedor = NewUnionNullString()

		r.Contenedor = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["muelleRecepcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MuelleRecepcion); err != nil {
			return err
		}
	} else {
		r.MuelleRecepcion = NewUnionNullString()

		r.MuelleRecepcion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["numeroCita"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroCita); err != nil {
			return err
		}
	} else {
		r.NumeroCita = NewUnionNullString()

		r.NumeroCita = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["numeroGuia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroGuia); err != nil {
			return err
		}
	} else {
		r.NumeroGuia = NewUnionNullString()

		r.NumeroGuia = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["numero"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Numero); err != nil {
			return err
		}
	} else {
		r.Numero = NewUnionNullString()

		r.Numero = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["gln"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Gln); err != nil {
			return err
		}
	} else {
		r.Gln = NewUnionNullString()

		r.Gln = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["contacto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contacto); err != nil {
			return err
		}
	} else {
		r.Contacto = NewUnionNullString()

		r.Contacto = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["correoElectronico"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CorreoElectronico); err != nil {
			return err
		}
	} else {
		r.CorreoElectronico = NewUnionNullString()

		r.CorreoElectronico = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoISOpais"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoISOpais); err != nil {
			return err
		}
	} else {
		r.CodigoISOpais = NewUnionNullString()

		r.CodigoISOpais = nil
	}
	return nil
}
