// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     PedidoDeAlmacenSCE.avsc
 */
package Wapv2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ListaDeTelefonos struct {
	ListaDeTelefonos *UnionNullArrayTelefono `json:"listaDeTelefonos"`
}

const ListaDeTelefonosAvroCRC64Fingerprint = "7aw\xb5\xcap\xfe\xa1"

func NewListaDeTelefonos() ListaDeTelefonos {
	r := ListaDeTelefonos{}
	return r
}

func DeserializeListaDeTelefonos(r io.Reader) (ListaDeTelefonos, error) {
	t := NewListaDeTelefonos()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeListaDeTelefonosFromSchema(r io.Reader, schema string) (ListaDeTelefonos, error) {
	t := NewListaDeTelefonos()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeListaDeTelefonos(r ListaDeTelefonos, w io.Writer) error {
	var err error
	err = writeUnionNullArrayTelefono(r.ListaDeTelefonos, w)
	if err != nil {
		return err
	}
	return err
}

func (r ListaDeTelefonos) Serialize(w io.Writer) error {
	return writeListaDeTelefonos(r, w)
}

func (r ListaDeTelefonos) Schema() string {
	return "{\"fields\":[{\"name\":\"listaDeTelefonos\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"default\":null,\"name\":\"tipo\",\"type\":[\"null\",\"string\"]},{\"name\":\"numero\",\"type\":\"string\"}],\"name\":\"Telefono\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"Andreani.Wapv2.Events.Record.ListaDeTelefonos\",\"type\":\"record\"}"
}

func (r ListaDeTelefonos) SchemaName() string {
	return "Andreani.Wapv2.Events.Record.ListaDeTelefonos"
}

func (_ ListaDeTelefonos) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ListaDeTelefonos) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ListaDeTelefonos) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ListaDeTelefonos) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ListaDeTelefonos) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ListaDeTelefonos) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ListaDeTelefonos) SetString(v string)   { panic("Unsupported operation") }
func (_ ListaDeTelefonos) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ListaDeTelefonos) Get(i int) types.Field {
	switch i {
	case 0:
		r.ListaDeTelefonos = NewUnionNullArrayTelefono()

		return r.ListaDeTelefonos
	}
	panic("Unknown field index")
}

func (r *ListaDeTelefonos) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ListaDeTelefonos) NullField(i int) {
	switch i {
	case 0:
		r.ListaDeTelefonos = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ListaDeTelefonos) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ListaDeTelefonos) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ListaDeTelefonos) HintSize(int)                     { panic("Unsupported operation") }
func (_ ListaDeTelefonos) Finalize()                        {}

func (_ ListaDeTelefonos) AvroCRC64Fingerprint() []byte {
	return []byte(ListaDeTelefonosAvroCRC64Fingerprint)
}

func (r ListaDeTelefonos) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["listaDeTelefonos"], err = json.Marshal(r.ListaDeTelefonos)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ListaDeTelefonos) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["listaDeTelefonos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ListaDeTelefonos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for listaDeTelefonos")
	}
	return nil
}
