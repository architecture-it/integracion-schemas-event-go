// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     LoteAsn.avsc
 */
package Wapv2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type LoteAsn struct {
	LoteDeFabricante *UnionNullString `json:"loteDeFabricante"`

	LoteSecundario *UnionNullString `json:"loteSecundario"`

	Estado *UnionNullString `json:"estado"`

	FechaDeVencimiento *UnionNullLong `json:"fechaDeVencimiento"`

	OtrosDatos *UnionNullListaDePropiedades `json:"otrosDatos"`

	EstadoLote *UnionNullString `json:"estadoLote"`
}

const LoteAsnAvroCRC64Fingerprint = "m\x1e\xb0Q\x10V\x92\xf3"

func NewLoteAsn() LoteAsn {
	r := LoteAsn{}
	r.LoteDeFabricante = nil
	r.LoteSecundario = nil
	r.Estado = nil
	r.FechaDeVencimiento = nil
	r.OtrosDatos = nil
	r.EstadoLote = nil
	return r
}

func DeserializeLoteAsn(r io.Reader) (LoteAsn, error) {
	t := NewLoteAsn()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeLoteAsnFromSchema(r io.Reader, schema string) (LoteAsn, error) {
	t := NewLoteAsn()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeLoteAsn(r LoteAsn, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.LoteDeFabricante, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LoteSecundario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Estado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaDeVencimiento, w)
	if err != nil {
		return err
	}
	err = writeUnionNullListaDePropiedades(r.OtrosDatos, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EstadoLote, w)
	if err != nil {
		return err
	}
	return err
}

func (r LoteAsn) Serialize(w io.Writer) error {
	return writeLoteAsn(r, w)
}

func (r LoteAsn) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"loteDeFabricante\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"loteSecundario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"estado\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"fechaDeVencimiento\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"otrosDatos\",\"type\":[\"null\",{\"fields\":[{\"name\":\"metadatos\",\"type\":{\"items\":{\"fields\":[{\"name\":\"meta\",\"type\":\"string\"},{\"name\":\"contenido\",\"type\":\"string\"}],\"name\":\"Metadato\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"ListaDePropiedades\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"estadoLote\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.Wapv2.Events.Record.LoteAsn\",\"type\":\"record\"}"
}

func (r LoteAsn) SchemaName() string {
	return "Andreani.Wapv2.Events.Record.LoteAsn"
}

func (_ LoteAsn) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ LoteAsn) SetInt(v int32)       { panic("Unsupported operation") }
func (_ LoteAsn) SetLong(v int64)      { panic("Unsupported operation") }
func (_ LoteAsn) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ LoteAsn) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ LoteAsn) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ LoteAsn) SetString(v string)   { panic("Unsupported operation") }
func (_ LoteAsn) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *LoteAsn) Get(i int) types.Field {
	switch i {
	case 0:
		r.LoteDeFabricante = NewUnionNullString()

		return r.LoteDeFabricante
	case 1:
		r.LoteSecundario = NewUnionNullString()

		return r.LoteSecundario
	case 2:
		r.Estado = NewUnionNullString()

		return r.Estado
	case 3:
		r.FechaDeVencimiento = NewUnionNullLong()

		return r.FechaDeVencimiento
	case 4:
		r.OtrosDatos = NewUnionNullListaDePropiedades()

		return r.OtrosDatos
	case 5:
		r.EstadoLote = NewUnionNullString()

		return r.EstadoLote
	}
	panic("Unknown field index")
}

func (r *LoteAsn) SetDefault(i int) {
	switch i {
	case 0:
		r.LoteDeFabricante = nil
		return
	case 1:
		r.LoteSecundario = nil
		return
	case 2:
		r.Estado = nil
		return
	case 3:
		r.FechaDeVencimiento = nil
		return
	case 4:
		r.OtrosDatos = nil
		return
	case 5:
		r.EstadoLote = nil
		return
	}
	panic("Unknown field index")
}

func (r *LoteAsn) NullField(i int) {
	switch i {
	case 0:
		r.LoteDeFabricante = nil
		return
	case 1:
		r.LoteSecundario = nil
		return
	case 2:
		r.Estado = nil
		return
	case 3:
		r.FechaDeVencimiento = nil
		return
	case 4:
		r.OtrosDatos = nil
		return
	case 5:
		r.EstadoLote = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ LoteAsn) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ LoteAsn) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ LoteAsn) HintSize(int)                     { panic("Unsupported operation") }
func (_ LoteAsn) Finalize()                        {}

func (_ LoteAsn) AvroCRC64Fingerprint() []byte {
	return []byte(LoteAsnAvroCRC64Fingerprint)
}

func (r LoteAsn) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["loteDeFabricante"], err = json.Marshal(r.LoteDeFabricante)
	if err != nil {
		return nil, err
	}
	output["loteSecundario"], err = json.Marshal(r.LoteSecundario)
	if err != nil {
		return nil, err
	}
	output["estado"], err = json.Marshal(r.Estado)
	if err != nil {
		return nil, err
	}
	output["fechaDeVencimiento"], err = json.Marshal(r.FechaDeVencimiento)
	if err != nil {
		return nil, err
	}
	output["otrosDatos"], err = json.Marshal(r.OtrosDatos)
	if err != nil {
		return nil, err
	}
	output["estadoLote"], err = json.Marshal(r.EstadoLote)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *LoteAsn) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["loteDeFabricante"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteDeFabricante); err != nil {
			return err
		}
	} else {
		r.LoteDeFabricante = NewUnionNullString()

		r.LoteDeFabricante = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteSecundario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteSecundario); err != nil {
			return err
		}
	} else {
		r.LoteSecundario = NewUnionNullString()

		r.LoteSecundario = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["estado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estado); err != nil {
			return err
		}
	} else {
		r.Estado = NewUnionNullString()

		r.Estado = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaDeVencimiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaDeVencimiento); err != nil {
			return err
		}
	} else {
		r.FechaDeVencimiento = NewUnionNullLong()

		r.FechaDeVencimiento = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["otrosDatos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OtrosDatos); err != nil {
			return err
		}
	} else {
		r.OtrosDatos = NewUnionNullListaDePropiedades()

		r.OtrosDatos = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["estadoLote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EstadoLote); err != nil {
			return err
		}
	} else {
		r.EstadoLote = NewUnionNullString()

		r.EstadoLote = nil
	}
	return nil
}
