// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     OrdenDeKittingSolicitadaV2.avsc
 */
package Wapv2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ArticuloKitting struct {
	Cantidad string `json:"cantidad"`

	Propietario string `json:"propietario"`

	Codigo string `json:"codigo"`

	LoteFabricante string `json:"loteFabricante"`

	LoteSecundario string `json:"loteSecundario"`

	LoteAlmacen string `json:"loteAlmacen"`

	LoteEstado string `json:"loteEstado"`

	Acondi *UnionNullArrayString `json:"acondi"`
}

const ArticuloKittingAvroCRC64Fingerprint = "\xb9\xf4\x1beCdWb"

func NewArticuloKitting() ArticuloKitting {
	r := ArticuloKitting{}
	r.Acondi = nil
	return r
}

func DeserializeArticuloKitting(r io.Reader) (ArticuloKitting, error) {
	t := NewArticuloKitting()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeArticuloKittingFromSchema(r io.Reader, schema string) (ArticuloKitting, error) {
	t := NewArticuloKitting()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeArticuloKitting(r ArticuloKitting, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Cantidad, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Propietario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Codigo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteFabricante, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteSecundario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteAlmacen, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteEstado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayString(r.Acondi, w)
	if err != nil {
		return err
	}
	return err
}

func (r ArticuloKitting) Serialize(w io.Writer) error {
	return writeArticuloKitting(r, w)
}

func (r ArticuloKitting) Schema() string {
	return "{\"fields\":[{\"name\":\"cantidad\",\"type\":\"string\"},{\"name\":\"propietario\",\"type\":\"string\"},{\"name\":\"codigo\",\"type\":\"string\"},{\"name\":\"loteFabricante\",\"type\":\"string\"},{\"name\":\"loteSecundario\",\"type\":\"string\"},{\"name\":\"loteAlmacen\",\"type\":\"string\"},{\"name\":\"loteEstado\",\"type\":\"string\"},{\"default\":null,\"name\":\"acondi\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]}],\"name\":\"Andreani.Wapv2.Events.Record.ArticuloKitting\",\"type\":\"record\"}"
}

func (r ArticuloKitting) SchemaName() string {
	return "Andreani.Wapv2.Events.Record.ArticuloKitting"
}

func (_ ArticuloKitting) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ArticuloKitting) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ArticuloKitting) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ArticuloKitting) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ArticuloKitting) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ArticuloKitting) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ArticuloKitting) SetString(v string)   { panic("Unsupported operation") }
func (_ ArticuloKitting) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ArticuloKitting) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Cantidad}

		return w

	case 1:
		w := types.String{Target: &r.Propietario}

		return w

	case 2:
		w := types.String{Target: &r.Codigo}

		return w

	case 3:
		w := types.String{Target: &r.LoteFabricante}

		return w

	case 4:
		w := types.String{Target: &r.LoteSecundario}

		return w

	case 5:
		w := types.String{Target: &r.LoteAlmacen}

		return w

	case 6:
		w := types.String{Target: &r.LoteEstado}

		return w

	case 7:
		r.Acondi = NewUnionNullArrayString()

		return r.Acondi
	}
	panic("Unknown field index")
}

func (r *ArticuloKitting) SetDefault(i int) {
	switch i {
	case 7:
		r.Acondi = nil
		return
	}
	panic("Unknown field index")
}

func (r *ArticuloKitting) NullField(i int) {
	switch i {
	case 7:
		r.Acondi = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ArticuloKitting) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ArticuloKitting) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ArticuloKitting) HintSize(int)                     { panic("Unsupported operation") }
func (_ ArticuloKitting) Finalize()                        {}

func (_ ArticuloKitting) AvroCRC64Fingerprint() []byte {
	return []byte(ArticuloKittingAvroCRC64Fingerprint)
}

func (r ArticuloKitting) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["cantidad"], err = json.Marshal(r.Cantidad)
	if err != nil {
		return nil, err
	}
	output["propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["codigo"], err = json.Marshal(r.Codigo)
	if err != nil {
		return nil, err
	}
	output["loteFabricante"], err = json.Marshal(r.LoteFabricante)
	if err != nil {
		return nil, err
	}
	output["loteSecundario"], err = json.Marshal(r.LoteSecundario)
	if err != nil {
		return nil, err
	}
	output["loteAlmacen"], err = json.Marshal(r.LoteAlmacen)
	if err != nil {
		return nil, err
	}
	output["loteEstado"], err = json.Marshal(r.LoteEstado)
	if err != nil {
		return nil, err
	}
	output["acondi"], err = json.Marshal(r.Acondi)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ArticuloKitting) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["cantidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cantidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for cantidad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for propietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Codigo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for codigo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteFabricante"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteFabricante); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for loteFabricante")
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteSecundario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteSecundario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for loteSecundario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteAlmacen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteAlmacen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for loteAlmacen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteEstado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteEstado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for loteEstado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["acondi"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Acondi); err != nil {
			return err
		}
	} else {
		r.Acondi = NewUnionNullArrayString()

		r.Acondi = nil
	}
	return nil
}
