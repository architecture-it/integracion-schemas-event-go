// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     CambioDeEstadoDeLoteSolicitada.avsc
 */
package Wapv2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CambioDeEstadoDeLote struct {
	Propietario string `json:"propietario"`

	Articulo string `json:"articulo"`

	LoteSecundario string `json:"loteSecundario"`

	EstadoActual string `json:"estadoActual"`

	EstadoNuevo string `json:"estadoNuevo"`
}

const CambioDeEstadoDeLoteAvroCRC64Fingerprint = "\xdf\xc9\xe6\xe3JÕ«\xdc"

func NewCambioDeEstadoDeLote() CambioDeEstadoDeLote {
	r := CambioDeEstadoDeLote{}
	return r
}

func DeserializeCambioDeEstadoDeLote(r io.Reader) (CambioDeEstadoDeLote, error) {
	t := NewCambioDeEstadoDeLote()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCambioDeEstadoDeLoteFromSchema(r io.Reader, schema string) (CambioDeEstadoDeLote, error) {
	t := NewCambioDeEstadoDeLote()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCambioDeEstadoDeLote(r CambioDeEstadoDeLote, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Propietario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Articulo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteSecundario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.EstadoActual, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.EstadoNuevo, w)
	if err != nil {
		return err
	}
	return err
}

func (r CambioDeEstadoDeLote) Serialize(w io.Writer) error {
	return writeCambioDeEstadoDeLote(r, w)
}

func (r CambioDeEstadoDeLote) Schema() string {
	return "{\"fields\":[{\"name\":\"propietario\",\"type\":\"string\"},{\"name\":\"articulo\",\"type\":\"string\"},{\"name\":\"loteSecundario\",\"type\":\"string\"},{\"name\":\"estadoActual\",\"type\":\"string\"},{\"name\":\"estadoNuevo\",\"type\":\"string\"}],\"name\":\"Andreani.Wapv2.Events.Record.CambioDeEstadoDeLote\",\"type\":\"record\"}"
}

func (r CambioDeEstadoDeLote) SchemaName() string {
	return "Andreani.Wapv2.Events.Record.CambioDeEstadoDeLote"
}

func (_ CambioDeEstadoDeLote) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CambioDeEstadoDeLote) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CambioDeEstadoDeLote) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CambioDeEstadoDeLote) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CambioDeEstadoDeLote) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CambioDeEstadoDeLote) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CambioDeEstadoDeLote) SetString(v string)   { panic("Unsupported operation") }
func (_ CambioDeEstadoDeLote) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CambioDeEstadoDeLote) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Propietario}

		return w

	case 1:
		w := types.String{Target: &r.Articulo}

		return w

	case 2:
		w := types.String{Target: &r.LoteSecundario}

		return w

	case 3:
		w := types.String{Target: &r.EstadoActual}

		return w

	case 4:
		w := types.String{Target: &r.EstadoNuevo}

		return w

	}
	panic("Unknown field index")
}

func (r *CambioDeEstadoDeLote) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *CambioDeEstadoDeLote) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ CambioDeEstadoDeLote) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CambioDeEstadoDeLote) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CambioDeEstadoDeLote) HintSize(int)                     { panic("Unsupported operation") }
func (_ CambioDeEstadoDeLote) Finalize()                        {}

func (_ CambioDeEstadoDeLote) AvroCRC64Fingerprint() []byte {
	return []byte(CambioDeEstadoDeLoteAvroCRC64Fingerprint)
}

func (r CambioDeEstadoDeLote) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["articulo"], err = json.Marshal(r.Articulo)
	if err != nil {
		return nil, err
	}
	output["loteSecundario"], err = json.Marshal(r.LoteSecundario)
	if err != nil {
		return nil, err
	}
	output["estadoActual"], err = json.Marshal(r.EstadoActual)
	if err != nil {
		return nil, err
	}
	output["estadoNuevo"], err = json.Marshal(r.EstadoNuevo)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CambioDeEstadoDeLote) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for propietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["articulo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Articulo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for articulo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteSecundario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteSecundario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for loteSecundario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["estadoActual"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EstadoActual); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for estadoActual")
	}
	val = func() json.RawMessage {
		if v, ok := fields["estadoNuevo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EstadoNuevo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for estadoNuevo")
	}
	return nil
}
