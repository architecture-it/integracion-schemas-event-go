// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     OrdenDeKittingSolicitadaV2.avsc
 */
package Wapv2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ListaDeArticuloKitting struct {
	ListaDeArticuloKitting *UnionNullArrayArticuloKitting `json:"listaDeArticuloKitting"`
}

const ListaDeArticuloKittingAvroCRC64Fingerprint = "*zKy;\x92ez"

func NewListaDeArticuloKitting() ListaDeArticuloKitting {
	r := ListaDeArticuloKitting{}
	return r
}

func DeserializeListaDeArticuloKitting(r io.Reader) (ListaDeArticuloKitting, error) {
	t := NewListaDeArticuloKitting()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeListaDeArticuloKittingFromSchema(r io.Reader, schema string) (ListaDeArticuloKitting, error) {
	t := NewListaDeArticuloKitting()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeListaDeArticuloKitting(r ListaDeArticuloKitting, w io.Writer) error {
	var err error
	err = writeUnionNullArrayArticuloKitting(r.ListaDeArticuloKitting, w)
	if err != nil {
		return err
	}
	return err
}

func (r ListaDeArticuloKitting) Serialize(w io.Writer) error {
	return writeListaDeArticuloKitting(r, w)
}

func (r ListaDeArticuloKitting) Schema() string {
	return "{\"fields\":[{\"name\":\"listaDeArticuloKitting\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"name\":\"cantidad\",\"type\":\"string\"},{\"name\":\"propietario\",\"type\":\"string\"},{\"name\":\"codigo\",\"type\":\"string\"},{\"name\":\"loteFabricante\",\"type\":\"string\"},{\"name\":\"loteSecundario\",\"type\":\"string\"},{\"name\":\"loteAlmacen\",\"type\":\"string\"},{\"name\":\"loteEstado\",\"type\":\"string\"}],\"name\":\"ArticuloKitting\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"Andreani.Wapv2.Events.Record.ListaDeArticuloKitting\",\"type\":\"record\"}"
}

func (r ListaDeArticuloKitting) SchemaName() string {
	return "Andreani.Wapv2.Events.Record.ListaDeArticuloKitting"
}

func (_ ListaDeArticuloKitting) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ListaDeArticuloKitting) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ListaDeArticuloKitting) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ListaDeArticuloKitting) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ListaDeArticuloKitting) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ListaDeArticuloKitting) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ListaDeArticuloKitting) SetString(v string)   { panic("Unsupported operation") }
func (_ ListaDeArticuloKitting) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ListaDeArticuloKitting) Get(i int) types.Field {
	switch i {
	case 0:
		r.ListaDeArticuloKitting = NewUnionNullArrayArticuloKitting()

		return r.ListaDeArticuloKitting
	}
	panic("Unknown field index")
}

func (r *ListaDeArticuloKitting) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ListaDeArticuloKitting) NullField(i int) {
	switch i {
	case 0:
		r.ListaDeArticuloKitting = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ListaDeArticuloKitting) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ListaDeArticuloKitting) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ListaDeArticuloKitting) HintSize(int)                     { panic("Unsupported operation") }
func (_ ListaDeArticuloKitting) Finalize()                        {}

func (_ ListaDeArticuloKitting) AvroCRC64Fingerprint() []byte {
	return []byte(ListaDeArticuloKittingAvroCRC64Fingerprint)
}

func (r ListaDeArticuloKitting) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["listaDeArticuloKitting"], err = json.Marshal(r.ListaDeArticuloKitting)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ListaDeArticuloKitting) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["listaDeArticuloKitting"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ListaDeArticuloKitting); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for listaDeArticuloKitting")
	}
	return nil
}
