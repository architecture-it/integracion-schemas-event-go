// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ListaDeDatosPersonales.avsc
 */
package Wapv2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ListaDeDatosPersonales struct {
	DatosPersonales *UnionNullArrayDatosPersonales `json:"datosPersonales"`
}

const ListaDeDatosPersonalesAvroCRC64Fingerprint = ".^`w3I\x80\xc9"

func NewListaDeDatosPersonales() ListaDeDatosPersonales {
	r := ListaDeDatosPersonales{}
	return r
}

func DeserializeListaDeDatosPersonales(r io.Reader) (ListaDeDatosPersonales, error) {
	t := NewListaDeDatosPersonales()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeListaDeDatosPersonalesFromSchema(r io.Reader, schema string) (ListaDeDatosPersonales, error) {
	t := NewListaDeDatosPersonales()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeListaDeDatosPersonales(r ListaDeDatosPersonales, w io.Writer) error {
	var err error
	err = writeUnionNullArrayDatosPersonales(r.DatosPersonales, w)
	if err != nil {
		return err
	}
	return err
}

func (r ListaDeDatosPersonales) Serialize(w io.Writer) error {
	return writeListaDeDatosPersonales(r, w)
}

func (r ListaDeDatosPersonales) Schema() string {
	return "{\"fields\":[{\"name\":\"datosPersonales\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"default\":null,\"name\":\"numeroDeDocumento\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"nombreCompleto\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"idinternocliente\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"eMail\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"telefonos\",\"type\":[\"null\",{\"fields\":[{\"name\":\"listaDeTelefonos\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"default\":null,\"name\":\"tipo\",\"type\":[\"null\",\"string\"]},{\"name\":\"numero\",\"type\":\"string\"}],\"name\":\"Telefono\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"ListaDeTelefonos\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"contacto\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"tipoDeDocumento\",\"type\":[\"null\",{\"name\":\"TipoDeDocumento\",\"symbols\":[\"undefined\",\"DNI\",\"CUIT\",\"CUIL\"],\"type\":\"enum\"}]}],\"name\":\"DatosPersonales\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"Andreani.Wapv2.Events.Record.ListaDeDatosPersonales\",\"type\":\"record\"}"
}

func (r ListaDeDatosPersonales) SchemaName() string {
	return "Andreani.Wapv2.Events.Record.ListaDeDatosPersonales"
}

func (_ ListaDeDatosPersonales) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ListaDeDatosPersonales) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ListaDeDatosPersonales) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ListaDeDatosPersonales) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ListaDeDatosPersonales) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ListaDeDatosPersonales) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ListaDeDatosPersonales) SetString(v string)   { panic("Unsupported operation") }
func (_ ListaDeDatosPersonales) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ListaDeDatosPersonales) Get(i int) types.Field {
	switch i {
	case 0:
		r.DatosPersonales = NewUnionNullArrayDatosPersonales()

		return r.DatosPersonales
	}
	panic("Unknown field index")
}

func (r *ListaDeDatosPersonales) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ListaDeDatosPersonales) NullField(i int) {
	switch i {
	case 0:
		r.DatosPersonales = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ListaDeDatosPersonales) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ListaDeDatosPersonales) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ListaDeDatosPersonales) HintSize(int)                     { panic("Unsupported operation") }
func (_ ListaDeDatosPersonales) Finalize()                        {}

func (_ ListaDeDatosPersonales) AvroCRC64Fingerprint() []byte {
	return []byte(ListaDeDatosPersonalesAvroCRC64Fingerprint)
}

func (r ListaDeDatosPersonales) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["datosPersonales"], err = json.Marshal(r.DatosPersonales)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ListaDeDatosPersonales) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["datosPersonales"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DatosPersonales); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for datosPersonales")
	}
	return nil
}
