// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     DatosLogisticos.avsc
 */
package Wapv2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DatosLogisticos struct {
	Volumen *UnionNullDouble `json:"volumen"`

	PesoBruto *UnionNullDouble `json:"pesoBruto"`

	PesoTara *UnionNullDouble `json:"pesoTara"`

	PesoNeto *UnionNullDouble `json:"pesoNeto"`

	CantidadporPaquete *UnionNullFloat `json:"cantidadporPaquete"`

	CantidadporCaja *UnionNullFloat `json:"cantidadporCaja"`

	CantidadporPallet *UnionNullFloat `json:"cantidadporPallet"`

	AlturaUnidad *UnionNullFloat `json:"alturaUnidad"`

	LargoUnidad *UnionNullFloat `json:"largoUnidad"`
}

const DatosLogisticosAvroCRC64Fingerprint = "e\r\x15\xd9+\x9c\xceI"

func NewDatosLogisticos() DatosLogisticos {
	r := DatosLogisticos{}
	r.Volumen = nil
	r.PesoBruto = nil
	r.PesoTara = nil
	r.PesoNeto = nil
	r.CantidadporPaquete = nil
	r.CantidadporCaja = nil
	r.CantidadporPallet = nil
	r.AlturaUnidad = nil
	r.LargoUnidad = nil
	return r
}

func DeserializeDatosLogisticos(r io.Reader) (DatosLogisticos, error) {
	t := NewDatosLogisticos()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDatosLogisticosFromSchema(r io.Reader, schema string) (DatosLogisticos, error) {
	t := NewDatosLogisticos()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDatosLogisticos(r DatosLogisticos, w io.Writer) error {
	var err error
	err = writeUnionNullDouble(r.Volumen, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.PesoBruto, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.PesoTara, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.PesoNeto, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.CantidadporPaquete, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.CantidadporCaja, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.CantidadporPallet, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.AlturaUnidad, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.LargoUnidad, w)
	if err != nil {
		return err
	}
	return err
}

func (r DatosLogisticos) Serialize(w io.Writer) error {
	return writeDatosLogisticos(r, w)
}

func (r DatosLogisticos) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"volumen\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"pesoBruto\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"pesoTara\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"pesoNeto\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"cantidadporPaquete\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"cantidadporCaja\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"cantidadporPallet\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"alturaUnidad\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"largoUnidad\",\"type\":[\"null\",\"float\"]}],\"name\":\"Andreani.Wapv2.Events.Record.DatosLogisticos\",\"type\":\"record\"}"
}

func (r DatosLogisticos) SchemaName() string {
	return "Andreani.Wapv2.Events.Record.DatosLogisticos"
}

func (_ DatosLogisticos) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DatosLogisticos) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DatosLogisticos) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DatosLogisticos) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DatosLogisticos) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DatosLogisticos) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DatosLogisticos) SetString(v string)   { panic("Unsupported operation") }
func (_ DatosLogisticos) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DatosLogisticos) Get(i int) types.Field {
	switch i {
	case 0:
		r.Volumen = NewUnionNullDouble()

		return r.Volumen
	case 1:
		r.PesoBruto = NewUnionNullDouble()

		return r.PesoBruto
	case 2:
		r.PesoTara = NewUnionNullDouble()

		return r.PesoTara
	case 3:
		r.PesoNeto = NewUnionNullDouble()

		return r.PesoNeto
	case 4:
		r.CantidadporPaquete = NewUnionNullFloat()

		return r.CantidadporPaquete
	case 5:
		r.CantidadporCaja = NewUnionNullFloat()

		return r.CantidadporCaja
	case 6:
		r.CantidadporPallet = NewUnionNullFloat()

		return r.CantidadporPallet
	case 7:
		r.AlturaUnidad = NewUnionNullFloat()

		return r.AlturaUnidad
	case 8:
		r.LargoUnidad = NewUnionNullFloat()

		return r.LargoUnidad
	}
	panic("Unknown field index")
}

func (r *DatosLogisticos) SetDefault(i int) {
	switch i {
	case 0:
		r.Volumen = nil
		return
	case 1:
		r.PesoBruto = nil
		return
	case 2:
		r.PesoTara = nil
		return
	case 3:
		r.PesoNeto = nil
		return
	case 4:
		r.CantidadporPaquete = nil
		return
	case 5:
		r.CantidadporCaja = nil
		return
	case 6:
		r.CantidadporPallet = nil
		return
	case 7:
		r.AlturaUnidad = nil
		return
	case 8:
		r.LargoUnidad = nil
		return
	}
	panic("Unknown field index")
}

func (r *DatosLogisticos) NullField(i int) {
	switch i {
	case 0:
		r.Volumen = nil
		return
	case 1:
		r.PesoBruto = nil
		return
	case 2:
		r.PesoTara = nil
		return
	case 3:
		r.PesoNeto = nil
		return
	case 4:
		r.CantidadporPaquete = nil
		return
	case 5:
		r.CantidadporCaja = nil
		return
	case 6:
		r.CantidadporPallet = nil
		return
	case 7:
		r.AlturaUnidad = nil
		return
	case 8:
		r.LargoUnidad = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ DatosLogisticos) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DatosLogisticos) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DatosLogisticos) HintSize(int)                     { panic("Unsupported operation") }
func (_ DatosLogisticos) Finalize()                        {}

func (_ DatosLogisticos) AvroCRC64Fingerprint() []byte {
	return []byte(DatosLogisticosAvroCRC64Fingerprint)
}

func (r DatosLogisticos) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["volumen"], err = json.Marshal(r.Volumen)
	if err != nil {
		return nil, err
	}
	output["pesoBruto"], err = json.Marshal(r.PesoBruto)
	if err != nil {
		return nil, err
	}
	output["pesoTara"], err = json.Marshal(r.PesoTara)
	if err != nil {
		return nil, err
	}
	output["pesoNeto"], err = json.Marshal(r.PesoNeto)
	if err != nil {
		return nil, err
	}
	output["cantidadporPaquete"], err = json.Marshal(r.CantidadporPaquete)
	if err != nil {
		return nil, err
	}
	output["cantidadporCaja"], err = json.Marshal(r.CantidadporCaja)
	if err != nil {
		return nil, err
	}
	output["cantidadporPallet"], err = json.Marshal(r.CantidadporPallet)
	if err != nil {
		return nil, err
	}
	output["alturaUnidad"], err = json.Marshal(r.AlturaUnidad)
	if err != nil {
		return nil, err
	}
	output["largoUnidad"], err = json.Marshal(r.LargoUnidad)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DatosLogisticos) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["volumen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Volumen); err != nil {
			return err
		}
	} else {
		r.Volumen = NewUnionNullDouble()

		r.Volumen = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["pesoBruto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoBruto); err != nil {
			return err
		}
	} else {
		r.PesoBruto = NewUnionNullDouble()

		r.PesoBruto = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["pesoTara"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoTara); err != nil {
			return err
		}
	} else {
		r.PesoTara = NewUnionNullDouble()

		r.PesoTara = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["pesoNeto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoNeto); err != nil {
			return err
		}
	} else {
		r.PesoNeto = NewUnionNullDouble()

		r.PesoNeto = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["cantidadporPaquete"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CantidadporPaquete); err != nil {
			return err
		}
	} else {
		r.CantidadporPaquete = NewUnionNullFloat()

		r.CantidadporPaquete = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["cantidadporCaja"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CantidadporCaja); err != nil {
			return err
		}
	} else {
		r.CantidadporCaja = NewUnionNullFloat()

		r.CantidadporCaja = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["cantidadporPallet"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CantidadporPallet); err != nil {
			return err
		}
	} else {
		r.CantidadporPallet = NewUnionNullFloat()

		r.CantidadporPallet = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["alturaUnidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AlturaUnidad); err != nil {
			return err
		}
	} else {
		r.AlturaUnidad = NewUnionNullFloat()

		r.AlturaUnidad = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["largoUnidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LargoUnidad); err != nil {
			return err
		}
	} else {
		r.LargoUnidad = NewUnionNullFloat()

		r.LargoUnidad = nil
	}
	return nil
}
