// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ListaDeDetalleDeLinea.avsc
 */
package Wapv2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ArticuloAsn struct {
	Codigo string `json:"codigo"`

	Ean *UnionNullString `json:"ean"`

	CamposLibres *UnionNullMetadato `json:"camposLibres"`

	Lote LoteAsn `json:"lote"`

	UbicacionDestino *UnionNullString `json:"ubicacionDestino"`

	PaqueteLote *UnionNullString `json:"paqueteLote"`

	FechaFabricacion *UnionNullLong `json:"fechaFabricacion"`

	ProdTrazable *UnionNullString `json:"prodTrazable"`

	ConsumirAntesDe *UnionNullLong `json:"consumirAntesDe"`

	EntrarAntesDe *UnionNullLong `json:"entrarAntesDe"`

	NomenclaturaServicio *UnionNullString `json:"nomenclaturaServicio"`

	DescripcionServicio *UnionNullString `json:"descripcionServicio"`
}

const ArticuloAsnAvroCRC64Fingerprint = "\xc4>\x86\xf4\x9e\x98Q\xa1"

func NewArticuloAsn() ArticuloAsn {
	r := ArticuloAsn{}
	r.Ean = nil
	r.CamposLibres = nil
	r.Lote = NewLoteAsn()

	r.UbicacionDestino = nil
	r.PaqueteLote = nil
	r.FechaFabricacion = nil
	r.ProdTrazable = nil
	r.ConsumirAntesDe = nil
	r.EntrarAntesDe = nil
	r.NomenclaturaServicio = nil
	r.DescripcionServicio = nil
	return r
}

func DeserializeArticuloAsn(r io.Reader) (ArticuloAsn, error) {
	t := NewArticuloAsn()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeArticuloAsnFromSchema(r io.Reader, schema string) (ArticuloAsn, error) {
	t := NewArticuloAsn()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeArticuloAsn(r ArticuloAsn, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Codigo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Ean, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMetadato(r.CamposLibres, w)
	if err != nil {
		return err
	}
	err = writeLoteAsn(r.Lote, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.UbicacionDestino, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PaqueteLote, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaFabricacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ProdTrazable, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.ConsumirAntesDe, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.EntrarAntesDe, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NomenclaturaServicio, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DescripcionServicio, w)
	if err != nil {
		return err
	}
	return err
}

func (r ArticuloAsn) Serialize(w io.Writer) error {
	return writeArticuloAsn(r, w)
}

func (r ArticuloAsn) Schema() string {
	return "{\"fields\":[{\"name\":\"codigo\",\"type\":\"string\"},{\"default\":null,\"name\":\"ean\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"camposLibres\",\"type\":[\"null\",{\"fields\":[{\"name\":\"meta\",\"type\":\"string\"},{\"name\":\"contenido\",\"type\":\"string\"}],\"name\":\"Metadato\",\"type\":\"record\"}]},{\"name\":\"lote\",\"type\":{\"fields\":[{\"default\":null,\"name\":\"loteDeFabricante\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"loteSecundario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"estado\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"fechaDeVencimiento\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"otrosDatos\",\"type\":[\"null\",{\"fields\":[{\"name\":\"metadatos\",\"type\":{\"items\":\"Andreani.Wapv2.Events.Record.Metadato\",\"type\":\"array\"}}],\"name\":\"ListaDePropiedades\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"estadoLote\",\"type\":[\"null\",\"string\"]}],\"name\":\"LoteAsn\",\"type\":\"record\"}},{\"default\":null,\"name\":\"ubicacionDestino\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"paqueteLote\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"fechaFabricacion\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"prodTrazable\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"consumirAntesDe\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"entrarAntesDe\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"nomenclaturaServicio\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"descripcionServicio\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.Wapv2.Events.Record.ArticuloAsn\",\"type\":\"record\"}"
}

func (r ArticuloAsn) SchemaName() string {
	return "Andreani.Wapv2.Events.Record.ArticuloAsn"
}

func (_ ArticuloAsn) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ArticuloAsn) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ArticuloAsn) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ArticuloAsn) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ArticuloAsn) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ArticuloAsn) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ArticuloAsn) SetString(v string)   { panic("Unsupported operation") }
func (_ ArticuloAsn) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ArticuloAsn) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Codigo}

		return w

	case 1:
		r.Ean = NewUnionNullString()

		return r.Ean
	case 2:
		r.CamposLibres = NewUnionNullMetadato()

		return r.CamposLibres
	case 3:
		r.Lote = NewLoteAsn()

		w := types.Record{Target: &r.Lote}

		return w

	case 4:
		r.UbicacionDestino = NewUnionNullString()

		return r.UbicacionDestino
	case 5:
		r.PaqueteLote = NewUnionNullString()

		return r.PaqueteLote
	case 6:
		r.FechaFabricacion = NewUnionNullLong()

		return r.FechaFabricacion
	case 7:
		r.ProdTrazable = NewUnionNullString()

		return r.ProdTrazable
	case 8:
		r.ConsumirAntesDe = NewUnionNullLong()

		return r.ConsumirAntesDe
	case 9:
		r.EntrarAntesDe = NewUnionNullLong()

		return r.EntrarAntesDe
	case 10:
		r.NomenclaturaServicio = NewUnionNullString()

		return r.NomenclaturaServicio
	case 11:
		r.DescripcionServicio = NewUnionNullString()

		return r.DescripcionServicio
	}
	panic("Unknown field index")
}

func (r *ArticuloAsn) SetDefault(i int) {
	switch i {
	case 1:
		r.Ean = nil
		return
	case 2:
		r.CamposLibres = nil
		return
	case 4:
		r.UbicacionDestino = nil
		return
	case 5:
		r.PaqueteLote = nil
		return
	case 6:
		r.FechaFabricacion = nil
		return
	case 7:
		r.ProdTrazable = nil
		return
	case 8:
		r.ConsumirAntesDe = nil
		return
	case 9:
		r.EntrarAntesDe = nil
		return
	case 10:
		r.NomenclaturaServicio = nil
		return
	case 11:
		r.DescripcionServicio = nil
		return
	}
	panic("Unknown field index")
}

func (r *ArticuloAsn) NullField(i int) {
	switch i {
	case 1:
		r.Ean = nil
		return
	case 2:
		r.CamposLibres = nil
		return
	case 4:
		r.UbicacionDestino = nil
		return
	case 5:
		r.PaqueteLote = nil
		return
	case 6:
		r.FechaFabricacion = nil
		return
	case 7:
		r.ProdTrazable = nil
		return
	case 8:
		r.ConsumirAntesDe = nil
		return
	case 9:
		r.EntrarAntesDe = nil
		return
	case 10:
		r.NomenclaturaServicio = nil
		return
	case 11:
		r.DescripcionServicio = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ArticuloAsn) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ArticuloAsn) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ArticuloAsn) HintSize(int)                     { panic("Unsupported operation") }
func (_ ArticuloAsn) Finalize()                        {}

func (_ ArticuloAsn) AvroCRC64Fingerprint() []byte {
	return []byte(ArticuloAsnAvroCRC64Fingerprint)
}

func (r ArticuloAsn) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["codigo"], err = json.Marshal(r.Codigo)
	if err != nil {
		return nil, err
	}
	output["ean"], err = json.Marshal(r.Ean)
	if err != nil {
		return nil, err
	}
	output["camposLibres"], err = json.Marshal(r.CamposLibres)
	if err != nil {
		return nil, err
	}
	output["lote"], err = json.Marshal(r.Lote)
	if err != nil {
		return nil, err
	}
	output["ubicacionDestino"], err = json.Marshal(r.UbicacionDestino)
	if err != nil {
		return nil, err
	}
	output["paqueteLote"], err = json.Marshal(r.PaqueteLote)
	if err != nil {
		return nil, err
	}
	output["fechaFabricacion"], err = json.Marshal(r.FechaFabricacion)
	if err != nil {
		return nil, err
	}
	output["prodTrazable"], err = json.Marshal(r.ProdTrazable)
	if err != nil {
		return nil, err
	}
	output["consumirAntesDe"], err = json.Marshal(r.ConsumirAntesDe)
	if err != nil {
		return nil, err
	}
	output["entrarAntesDe"], err = json.Marshal(r.EntrarAntesDe)
	if err != nil {
		return nil, err
	}
	output["nomenclaturaServicio"], err = json.Marshal(r.NomenclaturaServicio)
	if err != nil {
		return nil, err
	}
	output["descripcionServicio"], err = json.Marshal(r.DescripcionServicio)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ArticuloAsn) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["codigo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Codigo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for codigo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ean"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ean); err != nil {
			return err
		}
	} else {
		r.Ean = NewUnionNullString()

		r.Ean = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["camposLibres"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CamposLibres); err != nil {
			return err
		}
	} else {
		r.CamposLibres = NewUnionNullMetadato()

		r.CamposLibres = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["lote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Lote); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for lote")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ubicacionDestino"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UbicacionDestino); err != nil {
			return err
		}
	} else {
		r.UbicacionDestino = NewUnionNullString()

		r.UbicacionDestino = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["paqueteLote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PaqueteLote); err != nil {
			return err
		}
	} else {
		r.PaqueteLote = NewUnionNullString()

		r.PaqueteLote = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaFabricacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaFabricacion); err != nil {
			return err
		}
	} else {
		r.FechaFabricacion = NewUnionNullLong()

		r.FechaFabricacion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["prodTrazable"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ProdTrazable); err != nil {
			return err
		}
	} else {
		r.ProdTrazable = NewUnionNullString()

		r.ProdTrazable = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["consumirAntesDe"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ConsumirAntesDe); err != nil {
			return err
		}
	} else {
		r.ConsumirAntesDe = NewUnionNullLong()

		r.ConsumirAntesDe = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["entrarAntesDe"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EntrarAntesDe); err != nil {
			return err
		}
	} else {
		r.EntrarAntesDe = NewUnionNullLong()

		r.EntrarAntesDe = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["nomenclaturaServicio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NomenclaturaServicio); err != nil {
			return err
		}
	} else {
		r.NomenclaturaServicio = NewUnionNullString()

		r.NomenclaturaServicio = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["descripcionServicio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DescripcionServicio); err != nil {
			return err
		}
	} else {
		r.DescripcionServicio = NewUnionNullString()

		r.DescripcionServicio = nil
	}
	return nil
}
