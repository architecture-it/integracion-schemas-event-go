// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Transporte.avsc
 */
package Wapv2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullReferenciaTypeEnum int

const (
	UnionNullReferenciaTypeEnumReferencia UnionNullReferenciaTypeEnum = 1
)

type UnionNullReferencia struct {
	Null       *types.NullVal
	Referencia Referencia
	UnionType  UnionNullReferenciaTypeEnum
}

func writeUnionNullReferencia(r *UnionNullReferencia, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullReferenciaTypeEnumReferencia:
		return writeReferencia(r.Referencia, w)
	}
	return fmt.Errorf("invalid value for *UnionNullReferencia")
}

func NewUnionNullReferencia() *UnionNullReferencia {
	return &UnionNullReferencia{}
}

func (r *UnionNullReferencia) Serialize(w io.Writer) error {
	return writeUnionNullReferencia(r, w)
}

func DeserializeUnionNullReferencia(r io.Reader) (*UnionNullReferencia, error) {
	t := NewUnionNullReferencia()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullReferenciaFromSchema(r io.Reader, schema string) (*UnionNullReferencia, error) {
	t := NewUnionNullReferencia()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullReferencia) Schema() string {
	return "[\"null\",{\"fields\":[{\"default\":null,\"name\":\"transportista\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"contenedor\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"muelleRecepcion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"numeroCita\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"numeroGuia\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"numero\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"gln\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"contacto\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"correoElectronico\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"codigoISOpais\",\"type\":[\"null\",\"string\"]}],\"name\":\"Referencia\",\"type\":\"record\"}]"
}

func (_ *UnionNullReferencia) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullReferencia) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullReferencia) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullReferencia) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullReferencia) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullReferencia) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullReferencia) SetLong(v int64) {

	r.UnionType = (UnionNullReferenciaTypeEnum)(v)
}

func (r *UnionNullReferencia) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.Referencia = NewReferencia()
		return &types.Record{Target: (&r.Referencia)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullReferencia) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionNullReferencia) HintSize(i int)                   { panic("Unsupported operation") }
func (_ *UnionNullReferencia) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionNullReferencia) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullReferencia) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionNullReferencia) Finalize()                        {}

func (r *UnionNullReferencia) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullReferenciaTypeEnumReferencia:
		return json.Marshal(map[string]interface{}{"Andreani.Wapv2.Events.Record.Referencia": r.Referencia})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullReferencia")
}

func (r *UnionNullReferencia) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["Andreani.Wapv2.Events.Record.Referencia"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.Referencia)
	}
	return fmt.Errorf("invalid value for *UnionNullReferencia")
}
