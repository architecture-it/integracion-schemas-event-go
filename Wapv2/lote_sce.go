// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     LoteSCE.avsc
 */
package Wapv2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type LoteSCE struct {
	Articulo string `json:"articulo"`

	Propietario string `json:"propietario"`

	Estadolote string `json:"estadolote"`

	LoteCaja string `json:"loteCaja"`

	LoteSecundario string `json:"loteSecundario"`

	Trazable int32 `json:"trazable"`

	ZonaConsumo *UnionNullString `json:"zonaConsumo"`

	FechaFabricacion *UnionNullLong `json:"fechaFabricacion"`

	FechaVencimiento *UnionNullLong `json:"fechaVencimiento"`

	Paquete *UnionNullString `json:"paquete"`

	VidaUtil *UnionNullString `json:"vidaUtil"`

	Etregaantesde *UnionNullLong `json:"etregaantesde"`

	Consumoantesde *UnionNullLong `json:"consumoantesde"`

	EstadoDeUbicacionLote *UnionNullString `json:"estadoDeUbicacionLote"`
}

const LoteSCEAvroCRC64Fingerprint = "\x80\xfa\xa4\x90\x12W\xd3!"

func NewLoteSCE() LoteSCE {
	r := LoteSCE{}
	r.FechaFabricacion = nil
	r.FechaVencimiento = nil
	r.Etregaantesde = nil
	r.Consumoantesde = nil
	return r
}

func DeserializeLoteSCE(r io.Reader) (LoteSCE, error) {
	t := NewLoteSCE()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeLoteSCEFromSchema(r io.Reader, schema string) (LoteSCE, error) {
	t := NewLoteSCE()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeLoteSCE(r LoteSCE, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Articulo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Propietario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Estadolote, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteCaja, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteSecundario, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Trazable, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ZonaConsumo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaFabricacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaVencimiento, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Paquete, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.VidaUtil, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.Etregaantesde, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.Consumoantesde, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EstadoDeUbicacionLote, w)
	if err != nil {
		return err
	}
	return err
}

func (r LoteSCE) Serialize(w io.Writer) error {
	return writeLoteSCE(r, w)
}

func (r LoteSCE) Schema() string {
	return "{\"fields\":[{\"name\":\"articulo\",\"type\":\"string\"},{\"name\":\"propietario\",\"type\":\"string\"},{\"name\":\"estadolote\",\"type\":\"string\"},{\"name\":\"loteCaja\",\"type\":\"string\"},{\"name\":\"loteSecundario\",\"type\":\"string\"},{\"name\":\"trazable\",\"type\":\"int\"},{\"name\":\"zonaConsumo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"fechaFabricacion\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"fechaVencimiento\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"paquete\",\"type\":[\"null\",\"string\"]},{\"name\":\"vidaUtil\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"etregaantesde\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"consumoantesde\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"estadoDeUbicacionLote\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.Wapv2.Events.Record.LoteSCE\",\"type\":\"record\"}"
}

func (r LoteSCE) SchemaName() string {
	return "Andreani.Wapv2.Events.Record.LoteSCE"
}

func (_ LoteSCE) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ LoteSCE) SetInt(v int32)       { panic("Unsupported operation") }
func (_ LoteSCE) SetLong(v int64)      { panic("Unsupported operation") }
func (_ LoteSCE) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ LoteSCE) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ LoteSCE) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ LoteSCE) SetString(v string)   { panic("Unsupported operation") }
func (_ LoteSCE) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *LoteSCE) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Articulo}

		return w

	case 1:
		w := types.String{Target: &r.Propietario}

		return w

	case 2:
		w := types.String{Target: &r.Estadolote}

		return w

	case 3:
		w := types.String{Target: &r.LoteCaja}

		return w

	case 4:
		w := types.String{Target: &r.LoteSecundario}

		return w

	case 5:
		w := types.Int{Target: &r.Trazable}

		return w

	case 6:
		r.ZonaConsumo = NewUnionNullString()

		return r.ZonaConsumo
	case 7:
		r.FechaFabricacion = NewUnionNullLong()

		return r.FechaFabricacion
	case 8:
		r.FechaVencimiento = NewUnionNullLong()

		return r.FechaVencimiento
	case 9:
		r.Paquete = NewUnionNullString()

		return r.Paquete
	case 10:
		r.VidaUtil = NewUnionNullString()

		return r.VidaUtil
	case 11:
		r.Etregaantesde = NewUnionNullLong()

		return r.Etregaantesde
	case 12:
		r.Consumoantesde = NewUnionNullLong()

		return r.Consumoantesde
	case 13:
		r.EstadoDeUbicacionLote = NewUnionNullString()

		return r.EstadoDeUbicacionLote
	}
	panic("Unknown field index")
}

func (r *LoteSCE) SetDefault(i int) {
	switch i {
	case 7:
		r.FechaFabricacion = nil
		return
	case 8:
		r.FechaVencimiento = nil
		return
	case 11:
		r.Etregaantesde = nil
		return
	case 12:
		r.Consumoantesde = nil
		return
	}
	panic("Unknown field index")
}

func (r *LoteSCE) NullField(i int) {
	switch i {
	case 6:
		r.ZonaConsumo = nil
		return
	case 7:
		r.FechaFabricacion = nil
		return
	case 8:
		r.FechaVencimiento = nil
		return
	case 9:
		r.Paquete = nil
		return
	case 10:
		r.VidaUtil = nil
		return
	case 11:
		r.Etregaantesde = nil
		return
	case 12:
		r.Consumoantesde = nil
		return
	case 13:
		r.EstadoDeUbicacionLote = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ LoteSCE) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ LoteSCE) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ LoteSCE) HintSize(int)                     { panic("Unsupported operation") }
func (_ LoteSCE) Finalize()                        {}

func (_ LoteSCE) AvroCRC64Fingerprint() []byte {
	return []byte(LoteSCEAvroCRC64Fingerprint)
}

func (r LoteSCE) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["articulo"], err = json.Marshal(r.Articulo)
	if err != nil {
		return nil, err
	}
	output["propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["estadolote"], err = json.Marshal(r.Estadolote)
	if err != nil {
		return nil, err
	}
	output["loteCaja"], err = json.Marshal(r.LoteCaja)
	if err != nil {
		return nil, err
	}
	output["loteSecundario"], err = json.Marshal(r.LoteSecundario)
	if err != nil {
		return nil, err
	}
	output["trazable"], err = json.Marshal(r.Trazable)
	if err != nil {
		return nil, err
	}
	output["zonaConsumo"], err = json.Marshal(r.ZonaConsumo)
	if err != nil {
		return nil, err
	}
	output["fechaFabricacion"], err = json.Marshal(r.FechaFabricacion)
	if err != nil {
		return nil, err
	}
	output["fechaVencimiento"], err = json.Marshal(r.FechaVencimiento)
	if err != nil {
		return nil, err
	}
	output["paquete"], err = json.Marshal(r.Paquete)
	if err != nil {
		return nil, err
	}
	output["vidaUtil"], err = json.Marshal(r.VidaUtil)
	if err != nil {
		return nil, err
	}
	output["etregaantesde"], err = json.Marshal(r.Etregaantesde)
	if err != nil {
		return nil, err
	}
	output["consumoantesde"], err = json.Marshal(r.Consumoantesde)
	if err != nil {
		return nil, err
	}
	output["estadoDeUbicacionLote"], err = json.Marshal(r.EstadoDeUbicacionLote)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *LoteSCE) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["articulo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Articulo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for articulo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for propietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["estadolote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estadolote); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for estadolote")
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteCaja"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteCaja); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for loteCaja")
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteSecundario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteSecundario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for loteSecundario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["trazable"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Trazable); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for trazable")
	}
	val = func() json.RawMessage {
		if v, ok := fields["zonaConsumo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ZonaConsumo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for zonaConsumo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaFabricacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaFabricacion); err != nil {
			return err
		}
	} else {
		r.FechaFabricacion = NewUnionNullLong()

		r.FechaFabricacion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaVencimiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaVencimiento); err != nil {
			return err
		}
	} else {
		r.FechaVencimiento = NewUnionNullLong()

		r.FechaVencimiento = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["paquete"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Paquete); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for paquete")
	}
	val = func() json.RawMessage {
		if v, ok := fields["vidaUtil"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VidaUtil); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for vidaUtil")
	}
	val = func() json.RawMessage {
		if v, ok := fields["etregaantesde"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Etregaantesde); err != nil {
			return err
		}
	} else {
		r.Etregaantesde = NewUnionNullLong()

		r.Etregaantesde = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["consumoantesde"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Consumoantesde); err != nil {
			return err
		}
	} else {
		r.Consumoantesde = NewUnionNullLong()

		r.Consumoantesde = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["estadoDeUbicacionLote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EstadoDeUbicacionLote); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for estadoDeUbicacionLote")
	}
	return nil
}
