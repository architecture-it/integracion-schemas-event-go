// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     OrdenDeKittingSolicitadaV2.avsc
 */
package Wapv2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ArticuloKittingOrigen struct {
	CodigoArticulo string `json:"codigoArticulo"`

	LoteAlmacen string `json:"loteAlmacen"`

	LoteSecundario string `json:"loteSecundario"`

	LoteProveedor string `json:"loteProveedor"`

	LoteEstado string `json:"loteEstado"`
}

const ArticuloKittingOrigenAvroCRC64Fingerprint = "\\eu1\xdc\x16\xa8a"

func NewArticuloKittingOrigen() ArticuloKittingOrigen {
	r := ArticuloKittingOrigen{}
	return r
}

func DeserializeArticuloKittingOrigen(r io.Reader) (ArticuloKittingOrigen, error) {
	t := NewArticuloKittingOrigen()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeArticuloKittingOrigenFromSchema(r io.Reader, schema string) (ArticuloKittingOrigen, error) {
	t := NewArticuloKittingOrigen()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeArticuloKittingOrigen(r ArticuloKittingOrigen, w io.Writer) error {
	var err error
	err = vm.WriteString(r.CodigoArticulo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteAlmacen, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteSecundario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteProveedor, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteEstado, w)
	if err != nil {
		return err
	}
	return err
}

func (r ArticuloKittingOrigen) Serialize(w io.Writer) error {
	return writeArticuloKittingOrigen(r, w)
}

func (r ArticuloKittingOrigen) Schema() string {
	return "{\"fields\":[{\"name\":\"codigoArticulo\",\"type\":\"string\"},{\"name\":\"loteAlmacen\",\"type\":\"string\"},{\"name\":\"loteSecundario\",\"type\":\"string\"},{\"name\":\"loteProveedor\",\"type\":\"string\"},{\"name\":\"loteEstado\",\"type\":\"string\"}],\"name\":\"Andreani.Wapv2.Events.Record.ArticuloKittingOrigen\",\"type\":\"record\"}"
}

func (r ArticuloKittingOrigen) SchemaName() string {
	return "Andreani.Wapv2.Events.Record.ArticuloKittingOrigen"
}

func (_ ArticuloKittingOrigen) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ArticuloKittingOrigen) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ArticuloKittingOrigen) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ArticuloKittingOrigen) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ArticuloKittingOrigen) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ArticuloKittingOrigen) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ArticuloKittingOrigen) SetString(v string)   { panic("Unsupported operation") }
func (_ ArticuloKittingOrigen) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ArticuloKittingOrigen) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.CodigoArticulo}

		return w

	case 1:
		w := types.String{Target: &r.LoteAlmacen}

		return w

	case 2:
		w := types.String{Target: &r.LoteSecundario}

		return w

	case 3:
		w := types.String{Target: &r.LoteProveedor}

		return w

	case 4:
		w := types.String{Target: &r.LoteEstado}

		return w

	}
	panic("Unknown field index")
}

func (r *ArticuloKittingOrigen) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ArticuloKittingOrigen) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ ArticuloKittingOrigen) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ArticuloKittingOrigen) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ArticuloKittingOrigen) HintSize(int)                     { panic("Unsupported operation") }
func (_ ArticuloKittingOrigen) Finalize()                        {}

func (_ ArticuloKittingOrigen) AvroCRC64Fingerprint() []byte {
	return []byte(ArticuloKittingOrigenAvroCRC64Fingerprint)
}

func (r ArticuloKittingOrigen) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["codigoArticulo"], err = json.Marshal(r.CodigoArticulo)
	if err != nil {
		return nil, err
	}
	output["loteAlmacen"], err = json.Marshal(r.LoteAlmacen)
	if err != nil {
		return nil, err
	}
	output["loteSecundario"], err = json.Marshal(r.LoteSecundario)
	if err != nil {
		return nil, err
	}
	output["loteProveedor"], err = json.Marshal(r.LoteProveedor)
	if err != nil {
		return nil, err
	}
	output["loteEstado"], err = json.Marshal(r.LoteEstado)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ArticuloKittingOrigen) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["codigoArticulo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoArticulo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for codigoArticulo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteAlmacen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteAlmacen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for loteAlmacen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteSecundario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteSecundario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for loteSecundario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteProveedor"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteProveedor); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for loteProveedor")
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteEstado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteEstado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for loteEstado")
	}
	return nil
}
