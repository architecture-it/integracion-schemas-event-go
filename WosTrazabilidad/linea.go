// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     WosTrazaAnmat.avsc
 */
package WosTrazabilidadEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Linea struct {
	NumeroDeLinea int32 `json:"numeroDeLinea"`

	NumeroDeLineaWMS string `json:"numeroDeLineaWMS"`

	NumeroDeLineaCliente string `json:"numeroDeLineaCliente"`

	Sku string `json:"sku"`

	LoteCajita string `json:"loteCajita"`

	LoteSecundario string `json:"loteSecundario"`

	FechaVencimiento int64 `json:"fechaVencimiento"`

	ProductoTrazable bool `json:"productoTrazable"`

	Cantidad int32 `json:"cantidad"`

	Estado int32 `json:"estado"`

	DescripcionEstado string `json:"descripcionEstado"`

	Series []Serie `json:"Series"`
}

const LineaAvroCRC64Fingerprint = "}\x1e\x17?k\x9cB\xae"

func NewLinea() Linea {
	r := Linea{}
	r.Series = make([]Serie, 0)

	return r
}

func DeserializeLinea(r io.Reader) (Linea, error) {
	t := NewLinea()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeLineaFromSchema(r io.Reader, schema string) (Linea, error) {
	t := NewLinea()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeLinea(r Linea, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.NumeroDeLinea, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NumeroDeLineaWMS, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NumeroDeLineaCliente, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Sku, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteCajita, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteSecundario, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.FechaVencimiento, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.ProductoTrazable, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Cantidad, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Estado, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.DescripcionEstado, w)
	if err != nil {
		return err
	}
	err = writeArraySerie(r.Series, w)
	if err != nil {
		return err
	}
	return err
}

func (r Linea) Serialize(w io.Writer) error {
	return writeLinea(r, w)
}

func (r Linea) Schema() string {
	return "{\"fields\":[{\"name\":\"numeroDeLinea\",\"type\":\"int\"},{\"name\":\"numeroDeLineaWMS\",\"type\":\"string\"},{\"name\":\"numeroDeLineaCliente\",\"type\":\"string\"},{\"name\":\"sku\",\"type\":\"string\"},{\"name\":\"loteCajita\",\"type\":\"string\"},{\"name\":\"loteSecundario\",\"type\":\"string\"},{\"name\":\"fechaVencimiento\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"productoTrazable\",\"type\":\"boolean\"},{\"name\":\"cantidad\",\"type\":\"int\"},{\"name\":\"estado\",\"type\":\"int\"},{\"name\":\"descripcionEstado\",\"type\":\"string\"},{\"name\":\"Series\",\"type\":{\"items\":{\"fields\":[{\"name\":\"serie\",\"type\":\"string\"},{\"default\":null,\"name\":\"estado\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"descripcionEstado\",\"type\":[\"null\",\"string\"]}],\"name\":\"Serie\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Andreani.WosTrazabilidad.Events.AnmatCommon.Linea\",\"type\":\"record\"}"
}

func (r Linea) SchemaName() string {
	return "Andreani.WosTrazabilidad.Events.AnmatCommon.Linea"
}

func (_ Linea) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Linea) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Linea) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Linea) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Linea) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Linea) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Linea) SetString(v string)   { panic("Unsupported operation") }
func (_ Linea) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Linea) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.NumeroDeLinea}

		return w

	case 1:
		w := types.String{Target: &r.NumeroDeLineaWMS}

		return w

	case 2:
		w := types.String{Target: &r.NumeroDeLineaCliente}

		return w

	case 3:
		w := types.String{Target: &r.Sku}

		return w

	case 4:
		w := types.String{Target: &r.LoteCajita}

		return w

	case 5:
		w := types.String{Target: &r.LoteSecundario}

		return w

	case 6:
		w := types.Long{Target: &r.FechaVencimiento}

		return w

	case 7:
		w := types.Boolean{Target: &r.ProductoTrazable}

		return w

	case 8:
		w := types.Int{Target: &r.Cantidad}

		return w

	case 9:
		w := types.Int{Target: &r.Estado}

		return w

	case 10:
		w := types.String{Target: &r.DescripcionEstado}

		return w

	case 11:
		r.Series = make([]Serie, 0)

		w := ArraySerieWrapper{Target: &r.Series}

		return w

	}
	panic("Unknown field index")
}

func (r *Linea) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Linea) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Linea) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Linea) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Linea) HintSize(int)                     { panic("Unsupported operation") }
func (_ Linea) Finalize()                        {}

func (_ Linea) AvroCRC64Fingerprint() []byte {
	return []byte(LineaAvroCRC64Fingerprint)
}

func (r Linea) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["numeroDeLinea"], err = json.Marshal(r.NumeroDeLinea)
	if err != nil {
		return nil, err
	}
	output["numeroDeLineaWMS"], err = json.Marshal(r.NumeroDeLineaWMS)
	if err != nil {
		return nil, err
	}
	output["numeroDeLineaCliente"], err = json.Marshal(r.NumeroDeLineaCliente)
	if err != nil {
		return nil, err
	}
	output["sku"], err = json.Marshal(r.Sku)
	if err != nil {
		return nil, err
	}
	output["loteCajita"], err = json.Marshal(r.LoteCajita)
	if err != nil {
		return nil, err
	}
	output["loteSecundario"], err = json.Marshal(r.LoteSecundario)
	if err != nil {
		return nil, err
	}
	output["fechaVencimiento"], err = json.Marshal(r.FechaVencimiento)
	if err != nil {
		return nil, err
	}
	output["productoTrazable"], err = json.Marshal(r.ProductoTrazable)
	if err != nil {
		return nil, err
	}
	output["cantidad"], err = json.Marshal(r.Cantidad)
	if err != nil {
		return nil, err
	}
	output["estado"], err = json.Marshal(r.Estado)
	if err != nil {
		return nil, err
	}
	output["descripcionEstado"], err = json.Marshal(r.DescripcionEstado)
	if err != nil {
		return nil, err
	}
	output["Series"], err = json.Marshal(r.Series)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Linea) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["numeroDeLinea"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeLinea); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroDeLinea")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numeroDeLineaWMS"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeLineaWMS); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroDeLineaWMS")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numeroDeLineaCliente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeLineaCliente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroDeLineaCliente")
	}
	val = func() json.RawMessage {
		if v, ok := fields["sku"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sku); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for sku")
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteCajita"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteCajita); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for loteCajita")
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteSecundario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteSecundario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for loteSecundario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaVencimiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaVencimiento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fechaVencimiento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["productoTrazable"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ProductoTrazable); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for productoTrazable")
	}
	val = func() json.RawMessage {
		if v, ok := fields["cantidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cantidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for cantidad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["estado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for estado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["descripcionEstado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DescripcionEstado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for descripcionEstado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Series"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Series); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Series")
	}
	return nil
}
