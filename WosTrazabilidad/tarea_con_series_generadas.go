// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TareaConSeriesGeneradas.avsc
 */
package WosTrazabilidadEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TareaConSeriesGeneradas struct {
	NroTarea *UnionNullInt `json:"nroTarea"`

	TipoDeTarea *UnionNullInt `json:"tipoDeTarea"`

	Instancia *UnionNullString `json:"instancia"`

	Almacen *UnionNullString `json:"almacen"`

	Sku *UnionNullString `json:"sku"`

	LoteInterno *UnionNullString `json:"loteInterno"`

	LoteCajita *UnionNullString `json:"loteCajita"`

	Cantidad *UnionNullInt `json:"cantidad"`

	Gtin *UnionNullString `json:"gtin"`

	LoteFechaVencimiento *UnionNullString `json:"loteFechaVencimiento"`

	Series *UnionNullArrayString `json:"series"`

	Propietario *UnionNullString `json:"propietario"`
}

const TareaConSeriesGeneradasAvroCRC64Fingerprint = "\x8bW K\x9a\xdd\xd8'"

func NewTareaConSeriesGeneradas() TareaConSeriesGeneradas {
	r := TareaConSeriesGeneradas{}
	r.NroTarea = nil
	r.TipoDeTarea = nil
	r.Instancia = nil
	r.Almacen = nil
	r.Sku = nil
	r.LoteInterno = nil
	r.LoteCajita = nil
	r.Cantidad = nil
	r.Gtin = nil
	r.LoteFechaVencimiento = nil
	r.Series = nil
	r.Propietario = nil
	return r
}

func DeserializeTareaConSeriesGeneradas(r io.Reader) (TareaConSeriesGeneradas, error) {
	t := NewTareaConSeriesGeneradas()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTareaConSeriesGeneradasFromSchema(r io.Reader, schema string) (TareaConSeriesGeneradas, error) {
	t := NewTareaConSeriesGeneradas()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTareaConSeriesGeneradas(r TareaConSeriesGeneradas, w io.Writer) error {
	var err error
	err = writeUnionNullInt(r.NroTarea, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.TipoDeTarea, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Instancia, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Almacen, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Sku, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LoteInterno, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LoteCajita, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.Cantidad, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Gtin, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LoteFechaVencimiento, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayString(r.Series, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Propietario, w)
	if err != nil {
		return err
	}
	return err
}

func (r TareaConSeriesGeneradas) Serialize(w io.Writer) error {
	return writeTareaConSeriesGeneradas(r, w)
}

func (r TareaConSeriesGeneradas) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"nroTarea\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"tipoDeTarea\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"instancia\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"almacen\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"sku\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"loteInterno\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"loteCajita\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"cantidad\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"gtin\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"loteFechaVencimiento\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"series\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"propietario\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.WosTrazabilidad.Events.WosTrazaTareaSeriesGeneradas.TareaConSeriesGeneradas\",\"type\":\"record\"}"
}

func (r TareaConSeriesGeneradas) SchemaName() string {
	return "Andreani.WosTrazabilidad.Events.WosTrazaTareaSeriesGeneradas.TareaConSeriesGeneradas"
}

func (_ TareaConSeriesGeneradas) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TareaConSeriesGeneradas) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TareaConSeriesGeneradas) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TareaConSeriesGeneradas) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TareaConSeriesGeneradas) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TareaConSeriesGeneradas) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TareaConSeriesGeneradas) SetString(v string)   { panic("Unsupported operation") }
func (_ TareaConSeriesGeneradas) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TareaConSeriesGeneradas) Get(i int) types.Field {
	switch i {
	case 0:
		r.NroTarea = NewUnionNullInt()

		return r.NroTarea
	case 1:
		r.TipoDeTarea = NewUnionNullInt()

		return r.TipoDeTarea
	case 2:
		r.Instancia = NewUnionNullString()

		return r.Instancia
	case 3:
		r.Almacen = NewUnionNullString()

		return r.Almacen
	case 4:
		r.Sku = NewUnionNullString()

		return r.Sku
	case 5:
		r.LoteInterno = NewUnionNullString()

		return r.LoteInterno
	case 6:
		r.LoteCajita = NewUnionNullString()

		return r.LoteCajita
	case 7:
		r.Cantidad = NewUnionNullInt()

		return r.Cantidad
	case 8:
		r.Gtin = NewUnionNullString()

		return r.Gtin
	case 9:
		r.LoteFechaVencimiento = NewUnionNullString()

		return r.LoteFechaVencimiento
	case 10:
		r.Series = NewUnionNullArrayString()

		return r.Series
	case 11:
		r.Propietario = NewUnionNullString()

		return r.Propietario
	}
	panic("Unknown field index")
}

func (r *TareaConSeriesGeneradas) SetDefault(i int) {
	switch i {
	case 0:
		r.NroTarea = nil
		return
	case 1:
		r.TipoDeTarea = nil
		return
	case 2:
		r.Instancia = nil
		return
	case 3:
		r.Almacen = nil
		return
	case 4:
		r.Sku = nil
		return
	case 5:
		r.LoteInterno = nil
		return
	case 6:
		r.LoteCajita = nil
		return
	case 7:
		r.Cantidad = nil
		return
	case 8:
		r.Gtin = nil
		return
	case 9:
		r.LoteFechaVencimiento = nil
		return
	case 10:
		r.Series = nil
		return
	case 11:
		r.Propietario = nil
		return
	}
	panic("Unknown field index")
}

func (r *TareaConSeriesGeneradas) NullField(i int) {
	switch i {
	case 0:
		r.NroTarea = nil
		return
	case 1:
		r.TipoDeTarea = nil
		return
	case 2:
		r.Instancia = nil
		return
	case 3:
		r.Almacen = nil
		return
	case 4:
		r.Sku = nil
		return
	case 5:
		r.LoteInterno = nil
		return
	case 6:
		r.LoteCajita = nil
		return
	case 7:
		r.Cantidad = nil
		return
	case 8:
		r.Gtin = nil
		return
	case 9:
		r.LoteFechaVencimiento = nil
		return
	case 10:
		r.Series = nil
		return
	case 11:
		r.Propietario = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ TareaConSeriesGeneradas) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TareaConSeriesGeneradas) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TareaConSeriesGeneradas) HintSize(int)                     { panic("Unsupported operation") }
func (_ TareaConSeriesGeneradas) Finalize()                        {}

func (_ TareaConSeriesGeneradas) AvroCRC64Fingerprint() []byte {
	return []byte(TareaConSeriesGeneradasAvroCRC64Fingerprint)
}

func (r TareaConSeriesGeneradas) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["nroTarea"], err = json.Marshal(r.NroTarea)
	if err != nil {
		return nil, err
	}
	output["tipoDeTarea"], err = json.Marshal(r.TipoDeTarea)
	if err != nil {
		return nil, err
	}
	output["instancia"], err = json.Marshal(r.Instancia)
	if err != nil {
		return nil, err
	}
	output["almacen"], err = json.Marshal(r.Almacen)
	if err != nil {
		return nil, err
	}
	output["sku"], err = json.Marshal(r.Sku)
	if err != nil {
		return nil, err
	}
	output["loteInterno"], err = json.Marshal(r.LoteInterno)
	if err != nil {
		return nil, err
	}
	output["loteCajita"], err = json.Marshal(r.LoteCajita)
	if err != nil {
		return nil, err
	}
	output["cantidad"], err = json.Marshal(r.Cantidad)
	if err != nil {
		return nil, err
	}
	output["gtin"], err = json.Marshal(r.Gtin)
	if err != nil {
		return nil, err
	}
	output["loteFechaVencimiento"], err = json.Marshal(r.LoteFechaVencimiento)
	if err != nil {
		return nil, err
	}
	output["series"], err = json.Marshal(r.Series)
	if err != nil {
		return nil, err
	}
	output["propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TareaConSeriesGeneradas) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["nroTarea"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NroTarea); err != nil {
			return err
		}
	} else {
		r.NroTarea = NewUnionNullInt()

		r.NroTarea = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["tipoDeTarea"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoDeTarea); err != nil {
			return err
		}
	} else {
		r.TipoDeTarea = NewUnionNullInt()

		r.TipoDeTarea = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["instancia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Instancia); err != nil {
			return err
		}
	} else {
		r.Instancia = NewUnionNullString()

		r.Instancia = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["almacen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Almacen); err != nil {
			return err
		}
	} else {
		r.Almacen = NewUnionNullString()

		r.Almacen = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["sku"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sku); err != nil {
			return err
		}
	} else {
		r.Sku = NewUnionNullString()

		r.Sku = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteInterno"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteInterno); err != nil {
			return err
		}
	} else {
		r.LoteInterno = NewUnionNullString()

		r.LoteInterno = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteCajita"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteCajita); err != nil {
			return err
		}
	} else {
		r.LoteCajita = NewUnionNullString()

		r.LoteCajita = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["cantidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cantidad); err != nil {
			return err
		}
	} else {
		r.Cantidad = NewUnionNullInt()

		r.Cantidad = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["gtin"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Gtin); err != nil {
			return err
		}
	} else {
		r.Gtin = NewUnionNullString()

		r.Gtin = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteFechaVencimiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteFechaVencimiento); err != nil {
			return err
		}
	} else {
		r.LoteFechaVencimiento = NewUnionNullString()

		r.LoteFechaVencimiento = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["series"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Series); err != nil {
			return err
		}
	} else {
		r.Series = NewUnionNullArrayString()

		r.Series = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		r.Propietario = NewUnionNullString()

		r.Propietario = nil
	}
	return nil
}
