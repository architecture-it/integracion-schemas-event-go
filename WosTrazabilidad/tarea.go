// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Tarea.avsc
 */
package WosTrazabilidadEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Tarea struct {
	NroTarea int32 `json:"nroTarea"`

	TipoDeTarea int32 `json:"tipoDeTarea"`

	Instancia string `json:"instancia"`

	Almacen string `json:"almacen"`

	Sku string `json:"sku"`

	LoteInterno string `json:"loteInterno"`

	LoteCajita string `json:"loteCajita"`

	Cantidad int32 `json:"cantidad"`

	Gtin string `json:"gtin"`

	LoteFechaVencimiento string `json:"loteFechaVencimiento"`
}

const TareaAvroCRC64Fingerprint = "\xeas\xdc\xfa\x8cQh\x03"

func NewTarea() Tarea {
	r := Tarea{}
	return r
}

func DeserializeTarea(r io.Reader) (Tarea, error) {
	t := NewTarea()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTareaFromSchema(r io.Reader, schema string) (Tarea, error) {
	t := NewTarea()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTarea(r Tarea, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.NroTarea, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.TipoDeTarea, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Instancia, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Almacen, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Sku, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteInterno, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteCajita, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Cantidad, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Gtin, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteFechaVencimiento, w)
	if err != nil {
		return err
	}
	return err
}

func (r Tarea) Serialize(w io.Writer) error {
	return writeTarea(r, w)
}

func (r Tarea) Schema() string {
	return "{\"fields\":[{\"name\":\"nroTarea\",\"type\":\"int\"},{\"name\":\"tipoDeTarea\",\"type\":\"int\"},{\"name\":\"instancia\",\"type\":\"string\"},{\"name\":\"almacen\",\"type\":\"string\"},{\"name\":\"sku\",\"type\":\"string\"},{\"name\":\"loteInterno\",\"type\":\"string\"},{\"name\":\"loteCajita\",\"type\":\"string\"},{\"name\":\"cantidad\",\"type\":\"int\"},{\"name\":\"gtin\",\"type\":\"string\"},{\"name\":\"loteFechaVencimiento\",\"type\":\"string\"}],\"name\":\"Andreani.WosTrazabilidad.Events.Record.Tarea\",\"type\":\"record\"}"
}

func (r Tarea) SchemaName() string {
	return "Andreani.WosTrazabilidad.Events.Record.Tarea"
}

func (_ Tarea) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Tarea) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Tarea) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Tarea) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Tarea) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Tarea) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Tarea) SetString(v string)   { panic("Unsupported operation") }
func (_ Tarea) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Tarea) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.NroTarea}

		return w

	case 1:
		w := types.Int{Target: &r.TipoDeTarea}

		return w

	case 2:
		w := types.String{Target: &r.Instancia}

		return w

	case 3:
		w := types.String{Target: &r.Almacen}

		return w

	case 4:
		w := types.String{Target: &r.Sku}

		return w

	case 5:
		w := types.String{Target: &r.LoteInterno}

		return w

	case 6:
		w := types.String{Target: &r.LoteCajita}

		return w

	case 7:
		w := types.Int{Target: &r.Cantidad}

		return w

	case 8:
		w := types.String{Target: &r.Gtin}

		return w

	case 9:
		w := types.String{Target: &r.LoteFechaVencimiento}

		return w

	}
	panic("Unknown field index")
}

func (r *Tarea) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Tarea) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Tarea) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Tarea) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Tarea) HintSize(int)                     { panic("Unsupported operation") }
func (_ Tarea) Finalize()                        {}

func (_ Tarea) AvroCRC64Fingerprint() []byte {
	return []byte(TareaAvroCRC64Fingerprint)
}

func (r Tarea) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["nroTarea"], err = json.Marshal(r.NroTarea)
	if err != nil {
		return nil, err
	}
	output["tipoDeTarea"], err = json.Marshal(r.TipoDeTarea)
	if err != nil {
		return nil, err
	}
	output["instancia"], err = json.Marshal(r.Instancia)
	if err != nil {
		return nil, err
	}
	output["almacen"], err = json.Marshal(r.Almacen)
	if err != nil {
		return nil, err
	}
	output["sku"], err = json.Marshal(r.Sku)
	if err != nil {
		return nil, err
	}
	output["loteInterno"], err = json.Marshal(r.LoteInterno)
	if err != nil {
		return nil, err
	}
	output["loteCajita"], err = json.Marshal(r.LoteCajita)
	if err != nil {
		return nil, err
	}
	output["cantidad"], err = json.Marshal(r.Cantidad)
	if err != nil {
		return nil, err
	}
	output["gtin"], err = json.Marshal(r.Gtin)
	if err != nil {
		return nil, err
	}
	output["loteFechaVencimiento"], err = json.Marshal(r.LoteFechaVencimiento)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Tarea) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["nroTarea"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NroTarea); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for nroTarea")
	}
	val = func() json.RawMessage {
		if v, ok := fields["tipoDeTarea"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoDeTarea); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for tipoDeTarea")
	}
	val = func() json.RawMessage {
		if v, ok := fields["instancia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Instancia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for instancia")
	}
	val = func() json.RawMessage {
		if v, ok := fields["almacen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Almacen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for almacen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["sku"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sku); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for sku")
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteInterno"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteInterno); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for loteInterno")
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteCajita"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteCajita); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for loteCajita")
	}
	val = func() json.RawMessage {
		if v, ok := fields["cantidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cantidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for cantidad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["gtin"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Gtin); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for gtin")
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteFechaVencimiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteFechaVencimiento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for loteFechaVencimiento")
	}
	return nil
}
