// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     SolicitudTareaInventario.avsc
 */
package InventarioEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SolicitudTareaInventario struct {
	PlantaOperacionId *UnionNullInt `json:"PlantaOperacionId"`

	Sku *UnionNullString `json:"Sku"`

	Ubicacion *UnionNullString `json:"Ubicacion"`

	SistemaOrigen *UnionNullString `json:"SistemaOrigen"`

	Destinatario *UnionNullString `json:"Destinatario"`

	Incidencia *UnionNullString `json:"Incidencia"`
}

const SolicitudTareaInventarioAvroCRC64Fingerprint = "\x87M\xa8\xb9\xd2\x02\xe8\t"

func NewSolicitudTareaInventario() SolicitudTareaInventario {
	r := SolicitudTareaInventario{}
	r.PlantaOperacionId = nil
	r.Sku = nil
	r.Ubicacion = nil
	r.SistemaOrigen = nil
	r.Destinatario = nil
	r.Incidencia = nil
	return r
}

func DeserializeSolicitudTareaInventario(r io.Reader) (SolicitudTareaInventario, error) {
	t := NewSolicitudTareaInventario()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSolicitudTareaInventarioFromSchema(r io.Reader, schema string) (SolicitudTareaInventario, error) {
	t := NewSolicitudTareaInventario()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSolicitudTareaInventario(r SolicitudTareaInventario, w io.Writer) error {
	var err error
	err = writeUnionNullInt(r.PlantaOperacionId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Sku, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Ubicacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SistemaOrigen, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Destinatario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Incidencia, w)
	if err != nil {
		return err
	}
	return err
}

func (r SolicitudTareaInventario) Serialize(w io.Writer) error {
	return writeSolicitudTareaInventario(r, w)
}

func (r SolicitudTareaInventario) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"PlantaOperacionId\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"Sku\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Ubicacion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SistemaOrigen\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Destinatario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Incidencia\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.Inventario.Events.Record.SolicitudTareaInventario\",\"type\":\"record\"}"
}

func (r SolicitudTareaInventario) SchemaName() string {
	return "Andreani.Inventario.Events.Record.SolicitudTareaInventario"
}

func (_ SolicitudTareaInventario) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ SolicitudTareaInventario) SetInt(v int32)       { panic("Unsupported operation") }
func (_ SolicitudTareaInventario) SetLong(v int64)      { panic("Unsupported operation") }
func (_ SolicitudTareaInventario) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ SolicitudTareaInventario) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ SolicitudTareaInventario) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ SolicitudTareaInventario) SetString(v string)   { panic("Unsupported operation") }
func (_ SolicitudTareaInventario) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SolicitudTareaInventario) Get(i int) types.Field {
	switch i {
	case 0:
		r.PlantaOperacionId = NewUnionNullInt()

		return r.PlantaOperacionId
	case 1:
		r.Sku = NewUnionNullString()

		return r.Sku
	case 2:
		r.Ubicacion = NewUnionNullString()

		return r.Ubicacion
	case 3:
		r.SistemaOrigen = NewUnionNullString()

		return r.SistemaOrigen
	case 4:
		r.Destinatario = NewUnionNullString()

		return r.Destinatario
	case 5:
		r.Incidencia = NewUnionNullString()

		return r.Incidencia
	}
	panic("Unknown field index")
}

func (r *SolicitudTareaInventario) SetDefault(i int) {
	switch i {
	case 0:
		r.PlantaOperacionId = nil
		return
	case 1:
		r.Sku = nil
		return
	case 2:
		r.Ubicacion = nil
		return
	case 3:
		r.SistemaOrigen = nil
		return
	case 4:
		r.Destinatario = nil
		return
	case 5:
		r.Incidencia = nil
		return
	}
	panic("Unknown field index")
}

func (r *SolicitudTareaInventario) NullField(i int) {
	switch i {
	case 0:
		r.PlantaOperacionId = nil
		return
	case 1:
		r.Sku = nil
		return
	case 2:
		r.Ubicacion = nil
		return
	case 3:
		r.SistemaOrigen = nil
		return
	case 4:
		r.Destinatario = nil
		return
	case 5:
		r.Incidencia = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ SolicitudTareaInventario) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ SolicitudTareaInventario) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ SolicitudTareaInventario) HintSize(int)                     { panic("Unsupported operation") }
func (_ SolicitudTareaInventario) Finalize()                        {}

func (_ SolicitudTareaInventario) AvroCRC64Fingerprint() []byte {
	return []byte(SolicitudTareaInventarioAvroCRC64Fingerprint)
}

func (r SolicitudTareaInventario) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["PlantaOperacionId"], err = json.Marshal(r.PlantaOperacionId)
	if err != nil {
		return nil, err
	}
	output["Sku"], err = json.Marshal(r.Sku)
	if err != nil {
		return nil, err
	}
	output["Ubicacion"], err = json.Marshal(r.Ubicacion)
	if err != nil {
		return nil, err
	}
	output["SistemaOrigen"], err = json.Marshal(r.SistemaOrigen)
	if err != nil {
		return nil, err
	}
	output["Destinatario"], err = json.Marshal(r.Destinatario)
	if err != nil {
		return nil, err
	}
	output["Incidencia"], err = json.Marshal(r.Incidencia)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *SolicitudTareaInventario) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["PlantaOperacionId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PlantaOperacionId); err != nil {
			return err
		}
	} else {
		r.PlantaOperacionId = NewUnionNullInt()

		r.PlantaOperacionId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Sku"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sku); err != nil {
			return err
		}
	} else {
		r.Sku = NewUnionNullString()

		r.Sku = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Ubicacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ubicacion); err != nil {
			return err
		}
	} else {
		r.Ubicacion = NewUnionNullString()

		r.Ubicacion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SistemaOrigen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SistemaOrigen); err != nil {
			return err
		}
	} else {
		r.SistemaOrigen = NewUnionNullString()

		r.SistemaOrigen = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Destinatario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Destinatario); err != nil {
			return err
		}
	} else {
		r.Destinatario = NewUnionNullString()

		r.Destinatario = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Incidencia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Incidencia); err != nil {
			return err
		}
	} else {
		r.Incidencia = NewUnionNullString()

		r.Incidencia = nil
	}
	return nil
}
