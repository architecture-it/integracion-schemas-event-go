// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     DistribucionTransportistaPosition.avsc
 */
package ApiPositionEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DistribucionTransportistaPosition struct {
	Dni string `json:"Dni"`

	Fecha string `json:"Fecha"`

	Latitud string `json:"Latitud"`

	Longitud string `json:"Longitud"`
}

const DistribucionTransportistaPositionAvroCRC64Fingerprint = "<\xa1\xee\xa3\x1cU\x7f\xba"

func NewDistribucionTransportistaPosition() DistribucionTransportistaPosition {
	r := DistribucionTransportistaPosition{}
	return r
}

func DeserializeDistribucionTransportistaPosition(r io.Reader) (DistribucionTransportistaPosition, error) {
	t := NewDistribucionTransportistaPosition()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDistribucionTransportistaPositionFromSchema(r io.Reader, schema string) (DistribucionTransportistaPosition, error) {
	t := NewDistribucionTransportistaPosition()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDistribucionTransportistaPosition(r DistribucionTransportistaPosition, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Dni, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Fecha, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Latitud, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Longitud, w)
	if err != nil {
		return err
	}
	return err
}

func (r DistribucionTransportistaPosition) Serialize(w io.Writer) error {
	return writeDistribucionTransportistaPosition(r, w)
}

func (r DistribucionTransportistaPosition) Schema() string {
	return "{\"fields\":[{\"name\":\"Dni\",\"type\":\"string\"},{\"name\":\"Fecha\",\"type\":\"string\"},{\"name\":\"Latitud\",\"type\":\"string\"},{\"name\":\"Longitud\",\"type\":\"string\"}],\"name\":\"Andreani.ApiPosition.Events.Record.DistribucionTransportistaPosition\",\"type\":\"record\"}"
}

func (r DistribucionTransportistaPosition) SchemaName() string {
	return "Andreani.ApiPosition.Events.Record.DistribucionTransportistaPosition"
}

func (_ DistribucionTransportistaPosition) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DistribucionTransportistaPosition) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DistribucionTransportistaPosition) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DistribucionTransportistaPosition) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DistribucionTransportistaPosition) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DistribucionTransportistaPosition) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DistribucionTransportistaPosition) SetString(v string)   { panic("Unsupported operation") }
func (_ DistribucionTransportistaPosition) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DistribucionTransportistaPosition) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Dni}

		return w

	case 1:
		w := types.String{Target: &r.Fecha}

		return w

	case 2:
		w := types.String{Target: &r.Latitud}

		return w

	case 3:
		w := types.String{Target: &r.Longitud}

		return w

	}
	panic("Unknown field index")
}

func (r *DistribucionTransportistaPosition) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *DistribucionTransportistaPosition) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ DistribucionTransportistaPosition) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ DistribucionTransportistaPosition) AppendArray() types.Field { panic("Unsupported operation") }
func (_ DistribucionTransportistaPosition) HintSize(int)             { panic("Unsupported operation") }
func (_ DistribucionTransportistaPosition) Finalize()                {}

func (_ DistribucionTransportistaPosition) AvroCRC64Fingerprint() []byte {
	return []byte(DistribucionTransportistaPositionAvroCRC64Fingerprint)
}

func (r DistribucionTransportistaPosition) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Dni"], err = json.Marshal(r.Dni)
	if err != nil {
		return nil, err
	}
	output["Fecha"], err = json.Marshal(r.Fecha)
	if err != nil {
		return nil, err
	}
	output["Latitud"], err = json.Marshal(r.Latitud)
	if err != nil {
		return nil, err
	}
	output["Longitud"], err = json.Marshal(r.Longitud)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DistribucionTransportistaPosition) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Dni"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Dni); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Dni")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Fecha"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Fecha); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Fecha")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Latitud"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Latitud); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Latitud")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Longitud"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Longitud); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Longitud")
	}
	return nil
}
