// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Document.avsc
 */
package EAMEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Document struct {
	IdEam *UnionNullString `json:"idEam"`

	IdPowerApp *UnionNullString `json:"idPowerApp"`

	Organizacion *UnionNullString `json:"organizacion"`

	Tipo *UnionNullString `json:"tipo"`

	CantImgBateria *UnionNullInt `json:"CantImgBateria"`

	CantImgCargador *UnionNullInt `json:"CantImgCargador"`
}

const DocumentAvroCRC64Fingerprint = "\\\x14lo)i\xa1\xf5"

func NewDocument() Document {
	r := Document{}
	r.IdEam = nil
	r.IdPowerApp = nil
	r.Organizacion = nil
	r.Tipo = nil
	r.CantImgBateria = nil
	r.CantImgCargador = nil
	return r
}

func DeserializeDocument(r io.Reader) (Document, error) {
	t := NewDocument()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDocumentFromSchema(r io.Reader, schema string) (Document, error) {
	t := NewDocument()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDocument(r Document, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.IdEam, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.IdPowerApp, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Organizacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Tipo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.CantImgBateria, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.CantImgCargador, w)
	if err != nil {
		return err
	}
	return err
}

func (r Document) Serialize(w io.Writer) error {
	return writeDocument(r, w)
}

func (r Document) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"idEam\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"idPowerApp\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"organizacion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"tipo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CantImgBateria\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"CantImgCargador\",\"type\":[\"null\",\"int\"]}],\"name\":\"Andreani.EAM.Events.Sharepoint.Document\",\"type\":\"record\"}"
}

func (r Document) SchemaName() string {
	return "Andreani.EAM.Events.Sharepoint.Document"
}

func (_ Document) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Document) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Document) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Document) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Document) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Document) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Document) SetString(v string)   { panic("Unsupported operation") }
func (_ Document) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Document) Get(i int) types.Field {
	switch i {
	case 0:
		r.IdEam = NewUnionNullString()

		return r.IdEam
	case 1:
		r.IdPowerApp = NewUnionNullString()

		return r.IdPowerApp
	case 2:
		r.Organizacion = NewUnionNullString()

		return r.Organizacion
	case 3:
		r.Tipo = NewUnionNullString()

		return r.Tipo
	case 4:
		r.CantImgBateria = NewUnionNullInt()

		return r.CantImgBateria
	case 5:
		r.CantImgCargador = NewUnionNullInt()

		return r.CantImgCargador
	}
	panic("Unknown field index")
}

func (r *Document) SetDefault(i int) {
	switch i {
	case 0:
		r.IdEam = nil
		return
	case 1:
		r.IdPowerApp = nil
		return
	case 2:
		r.Organizacion = nil
		return
	case 3:
		r.Tipo = nil
		return
	case 4:
		r.CantImgBateria = nil
		return
	case 5:
		r.CantImgCargador = nil
		return
	}
	panic("Unknown field index")
}

func (r *Document) NullField(i int) {
	switch i {
	case 0:
		r.IdEam = nil
		return
	case 1:
		r.IdPowerApp = nil
		return
	case 2:
		r.Organizacion = nil
		return
	case 3:
		r.Tipo = nil
		return
	case 4:
		r.CantImgBateria = nil
		return
	case 5:
		r.CantImgCargador = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Document) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Document) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Document) HintSize(int)                     { panic("Unsupported operation") }
func (_ Document) Finalize()                        {}

func (_ Document) AvroCRC64Fingerprint() []byte {
	return []byte(DocumentAvroCRC64Fingerprint)
}

func (r Document) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["idEam"], err = json.Marshal(r.IdEam)
	if err != nil {
		return nil, err
	}
	output["idPowerApp"], err = json.Marshal(r.IdPowerApp)
	if err != nil {
		return nil, err
	}
	output["organizacion"], err = json.Marshal(r.Organizacion)
	if err != nil {
		return nil, err
	}
	output["tipo"], err = json.Marshal(r.Tipo)
	if err != nil {
		return nil, err
	}
	output["CantImgBateria"], err = json.Marshal(r.CantImgBateria)
	if err != nil {
		return nil, err
	}
	output["CantImgCargador"], err = json.Marshal(r.CantImgCargador)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Document) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["idEam"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdEam); err != nil {
			return err
		}
	} else {
		r.IdEam = NewUnionNullString()

		r.IdEam = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["idPowerApp"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdPowerApp); err != nil {
			return err
		}
	} else {
		r.IdPowerApp = NewUnionNullString()

		r.IdPowerApp = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["organizacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Organizacion); err != nil {
			return err
		}
	} else {
		r.Organizacion = NewUnionNullString()

		r.Organizacion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["tipo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Tipo); err != nil {
			return err
		}
	} else {
		r.Tipo = NewUnionNullString()

		r.Tipo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CantImgBateria"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CantImgBateria); err != nil {
			return err
		}
	} else {
		r.CantImgBateria = NewUnionNullInt()

		r.CantImgBateria = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CantImgCargador"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CantImgCargador); err != nil {
			return err
		}
	} else {
		r.CantImgCargador = NewUnionNullInt()

		r.CantImgCargador = nil
	}
	return nil
}
