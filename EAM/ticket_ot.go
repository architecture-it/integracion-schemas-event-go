// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TicketOt.avsc
 */
package EAMEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TicketOt struct {
	IdTicket *UnionNullInt `json:"IdTicket"`

	Solicitante *UnionNullString `json:"Solicitante"`

	FechaCreacion *UnionNullString `json:"FechaCreacion"`

	Asunto *UnionNullString `json:"Asunto"`

	Descripcion *UnionNullString `json:"Descripcion"`

	Planta *UnionNullString `json:"Planta"`

	Categoria_Servicio *UnionNullString `json:"Categoria_Servicio"`

	Telefono *UnionNullString `json:"Telefono"`

	Correo_Electronico *UnionNullString `json:"Correo_Electronico"`

	Mesa_Origen *UnionNullString `json:"Mesa_Origen"`
}

const TicketOtAvroCRC64Fingerprint = "\\!\xf6\xc8\x0fP\x91\x94"

func NewTicketOt() TicketOt {
	r := TicketOt{}
	r.IdTicket = nil
	r.Solicitante = nil
	r.FechaCreacion = nil
	r.Asunto = nil
	r.Descripcion = nil
	r.Planta = nil
	r.Categoria_Servicio = nil
	r.Telefono = nil
	r.Correo_Electronico = nil
	r.Mesa_Origen = nil
	return r
}

func DeserializeTicketOt(r io.Reader) (TicketOt, error) {
	t := NewTicketOt()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTicketOtFromSchema(r io.Reader, schema string) (TicketOt, error) {
	t := NewTicketOt()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTicketOt(r TicketOt, w io.Writer) error {
	var err error
	err = writeUnionNullInt(r.IdTicket, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Solicitante, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.FechaCreacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Asunto, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Descripcion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Planta, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Categoria_Servicio, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Telefono, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Correo_Electronico, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Mesa_Origen, w)
	if err != nil {
		return err
	}
	return err
}

func (r TicketOt) Serialize(w io.Writer) error {
	return writeTicketOt(r, w)
}

func (r TicketOt) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"IdTicket\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"Solicitante\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FechaCreacion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Asunto\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Descripcion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Planta\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Categoria_Servicio\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Telefono\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Correo_Electronico\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Mesa_Origen\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.EAM.Events.MDA.TicketOt\",\"type\":\"record\"}"
}

func (r TicketOt) SchemaName() string {
	return "Andreani.EAM.Events.MDA.TicketOt"
}

func (_ TicketOt) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TicketOt) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TicketOt) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TicketOt) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TicketOt) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TicketOt) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TicketOt) SetString(v string)   { panic("Unsupported operation") }
func (_ TicketOt) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TicketOt) Get(i int) types.Field {
	switch i {
	case 0:
		r.IdTicket = NewUnionNullInt()

		return r.IdTicket
	case 1:
		r.Solicitante = NewUnionNullString()

		return r.Solicitante
	case 2:
		r.FechaCreacion = NewUnionNullString()

		return r.FechaCreacion
	case 3:
		r.Asunto = NewUnionNullString()

		return r.Asunto
	case 4:
		r.Descripcion = NewUnionNullString()

		return r.Descripcion
	case 5:
		r.Planta = NewUnionNullString()

		return r.Planta
	case 6:
		r.Categoria_Servicio = NewUnionNullString()

		return r.Categoria_Servicio
	case 7:
		r.Telefono = NewUnionNullString()

		return r.Telefono
	case 8:
		r.Correo_Electronico = NewUnionNullString()

		return r.Correo_Electronico
	case 9:
		r.Mesa_Origen = NewUnionNullString()

		return r.Mesa_Origen
	}
	panic("Unknown field index")
}

func (r *TicketOt) SetDefault(i int) {
	switch i {
	case 0:
		r.IdTicket = nil
		return
	case 1:
		r.Solicitante = nil
		return
	case 2:
		r.FechaCreacion = nil
		return
	case 3:
		r.Asunto = nil
		return
	case 4:
		r.Descripcion = nil
		return
	case 5:
		r.Planta = nil
		return
	case 6:
		r.Categoria_Servicio = nil
		return
	case 7:
		r.Telefono = nil
		return
	case 8:
		r.Correo_Electronico = nil
		return
	case 9:
		r.Mesa_Origen = nil
		return
	}
	panic("Unknown field index")
}

func (r *TicketOt) NullField(i int) {
	switch i {
	case 0:
		r.IdTicket = nil
		return
	case 1:
		r.Solicitante = nil
		return
	case 2:
		r.FechaCreacion = nil
		return
	case 3:
		r.Asunto = nil
		return
	case 4:
		r.Descripcion = nil
		return
	case 5:
		r.Planta = nil
		return
	case 6:
		r.Categoria_Servicio = nil
		return
	case 7:
		r.Telefono = nil
		return
	case 8:
		r.Correo_Electronico = nil
		return
	case 9:
		r.Mesa_Origen = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ TicketOt) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TicketOt) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TicketOt) HintSize(int)                     { panic("Unsupported operation") }
func (_ TicketOt) Finalize()                        {}

func (_ TicketOt) AvroCRC64Fingerprint() []byte {
	return []byte(TicketOtAvroCRC64Fingerprint)
}

func (r TicketOt) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["IdTicket"], err = json.Marshal(r.IdTicket)
	if err != nil {
		return nil, err
	}
	output["Solicitante"], err = json.Marshal(r.Solicitante)
	if err != nil {
		return nil, err
	}
	output["FechaCreacion"], err = json.Marshal(r.FechaCreacion)
	if err != nil {
		return nil, err
	}
	output["Asunto"], err = json.Marshal(r.Asunto)
	if err != nil {
		return nil, err
	}
	output["Descripcion"], err = json.Marshal(r.Descripcion)
	if err != nil {
		return nil, err
	}
	output["Planta"], err = json.Marshal(r.Planta)
	if err != nil {
		return nil, err
	}
	output["Categoria_Servicio"], err = json.Marshal(r.Categoria_Servicio)
	if err != nil {
		return nil, err
	}
	output["Telefono"], err = json.Marshal(r.Telefono)
	if err != nil {
		return nil, err
	}
	output["Correo_Electronico"], err = json.Marshal(r.Correo_Electronico)
	if err != nil {
		return nil, err
	}
	output["Mesa_Origen"], err = json.Marshal(r.Mesa_Origen)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TicketOt) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["IdTicket"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdTicket); err != nil {
			return err
		}
	} else {
		r.IdTicket = NewUnionNullInt()

		r.IdTicket = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Solicitante"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Solicitante); err != nil {
			return err
		}
	} else {
		r.Solicitante = NewUnionNullString()

		r.Solicitante = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaCreacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaCreacion); err != nil {
			return err
		}
	} else {
		r.FechaCreacion = NewUnionNullString()

		r.FechaCreacion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Asunto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Asunto); err != nil {
			return err
		}
	} else {
		r.Asunto = NewUnionNullString()

		r.Asunto = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Descripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Descripcion); err != nil {
			return err
		}
	} else {
		r.Descripcion = NewUnionNullString()

		r.Descripcion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Planta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Planta); err != nil {
			return err
		}
	} else {
		r.Planta = NewUnionNullString()

		r.Planta = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Categoria_Servicio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Categoria_Servicio); err != nil {
			return err
		}
	} else {
		r.Categoria_Servicio = NewUnionNullString()

		r.Categoria_Servicio = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Telefono"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Telefono); err != nil {
			return err
		}
	} else {
		r.Telefono = NewUnionNullString()

		r.Telefono = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Correo_Electronico"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Correo_Electronico); err != nil {
			return err
		}
	} else {
		r.Correo_Electronico = NewUnionNullString()

		r.Correo_Electronico = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Mesa_Origen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Mesa_Origen); err != nil {
			return err
		}
	} else {
		r.Mesa_Origen = NewUnionNullString()

		r.Mesa_Origen = nil
	}
	return nil
}
