// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     NovedadEAM.avsc
 */
package EAMEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type NovedadEAM struct {
	Tipo string `json:"Tipo"`

	IdMda int32 `json:"IdMda"`

	IdEam int32 `json:"IdEam"`

	NuevoEstadoMda string `json:"NuevoEstadoMda"`

	NuevoEstadoEam string `json:"NuevoEstadoEam"`

	Detalle string `json:"Detalle"`

	Grupo *UnionNullString `json:"Grupo"`

	IdGrupo *UnionNullInt `json:"IdGrupo"`
}

const NovedadEAMAvroCRC64Fingerprint = "c\xbd\\]\xb1\x80\xe4@"

func NewNovedadEAM() NovedadEAM {
	r := NovedadEAM{}
	return r
}

func DeserializeNovedadEAM(r io.Reader) (NovedadEAM, error) {
	t := NewNovedadEAM()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeNovedadEAMFromSchema(r io.Reader, schema string) (NovedadEAM, error) {
	t := NewNovedadEAM()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeNovedadEAM(r NovedadEAM, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Tipo, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.IdMda, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.IdEam, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NuevoEstadoMda, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NuevoEstadoEam, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Detalle, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Grupo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.IdGrupo, w)
	if err != nil {
		return err
	}
	return err
}

func (r NovedadEAM) Serialize(w io.Writer) error {
	return writeNovedadEAM(r, w)
}

func (r NovedadEAM) Schema() string {
	return "{\"fields\":[{\"name\":\"Tipo\",\"type\":\"string\"},{\"name\":\"IdMda\",\"type\":\"int\"},{\"name\":\"IdEam\",\"type\":\"int\"},{\"name\":\"NuevoEstadoMda\",\"type\":\"string\"},{\"name\":\"NuevoEstadoEam\",\"type\":\"string\"},{\"name\":\"Detalle\",\"type\":\"string\"},{\"name\":\"Grupo\",\"type\":[\"null\",\"string\"]},{\"name\":\"IdGrupo\",\"type\":[\"null\",\"int\"]}],\"name\":\"Andreani.EAM.Events.Record.NovedadEAM\",\"type\":\"record\"}"
}

func (r NovedadEAM) SchemaName() string {
	return "Andreani.EAM.Events.Record.NovedadEAM"
}

func (_ NovedadEAM) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ NovedadEAM) SetInt(v int32)       { panic("Unsupported operation") }
func (_ NovedadEAM) SetLong(v int64)      { panic("Unsupported operation") }
func (_ NovedadEAM) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ NovedadEAM) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ NovedadEAM) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ NovedadEAM) SetString(v string)   { panic("Unsupported operation") }
func (_ NovedadEAM) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *NovedadEAM) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Tipo}

		return w

	case 1:
		w := types.Int{Target: &r.IdMda}

		return w

	case 2:
		w := types.Int{Target: &r.IdEam}

		return w

	case 3:
		w := types.String{Target: &r.NuevoEstadoMda}

		return w

	case 4:
		w := types.String{Target: &r.NuevoEstadoEam}

		return w

	case 5:
		w := types.String{Target: &r.Detalle}

		return w

	case 6:
		r.Grupo = NewUnionNullString()

		return r.Grupo
	case 7:
		r.IdGrupo = NewUnionNullInt()

		return r.IdGrupo
	}
	panic("Unknown field index")
}

func (r *NovedadEAM) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *NovedadEAM) NullField(i int) {
	switch i {
	case 6:
		r.Grupo = nil
		return
	case 7:
		r.IdGrupo = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ NovedadEAM) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ NovedadEAM) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ NovedadEAM) HintSize(int)                     { panic("Unsupported operation") }
func (_ NovedadEAM) Finalize()                        {}

func (_ NovedadEAM) AvroCRC64Fingerprint() []byte {
	return []byte(NovedadEAMAvroCRC64Fingerprint)
}

func (r NovedadEAM) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Tipo"], err = json.Marshal(r.Tipo)
	if err != nil {
		return nil, err
	}
	output["IdMda"], err = json.Marshal(r.IdMda)
	if err != nil {
		return nil, err
	}
	output["IdEam"], err = json.Marshal(r.IdEam)
	if err != nil {
		return nil, err
	}
	output["NuevoEstadoMda"], err = json.Marshal(r.NuevoEstadoMda)
	if err != nil {
		return nil, err
	}
	output["NuevoEstadoEam"], err = json.Marshal(r.NuevoEstadoEam)
	if err != nil {
		return nil, err
	}
	output["Detalle"], err = json.Marshal(r.Detalle)
	if err != nil {
		return nil, err
	}
	output["Grupo"], err = json.Marshal(r.Grupo)
	if err != nil {
		return nil, err
	}
	output["IdGrupo"], err = json.Marshal(r.IdGrupo)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *NovedadEAM) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Tipo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Tipo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Tipo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdMda"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdMda); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdMda")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdEam"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdEam); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdEam")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NuevoEstadoMda"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NuevoEstadoMda); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NuevoEstadoMda")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NuevoEstadoEam"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NuevoEstadoEam); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NuevoEstadoEam")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Detalle"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Detalle); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Detalle")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Grupo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Grupo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Grupo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdGrupo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdGrupo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdGrupo")
	}
	return nil
}
