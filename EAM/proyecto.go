// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Proyecto.avsc
 */
package EAMEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Proyecto struct {
	IdTicket int32 `json:"IdTicket"`

	Planta *UnionNullString `json:"Planta"`

	Coordinador string `json:"Coordinador"`

	Codigo string `json:"Codigo"`

	Descripcion string `json:"Descripcion"`

	Estado string `json:"Estado"`

	Presupuesto string `json:"Presupuesto"`

	TipoOrigen string `json:"TipoOrigen"`

	FechaCreacion int64 `json:"FechaCreacion"`

	FechaVencimiento int64 `json:"FechaVencimiento"`

	FechaResolucion int64 `json:"FechaResolucion"`

	FechaFinalizado int64 `json:"FechaFinalizado"`
}

const ProyectoAvroCRC64Fingerprint = "\xa4\xa7\xab>/ÕµN"

func NewProyecto() Proyecto {
	r := Proyecto{}
	return r
}

func DeserializeProyecto(r io.Reader) (Proyecto, error) {
	t := NewProyecto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeProyectoFromSchema(r io.Reader, schema string) (Proyecto, error) {
	t := NewProyecto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeProyecto(r Proyecto, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.IdTicket, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Planta, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Coordinador, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Codigo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Descripcion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Estado, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Presupuesto, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.TipoOrigen, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.FechaCreacion, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.FechaVencimiento, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.FechaResolucion, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.FechaFinalizado, w)
	if err != nil {
		return err
	}
	return err
}

func (r Proyecto) Serialize(w io.Writer) error {
	return writeProyecto(r, w)
}

func (r Proyecto) Schema() string {
	return "{\"fields\":[{\"name\":\"IdTicket\",\"type\":\"int\"},{\"name\":\"Planta\",\"type\":[\"null\",\"string\"]},{\"name\":\"Coordinador\",\"type\":\"string\"},{\"name\":\"Codigo\",\"type\":\"string\"},{\"name\":\"Descripcion\",\"type\":\"string\"},{\"name\":\"Estado\",\"type\":\"string\"},{\"name\":\"Presupuesto\",\"type\":\"string\"},{\"name\":\"TipoOrigen\",\"type\":\"string\"},{\"name\":\"FechaCreacion\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"FechaVencimiento\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"FechaResolucion\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"FechaFinalizado\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"Andreani.EAM.Events.MDA.Proyecto\",\"type\":\"record\"}"
}

func (r Proyecto) SchemaName() string {
	return "Andreani.EAM.Events.MDA.Proyecto"
}

func (_ Proyecto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Proyecto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Proyecto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Proyecto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Proyecto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Proyecto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Proyecto) SetString(v string)   { panic("Unsupported operation") }
func (_ Proyecto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Proyecto) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.IdTicket}

		return w

	case 1:
		r.Planta = NewUnionNullString()

		return r.Planta
	case 2:
		w := types.String{Target: &r.Coordinador}

		return w

	case 3:
		w := types.String{Target: &r.Codigo}

		return w

	case 4:
		w := types.String{Target: &r.Descripcion}

		return w

	case 5:
		w := types.String{Target: &r.Estado}

		return w

	case 6:
		w := types.String{Target: &r.Presupuesto}

		return w

	case 7:
		w := types.String{Target: &r.TipoOrigen}

		return w

	case 8:
		w := types.Long{Target: &r.FechaCreacion}

		return w

	case 9:
		w := types.Long{Target: &r.FechaVencimiento}

		return w

	case 10:
		w := types.Long{Target: &r.FechaResolucion}

		return w

	case 11:
		w := types.Long{Target: &r.FechaFinalizado}

		return w

	}
	panic("Unknown field index")
}

func (r *Proyecto) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Proyecto) NullField(i int) {
	switch i {
	case 1:
		r.Planta = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Proyecto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Proyecto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Proyecto) HintSize(int)                     { panic("Unsupported operation") }
func (_ Proyecto) Finalize()                        {}

func (_ Proyecto) AvroCRC64Fingerprint() []byte {
	return []byte(ProyectoAvroCRC64Fingerprint)
}

func (r Proyecto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["IdTicket"], err = json.Marshal(r.IdTicket)
	if err != nil {
		return nil, err
	}
	output["Planta"], err = json.Marshal(r.Planta)
	if err != nil {
		return nil, err
	}
	output["Coordinador"], err = json.Marshal(r.Coordinador)
	if err != nil {
		return nil, err
	}
	output["Codigo"], err = json.Marshal(r.Codigo)
	if err != nil {
		return nil, err
	}
	output["Descripcion"], err = json.Marshal(r.Descripcion)
	if err != nil {
		return nil, err
	}
	output["Estado"], err = json.Marshal(r.Estado)
	if err != nil {
		return nil, err
	}
	output["Presupuesto"], err = json.Marshal(r.Presupuesto)
	if err != nil {
		return nil, err
	}
	output["TipoOrigen"], err = json.Marshal(r.TipoOrigen)
	if err != nil {
		return nil, err
	}
	output["FechaCreacion"], err = json.Marshal(r.FechaCreacion)
	if err != nil {
		return nil, err
	}
	output["FechaVencimiento"], err = json.Marshal(r.FechaVencimiento)
	if err != nil {
		return nil, err
	}
	output["FechaResolucion"], err = json.Marshal(r.FechaResolucion)
	if err != nil {
		return nil, err
	}
	output["FechaFinalizado"], err = json.Marshal(r.FechaFinalizado)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Proyecto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["IdTicket"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdTicket); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdTicket")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Planta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Planta); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Planta")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Coordinador"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Coordinador); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Coordinador")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Codigo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Codigo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Codigo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Descripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Descripcion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Descripcion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Estado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Estado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Presupuesto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Presupuesto); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Presupuesto")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoOrigen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoOrigen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoOrigen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaCreacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaCreacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FechaCreacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaVencimiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaVencimiento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FechaVencimiento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaResolucion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaResolucion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FechaResolucion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaFinalizado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaFinalizado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FechaFinalizado")
	}
	return nil
}
