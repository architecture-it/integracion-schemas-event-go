// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     AltaDocumentoPowerApp.avsc
 */
package EAMEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type AltaDocumentoPowerApp struct {
	Document Document `json:"Document"`
}

const AltaDocumentoPowerAppAvroCRC64Fingerprint = "\xf0Ý‡\xba\xfd\x84\xf5\xac"

func NewAltaDocumentoPowerApp() AltaDocumentoPowerApp {
	r := AltaDocumentoPowerApp{}
	r.Document = NewDocument()

	return r
}

func DeserializeAltaDocumentoPowerApp(r io.Reader) (AltaDocumentoPowerApp, error) {
	t := NewAltaDocumentoPowerApp()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAltaDocumentoPowerAppFromSchema(r io.Reader, schema string) (AltaDocumentoPowerApp, error) {
	t := NewAltaDocumentoPowerApp()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAltaDocumentoPowerApp(r AltaDocumentoPowerApp, w io.Writer) error {
	var err error
	err = writeDocument(r.Document, w)
	if err != nil {
		return err
	}
	return err
}

func (r AltaDocumentoPowerApp) Serialize(w io.Writer) error {
	return writeAltaDocumentoPowerApp(r, w)
}

func (r AltaDocumentoPowerApp) Schema() string {
	return "{\"fields\":[{\"name\":\"Document\",\"type\":{\"fields\":[{\"default\":null,\"name\":\"idEam\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"idPowerApp\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"organizacion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"tipo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CantImgBateria\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"CantImgCargador\",\"type\":[\"null\",\"int\"]}],\"name\":\"Document\",\"namespace\":\"Andreani.EAM.Events.Sharepoint\",\"type\":\"record\"}}],\"name\":\"Andreani.EAM.Events.Record.AltaDocumentoPowerApp\",\"type\":\"record\"}"
}

func (r AltaDocumentoPowerApp) SchemaName() string {
	return "Andreani.EAM.Events.Record.AltaDocumentoPowerApp"
}

func (_ AltaDocumentoPowerApp) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ AltaDocumentoPowerApp) SetInt(v int32)       { panic("Unsupported operation") }
func (_ AltaDocumentoPowerApp) SetLong(v int64)      { panic("Unsupported operation") }
func (_ AltaDocumentoPowerApp) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ AltaDocumentoPowerApp) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ AltaDocumentoPowerApp) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ AltaDocumentoPowerApp) SetString(v string)   { panic("Unsupported operation") }
func (_ AltaDocumentoPowerApp) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *AltaDocumentoPowerApp) Get(i int) types.Field {
	switch i {
	case 0:
		r.Document = NewDocument()

		w := types.Record{Target: &r.Document}

		return w

	}
	panic("Unknown field index")
}

func (r *AltaDocumentoPowerApp) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *AltaDocumentoPowerApp) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ AltaDocumentoPowerApp) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ AltaDocumentoPowerApp) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ AltaDocumentoPowerApp) HintSize(int)                     { panic("Unsupported operation") }
func (_ AltaDocumentoPowerApp) Finalize()                        {}

func (_ AltaDocumentoPowerApp) AvroCRC64Fingerprint() []byte {
	return []byte(AltaDocumentoPowerAppAvroCRC64Fingerprint)
}

func (r AltaDocumentoPowerApp) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Document"], err = json.Marshal(r.Document)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *AltaDocumentoPowerApp) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Document"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Document); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Document")
	}
	return nil
}
