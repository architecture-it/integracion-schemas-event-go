// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     MDAAltaOT.avsc
 */
package EAMEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type MDAAltaOT struct {
	Ticket TicketOt `json:"Ticket"`
}

const MDAAltaOTAvroCRC64Fingerprint = "\xd5Ï°7B\xf4\"\xb8"

func NewMDAAltaOT() MDAAltaOT {
	r := MDAAltaOT{}
	r.Ticket = NewTicketOt()

	return r
}

func DeserializeMDAAltaOT(r io.Reader) (MDAAltaOT, error) {
	t := NewMDAAltaOT()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeMDAAltaOTFromSchema(r io.Reader, schema string) (MDAAltaOT, error) {
	t := NewMDAAltaOT()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeMDAAltaOT(r MDAAltaOT, w io.Writer) error {
	var err error
	err = writeTicketOt(r.Ticket, w)
	if err != nil {
		return err
	}
	return err
}

func (r MDAAltaOT) Serialize(w io.Writer) error {
	return writeMDAAltaOT(r, w)
}

func (r MDAAltaOT) Schema() string {
	return "{\"fields\":[{\"name\":\"Ticket\",\"type\":{\"fields\":[{\"default\":null,\"name\":\"IdTicket\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"Solicitante\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FechaCreacion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Asunto\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Descripcion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Planta\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Categoria_Servicio\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Telefono\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Correo_Electronico\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Mesa_Origen\",\"type\":[\"null\",\"string\"]}],\"name\":\"TicketOt\",\"namespace\":\"Andreani.EAM.Events.MDA\",\"type\":\"record\"}}],\"name\":\"Andreani.EAM.Events.Record.MDAAltaOT\",\"type\":\"record\"}"
}

func (r MDAAltaOT) SchemaName() string {
	return "Andreani.EAM.Events.Record.MDAAltaOT"
}

func (_ MDAAltaOT) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ MDAAltaOT) SetInt(v int32)       { panic("Unsupported operation") }
func (_ MDAAltaOT) SetLong(v int64)      { panic("Unsupported operation") }
func (_ MDAAltaOT) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ MDAAltaOT) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ MDAAltaOT) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ MDAAltaOT) SetString(v string)   { panic("Unsupported operation") }
func (_ MDAAltaOT) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *MDAAltaOT) Get(i int) types.Field {
	switch i {
	case 0:
		r.Ticket = NewTicketOt()

		w := types.Record{Target: &r.Ticket}

		return w

	}
	panic("Unknown field index")
}

func (r *MDAAltaOT) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *MDAAltaOT) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ MDAAltaOT) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ MDAAltaOT) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ MDAAltaOT) HintSize(int)                     { panic("Unsupported operation") }
func (_ MDAAltaOT) Finalize()                        {}

func (_ MDAAltaOT) AvroCRC64Fingerprint() []byte {
	return []byte(MDAAltaOTAvroCRC64Fingerprint)
}

func (r MDAAltaOT) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Ticket"], err = json.Marshal(r.Ticket)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *MDAAltaOT) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Ticket"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ticket); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Ticket")
	}
	return nil
}
