// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     SharepointAsset.avsc
 */
package EAMEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Battery struct {
	Nro_serie *UnionNullString `json:"nro_serie"`
}

const BatteryAvroCRC64Fingerprint = "9\b\xac\xb8-\xa1\xe04"

func NewBattery() Battery {
	r := Battery{}
	return r
}

func DeserializeBattery(r io.Reader) (Battery, error) {
	t := NewBattery()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeBatteryFromSchema(r io.Reader, schema string) (Battery, error) {
	t := NewBattery()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeBattery(r Battery, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Nro_serie, w)
	if err != nil {
		return err
	}
	return err
}

func (r Battery) Serialize(w io.Writer) error {
	return writeBattery(r, w)
}

func (r Battery) Schema() string {
	return "{\"fields\":[{\"name\":\"nro_serie\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.EAM.Events.Sharepoint.Battery\",\"type\":\"record\"}"
}

func (r Battery) SchemaName() string {
	return "Andreani.EAM.Events.Sharepoint.Battery"
}

func (_ Battery) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Battery) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Battery) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Battery) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Battery) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Battery) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Battery) SetString(v string)   { panic("Unsupported operation") }
func (_ Battery) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Battery) Get(i int) types.Field {
	switch i {
	case 0:
		r.Nro_serie = NewUnionNullString()

		return r.Nro_serie
	}
	panic("Unknown field index")
}

func (r *Battery) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Battery) NullField(i int) {
	switch i {
	case 0:
		r.Nro_serie = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Battery) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Battery) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Battery) HintSize(int)                     { panic("Unsupported operation") }
func (_ Battery) Finalize()                        {}

func (_ Battery) AvroCRC64Fingerprint() []byte {
	return []byte(BatteryAvroCRC64Fingerprint)
}

func (r Battery) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["nro_serie"], err = json.Marshal(r.Nro_serie)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Battery) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["nro_serie"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nro_serie); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for nro_serie")
	}
	return nil
}
