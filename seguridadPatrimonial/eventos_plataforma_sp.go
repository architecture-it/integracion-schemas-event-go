// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EventosPlataformaSP.avsc
 */
package seguridadPatrimonialEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EventosPlataformaSP struct {
	Hr string `json:"hr"`

	FechaAlta string `json:"fechaAlta"`

	FechaCierre string `json:"fechaCierre"`

	Latitud float32 `json:"latitud"`

	Longitud float32 `json:"longitud"`

	Evento Evento `json:"evento"`
}

const EventosPlataformaSPAvroCRC64Fingerprint = "\xd8\xe2\x13\xc6X\x04\xa4\xf8"

func NewEventosPlataformaSP() EventosPlataformaSP {
	r := EventosPlataformaSP{}
	r.Evento = NewEvento()

	return r
}

func DeserializeEventosPlataformaSP(r io.Reader) (EventosPlataformaSP, error) {
	t := NewEventosPlataformaSP()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEventosPlataformaSPFromSchema(r io.Reader, schema string) (EventosPlataformaSP, error) {
	t := NewEventosPlataformaSP()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEventosPlataformaSP(r EventosPlataformaSP, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Hr, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.FechaAlta, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.FechaCierre, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.Latitud, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.Longitud, w)
	if err != nil {
		return err
	}
	err = writeEvento(r.Evento, w)
	if err != nil {
		return err
	}
	return err
}

func (r EventosPlataformaSP) Serialize(w io.Writer) error {
	return writeEventosPlataformaSP(r, w)
}

func (r EventosPlataformaSP) Schema() string {
	return "{\"fields\":[{\"name\":\"hr\",\"type\":\"string\"},{\"name\":\"fechaAlta\",\"type\":\"string\"},{\"name\":\"fechaCierre\",\"type\":\"string\"},{\"name\":\"latitud\",\"type\":\"float\"},{\"name\":\"longitud\",\"type\":\"float\"},{\"name\":\"evento\",\"type\":{\"fields\":[{\"name\":\"codigo\",\"type\":\"string\"},{\"name\":\"tipo\",\"type\":\"string\"}],\"name\":\"Evento\",\"type\":\"record\"}}],\"name\":\"Andreani.SeguridadPatrimonial.Events.Record.EventosPlataformaSP\",\"type\":\"record\"}"
}

func (r EventosPlataformaSP) SchemaName() string {
	return "Andreani.SeguridadPatrimonial.Events.Record.EventosPlataformaSP"
}

func (_ EventosPlataformaSP) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EventosPlataformaSP) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EventosPlataformaSP) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EventosPlataformaSP) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EventosPlataformaSP) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EventosPlataformaSP) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EventosPlataformaSP) SetString(v string)   { panic("Unsupported operation") }
func (_ EventosPlataformaSP) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EventosPlataformaSP) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Hr}

		return w

	case 1:
		w := types.String{Target: &r.FechaAlta}

		return w

	case 2:
		w := types.String{Target: &r.FechaCierre}

		return w

	case 3:
		w := types.Float{Target: &r.Latitud}

		return w

	case 4:
		w := types.Float{Target: &r.Longitud}

		return w

	case 5:
		r.Evento = NewEvento()

		w := types.Record{Target: &r.Evento}

		return w

	}
	panic("Unknown field index")
}

func (r *EventosPlataformaSP) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *EventosPlataformaSP) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ EventosPlataformaSP) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EventosPlataformaSP) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EventosPlataformaSP) HintSize(int)                     { panic("Unsupported operation") }
func (_ EventosPlataformaSP) Finalize()                        {}

func (_ EventosPlataformaSP) AvroCRC64Fingerprint() []byte {
	return []byte(EventosPlataformaSPAvroCRC64Fingerprint)
}

func (r EventosPlataformaSP) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["hr"], err = json.Marshal(r.Hr)
	if err != nil {
		return nil, err
	}
	output["fechaAlta"], err = json.Marshal(r.FechaAlta)
	if err != nil {
		return nil, err
	}
	output["fechaCierre"], err = json.Marshal(r.FechaCierre)
	if err != nil {
		return nil, err
	}
	output["latitud"], err = json.Marshal(r.Latitud)
	if err != nil {
		return nil, err
	}
	output["longitud"], err = json.Marshal(r.Longitud)
	if err != nil {
		return nil, err
	}
	output["evento"], err = json.Marshal(r.Evento)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EventosPlataformaSP) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["hr"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Hr); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for hr")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaAlta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaAlta); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fechaAlta")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaCierre"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaCierre); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fechaCierre")
	}
	val = func() json.RawMessage {
		if v, ok := fields["latitud"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Latitud); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for latitud")
	}
	val = func() json.RawMessage {
		if v, ok := fields["longitud"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Longitud); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for longitud")
	}
	val = func() json.RawMessage {
		if v, ok := fields["evento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Evento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for evento")
	}
	return nil
}
