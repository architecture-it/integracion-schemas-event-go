// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EventoOT.avsc
 */
package EventoWhAltaOtEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Cabecera struct {
	IdCliente string `json:"IdCliente"`

	Remito string `json:"Remito"`

	FechaRemito *UnionNullLong `json:"FechaRemito"`

	GlnOrigen string `json:"GlnOrigen"`

	ReferenciaExterna string `json:"ReferenciaExterna"`

	IdUsuarioModif string `json:"IdUsuarioModif"`

	FechaModificacionRegistro *UnionNullLong `json:"FechaModificacionRegistro"`

	GlnDestino string `json:"GlnDestino"`

	IdTipoOT int32 `json:"IdTipoOT"`

	Factura string `json:"Factura"`

	IdEstadoLote string `json:"IdEstadoLote"`

	IdEvento int32 `json:"IdEvento"`

	IdEstado int32 `json:"IdEstado"`

	Contenedor string `json:"Contenedor"`

	Pedido string `json:"Pedido"`

	IdTipoDocumento int32 `json:"IdTipoDocumento"`

	Nombre string `json:"Nombre"`

	Apellido string `json:"Apellido"`

	NroDocumento string `json:"NroDocumento"`

	Direccion string `json:"Direccion"`

	NroEntrega string `json:"NroEntrega"`

	ClienteDestinatario string `json:"ClienteDestinatario"`

	ClienteFacturacion string `json:"ClienteFacturacion"`

	FechaEnvioBoss *UnionNullLong `json:"FechaEnvioBoss"`

	IdEstadoTransferenciaBoss int32 `json:"IdEstadoTransferenciaBoss"`

	CorrecionFix bool `json:"CorrecionFix"`

	FechaCreacionRegistro *UnionNullLong `json:"FechaCreacionRegistro"`

	IdUsuarioCreacionRegistro string `json:"IdUsuarioCreacionRegistro"`

	FormatoNuevo bool `json:"FormatoNuevo"`
}

const CabeceraAvroCRC64Fingerprint = "\x16;sM\xbc\xa9\x04+"

func NewCabecera() Cabecera {
	r := Cabecera{}
	return r
}

func DeserializeCabecera(r io.Reader) (Cabecera, error) {
	t := NewCabecera()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCabeceraFromSchema(r io.Reader, schema string) (Cabecera, error) {
	t := NewCabecera()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCabecera(r Cabecera, w io.Writer) error {
	var err error
	err = vm.WriteString(r.IdCliente, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Remito, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaRemito, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.GlnOrigen, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ReferenciaExterna, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.IdUsuarioModif, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaModificacionRegistro, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.GlnDestino, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.IdTipoOT, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Factura, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.IdEstadoLote, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.IdEvento, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.IdEstado, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Contenedor, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Pedido, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.IdTipoDocumento, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Nombre, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Apellido, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NroDocumento, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Direccion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NroEntrega, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ClienteDestinatario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ClienteFacturacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaEnvioBoss, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.IdEstadoTransferenciaBoss, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.CorrecionFix, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaCreacionRegistro, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.IdUsuarioCreacionRegistro, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.FormatoNuevo, w)
	if err != nil {
		return err
	}
	return err
}

func (r Cabecera) Serialize(w io.Writer) error {
	return writeCabecera(r, w)
}

func (r Cabecera) Schema() string {
	return "{\"fields\":[{\"name\":\"IdCliente\",\"type\":\"string\"},{\"name\":\"Remito\",\"type\":\"string\"},{\"name\":\"FechaRemito\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"GlnOrigen\",\"type\":\"string\"},{\"name\":\"ReferenciaExterna\",\"type\":\"string\"},{\"name\":\"IdUsuarioModif\",\"type\":\"string\"},{\"name\":\"FechaModificacionRegistro\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"GlnDestino\",\"type\":\"string\"},{\"name\":\"IdTipoOT\",\"type\":\"int\"},{\"name\":\"Factura\",\"type\":\"string\"},{\"name\":\"IdEstadoLote\",\"type\":\"string\"},{\"name\":\"IdEvento\",\"type\":\"int\"},{\"name\":\"IdEstado\",\"type\":\"int\"},{\"name\":\"Contenedor\",\"type\":\"string\"},{\"name\":\"Pedido\",\"type\":\"string\"},{\"name\":\"IdTipoDocumento\",\"type\":\"int\"},{\"name\":\"Nombre\",\"type\":\"string\"},{\"name\":\"Apellido\",\"type\":\"string\"},{\"name\":\"NroDocumento\",\"type\":\"string\"},{\"name\":\"Direccion\",\"type\":\"string\"},{\"name\":\"NroEntrega\",\"type\":\"string\"},{\"name\":\"ClienteDestinatario\",\"type\":\"string\"},{\"name\":\"ClienteFacturacion\",\"type\":\"string\"},{\"name\":\"FechaEnvioBoss\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"IdEstadoTransferenciaBoss\",\"type\":\"int\"},{\"name\":\"CorrecionFix\",\"type\":\"boolean\"},{\"name\":\"FechaCreacionRegistro\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"IdUsuarioCreacionRegistro\",\"type\":\"string\"},{\"name\":\"FormatoNuevo\",\"type\":\"boolean\"}],\"name\":\"Andreani.EventoWhAltaOt.Events.AltaCommon.Cabecera\",\"type\":\"record\"}"
}

func (r Cabecera) SchemaName() string {
	return "Andreani.EventoWhAltaOt.Events.AltaCommon.Cabecera"
}

func (_ Cabecera) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Cabecera) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Cabecera) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Cabecera) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Cabecera) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Cabecera) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Cabecera) SetString(v string)   { panic("Unsupported operation") }
func (_ Cabecera) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Cabecera) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.IdCliente}

		return w

	case 1:
		w := types.String{Target: &r.Remito}

		return w

	case 2:
		r.FechaRemito = NewUnionNullLong()

		return r.FechaRemito
	case 3:
		w := types.String{Target: &r.GlnOrigen}

		return w

	case 4:
		w := types.String{Target: &r.ReferenciaExterna}

		return w

	case 5:
		w := types.String{Target: &r.IdUsuarioModif}

		return w

	case 6:
		r.FechaModificacionRegistro = NewUnionNullLong()

		return r.FechaModificacionRegistro
	case 7:
		w := types.String{Target: &r.GlnDestino}

		return w

	case 8:
		w := types.Int{Target: &r.IdTipoOT}

		return w

	case 9:
		w := types.String{Target: &r.Factura}

		return w

	case 10:
		w := types.String{Target: &r.IdEstadoLote}

		return w

	case 11:
		w := types.Int{Target: &r.IdEvento}

		return w

	case 12:
		w := types.Int{Target: &r.IdEstado}

		return w

	case 13:
		w := types.String{Target: &r.Contenedor}

		return w

	case 14:
		w := types.String{Target: &r.Pedido}

		return w

	case 15:
		w := types.Int{Target: &r.IdTipoDocumento}

		return w

	case 16:
		w := types.String{Target: &r.Nombre}

		return w

	case 17:
		w := types.String{Target: &r.Apellido}

		return w

	case 18:
		w := types.String{Target: &r.NroDocumento}

		return w

	case 19:
		w := types.String{Target: &r.Direccion}

		return w

	case 20:
		w := types.String{Target: &r.NroEntrega}

		return w

	case 21:
		w := types.String{Target: &r.ClienteDestinatario}

		return w

	case 22:
		w := types.String{Target: &r.ClienteFacturacion}

		return w

	case 23:
		r.FechaEnvioBoss = NewUnionNullLong()

		return r.FechaEnvioBoss
	case 24:
		w := types.Int{Target: &r.IdEstadoTransferenciaBoss}

		return w

	case 25:
		w := types.Boolean{Target: &r.CorrecionFix}

		return w

	case 26:
		r.FechaCreacionRegistro = NewUnionNullLong()

		return r.FechaCreacionRegistro
	case 27:
		w := types.String{Target: &r.IdUsuarioCreacionRegistro}

		return w

	case 28:
		w := types.Boolean{Target: &r.FormatoNuevo}

		return w

	}
	panic("Unknown field index")
}

func (r *Cabecera) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Cabecera) NullField(i int) {
	switch i {
	case 2:
		r.FechaRemito = nil
		return
	case 6:
		r.FechaModificacionRegistro = nil
		return
	case 23:
		r.FechaEnvioBoss = nil
		return
	case 26:
		r.FechaCreacionRegistro = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Cabecera) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Cabecera) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Cabecera) HintSize(int)                     { panic("Unsupported operation") }
func (_ Cabecera) Finalize()                        {}

func (_ Cabecera) AvroCRC64Fingerprint() []byte {
	return []byte(CabeceraAvroCRC64Fingerprint)
}

func (r Cabecera) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["IdCliente"], err = json.Marshal(r.IdCliente)
	if err != nil {
		return nil, err
	}
	output["Remito"], err = json.Marshal(r.Remito)
	if err != nil {
		return nil, err
	}
	output["FechaRemito"], err = json.Marshal(r.FechaRemito)
	if err != nil {
		return nil, err
	}
	output["GlnOrigen"], err = json.Marshal(r.GlnOrigen)
	if err != nil {
		return nil, err
	}
	output["ReferenciaExterna"], err = json.Marshal(r.ReferenciaExterna)
	if err != nil {
		return nil, err
	}
	output["IdUsuarioModif"], err = json.Marshal(r.IdUsuarioModif)
	if err != nil {
		return nil, err
	}
	output["FechaModificacionRegistro"], err = json.Marshal(r.FechaModificacionRegistro)
	if err != nil {
		return nil, err
	}
	output["GlnDestino"], err = json.Marshal(r.GlnDestino)
	if err != nil {
		return nil, err
	}
	output["IdTipoOT"], err = json.Marshal(r.IdTipoOT)
	if err != nil {
		return nil, err
	}
	output["Factura"], err = json.Marshal(r.Factura)
	if err != nil {
		return nil, err
	}
	output["IdEstadoLote"], err = json.Marshal(r.IdEstadoLote)
	if err != nil {
		return nil, err
	}
	output["IdEvento"], err = json.Marshal(r.IdEvento)
	if err != nil {
		return nil, err
	}
	output["IdEstado"], err = json.Marshal(r.IdEstado)
	if err != nil {
		return nil, err
	}
	output["Contenedor"], err = json.Marshal(r.Contenedor)
	if err != nil {
		return nil, err
	}
	output["Pedido"], err = json.Marshal(r.Pedido)
	if err != nil {
		return nil, err
	}
	output["IdTipoDocumento"], err = json.Marshal(r.IdTipoDocumento)
	if err != nil {
		return nil, err
	}
	output["Nombre"], err = json.Marshal(r.Nombre)
	if err != nil {
		return nil, err
	}
	output["Apellido"], err = json.Marshal(r.Apellido)
	if err != nil {
		return nil, err
	}
	output["NroDocumento"], err = json.Marshal(r.NroDocumento)
	if err != nil {
		return nil, err
	}
	output["Direccion"], err = json.Marshal(r.Direccion)
	if err != nil {
		return nil, err
	}
	output["NroEntrega"], err = json.Marshal(r.NroEntrega)
	if err != nil {
		return nil, err
	}
	output["ClienteDestinatario"], err = json.Marshal(r.ClienteDestinatario)
	if err != nil {
		return nil, err
	}
	output["ClienteFacturacion"], err = json.Marshal(r.ClienteFacturacion)
	if err != nil {
		return nil, err
	}
	output["FechaEnvioBoss"], err = json.Marshal(r.FechaEnvioBoss)
	if err != nil {
		return nil, err
	}
	output["IdEstadoTransferenciaBoss"], err = json.Marshal(r.IdEstadoTransferenciaBoss)
	if err != nil {
		return nil, err
	}
	output["CorrecionFix"], err = json.Marshal(r.CorrecionFix)
	if err != nil {
		return nil, err
	}
	output["FechaCreacionRegistro"], err = json.Marshal(r.FechaCreacionRegistro)
	if err != nil {
		return nil, err
	}
	output["IdUsuarioCreacionRegistro"], err = json.Marshal(r.IdUsuarioCreacionRegistro)
	if err != nil {
		return nil, err
	}
	output["FormatoNuevo"], err = json.Marshal(r.FormatoNuevo)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Cabecera) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["IdCliente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdCliente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdCliente")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Remito"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Remito); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Remito")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaRemito"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaRemito); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FechaRemito")
	}
	val = func() json.RawMessage {
		if v, ok := fields["GlnOrigen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.GlnOrigen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for GlnOrigen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ReferenciaExterna"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ReferenciaExterna); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ReferenciaExterna")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdUsuarioModif"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdUsuarioModif); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdUsuarioModif")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaModificacionRegistro"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaModificacionRegistro); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FechaModificacionRegistro")
	}
	val = func() json.RawMessage {
		if v, ok := fields["GlnDestino"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.GlnDestino); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for GlnDestino")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdTipoOT"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdTipoOT); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdTipoOT")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Factura"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Factura); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Factura")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdEstadoLote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdEstadoLote); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdEstadoLote")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdEvento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdEvento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdEvento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdEstado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdEstado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdEstado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Contenedor"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contenedor); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Contenedor")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Pedido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Pedido); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Pedido")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdTipoDocumento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdTipoDocumento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdTipoDocumento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Nombre"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nombre); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Nombre")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Apellido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Apellido); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Apellido")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NroDocumento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NroDocumento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NroDocumento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Direccion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Direccion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Direccion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NroEntrega"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NroEntrega); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NroEntrega")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ClienteDestinatario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ClienteDestinatario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ClienteDestinatario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ClienteFacturacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ClienteFacturacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ClienteFacturacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaEnvioBoss"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaEnvioBoss); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FechaEnvioBoss")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdEstadoTransferenciaBoss"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdEstadoTransferenciaBoss); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdEstadoTransferenciaBoss")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CorrecionFix"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CorrecionFix); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CorrecionFix")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaCreacionRegistro"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaCreacionRegistro); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FechaCreacionRegistro")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdUsuarioCreacionRegistro"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdUsuarioCreacionRegistro); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdUsuarioCreacionRegistro")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FormatoNuevo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FormatoNuevo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FormatoNuevo")
	}
	return nil
}
