// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     DestruccionSolicitada.avsc
 */
package AccionesUnificadaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DestruccionSolicitada struct {
	Contrato string `json:"contrato"`

	Ejemplar *UnionNullString `json:"ejemplar"`

	NumeroAndreani string `json:"numeroAndreani"`
}

const DestruccionSolicitadaAvroCRC64Fingerprint = "\xa6ÈŸW\xfet\"*"

func NewDestruccionSolicitada() DestruccionSolicitada {
	r := DestruccionSolicitada{}
	r.Ejemplar = nil
	return r
}

func DeserializeDestruccionSolicitada(r io.Reader) (DestruccionSolicitada, error) {
	t := NewDestruccionSolicitada()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDestruccionSolicitadaFromSchema(r io.Reader, schema string) (DestruccionSolicitada, error) {
	t := NewDestruccionSolicitada()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDestruccionSolicitada(r DestruccionSolicitada, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Contrato, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Ejemplar, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NumeroAndreani, w)
	if err != nil {
		return err
	}
	return err
}

func (r DestruccionSolicitada) Serialize(w io.Writer) error {
	return writeDestruccionSolicitada(r, w)
}

func (r DestruccionSolicitada) Schema() string {
	return "{\"fields\":[{\"name\":\"contrato\",\"type\":\"string\"},{\"default\":null,\"name\":\"ejemplar\",\"type\":[\"null\",\"string\"]},{\"name\":\"numeroAndreani\",\"type\":\"string\"}],\"name\":\"Andreani.AccionesUnificada.Events.Record.DestruccionSolicitada\",\"type\":\"record\"}"
}

func (r DestruccionSolicitada) SchemaName() string {
	return "Andreani.AccionesUnificada.Events.Record.DestruccionSolicitada"
}

func (_ DestruccionSolicitada) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DestruccionSolicitada) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DestruccionSolicitada) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DestruccionSolicitada) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DestruccionSolicitada) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DestruccionSolicitada) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DestruccionSolicitada) SetString(v string)   { panic("Unsupported operation") }
func (_ DestruccionSolicitada) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DestruccionSolicitada) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Contrato}

		return w

	case 1:
		r.Ejemplar = NewUnionNullString()

		return r.Ejemplar
	case 2:
		w := types.String{Target: &r.NumeroAndreani}

		return w

	}
	panic("Unknown field index")
}

func (r *DestruccionSolicitada) SetDefault(i int) {
	switch i {
	case 1:
		r.Ejemplar = nil
		return
	}
	panic("Unknown field index")
}

func (r *DestruccionSolicitada) NullField(i int) {
	switch i {
	case 1:
		r.Ejemplar = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ DestruccionSolicitada) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DestruccionSolicitada) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DestruccionSolicitada) HintSize(int)                     { panic("Unsupported operation") }
func (_ DestruccionSolicitada) Finalize()                        {}

func (_ DestruccionSolicitada) AvroCRC64Fingerprint() []byte {
	return []byte(DestruccionSolicitadaAvroCRC64Fingerprint)
}

func (r DestruccionSolicitada) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["contrato"], err = json.Marshal(r.Contrato)
	if err != nil {
		return nil, err
	}
	output["ejemplar"], err = json.Marshal(r.Ejemplar)
	if err != nil {
		return nil, err
	}
	output["numeroAndreani"], err = json.Marshal(r.NumeroAndreani)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DestruccionSolicitada) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["contrato"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contrato); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for contrato")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ejemplar"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ejemplar); err != nil {
			return err
		}
	} else {
		r.Ejemplar = NewUnionNullString()

		r.Ejemplar = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["numeroAndreani"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroAndreani); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroAndreani")
	}
	return nil
}
