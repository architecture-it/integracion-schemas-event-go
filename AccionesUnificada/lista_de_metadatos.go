// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ListaDeMetadatos.avsc
 */
package AccionesUnificadaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ListaDeMetadatos struct {
	Lista *UnionNullArrayMetadato `json:"lista"`
}

const ListaDeMetadatosAvroCRC64Fingerprint = "\xc3\xe7f\xebKL\x90l"

func NewListaDeMetadatos() ListaDeMetadatos {
	r := ListaDeMetadatos{}
	r.Lista = nil
	return r
}

func DeserializeListaDeMetadatos(r io.Reader) (ListaDeMetadatos, error) {
	t := NewListaDeMetadatos()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeListaDeMetadatosFromSchema(r io.Reader, schema string) (ListaDeMetadatos, error) {
	t := NewListaDeMetadatos()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeListaDeMetadatos(r ListaDeMetadatos, w io.Writer) error {
	var err error
	err = writeUnionNullArrayMetadato(r.Lista, w)
	if err != nil {
		return err
	}
	return err
}

func (r ListaDeMetadatos) Serialize(w io.Writer) error {
	return writeListaDeMetadatos(r, w)
}

func (r ListaDeMetadatos) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"lista\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"name\":\"meta\",\"type\":\"string\"},{\"name\":\"contenido\",\"type\":\"string\"}],\"name\":\"Metadato\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"Andreani.AccionesUnificada.Events.Common.ListaDeMetadatos\",\"type\":\"record\"}"
}

func (r ListaDeMetadatos) SchemaName() string {
	return "Andreani.AccionesUnificada.Events.Common.ListaDeMetadatos"
}

func (_ ListaDeMetadatos) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ListaDeMetadatos) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ListaDeMetadatos) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ListaDeMetadatos) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ListaDeMetadatos) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ListaDeMetadatos) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ListaDeMetadatos) SetString(v string)   { panic("Unsupported operation") }
func (_ ListaDeMetadatos) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ListaDeMetadatos) Get(i int) types.Field {
	switch i {
	case 0:
		r.Lista = NewUnionNullArrayMetadato()

		return r.Lista
	}
	panic("Unknown field index")
}

func (r *ListaDeMetadatos) SetDefault(i int) {
	switch i {
	case 0:
		r.Lista = nil
		return
	}
	panic("Unknown field index")
}

func (r *ListaDeMetadatos) NullField(i int) {
	switch i {
	case 0:
		r.Lista = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ListaDeMetadatos) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ListaDeMetadatos) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ListaDeMetadatos) HintSize(int)                     { panic("Unsupported operation") }
func (_ ListaDeMetadatos) Finalize()                        {}

func (_ ListaDeMetadatos) AvroCRC64Fingerprint() []byte {
	return []byte(ListaDeMetadatosAvroCRC64Fingerprint)
}

func (r ListaDeMetadatos) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["lista"], err = json.Marshal(r.Lista)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ListaDeMetadatos) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["lista"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Lista); err != nil {
			return err
		}
	} else {
		r.Lista = NewUnionNullArrayMetadato()

		r.Lista = nil
	}
	return nil
}
