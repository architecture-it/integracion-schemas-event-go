// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ListaDeBultos.avsc
 */
package AccionesUnificadaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Bulto struct {
	Kilos float64 `json:"kilos"`

	LargoCm float64 `json:"largoCm"`

	AltoCm float64 `json:"altoCm"`

	AnchoCm float64 `json:"anchoCm"`

	VolumenCm float64 `json:"volumenCm"`

	ValorDeclaradoSinImpuestos float64 `json:"valorDeclaradoSinImpuestos"`

	ValorDeclaradoConImpuestos float64 `json:"valorDeclaradoConImpuestos"`

	ValorDeclarado float64 `json:"valorDeclarado"`

	Descripcion *UnionNullString `json:"descripcion"`

	EAN *UnionNullString `json:"EAN"`

	Componentes *UnionNullComponentes `json:"componentes"`

	Referencias *UnionNullListaDeMetadatos `json:"referencias"`

	NumeroDeBulto *UnionNullInt `json:"numeroDeBulto"`
}

const BultoAvroCRC64Fingerprint = "eC,\xf5*\xefyT"

func NewBulto() Bulto {
	r := Bulto{}
	r.Descripcion = nil
	r.EAN = nil
	r.Componentes = nil
	r.Referencias = nil
	r.NumeroDeBulto = nil
	return r
}

func DeserializeBulto(r io.Reader) (Bulto, error) {
	t := NewBulto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeBultoFromSchema(r io.Reader, schema string) (Bulto, error) {
	t := NewBulto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeBulto(r Bulto, w io.Writer) error {
	var err error
	err = vm.WriteDouble(r.Kilos, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.LargoCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.AltoCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.AnchoCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.VolumenCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.ValorDeclaradoSinImpuestos, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.ValorDeclaradoConImpuestos, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.ValorDeclarado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Descripcion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EAN, w)
	if err != nil {
		return err
	}
	err = writeUnionNullComponentes(r.Componentes, w)
	if err != nil {
		return err
	}
	err = writeUnionNullListaDeMetadatos(r.Referencias, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.NumeroDeBulto, w)
	if err != nil {
		return err
	}
	return err
}

func (r Bulto) Serialize(w io.Writer) error {
	return writeBulto(r, w)
}

func (r Bulto) Schema() string {
	return "{\"fields\":[{\"name\":\"kilos\",\"type\":\"double\"},{\"name\":\"largoCm\",\"type\":\"double\"},{\"name\":\"altoCm\",\"type\":\"double\"},{\"name\":\"anchoCm\",\"type\":\"double\"},{\"name\":\"volumenCm\",\"type\":\"double\"},{\"name\":\"valorDeclaradoSinImpuestos\",\"type\":\"double\"},{\"name\":\"valorDeclaradoConImpuestos\",\"type\":\"double\"},{\"name\":\"valorDeclarado\",\"type\":\"double\"},{\"default\":null,\"name\":\"descripcion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EAN\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"componentes\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"numeroAgrupador\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"componentesHijos\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"default\":null,\"name\":\"numeroHijo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"referencias\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"lista\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"name\":\"meta\",\"type\":\"string\"},{\"name\":\"contenido\",\"type\":\"string\"}],\"name\":\"Metadato\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"ListaDeMetadatos\",\"type\":\"record\"}]}],\"name\":\"ComponenteHijo\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"Componentes\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"referencias\",\"type\":[\"null\",\"Andreani.AccionesUnificada.Events.Common.ListaDeMetadatos\"]},{\"default\":null,\"name\":\"numeroDeBulto\",\"type\":[\"null\",\"int\"]}],\"name\":\"Andreani.AccionesUnificada.Events.Common.Bulto\",\"type\":\"record\"}"
}

func (r Bulto) SchemaName() string {
	return "Andreani.AccionesUnificada.Events.Common.Bulto"
}

func (_ Bulto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Bulto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Bulto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Bulto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Bulto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Bulto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Bulto) SetString(v string)   { panic("Unsupported operation") }
func (_ Bulto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Bulto) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Double{Target: &r.Kilos}

		return w

	case 1:
		w := types.Double{Target: &r.LargoCm}

		return w

	case 2:
		w := types.Double{Target: &r.AltoCm}

		return w

	case 3:
		w := types.Double{Target: &r.AnchoCm}

		return w

	case 4:
		w := types.Double{Target: &r.VolumenCm}

		return w

	case 5:
		w := types.Double{Target: &r.ValorDeclaradoSinImpuestos}

		return w

	case 6:
		w := types.Double{Target: &r.ValorDeclaradoConImpuestos}

		return w

	case 7:
		w := types.Double{Target: &r.ValorDeclarado}

		return w

	case 8:
		r.Descripcion = NewUnionNullString()

		return r.Descripcion
	case 9:
		r.EAN = NewUnionNullString()

		return r.EAN
	case 10:
		r.Componentes = NewUnionNullComponentes()

		return r.Componentes
	case 11:
		r.Referencias = NewUnionNullListaDeMetadatos()

		return r.Referencias
	case 12:
		r.NumeroDeBulto = NewUnionNullInt()

		return r.NumeroDeBulto
	}
	panic("Unknown field index")
}

func (r *Bulto) SetDefault(i int) {
	switch i {
	case 8:
		r.Descripcion = nil
		return
	case 9:
		r.EAN = nil
		return
	case 10:
		r.Componentes = nil
		return
	case 11:
		r.Referencias = nil
		return
	case 12:
		r.NumeroDeBulto = nil
		return
	}
	panic("Unknown field index")
}

func (r *Bulto) NullField(i int) {
	switch i {
	case 8:
		r.Descripcion = nil
		return
	case 9:
		r.EAN = nil
		return
	case 10:
		r.Componentes = nil
		return
	case 11:
		r.Referencias = nil
		return
	case 12:
		r.NumeroDeBulto = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Bulto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Bulto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Bulto) HintSize(int)                     { panic("Unsupported operation") }
func (_ Bulto) Finalize()                        {}

func (_ Bulto) AvroCRC64Fingerprint() []byte {
	return []byte(BultoAvroCRC64Fingerprint)
}

func (r Bulto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["kilos"], err = json.Marshal(r.Kilos)
	if err != nil {
		return nil, err
	}
	output["largoCm"], err = json.Marshal(r.LargoCm)
	if err != nil {
		return nil, err
	}
	output["altoCm"], err = json.Marshal(r.AltoCm)
	if err != nil {
		return nil, err
	}
	output["anchoCm"], err = json.Marshal(r.AnchoCm)
	if err != nil {
		return nil, err
	}
	output["volumenCm"], err = json.Marshal(r.VolumenCm)
	if err != nil {
		return nil, err
	}
	output["valorDeclaradoSinImpuestos"], err = json.Marshal(r.ValorDeclaradoSinImpuestos)
	if err != nil {
		return nil, err
	}
	output["valorDeclaradoConImpuestos"], err = json.Marshal(r.ValorDeclaradoConImpuestos)
	if err != nil {
		return nil, err
	}
	output["valorDeclarado"], err = json.Marshal(r.ValorDeclarado)
	if err != nil {
		return nil, err
	}
	output["descripcion"], err = json.Marshal(r.Descripcion)
	if err != nil {
		return nil, err
	}
	output["EAN"], err = json.Marshal(r.EAN)
	if err != nil {
		return nil, err
	}
	output["componentes"], err = json.Marshal(r.Componentes)
	if err != nil {
		return nil, err
	}
	output["referencias"], err = json.Marshal(r.Referencias)
	if err != nil {
		return nil, err
	}
	output["numeroDeBulto"], err = json.Marshal(r.NumeroDeBulto)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Bulto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["kilos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Kilos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for kilos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["largoCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LargoCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for largoCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["altoCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AltoCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for altoCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["anchoCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AnchoCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for anchoCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["volumenCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VolumenCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for volumenCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["valorDeclaradoSinImpuestos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValorDeclaradoSinImpuestos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for valorDeclaradoSinImpuestos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["valorDeclaradoConImpuestos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValorDeclaradoConImpuestos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for valorDeclaradoConImpuestos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["valorDeclarado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValorDeclarado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for valorDeclarado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["descripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Descripcion); err != nil {
			return err
		}
	} else {
		r.Descripcion = NewUnionNullString()

		r.Descripcion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EAN"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EAN); err != nil {
			return err
		}
	} else {
		r.EAN = NewUnionNullString()

		r.EAN = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["componentes"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Componentes); err != nil {
			return err
		}
	} else {
		r.Componentes = NewUnionNullComponentes()

		r.Componentes = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["referencias"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Referencias); err != nil {
			return err
		}
	} else {
		r.Referencias = NewUnionNullListaDeMetadatos()

		r.Referencias = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["numeroDeBulto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeBulto); err != nil {
			return err
		}
	} else {
		r.NumeroDeBulto = NewUnionNullInt()

		r.NumeroDeBulto = nil
	}
	return nil
}
