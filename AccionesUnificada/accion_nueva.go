// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     AccionNueva.avsc
 */
package AccionesUnificadaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type AccionNueva struct {
	NombreAccion string `json:"nombreAccion"`

	Datos *UnionNullArrayMetadato `json:"datos"`
}

const AccionNuevaAvroCRC64Fingerprint = "\x03\x1a\x967\xcb4,\xe9"

func NewAccionNueva() AccionNueva {
	r := AccionNueva{}
	r.Datos = nil
	return r
}

func DeserializeAccionNueva(r io.Reader) (AccionNueva, error) {
	t := NewAccionNueva()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAccionNuevaFromSchema(r io.Reader, schema string) (AccionNueva, error) {
	t := NewAccionNueva()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAccionNueva(r AccionNueva, w io.Writer) error {
	var err error
	err = vm.WriteString(r.NombreAccion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayMetadato(r.Datos, w)
	if err != nil {
		return err
	}
	return err
}

func (r AccionNueva) Serialize(w io.Writer) error {
	return writeAccionNueva(r, w)
}

func (r AccionNueva) Schema() string {
	return "{\"fields\":[{\"name\":\"nombreAccion\",\"type\":\"string\"},{\"default\":null,\"name\":\"datos\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"name\":\"meta\",\"type\":\"string\"},{\"name\":\"contenido\",\"type\":\"string\"}],\"name\":\"Metadato\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"Andreani.AccionesUnificada.Events.Common.AccionNueva\",\"type\":\"record\"}"
}

func (r AccionNueva) SchemaName() string {
	return "Andreani.AccionesUnificada.Events.Common.AccionNueva"
}

func (_ AccionNueva) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ AccionNueva) SetInt(v int32)       { panic("Unsupported operation") }
func (_ AccionNueva) SetLong(v int64)      { panic("Unsupported operation") }
func (_ AccionNueva) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ AccionNueva) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ AccionNueva) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ AccionNueva) SetString(v string)   { panic("Unsupported operation") }
func (_ AccionNueva) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *AccionNueva) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.NombreAccion}

		return w

	case 1:
		r.Datos = NewUnionNullArrayMetadato()

		return r.Datos
	}
	panic("Unknown field index")
}

func (r *AccionNueva) SetDefault(i int) {
	switch i {
	case 1:
		r.Datos = nil
		return
	}
	panic("Unknown field index")
}

func (r *AccionNueva) NullField(i int) {
	switch i {
	case 1:
		r.Datos = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ AccionNueva) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ AccionNueva) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ AccionNueva) HintSize(int)                     { panic("Unsupported operation") }
func (_ AccionNueva) Finalize()                        {}

func (_ AccionNueva) AvroCRC64Fingerprint() []byte {
	return []byte(AccionNuevaAvroCRC64Fingerprint)
}

func (r AccionNueva) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["nombreAccion"], err = json.Marshal(r.NombreAccion)
	if err != nil {
		return nil, err
	}
	output["datos"], err = json.Marshal(r.Datos)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *AccionNueva) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["nombreAccion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NombreAccion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for nombreAccion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["datos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Datos); err != nil {
			return err
		}
	} else {
		r.Datos = NewUnionNullArrayMetadato()

		r.Datos = nil
	}
	return nil
}
