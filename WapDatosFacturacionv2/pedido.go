// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Pedido.avsc
 */
package WapDatosFacturacionv2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Pedido struct {
	NumeroOrdenExterna string `json:"NumeroOrdenExterna"`

	Propietario string `json:"Propietario"`

	ValorDeclarado *UnionNullString `json:"ValorDeclarado"`

	Remito string `json:"Remito"`

	LinkImpresionRemito *UnionNullString `json:"LinkImpresionRemito"`

	ArchivoImpresionRemito *UnionNullString `json:"ArchivoImpresionRemito"`

	TieneGestionCobranza *UnionNullString `json:"TieneGestionCobranza"`

	FacturaLegal string `json:"FacturaLegal"`

	FechaDeFacturacion *UnionNullLong `json:"FechaDeFacturacion"`

	PrecioValorFc *UnionNullString `json:"PrecioValorFc"`

	COT *UnionNullString `json:"COT"`

	FechaEntrega *UnionNullLong `json:"FechaEntrega"`

	DatosAdicionales *UnionNullDatosAdicionales `json:"DatosAdicionales"`
}

const PedidoAvroCRC64Fingerprint = "\v1:\xc0/\x1c\xb9\xf1"

func NewPedido() Pedido {
	r := Pedido{}
	r.ValorDeclarado = nil
	r.LinkImpresionRemito = nil
	r.ArchivoImpresionRemito = nil
	r.TieneGestionCobranza = nil
	r.FechaDeFacturacion = nil
	r.PrecioValorFc = nil
	r.COT = nil
	r.FechaEntrega = nil
	r.DatosAdicionales = nil
	return r
}

func DeserializePedido(r io.Reader) (Pedido, error) {
	t := NewPedido()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePedidoFromSchema(r io.Reader, schema string) (Pedido, error) {
	t := NewPedido()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePedido(r Pedido, w io.Writer) error {
	var err error
	err = vm.WriteString(r.NumeroOrdenExterna, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Propietario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ValorDeclarado, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Remito, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LinkImpresionRemito, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ArchivoImpresionRemito, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TieneGestionCobranza, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.FacturaLegal, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaDeFacturacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PrecioValorFc, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.COT, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaEntrega, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDatosAdicionales(r.DatosAdicionales, w)
	if err != nil {
		return err
	}
	return err
}

func (r Pedido) Serialize(w io.Writer) error {
	return writePedido(r, w)
}

func (r Pedido) Schema() string {
	return "{\"fields\":[{\"name\":\"NumeroOrdenExterna\",\"type\":\"string\"},{\"name\":\"Propietario\",\"type\":\"string\"},{\"default\":null,\"name\":\"ValorDeclarado\",\"type\":[\"null\",\"string\"]},{\"name\":\"Remito\",\"type\":\"string\"},{\"default\":null,\"name\":\"LinkImpresionRemito\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ArchivoImpresionRemito\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TieneGestionCobranza\",\"type\":[\"null\",\"string\"]},{\"name\":\"FacturaLegal\",\"type\":\"string\"},{\"default\":null,\"name\":\"FechaDeFacturacion\",\"type\":[\"null\",\"long\"]},{\"default\":null,\"name\":\"PrecioValorFc\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"COT\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FechaEntrega\",\"type\":[\"null\",\"long\"]},{\"default\":null,\"name\":\"DatosAdicionales\",\"type\":[\"null\",{\"fields\":[{\"name\":\"metadatos\",\"type\":{\"items\":{\"fields\":[{\"name\":\"meta\",\"type\":\"string\"},{\"name\":\"contenido\",\"type\":\"string\"}],\"name\":\"Metadato\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"DatosAdicionales\",\"type\":\"record\"}]}],\"name\":\"Andreani.WapDatosFacturacionv2.Events.Record.Pedido\",\"type\":\"record\"}"
}

func (r Pedido) SchemaName() string {
	return "Andreani.WapDatosFacturacionv2.Events.Record.Pedido"
}

func (_ Pedido) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Pedido) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Pedido) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Pedido) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Pedido) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Pedido) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Pedido) SetString(v string)   { panic("Unsupported operation") }
func (_ Pedido) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Pedido) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.NumeroOrdenExterna}

		return w

	case 1:
		w := types.String{Target: &r.Propietario}

		return w

	case 2:
		r.ValorDeclarado = NewUnionNullString()

		return r.ValorDeclarado
	case 3:
		w := types.String{Target: &r.Remito}

		return w

	case 4:
		r.LinkImpresionRemito = NewUnionNullString()

		return r.LinkImpresionRemito
	case 5:
		r.ArchivoImpresionRemito = NewUnionNullString()

		return r.ArchivoImpresionRemito
	case 6:
		r.TieneGestionCobranza = NewUnionNullString()

		return r.TieneGestionCobranza
	case 7:
		w := types.String{Target: &r.FacturaLegal}

		return w

	case 8:
		r.FechaDeFacturacion = NewUnionNullLong()

		return r.FechaDeFacturacion
	case 9:
		r.PrecioValorFc = NewUnionNullString()

		return r.PrecioValorFc
	case 10:
		r.COT = NewUnionNullString()

		return r.COT
	case 11:
		r.FechaEntrega = NewUnionNullLong()

		return r.FechaEntrega
	case 12:
		r.DatosAdicionales = NewUnionNullDatosAdicionales()

		return r.DatosAdicionales
	}
	panic("Unknown field index")
}

func (r *Pedido) SetDefault(i int) {
	switch i {
	case 2:
		r.ValorDeclarado = nil
		return
	case 4:
		r.LinkImpresionRemito = nil
		return
	case 5:
		r.ArchivoImpresionRemito = nil
		return
	case 6:
		r.TieneGestionCobranza = nil
		return
	case 8:
		r.FechaDeFacturacion = nil
		return
	case 9:
		r.PrecioValorFc = nil
		return
	case 10:
		r.COT = nil
		return
	case 11:
		r.FechaEntrega = nil
		return
	case 12:
		r.DatosAdicionales = nil
		return
	}
	panic("Unknown field index")
}

func (r *Pedido) NullField(i int) {
	switch i {
	case 2:
		r.ValorDeclarado = nil
		return
	case 4:
		r.LinkImpresionRemito = nil
		return
	case 5:
		r.ArchivoImpresionRemito = nil
		return
	case 6:
		r.TieneGestionCobranza = nil
		return
	case 8:
		r.FechaDeFacturacion = nil
		return
	case 9:
		r.PrecioValorFc = nil
		return
	case 10:
		r.COT = nil
		return
	case 11:
		r.FechaEntrega = nil
		return
	case 12:
		r.DatosAdicionales = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Pedido) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Pedido) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Pedido) HintSize(int)                     { panic("Unsupported operation") }
func (_ Pedido) Finalize()                        {}

func (_ Pedido) AvroCRC64Fingerprint() []byte {
	return []byte(PedidoAvroCRC64Fingerprint)
}

func (r Pedido) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["NumeroOrdenExterna"], err = json.Marshal(r.NumeroOrdenExterna)
	if err != nil {
		return nil, err
	}
	output["Propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["ValorDeclarado"], err = json.Marshal(r.ValorDeclarado)
	if err != nil {
		return nil, err
	}
	output["Remito"], err = json.Marshal(r.Remito)
	if err != nil {
		return nil, err
	}
	output["LinkImpresionRemito"], err = json.Marshal(r.LinkImpresionRemito)
	if err != nil {
		return nil, err
	}
	output["ArchivoImpresionRemito"], err = json.Marshal(r.ArchivoImpresionRemito)
	if err != nil {
		return nil, err
	}
	output["TieneGestionCobranza"], err = json.Marshal(r.TieneGestionCobranza)
	if err != nil {
		return nil, err
	}
	output["FacturaLegal"], err = json.Marshal(r.FacturaLegal)
	if err != nil {
		return nil, err
	}
	output["FechaDeFacturacion"], err = json.Marshal(r.FechaDeFacturacion)
	if err != nil {
		return nil, err
	}
	output["PrecioValorFc"], err = json.Marshal(r.PrecioValorFc)
	if err != nil {
		return nil, err
	}
	output["COT"], err = json.Marshal(r.COT)
	if err != nil {
		return nil, err
	}
	output["FechaEntrega"], err = json.Marshal(r.FechaEntrega)
	if err != nil {
		return nil, err
	}
	output["DatosAdicionales"], err = json.Marshal(r.DatosAdicionales)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Pedido) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["NumeroOrdenExterna"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroOrdenExterna); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NumeroOrdenExterna")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Propietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValorDeclarado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValorDeclarado); err != nil {
			return err
		}
	} else {
		r.ValorDeclarado = NewUnionNullString()

		r.ValorDeclarado = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Remito"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Remito); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Remito")
	}
	val = func() json.RawMessage {
		if v, ok := fields["LinkImpresionRemito"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LinkImpresionRemito); err != nil {
			return err
		}
	} else {
		r.LinkImpresionRemito = NewUnionNullString()

		r.LinkImpresionRemito = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ArchivoImpresionRemito"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ArchivoImpresionRemito); err != nil {
			return err
		}
	} else {
		r.ArchivoImpresionRemito = NewUnionNullString()

		r.ArchivoImpresionRemito = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TieneGestionCobranza"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TieneGestionCobranza); err != nil {
			return err
		}
	} else {
		r.TieneGestionCobranza = NewUnionNullString()

		r.TieneGestionCobranza = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FacturaLegal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FacturaLegal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FacturaLegal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaDeFacturacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaDeFacturacion); err != nil {
			return err
		}
	} else {
		r.FechaDeFacturacion = NewUnionNullLong()

		r.FechaDeFacturacion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PrecioValorFc"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PrecioValorFc); err != nil {
			return err
		}
	} else {
		r.PrecioValorFc = NewUnionNullString()

		r.PrecioValorFc = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["COT"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.COT); err != nil {
			return err
		}
	} else {
		r.COT = NewUnionNullString()

		r.COT = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaEntrega"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaEntrega); err != nil {
			return err
		}
	} else {
		r.FechaEntrega = NewUnionNullLong()

		r.FechaEntrega = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["DatosAdicionales"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DatosAdicionales); err != nil {
			return err
		}
	} else {
		r.DatosAdicionales = NewUnionNullDatosAdicionales()

		r.DatosAdicionales = nil
	}
	return nil
}
