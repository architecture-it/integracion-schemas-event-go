// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     DatosFacturacionSolicitadaV2.avsc
 */
package WapDatosFacturacionv2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DatosFacturacionSolicitadaV2 struct {
	ActualizacionDatosFacturacion ActualizacionDatosFacturacion `json:"ActualizacionDatosFacturacion"`

	SolicitudDeAccionAlmacen SolicitudDeAccionAlmacen `json:"SolicitudDeAccionAlmacen"`

	Topic string `json:"Topic"`
}

const DatosFacturacionSolicitadaV2AvroCRC64Fingerprint = "\xf8\n!\x80\x01=2 "

func NewDatosFacturacionSolicitadaV2() DatosFacturacionSolicitadaV2 {
	r := DatosFacturacionSolicitadaV2{}
	r.ActualizacionDatosFacturacion = NewActualizacionDatosFacturacion()

	r.SolicitudDeAccionAlmacen = NewSolicitudDeAccionAlmacen()

	return r
}

func DeserializeDatosFacturacionSolicitadaV2(r io.Reader) (DatosFacturacionSolicitadaV2, error) {
	t := NewDatosFacturacionSolicitadaV2()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDatosFacturacionSolicitadaV2FromSchema(r io.Reader, schema string) (DatosFacturacionSolicitadaV2, error) {
	t := NewDatosFacturacionSolicitadaV2()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDatosFacturacionSolicitadaV2(r DatosFacturacionSolicitadaV2, w io.Writer) error {
	var err error
	err = writeActualizacionDatosFacturacion(r.ActualizacionDatosFacturacion, w)
	if err != nil {
		return err
	}
	err = writeSolicitudDeAccionAlmacen(r.SolicitudDeAccionAlmacen, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Topic, w)
	if err != nil {
		return err
	}
	return err
}

func (r DatosFacturacionSolicitadaV2) Serialize(w io.Writer) error {
	return writeDatosFacturacionSolicitadaV2(r, w)
}

func (r DatosFacturacionSolicitadaV2) Schema() string {
	return "{\"fields\":[{\"name\":\"ActualizacionDatosFacturacion\",\"type\":{\"fields\":[{\"name\":\"OrdenExterna\",\"type\":\"string\"},{\"name\":\"Remito\",\"type\":\"string\"},{\"name\":\"Factura\",\"type\":\"string\"},{\"default\":null,\"name\":\"ValorDeclarado\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ValorSeguro\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FechaFactura\",\"type\":[\"null\",\"string\"]}],\"name\":\"ActualizacionDatosFacturacion\",\"type\":\"record\"}},{\"name\":\"SolicitudDeAccionAlmacen\",\"type\":{\"fields\":[{\"name\":\"IdTransaccion\",\"type\":\"string\"},{\"name\":\"Contrato\",\"type\":\"string\"},{\"name\":\"Almacen\",\"type\":\"string\"},{\"name\":\"Planta\",\"type\":\"string\"},{\"name\":\"EventoDeNegocio\",\"type\":{\"fields\":[{\"name\":\"Timestamp\",\"type\":\"int\"},{\"name\":\"Remitente\",\"type\":\"string\"},{\"default\":null,\"name\":\"Destinatario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NumeroDeOrden\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Vencimiento\",\"type\":[\"null\",\"string\"]}],\"name\":\"EventoDeNegocio\",\"type\":\"record\"}}],\"name\":\"SolicitudDeAccionAlmacen\",\"type\":\"record\"}},{\"name\":\"Topic\",\"type\":\"string\"}],\"name\":\"Andreani.WapDatosFacturacionv2.Events.Record.DatosFacturacionSolicitadaV2\",\"type\":\"record\"}"
}

func (r DatosFacturacionSolicitadaV2) SchemaName() string {
	return "Andreani.WapDatosFacturacionv2.Events.Record.DatosFacturacionSolicitadaV2"
}

func (_ DatosFacturacionSolicitadaV2) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DatosFacturacionSolicitadaV2) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DatosFacturacionSolicitadaV2) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DatosFacturacionSolicitadaV2) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DatosFacturacionSolicitadaV2) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DatosFacturacionSolicitadaV2) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DatosFacturacionSolicitadaV2) SetString(v string)   { panic("Unsupported operation") }
func (_ DatosFacturacionSolicitadaV2) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DatosFacturacionSolicitadaV2) Get(i int) types.Field {
	switch i {
	case 0:
		r.ActualizacionDatosFacturacion = NewActualizacionDatosFacturacion()

		w := types.Record{Target: &r.ActualizacionDatosFacturacion}

		return w

	case 1:
		r.SolicitudDeAccionAlmacen = NewSolicitudDeAccionAlmacen()

		w := types.Record{Target: &r.SolicitudDeAccionAlmacen}

		return w

	case 2:
		w := types.String{Target: &r.Topic}

		return w

	}
	panic("Unknown field index")
}

func (r *DatosFacturacionSolicitadaV2) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *DatosFacturacionSolicitadaV2) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ DatosFacturacionSolicitadaV2) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ DatosFacturacionSolicitadaV2) AppendArray() types.Field { panic("Unsupported operation") }
func (_ DatosFacturacionSolicitadaV2) HintSize(int)             { panic("Unsupported operation") }
func (_ DatosFacturacionSolicitadaV2) Finalize()                {}

func (_ DatosFacturacionSolicitadaV2) AvroCRC64Fingerprint() []byte {
	return []byte(DatosFacturacionSolicitadaV2AvroCRC64Fingerprint)
}

func (r DatosFacturacionSolicitadaV2) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["ActualizacionDatosFacturacion"], err = json.Marshal(r.ActualizacionDatosFacturacion)
	if err != nil {
		return nil, err
	}
	output["SolicitudDeAccionAlmacen"], err = json.Marshal(r.SolicitudDeAccionAlmacen)
	if err != nil {
		return nil, err
	}
	output["Topic"], err = json.Marshal(r.Topic)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DatosFacturacionSolicitadaV2) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["ActualizacionDatosFacturacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ActualizacionDatosFacturacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ActualizacionDatosFacturacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["SolicitudDeAccionAlmacen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SolicitudDeAccionAlmacen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for SolicitudDeAccionAlmacen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Topic"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Topic); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Topic")
	}
	return nil
}
