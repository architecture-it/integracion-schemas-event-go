// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EnviosEvent.avsc
 */
package CartaDocumentoBackendEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayEnvioTypeEnum int

const (
	UnionNullArrayEnvioTypeEnumArrayEnvio UnionNullArrayEnvioTypeEnum = 1
)

type UnionNullArrayEnvio struct {
	Null       *types.NullVal
	ArrayEnvio []Envio
	UnionType  UnionNullArrayEnvioTypeEnum
}

func writeUnionNullArrayEnvio(r *UnionNullArrayEnvio, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayEnvioTypeEnumArrayEnvio:
		return writeArrayEnvio(r.ArrayEnvio, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayEnvio")
}

func NewUnionNullArrayEnvio() *UnionNullArrayEnvio {
	return &UnionNullArrayEnvio{}
}

func (r *UnionNullArrayEnvio) Serialize(w io.Writer) error {
	return writeUnionNullArrayEnvio(r, w)
}

func DeserializeUnionNullArrayEnvio(r io.Reader) (*UnionNullArrayEnvio, error) {
	t := NewUnionNullArrayEnvio()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayEnvioFromSchema(r io.Reader, schema string) (*UnionNullArrayEnvio, error) {
	t := NewUnionNullArrayEnvio()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayEnvio) Schema() string {
	return "[\"null\",{\"items\":{\"fields\":[{\"name\":\"Id\",\"type\":\"string\"},{\"name\":\"TipoDeEnvio\",\"type\":\"string\"},{\"name\":\"ModoDeEntrega\",\"type\":\"string\"},{\"name\":\"NumeroDeSeguimiento\",\"type\":\"string\"},{\"name\":\"NumeroDeContrato\",\"type\":\"string\"},{\"name\":\"Estado\",\"type\":\"string\"},{\"name\":\"FechaCreacion\",\"type\":\"long\"},{\"default\":null,\"name\":\"Origen\",\"type\":[\"null\",{\"fields\":[{\"name\":\"Tipo\",\"type\":\"string\"},{\"name\":\"Calle\",\"type\":\"string\"},{\"default\":null,\"name\":\"Numero\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Piso\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Unidad\",\"type\":[\"null\",\"string\"]},{\"name\":\"Localidad\",\"type\":\"string\"},{\"name\":\"CodigoPostal\",\"type\":\"string\"},{\"name\":\"Provincia\",\"type\":\"string\"}],\"name\":\"Origen\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Destino\",\"type\":[\"null\",{\"fields\":[{\"name\":\"Tipo\",\"type\":\"string\"},{\"name\":\"Calle\",\"type\":\"string\"},{\"default\":null,\"name\":\"Numero\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Piso\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Unidad\",\"type\":[\"null\",\"string\"]},{\"name\":\"Localidad\",\"type\":\"string\"},{\"name\":\"CodigoPostal\",\"type\":\"string\"},{\"name\":\"Provincia\",\"type\":\"string\"}],\"name\":\"Destino\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Remitente\",\"type\":[\"null\",{\"fields\":[{\"name\":\"Nombre\",\"type\":\"string\"},{\"default\":null,\"name\":\"Apellido\",\"type\":[\"null\",\"string\"]},{\"name\":\"Email\",\"type\":\"string\"},{\"name\":\"Telefono\",\"type\":\"string\"},{\"name\":\"Dni\",\"type\":\"string\"}],\"name\":\"Remitente\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Destinatario\",\"type\":[\"null\",{\"fields\":[{\"name\":\"Nombre\",\"type\":\"string\"},{\"default\":null,\"name\":\"Apellido\",\"type\":[\"null\",\"string\"]},{\"name\":\"Email\",\"type\":\"string\"},{\"name\":\"Telefono\",\"type\":\"string\"},{\"name\":\"Dni\",\"type\":\"string\"}],\"name\":\"Destinatario\",\"type\":\"record\"}]}],\"name\":\"Envio\",\"namespace\":\"Andreani.CartaDocumentoBackend.Events.Common\",\"type\":\"record\"},\"type\":\"array\"}]"
}

func (_ *UnionNullArrayEnvio) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullArrayEnvio) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullArrayEnvio) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullArrayEnvio) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullArrayEnvio) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullArrayEnvio) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullArrayEnvio) SetLong(v int64) {

	r.UnionType = (UnionNullArrayEnvioTypeEnum)(v)
}

func (r *UnionNullArrayEnvio) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayEnvio = make([]Envio, 0)
		return &ArrayEnvioWrapper{Target: (&r.ArrayEnvio)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayEnvio) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionNullArrayEnvio) HintSize(i int)                   { panic("Unsupported operation") }
func (_ *UnionNullArrayEnvio) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionNullArrayEnvio) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullArrayEnvio) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionNullArrayEnvio) Finalize()                        {}

func (r *UnionNullArrayEnvio) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayEnvioTypeEnumArrayEnvio:
		return json.Marshal(map[string]interface{}{"array": r.ArrayEnvio})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayEnvio")
}

func (r *UnionNullArrayEnvio) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayEnvio)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayEnvio")
}
