// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     HrManual.avsc
 */
package SeguridadPatrimonialEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type HrManual struct {
	Hr string `json:"hr"`

	UnidadOperativaOrigen string `json:"unidadOperativaOrigen"`

	UnidadOperativaDestino string `json:"unidadOperativaDestino"`

	Transportista string `json:"transportista"`

	DominioPrincipal string `json:"dominioPrincipal"`

	DominiosSecundarios *UnionNullArrayString `json:"dominiosSecundarios"`

	Fecha string `json:"fecha"`

	TipoViaje string `json:"tipoViaje"`
}

const HrManualAvroCRC64Fingerprint = "\xf7k\x1c\xf1\xa3a\x95\xd8"

func NewHrManual() HrManual {
	r := HrManual{}
	r.DominiosSecundarios = nil
	return r
}

func DeserializeHrManual(r io.Reader) (HrManual, error) {
	t := NewHrManual()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeHrManualFromSchema(r io.Reader, schema string) (HrManual, error) {
	t := NewHrManual()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeHrManual(r HrManual, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Hr, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.UnidadOperativaOrigen, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.UnidadOperativaDestino, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Transportista, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.DominioPrincipal, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayString(r.DominiosSecundarios, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Fecha, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.TipoViaje, w)
	if err != nil {
		return err
	}
	return err
}

func (r HrManual) Serialize(w io.Writer) error {
	return writeHrManual(r, w)
}

func (r HrManual) Schema() string {
	return "{\"fields\":[{\"name\":\"hr\",\"type\":\"string\"},{\"name\":\"unidadOperativaOrigen\",\"type\":\"string\"},{\"name\":\"unidadOperativaDestino\",\"type\":\"string\"},{\"name\":\"transportista\",\"type\":\"string\"},{\"name\":\"dominioPrincipal\",\"type\":\"string\"},{\"default\":null,\"name\":\"dominiosSecundarios\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]},{\"name\":\"fecha\",\"type\":\"string\"},{\"name\":\"tipoViaje\",\"type\":\"string\"}],\"name\":\"Andreani.SeguridadPatrimonial.Events.Record.HrManual\",\"type\":\"record\"}"
}

func (r HrManual) SchemaName() string {
	return "Andreani.SeguridadPatrimonial.Events.Record.HrManual"
}

func (_ HrManual) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ HrManual) SetInt(v int32)       { panic("Unsupported operation") }
func (_ HrManual) SetLong(v int64)      { panic("Unsupported operation") }
func (_ HrManual) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ HrManual) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ HrManual) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ HrManual) SetString(v string)   { panic("Unsupported operation") }
func (_ HrManual) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *HrManual) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Hr}

		return w

	case 1:
		w := types.String{Target: &r.UnidadOperativaOrigen}

		return w

	case 2:
		w := types.String{Target: &r.UnidadOperativaDestino}

		return w

	case 3:
		w := types.String{Target: &r.Transportista}

		return w

	case 4:
		w := types.String{Target: &r.DominioPrincipal}

		return w

	case 5:
		r.DominiosSecundarios = NewUnionNullArrayString()

		return r.DominiosSecundarios
	case 6:
		w := types.String{Target: &r.Fecha}

		return w

	case 7:
		w := types.String{Target: &r.TipoViaje}

		return w

	}
	panic("Unknown field index")
}

func (r *HrManual) SetDefault(i int) {
	switch i {
	case 5:
		r.DominiosSecundarios = nil
		return
	}
	panic("Unknown field index")
}

func (r *HrManual) NullField(i int) {
	switch i {
	case 5:
		r.DominiosSecundarios = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ HrManual) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ HrManual) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ HrManual) HintSize(int)                     { panic("Unsupported operation") }
func (_ HrManual) Finalize()                        {}

func (_ HrManual) AvroCRC64Fingerprint() []byte {
	return []byte(HrManualAvroCRC64Fingerprint)
}

func (r HrManual) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["hr"], err = json.Marshal(r.Hr)
	if err != nil {
		return nil, err
	}
	output["unidadOperativaOrigen"], err = json.Marshal(r.UnidadOperativaOrigen)
	if err != nil {
		return nil, err
	}
	output["unidadOperativaDestino"], err = json.Marshal(r.UnidadOperativaDestino)
	if err != nil {
		return nil, err
	}
	output["transportista"], err = json.Marshal(r.Transportista)
	if err != nil {
		return nil, err
	}
	output["dominioPrincipal"], err = json.Marshal(r.DominioPrincipal)
	if err != nil {
		return nil, err
	}
	output["dominiosSecundarios"], err = json.Marshal(r.DominiosSecundarios)
	if err != nil {
		return nil, err
	}
	output["fecha"], err = json.Marshal(r.Fecha)
	if err != nil {
		return nil, err
	}
	output["tipoViaje"], err = json.Marshal(r.TipoViaje)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *HrManual) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["hr"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Hr); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for hr")
	}
	val = func() json.RawMessage {
		if v, ok := fields["unidadOperativaOrigen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UnidadOperativaOrigen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for unidadOperativaOrigen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["unidadOperativaDestino"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UnidadOperativaDestino); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for unidadOperativaDestino")
	}
	val = func() json.RawMessage {
		if v, ok := fields["transportista"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Transportista); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for transportista")
	}
	val = func() json.RawMessage {
		if v, ok := fields["dominioPrincipal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DominioPrincipal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for dominioPrincipal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["dominiosSecundarios"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DominiosSecundarios); err != nil {
			return err
		}
	} else {
		r.DominiosSecundarios = NewUnionNullArrayString()

		r.DominiosSecundarios = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["fecha"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Fecha); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fecha")
	}
	val = func() json.RawMessage {
		if v, ok := fields["tipoViaje"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoViaje); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for tipoViaje")
	}
	return nil
}
