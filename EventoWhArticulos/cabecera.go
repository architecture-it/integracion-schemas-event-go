// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EventoWhArticuloModificacion.avsc
 */
package EventoWhArticulosEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Cabecera struct {
	TipoRotacionABC *UnionNullString `json:"TipoRotacionABC"`

	TieneAcondi *UnionNullString `json:"TieneAcondi"`

	FinTemporada *UnionNullString `json:"FinTemporada"`

	InicioTemporada *UnionNullString `json:"InicioTemporada"`

	Coleccion *UnionNullString `json:"Coleccion"`

	Color *UnionNullString `json:"Color"`

	Atributos *UnionNullString `json:"Atributos"`

	PrecioAsociadoAlSKU *UnionNullFloat `json:"PrecioAsociadoAlSKU"`

	PaisOrigen *UnionNullString `json:"PaisOrigen"`

	Descripcion string `json:"Descripcion"`

	DigitosMinimosSeries *UnionNullString `json:"DigitosMinimosSeries"`

	DigitosMaximosSeries *UnionNullString `json:"DigitosMaximosSeries"`

	LimiteImpresion *UnionNullString `json:"LimiteImpresion"`

	ContadorGeneracionSeries *UnionNullString `json:"ContadorGeneracionSeries"`

	Rubro *UnionNullString `json:"Rubro"`

	Pavu *UnionNullString `json:"Pavu"`

	Psicotropico *UnionNullString `json:"Psicotropico"`

	Temperatura *UnionNullString `json:"Temperatura"`

	Serializado *UnionNullString `json:"Serializado"`

	TipoValidacionLote *UnionNullString `json:"TipoValidacionLote"`

	TipoDatamatrix *UnionNullString `json:"TipoDatamatrix"`

	TipoAgrupadora *UnionNullString `json:"TipoAgrupadora"`

	TipoEtiqueta *UnionNullString `json:"TipoEtiqueta"`

	PickeaTodos *UnionNullString `json:"PickeaTodos"`

	SerieDirigida *UnionNullString `json:"SerieDirigida"`

	GeneraSerie *UnionNullString `json:"GeneraSerie"`

	ControlaSeries *UnionNullString `json:"ControlaSeries"`

	InformaLevantamientoCuarentena *UnionNullString `json:"InformaLevantamientoCuarentena"`

	EventoLevantamientoCuarentena *UnionNullString `json:"EventoLevantamientoCuarentena"`

	GeneraAgrupadora *UnionNullString `json:"GeneraAgrupadora"`

	AltaPorAPI *UnionNullString `json:"AltaPorAPI"`

	PropietarioEcommerce *UnionNullString `json:"PropietarioEcommerce"`

	CodigoCliente *UnionNullString `json:"CodigoCliente"`

	SKUOriginalCliente *UnionNullString `json:"SKUOriginalCliente"`

	ReservadoFFC *UnionNullString `json:"ReservadoFFC"`

	Usuario *UnionNullString `json:"Usuario"`

	ControlSeriesRecepcion *UnionNullString `json:"ControlSeriesRecepcion"`

	Notas *UnionNullString `json:"Notas"`

	InstruccionesPreparacion *UnionNullString `json:"InstruccionesPreparacion"`

	ControlSeriesExpedicion *UnionNullString `json:"ControlSeriesExpedicion"`

	PackCodigoPaquete string `json:"PackCodigoPaquete"`

	PackDescripcionPaquete string `json:"PackDescripcionPaquete"`

	PackCantUnidadMaestra float32 `json:"PackCantUnidadMaestra"`

	PackCantPorSubcajas float32 `json:"PackCantPorSubcajas"`

	PackCantPorCajas float32 `json:"PackCantPorCajas"`

	PackCantPorPallet float32 `json:"PackCantPorPallet"`

	PackAlturaUnidad float32 `json:"PackAlturaUnidad"`

	PackLongitudUnidad float32 `json:"PackLongitudUnidad"`

	PackAnchoUnidad float32 `json:"PackAnchoUnidad"`

	PackPesoUnidad float32 `json:"PackPesoUnidad"`

	PackAlturaSubcaja float32 `json:"PackAlturaSubcaja"`

	PackLongSubcaja float32 `json:"PackLongSubcaja"`

	PackAnchuraSubcaja float32 `json:"PackAnchuraSubcaja"`

	PackAlturaPorCaja float32 `json:"PackAlturaPorCaja"`

	PackLongPorCaja float32 `json:"PackLongPorCaja"`

	PackAnchuraPorCaja float32 `json:"PackAnchuraPorCaja"`

	PackPesoCaja float32 `json:"PackPesoCaja"`

	PackNievelesPorPallet float32 `json:"PackNievelesPorPallet"`

	PackCajasPorNivel float32 `json:"PackCajasPorNivel"`

	PackAlturaPallet float32 `json:"PackAlturaPallet"`

	PackLongPallet float32 `json:"PackLongPallet"`

	PackAnchuraPallet float32 `json:"PackAnchuraPallet"`

	PrecioLinea *UnionNullFloat `json:"PrecioLinea"`

	UbicacionControlCalidad *UnionNullString `json:"UbicacionControlCalidad"`

	TipoRotacion *UnionNullString `json:"TipoRotacion"`

	Temporada *UnionNullString `json:"Temporada"`

	VidaUtilEnDias *UnionNullInt `json:"VidaUtilEnDias"`

	TipoValidacionVidaUtil *UnionNullString `json:"TipoValidacionVidaUtil"`

	IndicadorVidaUtil *UnionNullString `json:"IndicadorVidaUtil"`

	VidaUtilEntrada *UnionNullInt `json:"VidaUtilEntrada"`

	CodigoArticulo string `json:"CodigoArticulo"`

	Talle *UnionNullString `json:"Talle"`

	VolumenCentimetros float32 `json:"VolumenCentimetros"`

	PesoBrutoKg float32 `json:"PesoBrutoKg"`

	PesoNetoKg float32 `json:"PesoNetoKg"`

	CategoriaStock *UnionNullString `json:"CategoriaStock"`

	Estilo *UnionNullString `json:"Estilo"`

	Tema *UnionNullString `json:"Tema"`

	ConsumoAntesDeXDias *UnionNullInt `json:"ConsumoAntesDeXDias"`

	ConsumoVencimiento *UnionNullInt `json:"ConsumoVencimiento"`

	ValidaLoteWOS *UnionNullString `json:"ValidaLoteWOS"`

	ValidaSerieWOS *UnionNullString `json:"ValidaSerieWOS"`

	ArticulosAlternativos *UnionNullArrayArticulosAlternativos `json:"ArticulosAlternativos"`
}

const CabeceraAvroCRC64Fingerprint = "Dx\x0f#\xb4\x96G\x1f"

func NewCabecera() Cabecera {
	r := Cabecera{}
	r.ArticulosAlternativos = nil
	return r
}

func DeserializeCabecera(r io.Reader) (Cabecera, error) {
	t := NewCabecera()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCabeceraFromSchema(r io.Reader, schema string) (Cabecera, error) {
	t := NewCabecera()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCabecera(r Cabecera, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.TipoRotacionABC, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TieneAcondi, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.FinTemporada, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.InicioTemporada, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Coleccion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Color, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Atributos, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.PrecioAsociadoAlSKU, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PaisOrigen, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Descripcion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DigitosMinimosSeries, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DigitosMaximosSeries, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LimiteImpresion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ContadorGeneracionSeries, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Rubro, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Pavu, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Psicotropico, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Temperatura, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Serializado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoValidacionLote, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoDatamatrix, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoAgrupadora, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoEtiqueta, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PickeaTodos, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SerieDirigida, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.GeneraSerie, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ControlaSeries, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.InformaLevantamientoCuarentena, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EventoLevantamientoCuarentena, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.GeneraAgrupadora, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.AltaPorAPI, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PropietarioEcommerce, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoCliente, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SKUOriginalCliente, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ReservadoFFC, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Usuario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ControlSeriesRecepcion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Notas, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.InstruccionesPreparacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ControlSeriesExpedicion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.PackCodigoPaquete, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.PackDescripcionPaquete, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PackCantUnidadMaestra, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PackCantPorSubcajas, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PackCantPorCajas, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PackCantPorPallet, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PackAlturaUnidad, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PackLongitudUnidad, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PackAnchoUnidad, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PackPesoUnidad, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PackAlturaSubcaja, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PackLongSubcaja, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PackAnchuraSubcaja, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PackAlturaPorCaja, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PackLongPorCaja, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PackAnchuraPorCaja, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PackPesoCaja, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PackNievelesPorPallet, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PackCajasPorNivel, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PackAlturaPallet, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PackLongPallet, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PackAnchuraPallet, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.PrecioLinea, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.UbicacionControlCalidad, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoRotacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Temporada, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.VidaUtilEnDias, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoValidacionVidaUtil, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.IndicadorVidaUtil, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.VidaUtilEntrada, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodigoArticulo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Talle, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.VolumenCentimetros, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PesoBrutoKg, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PesoNetoKg, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CategoriaStock, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Estilo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Tema, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.ConsumoAntesDeXDias, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.ConsumoVencimiento, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ValidaLoteWOS, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ValidaSerieWOS, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayArticulosAlternativos(r.ArticulosAlternativos, w)
	if err != nil {
		return err
	}
	return err
}

func (r Cabecera) Serialize(w io.Writer) error {
	return writeCabecera(r, w)
}

func (r Cabecera) Schema() string {
	return "{\"fields\":[{\"name\":\"TipoRotacionABC\",\"type\":[\"null\",\"string\"]},{\"name\":\"TieneAcondi\",\"type\":[\"null\",\"string\"]},{\"name\":\"FinTemporada\",\"type\":[\"null\",\"string\"]},{\"name\":\"InicioTemporada\",\"type\":[\"null\",\"string\"]},{\"name\":\"Coleccion\",\"type\":[\"null\",\"string\"]},{\"name\":\"Color\",\"type\":[\"null\",\"string\"]},{\"name\":\"Atributos\",\"type\":[\"null\",\"string\"]},{\"name\":\"PrecioAsociadoAlSKU\",\"type\":[\"null\",\"float\"]},{\"name\":\"PaisOrigen\",\"type\":[\"null\",\"string\"]},{\"name\":\"Descripcion\",\"type\":\"string\"},{\"name\":\"DigitosMinimosSeries\",\"type\":[\"null\",\"string\"]},{\"name\":\"DigitosMaximosSeries\",\"type\":[\"null\",\"string\"]},{\"name\":\"LimiteImpresion\",\"type\":[\"null\",\"string\"]},{\"name\":\"ContadorGeneracionSeries\",\"type\":[\"null\",\"string\"]},{\"name\":\"Rubro\",\"type\":[\"null\",\"string\"]},{\"name\":\"Pavu\",\"type\":[\"null\",\"string\"]},{\"name\":\"Psicotropico\",\"type\":[\"null\",\"string\"]},{\"name\":\"Temperatura\",\"type\":[\"null\",\"string\"]},{\"name\":\"Serializado\",\"type\":[\"null\",\"string\"]},{\"name\":\"TipoValidacionLote\",\"type\":[\"null\",\"string\"]},{\"name\":\"TipoDatamatrix\",\"type\":[\"null\",\"string\"]},{\"name\":\"TipoAgrupadora\",\"type\":[\"null\",\"string\"]},{\"name\":\"TipoEtiqueta\",\"type\":[\"null\",\"string\"]},{\"name\":\"PickeaTodos\",\"type\":[\"null\",\"string\"]},{\"name\":\"SerieDirigida\",\"type\":[\"null\",\"string\"]},{\"name\":\"GeneraSerie\",\"type\":[\"null\",\"string\"]},{\"name\":\"ControlaSeries\",\"type\":[\"null\",\"string\"]},{\"name\":\"InformaLevantamientoCuarentena\",\"type\":[\"null\",\"string\"]},{\"name\":\"EventoLevantamientoCuarentena\",\"type\":[\"null\",\"string\"]},{\"name\":\"GeneraAgrupadora\",\"type\":[\"null\",\"string\"]},{\"name\":\"AltaPorAPI\",\"type\":[\"null\",\"string\"]},{\"name\":\"PropietarioEcommerce\",\"type\":[\"null\",\"string\"]},{\"name\":\"CodigoCliente\",\"type\":[\"null\",\"string\"]},{\"name\":\"SKUOriginalCliente\",\"type\":[\"null\",\"string\"]},{\"name\":\"ReservadoFFC\",\"type\":[\"null\",\"string\"]},{\"name\":\"Usuario\",\"type\":[\"null\",\"string\"]},{\"name\":\"ControlSeriesRecepcion\",\"type\":[\"null\",\"string\"]},{\"name\":\"Notas\",\"type\":[\"null\",\"string\"]},{\"name\":\"InstruccionesPreparacion\",\"type\":[\"null\",\"string\"]},{\"name\":\"ControlSeriesExpedicion\",\"type\":[\"null\",\"string\"]},{\"name\":\"PackCodigoPaquete\",\"type\":\"string\"},{\"name\":\"PackDescripcionPaquete\",\"type\":\"string\"},{\"name\":\"PackCantUnidadMaestra\",\"type\":\"float\"},{\"name\":\"PackCantPorSubcajas\",\"type\":\"float\"},{\"name\":\"PackCantPorCajas\",\"type\":\"float\"},{\"name\":\"PackCantPorPallet\",\"type\":\"float\"},{\"name\":\"PackAlturaUnidad\",\"type\":\"float\"},{\"name\":\"PackLongitudUnidad\",\"type\":\"float\"},{\"name\":\"PackAnchoUnidad\",\"type\":\"float\"},{\"name\":\"PackPesoUnidad\",\"type\":\"float\"},{\"name\":\"PackAlturaSubcaja\",\"type\":\"float\"},{\"name\":\"PackLongSubcaja\",\"type\":\"float\"},{\"name\":\"PackAnchuraSubcaja\",\"type\":\"float\"},{\"name\":\"PackAlturaPorCaja\",\"type\":\"float\"},{\"name\":\"PackLongPorCaja\",\"type\":\"float\"},{\"name\":\"PackAnchuraPorCaja\",\"type\":\"float\"},{\"name\":\"PackPesoCaja\",\"type\":\"float\"},{\"name\":\"PackNievelesPorPallet\",\"type\":\"float\"},{\"name\":\"PackCajasPorNivel\",\"type\":\"float\"},{\"name\":\"PackAlturaPallet\",\"type\":\"float\"},{\"name\":\"PackLongPallet\",\"type\":\"float\"},{\"name\":\"PackAnchuraPallet\",\"type\":\"float\"},{\"name\":\"PrecioLinea\",\"type\":[\"null\",\"float\"]},{\"name\":\"UbicacionControlCalidad\",\"type\":[\"null\",\"string\"]},{\"name\":\"TipoRotacion\",\"type\":[\"null\",\"string\"]},{\"name\":\"Temporada\",\"type\":[\"null\",\"string\"]},{\"name\":\"VidaUtilEnDias\",\"type\":[\"null\",\"int\"]},{\"name\":\"TipoValidacionVidaUtil\",\"type\":[\"null\",\"string\"]},{\"name\":\"IndicadorVidaUtil\",\"type\":[\"null\",\"string\"]},{\"name\":\"VidaUtilEntrada\",\"type\":[\"null\",\"int\"]},{\"name\":\"CodigoArticulo\",\"type\":\"string\"},{\"name\":\"Talle\",\"type\":[\"null\",\"string\"]},{\"name\":\"VolumenCentimetros\",\"type\":\"float\"},{\"name\":\"PesoBrutoKg\",\"type\":\"float\"},{\"name\":\"PesoNetoKg\",\"type\":\"float\"},{\"name\":\"CategoriaStock\",\"type\":[\"null\",\"string\"]},{\"name\":\"Estilo\",\"type\":[\"null\",\"string\"]},{\"name\":\"Tema\",\"type\":[\"null\",\"string\"]},{\"name\":\"ConsumoAntesDeXDias\",\"type\":[\"null\",\"int\"]},{\"name\":\"ConsumoVencimiento\",\"type\":[\"null\",\"int\"]},{\"name\":\"ValidaLoteWOS\",\"type\":[\"null\",\"string\"]},{\"name\":\"ValidaSerieWOS\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ArticulosAlternativos\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"name\":\"ArticuloAlternativo\",\"type\":\"string\"},{\"name\":\"Tipo\",\"type\":\"string\"}],\"name\":\"ArticulosAlternativos\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"Andreani.EventoWhArticulos.Events.EventoArticuloModificacion.Cabecera\",\"type\":\"record\"}"
}

func (r Cabecera) SchemaName() string {
	return "Andreani.EventoWhArticulos.Events.EventoArticuloModificacion.Cabecera"
}

func (_ Cabecera) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Cabecera) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Cabecera) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Cabecera) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Cabecera) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Cabecera) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Cabecera) SetString(v string)   { panic("Unsupported operation") }
func (_ Cabecera) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Cabecera) Get(i int) types.Field {
	switch i {
	case 0:
		r.TipoRotacionABC = NewUnionNullString()

		return r.TipoRotacionABC
	case 1:
		r.TieneAcondi = NewUnionNullString()

		return r.TieneAcondi
	case 2:
		r.FinTemporada = NewUnionNullString()

		return r.FinTemporada
	case 3:
		r.InicioTemporada = NewUnionNullString()

		return r.InicioTemporada
	case 4:
		r.Coleccion = NewUnionNullString()

		return r.Coleccion
	case 5:
		r.Color = NewUnionNullString()

		return r.Color
	case 6:
		r.Atributos = NewUnionNullString()

		return r.Atributos
	case 7:
		r.PrecioAsociadoAlSKU = NewUnionNullFloat()

		return r.PrecioAsociadoAlSKU
	case 8:
		r.PaisOrigen = NewUnionNullString()

		return r.PaisOrigen
	case 9:
		w := types.String{Target: &r.Descripcion}

		return w

	case 10:
		r.DigitosMinimosSeries = NewUnionNullString()

		return r.DigitosMinimosSeries
	case 11:
		r.DigitosMaximosSeries = NewUnionNullString()

		return r.DigitosMaximosSeries
	case 12:
		r.LimiteImpresion = NewUnionNullString()

		return r.LimiteImpresion
	case 13:
		r.ContadorGeneracionSeries = NewUnionNullString()

		return r.ContadorGeneracionSeries
	case 14:
		r.Rubro = NewUnionNullString()

		return r.Rubro
	case 15:
		r.Pavu = NewUnionNullString()

		return r.Pavu
	case 16:
		r.Psicotropico = NewUnionNullString()

		return r.Psicotropico
	case 17:
		r.Temperatura = NewUnionNullString()

		return r.Temperatura
	case 18:
		r.Serializado = NewUnionNullString()

		return r.Serializado
	case 19:
		r.TipoValidacionLote = NewUnionNullString()

		return r.TipoValidacionLote
	case 20:
		r.TipoDatamatrix = NewUnionNullString()

		return r.TipoDatamatrix
	case 21:
		r.TipoAgrupadora = NewUnionNullString()

		return r.TipoAgrupadora
	case 22:
		r.TipoEtiqueta = NewUnionNullString()

		return r.TipoEtiqueta
	case 23:
		r.PickeaTodos = NewUnionNullString()

		return r.PickeaTodos
	case 24:
		r.SerieDirigida = NewUnionNullString()

		return r.SerieDirigida
	case 25:
		r.GeneraSerie = NewUnionNullString()

		return r.GeneraSerie
	case 26:
		r.ControlaSeries = NewUnionNullString()

		return r.ControlaSeries
	case 27:
		r.InformaLevantamientoCuarentena = NewUnionNullString()

		return r.InformaLevantamientoCuarentena
	case 28:
		r.EventoLevantamientoCuarentena = NewUnionNullString()

		return r.EventoLevantamientoCuarentena
	case 29:
		r.GeneraAgrupadora = NewUnionNullString()

		return r.GeneraAgrupadora
	case 30:
		r.AltaPorAPI = NewUnionNullString()

		return r.AltaPorAPI
	case 31:
		r.PropietarioEcommerce = NewUnionNullString()

		return r.PropietarioEcommerce
	case 32:
		r.CodigoCliente = NewUnionNullString()

		return r.CodigoCliente
	case 33:
		r.SKUOriginalCliente = NewUnionNullString()

		return r.SKUOriginalCliente
	case 34:
		r.ReservadoFFC = NewUnionNullString()

		return r.ReservadoFFC
	case 35:
		r.Usuario = NewUnionNullString()

		return r.Usuario
	case 36:
		r.ControlSeriesRecepcion = NewUnionNullString()

		return r.ControlSeriesRecepcion
	case 37:
		r.Notas = NewUnionNullString()

		return r.Notas
	case 38:
		r.InstruccionesPreparacion = NewUnionNullString()

		return r.InstruccionesPreparacion
	case 39:
		r.ControlSeriesExpedicion = NewUnionNullString()

		return r.ControlSeriesExpedicion
	case 40:
		w := types.String{Target: &r.PackCodigoPaquete}

		return w

	case 41:
		w := types.String{Target: &r.PackDescripcionPaquete}

		return w

	case 42:
		w := types.Float{Target: &r.PackCantUnidadMaestra}

		return w

	case 43:
		w := types.Float{Target: &r.PackCantPorSubcajas}

		return w

	case 44:
		w := types.Float{Target: &r.PackCantPorCajas}

		return w

	case 45:
		w := types.Float{Target: &r.PackCantPorPallet}

		return w

	case 46:
		w := types.Float{Target: &r.PackAlturaUnidad}

		return w

	case 47:
		w := types.Float{Target: &r.PackLongitudUnidad}

		return w

	case 48:
		w := types.Float{Target: &r.PackAnchoUnidad}

		return w

	case 49:
		w := types.Float{Target: &r.PackPesoUnidad}

		return w

	case 50:
		w := types.Float{Target: &r.PackAlturaSubcaja}

		return w

	case 51:
		w := types.Float{Target: &r.PackLongSubcaja}

		return w

	case 52:
		w := types.Float{Target: &r.PackAnchuraSubcaja}

		return w

	case 53:
		w := types.Float{Target: &r.PackAlturaPorCaja}

		return w

	case 54:
		w := types.Float{Target: &r.PackLongPorCaja}

		return w

	case 55:
		w := types.Float{Target: &r.PackAnchuraPorCaja}

		return w

	case 56:
		w := types.Float{Target: &r.PackPesoCaja}

		return w

	case 57:
		w := types.Float{Target: &r.PackNievelesPorPallet}

		return w

	case 58:
		w := types.Float{Target: &r.PackCajasPorNivel}

		return w

	case 59:
		w := types.Float{Target: &r.PackAlturaPallet}

		return w

	case 60:
		w := types.Float{Target: &r.PackLongPallet}

		return w

	case 61:
		w := types.Float{Target: &r.PackAnchuraPallet}

		return w

	case 62:
		r.PrecioLinea = NewUnionNullFloat()

		return r.PrecioLinea
	case 63:
		r.UbicacionControlCalidad = NewUnionNullString()

		return r.UbicacionControlCalidad
	case 64:
		r.TipoRotacion = NewUnionNullString()

		return r.TipoRotacion
	case 65:
		r.Temporada = NewUnionNullString()

		return r.Temporada
	case 66:
		r.VidaUtilEnDias = NewUnionNullInt()

		return r.VidaUtilEnDias
	case 67:
		r.TipoValidacionVidaUtil = NewUnionNullString()

		return r.TipoValidacionVidaUtil
	case 68:
		r.IndicadorVidaUtil = NewUnionNullString()

		return r.IndicadorVidaUtil
	case 69:
		r.VidaUtilEntrada = NewUnionNullInt()

		return r.VidaUtilEntrada
	case 70:
		w := types.String{Target: &r.CodigoArticulo}

		return w

	case 71:
		r.Talle = NewUnionNullString()

		return r.Talle
	case 72:
		w := types.Float{Target: &r.VolumenCentimetros}

		return w

	case 73:
		w := types.Float{Target: &r.PesoBrutoKg}

		return w

	case 74:
		w := types.Float{Target: &r.PesoNetoKg}

		return w

	case 75:
		r.CategoriaStock = NewUnionNullString()

		return r.CategoriaStock
	case 76:
		r.Estilo = NewUnionNullString()

		return r.Estilo
	case 77:
		r.Tema = NewUnionNullString()

		return r.Tema
	case 78:
		r.ConsumoAntesDeXDias = NewUnionNullInt()

		return r.ConsumoAntesDeXDias
	case 79:
		r.ConsumoVencimiento = NewUnionNullInt()

		return r.ConsumoVencimiento
	case 80:
		r.ValidaLoteWOS = NewUnionNullString()

		return r.ValidaLoteWOS
	case 81:
		r.ValidaSerieWOS = NewUnionNullString()

		return r.ValidaSerieWOS
	case 82:
		r.ArticulosAlternativos = NewUnionNullArrayArticulosAlternativos()

		return r.ArticulosAlternativos
	}
	panic("Unknown field index")
}

func (r *Cabecera) SetDefault(i int) {
	switch i {
	case 82:
		r.ArticulosAlternativos = nil
		return
	}
	panic("Unknown field index")
}

func (r *Cabecera) NullField(i int) {
	switch i {
	case 0:
		r.TipoRotacionABC = nil
		return
	case 1:
		r.TieneAcondi = nil
		return
	case 2:
		r.FinTemporada = nil
		return
	case 3:
		r.InicioTemporada = nil
		return
	case 4:
		r.Coleccion = nil
		return
	case 5:
		r.Color = nil
		return
	case 6:
		r.Atributos = nil
		return
	case 7:
		r.PrecioAsociadoAlSKU = nil
		return
	case 8:
		r.PaisOrigen = nil
		return
	case 10:
		r.DigitosMinimosSeries = nil
		return
	case 11:
		r.DigitosMaximosSeries = nil
		return
	case 12:
		r.LimiteImpresion = nil
		return
	case 13:
		r.ContadorGeneracionSeries = nil
		return
	case 14:
		r.Rubro = nil
		return
	case 15:
		r.Pavu = nil
		return
	case 16:
		r.Psicotropico = nil
		return
	case 17:
		r.Temperatura = nil
		return
	case 18:
		r.Serializado = nil
		return
	case 19:
		r.TipoValidacionLote = nil
		return
	case 20:
		r.TipoDatamatrix = nil
		return
	case 21:
		r.TipoAgrupadora = nil
		return
	case 22:
		r.TipoEtiqueta = nil
		return
	case 23:
		r.PickeaTodos = nil
		return
	case 24:
		r.SerieDirigida = nil
		return
	case 25:
		r.GeneraSerie = nil
		return
	case 26:
		r.ControlaSeries = nil
		return
	case 27:
		r.InformaLevantamientoCuarentena = nil
		return
	case 28:
		r.EventoLevantamientoCuarentena = nil
		return
	case 29:
		r.GeneraAgrupadora = nil
		return
	case 30:
		r.AltaPorAPI = nil
		return
	case 31:
		r.PropietarioEcommerce = nil
		return
	case 32:
		r.CodigoCliente = nil
		return
	case 33:
		r.SKUOriginalCliente = nil
		return
	case 34:
		r.ReservadoFFC = nil
		return
	case 35:
		r.Usuario = nil
		return
	case 36:
		r.ControlSeriesRecepcion = nil
		return
	case 37:
		r.Notas = nil
		return
	case 38:
		r.InstruccionesPreparacion = nil
		return
	case 39:
		r.ControlSeriesExpedicion = nil
		return
	case 62:
		r.PrecioLinea = nil
		return
	case 63:
		r.UbicacionControlCalidad = nil
		return
	case 64:
		r.TipoRotacion = nil
		return
	case 65:
		r.Temporada = nil
		return
	case 66:
		r.VidaUtilEnDias = nil
		return
	case 67:
		r.TipoValidacionVidaUtil = nil
		return
	case 68:
		r.IndicadorVidaUtil = nil
		return
	case 69:
		r.VidaUtilEntrada = nil
		return
	case 71:
		r.Talle = nil
		return
	case 75:
		r.CategoriaStock = nil
		return
	case 76:
		r.Estilo = nil
		return
	case 77:
		r.Tema = nil
		return
	case 78:
		r.ConsumoAntesDeXDias = nil
		return
	case 79:
		r.ConsumoVencimiento = nil
		return
	case 80:
		r.ValidaLoteWOS = nil
		return
	case 81:
		r.ValidaSerieWOS = nil
		return
	case 82:
		r.ArticulosAlternativos = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Cabecera) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Cabecera) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Cabecera) HintSize(int)                     { panic("Unsupported operation") }
func (_ Cabecera) Finalize()                        {}

func (_ Cabecera) AvroCRC64Fingerprint() []byte {
	return []byte(CabeceraAvroCRC64Fingerprint)
}

func (r Cabecera) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["TipoRotacionABC"], err = json.Marshal(r.TipoRotacionABC)
	if err != nil {
		return nil, err
	}
	output["TieneAcondi"], err = json.Marshal(r.TieneAcondi)
	if err != nil {
		return nil, err
	}
	output["FinTemporada"], err = json.Marshal(r.FinTemporada)
	if err != nil {
		return nil, err
	}
	output["InicioTemporada"], err = json.Marshal(r.InicioTemporada)
	if err != nil {
		return nil, err
	}
	output["Coleccion"], err = json.Marshal(r.Coleccion)
	if err != nil {
		return nil, err
	}
	output["Color"], err = json.Marshal(r.Color)
	if err != nil {
		return nil, err
	}
	output["Atributos"], err = json.Marshal(r.Atributos)
	if err != nil {
		return nil, err
	}
	output["PrecioAsociadoAlSKU"], err = json.Marshal(r.PrecioAsociadoAlSKU)
	if err != nil {
		return nil, err
	}
	output["PaisOrigen"], err = json.Marshal(r.PaisOrigen)
	if err != nil {
		return nil, err
	}
	output["Descripcion"], err = json.Marshal(r.Descripcion)
	if err != nil {
		return nil, err
	}
	output["DigitosMinimosSeries"], err = json.Marshal(r.DigitosMinimosSeries)
	if err != nil {
		return nil, err
	}
	output["DigitosMaximosSeries"], err = json.Marshal(r.DigitosMaximosSeries)
	if err != nil {
		return nil, err
	}
	output["LimiteImpresion"], err = json.Marshal(r.LimiteImpresion)
	if err != nil {
		return nil, err
	}
	output["ContadorGeneracionSeries"], err = json.Marshal(r.ContadorGeneracionSeries)
	if err != nil {
		return nil, err
	}
	output["Rubro"], err = json.Marshal(r.Rubro)
	if err != nil {
		return nil, err
	}
	output["Pavu"], err = json.Marshal(r.Pavu)
	if err != nil {
		return nil, err
	}
	output["Psicotropico"], err = json.Marshal(r.Psicotropico)
	if err != nil {
		return nil, err
	}
	output["Temperatura"], err = json.Marshal(r.Temperatura)
	if err != nil {
		return nil, err
	}
	output["Serializado"], err = json.Marshal(r.Serializado)
	if err != nil {
		return nil, err
	}
	output["TipoValidacionLote"], err = json.Marshal(r.TipoValidacionLote)
	if err != nil {
		return nil, err
	}
	output["TipoDatamatrix"], err = json.Marshal(r.TipoDatamatrix)
	if err != nil {
		return nil, err
	}
	output["TipoAgrupadora"], err = json.Marshal(r.TipoAgrupadora)
	if err != nil {
		return nil, err
	}
	output["TipoEtiqueta"], err = json.Marshal(r.TipoEtiqueta)
	if err != nil {
		return nil, err
	}
	output["PickeaTodos"], err = json.Marshal(r.PickeaTodos)
	if err != nil {
		return nil, err
	}
	output["SerieDirigida"], err = json.Marshal(r.SerieDirigida)
	if err != nil {
		return nil, err
	}
	output["GeneraSerie"], err = json.Marshal(r.GeneraSerie)
	if err != nil {
		return nil, err
	}
	output["ControlaSeries"], err = json.Marshal(r.ControlaSeries)
	if err != nil {
		return nil, err
	}
	output["InformaLevantamientoCuarentena"], err = json.Marshal(r.InformaLevantamientoCuarentena)
	if err != nil {
		return nil, err
	}
	output["EventoLevantamientoCuarentena"], err = json.Marshal(r.EventoLevantamientoCuarentena)
	if err != nil {
		return nil, err
	}
	output["GeneraAgrupadora"], err = json.Marshal(r.GeneraAgrupadora)
	if err != nil {
		return nil, err
	}
	output["AltaPorAPI"], err = json.Marshal(r.AltaPorAPI)
	if err != nil {
		return nil, err
	}
	output["PropietarioEcommerce"], err = json.Marshal(r.PropietarioEcommerce)
	if err != nil {
		return nil, err
	}
	output["CodigoCliente"], err = json.Marshal(r.CodigoCliente)
	if err != nil {
		return nil, err
	}
	output["SKUOriginalCliente"], err = json.Marshal(r.SKUOriginalCliente)
	if err != nil {
		return nil, err
	}
	output["ReservadoFFC"], err = json.Marshal(r.ReservadoFFC)
	if err != nil {
		return nil, err
	}
	output["Usuario"], err = json.Marshal(r.Usuario)
	if err != nil {
		return nil, err
	}
	output["ControlSeriesRecepcion"], err = json.Marshal(r.ControlSeriesRecepcion)
	if err != nil {
		return nil, err
	}
	output["Notas"], err = json.Marshal(r.Notas)
	if err != nil {
		return nil, err
	}
	output["InstruccionesPreparacion"], err = json.Marshal(r.InstruccionesPreparacion)
	if err != nil {
		return nil, err
	}
	output["ControlSeriesExpedicion"], err = json.Marshal(r.ControlSeriesExpedicion)
	if err != nil {
		return nil, err
	}
	output["PackCodigoPaquete"], err = json.Marshal(r.PackCodigoPaquete)
	if err != nil {
		return nil, err
	}
	output["PackDescripcionPaquete"], err = json.Marshal(r.PackDescripcionPaquete)
	if err != nil {
		return nil, err
	}
	output["PackCantUnidadMaestra"], err = json.Marshal(r.PackCantUnidadMaestra)
	if err != nil {
		return nil, err
	}
	output["PackCantPorSubcajas"], err = json.Marshal(r.PackCantPorSubcajas)
	if err != nil {
		return nil, err
	}
	output["PackCantPorCajas"], err = json.Marshal(r.PackCantPorCajas)
	if err != nil {
		return nil, err
	}
	output["PackCantPorPallet"], err = json.Marshal(r.PackCantPorPallet)
	if err != nil {
		return nil, err
	}
	output["PackAlturaUnidad"], err = json.Marshal(r.PackAlturaUnidad)
	if err != nil {
		return nil, err
	}
	output["PackLongitudUnidad"], err = json.Marshal(r.PackLongitudUnidad)
	if err != nil {
		return nil, err
	}
	output["PackAnchoUnidad"], err = json.Marshal(r.PackAnchoUnidad)
	if err != nil {
		return nil, err
	}
	output["PackPesoUnidad"], err = json.Marshal(r.PackPesoUnidad)
	if err != nil {
		return nil, err
	}
	output["PackAlturaSubcaja"], err = json.Marshal(r.PackAlturaSubcaja)
	if err != nil {
		return nil, err
	}
	output["PackLongSubcaja"], err = json.Marshal(r.PackLongSubcaja)
	if err != nil {
		return nil, err
	}
	output["PackAnchuraSubcaja"], err = json.Marshal(r.PackAnchuraSubcaja)
	if err != nil {
		return nil, err
	}
	output["PackAlturaPorCaja"], err = json.Marshal(r.PackAlturaPorCaja)
	if err != nil {
		return nil, err
	}
	output["PackLongPorCaja"], err = json.Marshal(r.PackLongPorCaja)
	if err != nil {
		return nil, err
	}
	output["PackAnchuraPorCaja"], err = json.Marshal(r.PackAnchuraPorCaja)
	if err != nil {
		return nil, err
	}
	output["PackPesoCaja"], err = json.Marshal(r.PackPesoCaja)
	if err != nil {
		return nil, err
	}
	output["PackNievelesPorPallet"], err = json.Marshal(r.PackNievelesPorPallet)
	if err != nil {
		return nil, err
	}
	output["PackCajasPorNivel"], err = json.Marshal(r.PackCajasPorNivel)
	if err != nil {
		return nil, err
	}
	output["PackAlturaPallet"], err = json.Marshal(r.PackAlturaPallet)
	if err != nil {
		return nil, err
	}
	output["PackLongPallet"], err = json.Marshal(r.PackLongPallet)
	if err != nil {
		return nil, err
	}
	output["PackAnchuraPallet"], err = json.Marshal(r.PackAnchuraPallet)
	if err != nil {
		return nil, err
	}
	output["PrecioLinea"], err = json.Marshal(r.PrecioLinea)
	if err != nil {
		return nil, err
	}
	output["UbicacionControlCalidad"], err = json.Marshal(r.UbicacionControlCalidad)
	if err != nil {
		return nil, err
	}
	output["TipoRotacion"], err = json.Marshal(r.TipoRotacion)
	if err != nil {
		return nil, err
	}
	output["Temporada"], err = json.Marshal(r.Temporada)
	if err != nil {
		return nil, err
	}
	output["VidaUtilEnDias"], err = json.Marshal(r.VidaUtilEnDias)
	if err != nil {
		return nil, err
	}
	output["TipoValidacionVidaUtil"], err = json.Marshal(r.TipoValidacionVidaUtil)
	if err != nil {
		return nil, err
	}
	output["IndicadorVidaUtil"], err = json.Marshal(r.IndicadorVidaUtil)
	if err != nil {
		return nil, err
	}
	output["VidaUtilEntrada"], err = json.Marshal(r.VidaUtilEntrada)
	if err != nil {
		return nil, err
	}
	output["CodigoArticulo"], err = json.Marshal(r.CodigoArticulo)
	if err != nil {
		return nil, err
	}
	output["Talle"], err = json.Marshal(r.Talle)
	if err != nil {
		return nil, err
	}
	output["VolumenCentimetros"], err = json.Marshal(r.VolumenCentimetros)
	if err != nil {
		return nil, err
	}
	output["PesoBrutoKg"], err = json.Marshal(r.PesoBrutoKg)
	if err != nil {
		return nil, err
	}
	output["PesoNetoKg"], err = json.Marshal(r.PesoNetoKg)
	if err != nil {
		return nil, err
	}
	output["CategoriaStock"], err = json.Marshal(r.CategoriaStock)
	if err != nil {
		return nil, err
	}
	output["Estilo"], err = json.Marshal(r.Estilo)
	if err != nil {
		return nil, err
	}
	output["Tema"], err = json.Marshal(r.Tema)
	if err != nil {
		return nil, err
	}
	output["ConsumoAntesDeXDias"], err = json.Marshal(r.ConsumoAntesDeXDias)
	if err != nil {
		return nil, err
	}
	output["ConsumoVencimiento"], err = json.Marshal(r.ConsumoVencimiento)
	if err != nil {
		return nil, err
	}
	output["ValidaLoteWOS"], err = json.Marshal(r.ValidaLoteWOS)
	if err != nil {
		return nil, err
	}
	output["ValidaSerieWOS"], err = json.Marshal(r.ValidaSerieWOS)
	if err != nil {
		return nil, err
	}
	output["ArticulosAlternativos"], err = json.Marshal(r.ArticulosAlternativos)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Cabecera) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["TipoRotacionABC"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoRotacionABC); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoRotacionABC")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TieneAcondi"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TieneAcondi); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TieneAcondi")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FinTemporada"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FinTemporada); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FinTemporada")
	}
	val = func() json.RawMessage {
		if v, ok := fields["InicioTemporada"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InicioTemporada); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for InicioTemporada")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Coleccion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Coleccion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Coleccion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Color"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Color); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Color")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Atributos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Atributos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Atributos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PrecioAsociadoAlSKU"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PrecioAsociadoAlSKU); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PrecioAsociadoAlSKU")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PaisOrigen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PaisOrigen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PaisOrigen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Descripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Descripcion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Descripcion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DigitosMinimosSeries"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DigitosMinimosSeries); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DigitosMinimosSeries")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DigitosMaximosSeries"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DigitosMaximosSeries); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DigitosMaximosSeries")
	}
	val = func() json.RawMessage {
		if v, ok := fields["LimiteImpresion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LimiteImpresion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for LimiteImpresion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ContadorGeneracionSeries"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ContadorGeneracionSeries); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ContadorGeneracionSeries")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Rubro"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Rubro); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Rubro")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Pavu"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Pavu); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Pavu")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Psicotropico"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Psicotropico); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Psicotropico")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Temperatura"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Temperatura); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Temperatura")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Serializado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Serializado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Serializado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoValidacionLote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoValidacionLote); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoValidacionLote")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoDatamatrix"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoDatamatrix); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoDatamatrix")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoAgrupadora"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoAgrupadora); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoAgrupadora")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoEtiqueta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoEtiqueta); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoEtiqueta")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PickeaTodos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PickeaTodos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PickeaTodos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["SerieDirigida"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SerieDirigida); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for SerieDirigida")
	}
	val = func() json.RawMessage {
		if v, ok := fields["GeneraSerie"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.GeneraSerie); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for GeneraSerie")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ControlaSeries"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ControlaSeries); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ControlaSeries")
	}
	val = func() json.RawMessage {
		if v, ok := fields["InformaLevantamientoCuarentena"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InformaLevantamientoCuarentena); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for InformaLevantamientoCuarentena")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EventoLevantamientoCuarentena"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EventoLevantamientoCuarentena); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EventoLevantamientoCuarentena")
	}
	val = func() json.RawMessage {
		if v, ok := fields["GeneraAgrupadora"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.GeneraAgrupadora); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for GeneraAgrupadora")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AltaPorAPI"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AltaPorAPI); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AltaPorAPI")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PropietarioEcommerce"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PropietarioEcommerce); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PropietarioEcommerce")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoCliente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoCliente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoCliente")
	}
	val = func() json.RawMessage {
		if v, ok := fields["SKUOriginalCliente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SKUOriginalCliente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for SKUOriginalCliente")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ReservadoFFC"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ReservadoFFC); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ReservadoFFC")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Usuario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Usuario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Usuario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ControlSeriesRecepcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ControlSeriesRecepcion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ControlSeriesRecepcion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Notas"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Notas); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Notas")
	}
	val = func() json.RawMessage {
		if v, ok := fields["InstruccionesPreparacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InstruccionesPreparacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for InstruccionesPreparacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ControlSeriesExpedicion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ControlSeriesExpedicion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ControlSeriesExpedicion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackCodigoPaquete"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackCodigoPaquete); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackCodigoPaquete")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackDescripcionPaquete"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackDescripcionPaquete); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackDescripcionPaquete")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackCantUnidadMaestra"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackCantUnidadMaestra); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackCantUnidadMaestra")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackCantPorSubcajas"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackCantPorSubcajas); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackCantPorSubcajas")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackCantPorCajas"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackCantPorCajas); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackCantPorCajas")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackCantPorPallet"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackCantPorPallet); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackCantPorPallet")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackAlturaUnidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackAlturaUnidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackAlturaUnidad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackLongitudUnidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackLongitudUnidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackLongitudUnidad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackAnchoUnidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackAnchoUnidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackAnchoUnidad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackPesoUnidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackPesoUnidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackPesoUnidad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackAlturaSubcaja"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackAlturaSubcaja); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackAlturaSubcaja")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackLongSubcaja"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackLongSubcaja); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackLongSubcaja")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackAnchuraSubcaja"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackAnchuraSubcaja); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackAnchuraSubcaja")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackAlturaPorCaja"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackAlturaPorCaja); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackAlturaPorCaja")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackLongPorCaja"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackLongPorCaja); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackLongPorCaja")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackAnchuraPorCaja"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackAnchuraPorCaja); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackAnchuraPorCaja")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackPesoCaja"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackPesoCaja); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackPesoCaja")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackNievelesPorPallet"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackNievelesPorPallet); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackNievelesPorPallet")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackCajasPorNivel"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackCajasPorNivel); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackCajasPorNivel")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackAlturaPallet"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackAlturaPallet); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackAlturaPallet")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackLongPallet"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackLongPallet); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackLongPallet")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PackAnchuraPallet"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PackAnchuraPallet); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PackAnchuraPallet")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PrecioLinea"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PrecioLinea); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PrecioLinea")
	}
	val = func() json.RawMessage {
		if v, ok := fields["UbicacionControlCalidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UbicacionControlCalidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for UbicacionControlCalidad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoRotacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoRotacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoRotacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Temporada"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Temporada); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Temporada")
	}
	val = func() json.RawMessage {
		if v, ok := fields["VidaUtilEnDias"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VidaUtilEnDias); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for VidaUtilEnDias")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoValidacionVidaUtil"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoValidacionVidaUtil); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoValidacionVidaUtil")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IndicadorVidaUtil"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IndicadorVidaUtil); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IndicadorVidaUtil")
	}
	val = func() json.RawMessage {
		if v, ok := fields["VidaUtilEntrada"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VidaUtilEntrada); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for VidaUtilEntrada")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoArticulo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoArticulo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoArticulo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Talle"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Talle); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Talle")
	}
	val = func() json.RawMessage {
		if v, ok := fields["VolumenCentimetros"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VolumenCentimetros); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for VolumenCentimetros")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PesoBrutoKg"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoBrutoKg); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PesoBrutoKg")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PesoNetoKg"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoNetoKg); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PesoNetoKg")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CategoriaStock"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CategoriaStock); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CategoriaStock")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Estilo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estilo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Estilo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Tema"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Tema); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Tema")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ConsumoAntesDeXDias"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ConsumoAntesDeXDias); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ConsumoAntesDeXDias")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ConsumoVencimiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ConsumoVencimiento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ConsumoVencimiento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValidaLoteWOS"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValidaLoteWOS); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ValidaLoteWOS")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValidaSerieWOS"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValidaSerieWOS); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ValidaSerieWOS")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ArticulosAlternativos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ArticulosAlternativos); err != nil {
			return err
		}
	} else {
		r.ArticulosAlternativos = NewUnionNullArrayArticulosAlternativos()

		r.ArticulosAlternativos = nil
	}
	return nil
}
