// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     NotificacionWh.avsc
 */
package NotificacionesWhEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type NotificacionWh struct {
	Notificacion Notificacion `json:"Notificacion"`
}

const NotificacionWhAvroCRC64Fingerprint = "EìŽœ>N\xa1W"

func NewNotificacionWh() NotificacionWh {
	r := NotificacionWh{}
	r.Notificacion = NewNotificacion()

	return r
}

func DeserializeNotificacionWh(r io.Reader) (NotificacionWh, error) {
	t := NewNotificacionWh()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeNotificacionWhFromSchema(r io.Reader, schema string) (NotificacionWh, error) {
	t := NewNotificacionWh()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeNotificacionWh(r NotificacionWh, w io.Writer) error {
	var err error
	err = writeNotificacion(r.Notificacion, w)
	if err != nil {
		return err
	}
	return err
}

func (r NotificacionWh) Serialize(w io.Writer) error {
	return writeNotificacionWh(r, w)
}

func (r NotificacionWh) Schema() string {
	return "{\"fields\":[{\"name\":\"Notificacion\",\"type\":{\"fields\":[{\"name\":\"Destinatarios\",\"type\":\"string\"},{\"name\":\"Copia\",\"type\":[\"null\",\"string\"]},{\"name\":\"CopiaOculta\",\"type\":[\"null\",\"string\"]},{\"name\":\"Asunto\",\"type\":\"string\"},{\"name\":\"Encabezado\",\"type\":[\"null\",\"string\"]},{\"name\":\"Cuerpo\",\"type\":\"string\"},{\"name\":\"Pie\",\"type\":[\"null\",\"string\"]}],\"name\":\"Notificacion\",\"namespace\":\"Andreani.NotificacionesWh.Events.Common\",\"type\":\"record\"}}],\"name\":\"Andreani.NotificacionesWh.Events.Record.NotificacionWh\",\"type\":\"record\"}"
}

func (r NotificacionWh) SchemaName() string {
	return "Andreani.NotificacionesWh.Events.Record.NotificacionWh"
}

func (_ NotificacionWh) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ NotificacionWh) SetInt(v int32)       { panic("Unsupported operation") }
func (_ NotificacionWh) SetLong(v int64)      { panic("Unsupported operation") }
func (_ NotificacionWh) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ NotificacionWh) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ NotificacionWh) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ NotificacionWh) SetString(v string)   { panic("Unsupported operation") }
func (_ NotificacionWh) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *NotificacionWh) Get(i int) types.Field {
	switch i {
	case 0:
		r.Notificacion = NewNotificacion()

		w := types.Record{Target: &r.Notificacion}

		return w

	}
	panic("Unknown field index")
}

func (r *NotificacionWh) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *NotificacionWh) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ NotificacionWh) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ NotificacionWh) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ NotificacionWh) HintSize(int)                     { panic("Unsupported operation") }
func (_ NotificacionWh) Finalize()                        {}

func (_ NotificacionWh) AvroCRC64Fingerprint() []byte {
	return []byte(NotificacionWhAvroCRC64Fingerprint)
}

func (r NotificacionWh) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Notificacion"], err = json.Marshal(r.Notificacion)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *NotificacionWh) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Notificacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Notificacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Notificacion")
	}
	return nil
}
