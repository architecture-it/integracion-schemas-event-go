// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     PedidoCreado.avsc
 */
package ChallengecfoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Contenido struct {
	NumeroPedido string `json:"numeroPedido"`

	NombreContenido string `json:"nombreContenido"`
}

const ContenidoAvroCRC64Fingerprint = "\x02]_\xed\xddO0\xd2"

func NewContenido() Contenido {
	r := Contenido{}
	return r
}

func DeserializeContenido(r io.Reader) (Contenido, error) {
	t := NewContenido()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeContenidoFromSchema(r io.Reader, schema string) (Contenido, error) {
	t := NewContenido()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeContenido(r Contenido, w io.Writer) error {
	var err error
	err = vm.WriteString(r.NumeroPedido, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NombreContenido, w)
	if err != nil {
		return err
	}
	return err
}

func (r Contenido) Serialize(w io.Writer) error {
	return writeContenido(r, w)
}

func (r Contenido) Schema() string {
	return "{\"fields\":[{\"name\":\"numeroPedido\",\"type\":\"string\"},{\"name\":\"nombreContenido\",\"type\":\"string\"}],\"name\":\"Andreani.Challengecfo.Events.PedidoCreadoCommon.Contenido\",\"type\":\"record\"}"
}

func (r Contenido) SchemaName() string {
	return "Andreani.Challengecfo.Events.PedidoCreadoCommon.Contenido"
}

func (_ Contenido) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Contenido) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Contenido) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Contenido) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Contenido) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Contenido) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Contenido) SetString(v string)   { panic("Unsupported operation") }
func (_ Contenido) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Contenido) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.NumeroPedido}

		return w

	case 1:
		w := types.String{Target: &r.NombreContenido}

		return w

	}
	panic("Unknown field index")
}

func (r *Contenido) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Contenido) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Contenido) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Contenido) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Contenido) HintSize(int)                     { panic("Unsupported operation") }
func (_ Contenido) Finalize()                        {}

func (_ Contenido) AvroCRC64Fingerprint() []byte {
	return []byte(ContenidoAvroCRC64Fingerprint)
}

func (r Contenido) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["numeroPedido"], err = json.Marshal(r.NumeroPedido)
	if err != nil {
		return nil, err
	}
	output["nombreContenido"], err = json.Marshal(r.NombreContenido)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Contenido) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["numeroPedido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroPedido); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroPedido")
	}
	val = func() json.RawMessage {
		if v, ok := fields["nombreContenido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NombreContenido); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for nombreContenido")
	}
	return nil
}
