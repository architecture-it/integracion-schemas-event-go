// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     OperativeUnit.avsc
 */
package OperativeUnitEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Characteristics struct {
	Id int32 `json:"Id"`

	Value string `json:"Value"`
}

const CharacteristicsAvroCRC64Fingerprint = "X\xfd€∫\xe2Ym\xa5"

func NewCharacteristics() Characteristics {
	r := Characteristics{}
	return r
}

func DeserializeCharacteristics(r io.Reader) (Characteristics, error) {
	t := NewCharacteristics()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCharacteristicsFromSchema(r io.Reader, schema string) (Characteristics, error) {
	t := NewCharacteristics()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCharacteristics(r Characteristics, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Value, w)
	if err != nil {
		return err
	}
	return err
}

func (r Characteristics) Serialize(w io.Writer) error {
	return writeCharacteristics(r, w)
}

func (r Characteristics) Schema() string {
	return "{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Value\",\"type\":\"string\"}],\"name\":\"Andreani.OperativeUnit.Events.Record.Characteristics\",\"type\":\"record\"}"
}

func (r Characteristics) SchemaName() string {
	return "Andreani.OperativeUnit.Events.Record.Characteristics"
}

func (_ Characteristics) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Characteristics) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Characteristics) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Characteristics) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Characteristics) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Characteristics) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Characteristics) SetString(v string)   { panic("Unsupported operation") }
func (_ Characteristics) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Characteristics) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.Value}

		return w

	}
	panic("Unknown field index")
}

func (r *Characteristics) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Characteristics) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Characteristics) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Characteristics) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Characteristics) HintSize(int)                     { panic("Unsupported operation") }
func (_ Characteristics) Finalize()                        {}

func (_ Characteristics) AvroCRC64Fingerprint() []byte {
	return []byte(CharacteristicsAvroCRC64Fingerprint)
}

func (r Characteristics) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["Value"], err = json.Marshal(r.Value)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Characteristics) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Value"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Value); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Value")
	}
	return nil
}
