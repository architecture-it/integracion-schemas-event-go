// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     OperativeUnit.avsc
 */
package OperativeUnitEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type OperativeUnit struct {
	Id string `json:"id"`

	Email *UnionNullString `json:"email"`

	Name *UnionNullString `json:"name"`

	Address *UnionNullString `json:"address"`

	City *UnionNullString `json:"city"`

	ZipCode *UnionNullString `json:"zipCode"`
}

const OperativeUnitAvroCRC64Fingerprint = "\xae\x1a4\xf2^\x13?,"

func NewOperativeUnit() OperativeUnit {
	r := OperativeUnit{}
	return r
}

func DeserializeOperativeUnit(r io.Reader) (OperativeUnit, error) {
	t := NewOperativeUnit()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeOperativeUnitFromSchema(r io.Reader, schema string) (OperativeUnit, error) {
	t := NewOperativeUnit()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeOperativeUnit(r OperativeUnit, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Email, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Name, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Address, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.City, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ZipCode, w)
	if err != nil {
		return err
	}
	return err
}

func (r OperativeUnit) Serialize(w io.Writer) error {
	return writeOperativeUnit(r, w)
}

func (r OperativeUnit) Schema() string {
	return "{\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"email\",\"type\":[\"null\",\"string\"]},{\"name\":\"name\",\"type\":[\"null\",\"string\"]},{\"name\":\"address\",\"type\":[\"null\",\"string\"]},{\"name\":\"city\",\"type\":[\"null\",\"string\"]},{\"name\":\"zipCode\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.OperativeUnit.Events.Record.OperativeUnit\",\"type\":\"record\"}"
}

func (r OperativeUnit) SchemaName() string {
	return "Andreani.OperativeUnit.Events.Record.OperativeUnit"
}

func (_ OperativeUnit) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ OperativeUnit) SetInt(v int32)       { panic("Unsupported operation") }
func (_ OperativeUnit) SetLong(v int64)      { panic("Unsupported operation") }
func (_ OperativeUnit) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ OperativeUnit) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ OperativeUnit) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ OperativeUnit) SetString(v string)   { panic("Unsupported operation") }
func (_ OperativeUnit) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *OperativeUnit) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Id}

		return w

	case 1:
		r.Email = NewUnionNullString()

		return r.Email
	case 2:
		r.Name = NewUnionNullString()

		return r.Name
	case 3:
		r.Address = NewUnionNullString()

		return r.Address
	case 4:
		r.City = NewUnionNullString()

		return r.City
	case 5:
		r.ZipCode = NewUnionNullString()

		return r.ZipCode
	}
	panic("Unknown field index")
}

func (r *OperativeUnit) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *OperativeUnit) NullField(i int) {
	switch i {
	case 1:
		r.Email = nil
		return
	case 2:
		r.Name = nil
		return
	case 3:
		r.Address = nil
		return
	case 4:
		r.City = nil
		return
	case 5:
		r.ZipCode = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ OperativeUnit) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ OperativeUnit) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ OperativeUnit) HintSize(int)                     { panic("Unsupported operation") }
func (_ OperativeUnit) Finalize()                        {}

func (_ OperativeUnit) AvroCRC64Fingerprint() []byte {
	return []byte(OperativeUnitAvroCRC64Fingerprint)
}

func (r OperativeUnit) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["email"], err = json.Marshal(r.Email)
	if err != nil {
		return nil, err
	}
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["address"], err = json.Marshal(r.Address)
	if err != nil {
		return nil, err
	}
	output["city"], err = json.Marshal(r.City)
	if err != nil {
		return nil, err
	}
	output["zipCode"], err = json.Marshal(r.ZipCode)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *OperativeUnit) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["email"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Email); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for email")
	}
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["address"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Address); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for address")
	}
	val = func() json.RawMessage {
		if v, ok := fields["city"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.City); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for city")
	}
	val = func() json.RawMessage {
		if v, ok := fields["zipCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ZipCode); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for zipCode")
	}
	return nil
}
