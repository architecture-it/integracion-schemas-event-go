// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     OperativeUnit.avsc
 */
package OperativeUnitEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type OperativeUnit struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Code string `json:"code"`

	NumberCode int32 `json:"numberCode"`

	Email *UnionNullString `json:"email"`

	IsFrontier bool `json:"isFrontier"`

	IsActive bool `json:"isActive"`

	CreationPending bool `json:"creationPending"`

	Digitize bool `json:"digitize"`

	Address string `json:"address"`

	NumberAddress string `json:"numberAddress"`

	PostalCode string `json:"postalCode"`

	City string `json:"city"`

	Neighborhood *UnionNullString `json:"neighborhood"`

	State string `json:"state"`

	Country string `json:"country"`

	TaxJurisdiction string `json:"taxJurisdiction"`

	Latitude string `json:"latitude"`

	Longitude string `json:"longitude"`

	GeospatialPolygon *UnionNullLong `json:"geospatialPolygon"`

	CustomerServiceSchedule *UnionNullString `json:"customerServiceSchedule"`

	OperationServiceSchedule *UnionNullString `json:"operationServiceSchedule"`

	AllowsCustomerClient bool `json:"allowsCustomerClient"`

	AllowsCentralizedReturn bool `json:"allowsCentralizedReturn"`

	AllowsCashSale int64 `json:"allowsCashSale"`

	AllowsImprest int64 `json:"allowsImprest"`

	AllowsChargeRecipient int64 `json:"allowsChargeRecipient"`

	AllowsSaleSerializedProducts int64 `json:"allowsSaleSerializedProducts"`

	CostCenter string `json:"costCenter"`

	AllowsCustody bool `json:"allowsCustody"`

	AvailableSquareMetersForCustody *UnionNullLong `json:"availableSquareMetersForCustody"`

	AllowsCustomerStock bool `json:"allowsCustomerStock"`

	AvailableSquareMetersForCustomerStock *UnionNullLong `json:"availableSquareMetersForCustomerStock"`

	PositionsForCustomerStock *UnionNullLong `json:"positionsForCustomerStock"`

	SquareMetersTotal *UnionNullLong `json:"squareMetersTotal"`

	SquareMetersIndoor *UnionNullLong `json:"squareMetersIndoor"`

	SquareMetersOutdoor *UnionNullLong `json:"squareMetersOutdoor"`

	SquareMetersCommercialAttention *UnionNullLong `json:"squareMetersCommercialAttention"`

	SquareMetersParkingForUnits *UnionNullLong `json:"squareMetersParkingForUnits"`

	SquareMetersParkingForCustomers *UnionNullLong `json:"squareMetersParkingForCustomers"`

	SquareMetersParkingForEmployees *UnionNullLong `json:"squareMetersParkingForEmployees"`

	UrlFrontPicture *UnionNullString `json:"urlFrontPicture"`

	UrlInsidePicture *UnionNullString `json:"urlInsidePicture"`

	InsidePictureDateTime *UnionNullLong `json:"insidePictureDateTime"`

	UrlDepositPicture *UnionNullString `json:"urlDepositPicture"`

	FrontPictureDateTime *UnionNullLong `json:"frontPictureDateTime"`

	DepositPictureDateTime *UnionNullLong `json:"depositPictureDateTime"`

	Users string `json:"users"`

	Stamp int64 `json:"stamp"`

	EnableDate *UnionNullLong `json:"enableDate"`

	EnableState *UnionNullString `json:"enableState"`

	StartDate *UnionNullLong `json:"startDate"`

	DniResponsible string `json:"DniResponsible"`

	IdNetworkOwner string `json:"idNetworkOwner"`

	IdRegion string `json:"idRegion"`

	ContractsState int64 `json:"contractsState"`

	ListOperativeUnitContracts *UnionNullArrayString `json:"listOperativeUnitContracts"`

	ListDocks *UnionNullArrayString `json:"listDocks"`

	ListCharacteristics *UnionNullArrayCharacteristics `json:"listCharacteristics"`

	OperativeUnitTMSRelationship OperativeUnitTMSRelationship `json:"operativeUnitTMSRelationship"`
}

const OperativeUnitAvroCRC64Fingerprint = "<\x1d\xeaz\xb3\xfb7B"

func NewOperativeUnit() OperativeUnit {
	r := OperativeUnit{}
	r.OperativeUnitTMSRelationship = NewOperativeUnitTMSRelationship()

	return r
}

func DeserializeOperativeUnit(r io.Reader) (OperativeUnit, error) {
	t := NewOperativeUnit()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeOperativeUnitFromSchema(r io.Reader, schema string) (OperativeUnit, error) {
	t := NewOperativeUnit()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeOperativeUnit(r OperativeUnit, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Code, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.NumberCode, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Email, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.IsFrontier, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.IsActive, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.CreationPending, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Digitize, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Address, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NumberAddress, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.PostalCode, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.City, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Neighborhood, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.State, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Country, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.TaxJurisdiction, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Latitude, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Longitude, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.GeospatialPolygon, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CustomerServiceSchedule, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.OperationServiceSchedule, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.AllowsCustomerClient, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.AllowsCentralizedReturn, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.AllowsCashSale, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.AllowsImprest, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.AllowsChargeRecipient, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.AllowsSaleSerializedProducts, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CostCenter, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.AllowsCustody, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.AvailableSquareMetersForCustody, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.AllowsCustomerStock, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.AvailableSquareMetersForCustomerStock, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.PositionsForCustomerStock, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.SquareMetersTotal, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.SquareMetersIndoor, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.SquareMetersOutdoor, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.SquareMetersCommercialAttention, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.SquareMetersParkingForUnits, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.SquareMetersParkingForCustomers, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.SquareMetersParkingForEmployees, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.UrlFrontPicture, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.UrlInsidePicture, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.InsidePictureDateTime, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.UrlDepositPicture, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FrontPictureDateTime, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.DepositPictureDateTime, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Users, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Stamp, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.EnableDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EnableState, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.StartDate, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.DniResponsible, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.IdNetworkOwner, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.IdRegion, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.ContractsState, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayString(r.ListOperativeUnitContracts, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayString(r.ListDocks, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayCharacteristics(r.ListCharacteristics, w)
	if err != nil {
		return err
	}
	err = writeOperativeUnitTMSRelationship(r.OperativeUnitTMSRelationship, w)
	if err != nil {
		return err
	}
	return err
}

func (r OperativeUnit) Serialize(w io.Writer) error {
	return writeOperativeUnit(r, w)
}

func (r OperativeUnit) Schema() string {
	return "{\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"numberCode\",\"type\":\"int\"},{\"name\":\"email\",\"type\":[\"null\",\"string\"]},{\"name\":\"isFrontier\",\"type\":\"boolean\"},{\"name\":\"isActive\",\"type\":\"boolean\"},{\"name\":\"creationPending\",\"type\":\"boolean\"},{\"name\":\"digitize\",\"type\":\"boolean\"},{\"name\":\"address\",\"type\":\"string\"},{\"name\":\"numberAddress\",\"type\":\"string\"},{\"name\":\"postalCode\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"neighborhood\",\"type\":[\"null\",\"string\"]},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"taxJurisdiction\",\"type\":\"string\"},{\"name\":\"latitude\",\"type\":\"string\"},{\"name\":\"longitude\",\"type\":\"string\"},{\"name\":\"geospatialPolygon\",\"type\":[\"null\",\"long\"]},{\"name\":\"customerServiceSchedule\",\"type\":[\"null\",\"string\"]},{\"name\":\"operationServiceSchedule\",\"type\":[\"null\",\"string\"]},{\"name\":\"allowsCustomerClient\",\"type\":\"boolean\"},{\"name\":\"allowsCentralizedReturn\",\"type\":\"boolean\"},{\"name\":\"allowsCashSale\",\"type\":\"long\"},{\"name\":\"allowsImprest\",\"type\":\"long\"},{\"name\":\"allowsChargeRecipient\",\"type\":\"long\"},{\"name\":\"allowsSaleSerializedProducts\",\"type\":\"long\"},{\"name\":\"costCenter\",\"type\":\"string\"},{\"name\":\"allowsCustody\",\"type\":\"boolean\"},{\"name\":\"availableSquareMetersForCustody\",\"type\":[\"null\",\"long\"]},{\"name\":\"allowsCustomerStock\",\"type\":\"boolean\"},{\"name\":\"availableSquareMetersForCustomerStock\",\"type\":[\"null\",\"long\"]},{\"name\":\"positionsForCustomerStock\",\"type\":[\"null\",\"long\"]},{\"name\":\"squareMetersTotal\",\"type\":[\"null\",\"long\"]},{\"name\":\"squareMetersIndoor\",\"type\":[\"null\",\"long\"]},{\"name\":\"squareMetersOutdoor\",\"type\":[\"null\",\"long\"]},{\"name\":\"squareMetersCommercialAttention\",\"type\":[\"null\",\"long\"]},{\"name\":\"squareMetersParkingForUnits\",\"type\":[\"null\",\"long\"]},{\"name\":\"squareMetersParkingForCustomers\",\"type\":[\"null\",\"long\"]},{\"name\":\"squareMetersParkingForEmployees\",\"type\":[\"null\",\"long\"]},{\"name\":\"urlFrontPicture\",\"type\":[\"null\",\"string\"]},{\"name\":\"urlInsidePicture\",\"type\":[\"null\",\"string\"]},{\"name\":\"insidePictureDateTime\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"urlDepositPicture\",\"type\":[\"null\",\"string\"]},{\"name\":\"frontPictureDateTime\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"depositPictureDateTime\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"users\",\"type\":\"string\"},{\"name\":\"stamp\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"enableDate\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"enableState\",\"type\":[\"null\",\"string\"]},{\"name\":\"startDate\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"DniResponsible\",\"type\":\"string\"},{\"name\":\"idNetworkOwner\",\"type\":\"string\"},{\"name\":\"idRegion\",\"type\":\"string\"},{\"name\":\"contractsState\",\"type\":\"long\"},{\"name\":\"listOperativeUnitContracts\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]},{\"name\":\"listDocks\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]},{\"name\":\"listCharacteristics\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"name\":\"Id\",\"type\":\"long\"},{\"name\":\"Value\",\"type\":\"string\"}],\"name\":\"Characteristics\",\"type\":\"record\"},\"type\":\"array\"}]},{\"name\":\"operativeUnitTMSRelationship\",\"type\":{\"fields\":[{\"name\":\"idIntegra\",\"type\":[\"null\",\"long\"]},{\"name\":\"idAlertran\",\"type\":[\"null\",\"string\"]},{\"name\":\"defaultTMS\",\"type\":[\"null\",\"string\"]},{\"name\":\"numberIntegra\",\"type\":[\"null\",\"string\"]}],\"name\":\"OperativeUnitTMSRelationship\",\"type\":\"record\"}}],\"name\":\"Andreani.OperativeUnit.Events.Record.OperativeUnit\",\"type\":\"record\"}"
}

func (r OperativeUnit) SchemaName() string {
	return "Andreani.OperativeUnit.Events.Record.OperativeUnit"
}

func (_ OperativeUnit) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ OperativeUnit) SetInt(v int32)       { panic("Unsupported operation") }
func (_ OperativeUnit) SetLong(v int64)      { panic("Unsupported operation") }
func (_ OperativeUnit) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ OperativeUnit) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ OperativeUnit) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ OperativeUnit) SetString(v string)   { panic("Unsupported operation") }
func (_ OperativeUnit) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *OperativeUnit) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.Name}

		return w

	case 2:
		w := types.String{Target: &r.Code}

		return w

	case 3:
		w := types.Int{Target: &r.NumberCode}

		return w

	case 4:
		r.Email = NewUnionNullString()

		return r.Email
	case 5:
		w := types.Boolean{Target: &r.IsFrontier}

		return w

	case 6:
		w := types.Boolean{Target: &r.IsActive}

		return w

	case 7:
		w := types.Boolean{Target: &r.CreationPending}

		return w

	case 8:
		w := types.Boolean{Target: &r.Digitize}

		return w

	case 9:
		w := types.String{Target: &r.Address}

		return w

	case 10:
		w := types.String{Target: &r.NumberAddress}

		return w

	case 11:
		w := types.String{Target: &r.PostalCode}

		return w

	case 12:
		w := types.String{Target: &r.City}

		return w

	case 13:
		r.Neighborhood = NewUnionNullString()

		return r.Neighborhood
	case 14:
		w := types.String{Target: &r.State}

		return w

	case 15:
		w := types.String{Target: &r.Country}

		return w

	case 16:
		w := types.String{Target: &r.TaxJurisdiction}

		return w

	case 17:
		w := types.String{Target: &r.Latitude}

		return w

	case 18:
		w := types.String{Target: &r.Longitude}

		return w

	case 19:
		r.GeospatialPolygon = NewUnionNullLong()

		return r.GeospatialPolygon
	case 20:
		r.CustomerServiceSchedule = NewUnionNullString()

		return r.CustomerServiceSchedule
	case 21:
		r.OperationServiceSchedule = NewUnionNullString()

		return r.OperationServiceSchedule
	case 22:
		w := types.Boolean{Target: &r.AllowsCustomerClient}

		return w

	case 23:
		w := types.Boolean{Target: &r.AllowsCentralizedReturn}

		return w

	case 24:
		w := types.Long{Target: &r.AllowsCashSale}

		return w

	case 25:
		w := types.Long{Target: &r.AllowsImprest}

		return w

	case 26:
		w := types.Long{Target: &r.AllowsChargeRecipient}

		return w

	case 27:
		w := types.Long{Target: &r.AllowsSaleSerializedProducts}

		return w

	case 28:
		w := types.String{Target: &r.CostCenter}

		return w

	case 29:
		w := types.Boolean{Target: &r.AllowsCustody}

		return w

	case 30:
		r.AvailableSquareMetersForCustody = NewUnionNullLong()

		return r.AvailableSquareMetersForCustody
	case 31:
		w := types.Boolean{Target: &r.AllowsCustomerStock}

		return w

	case 32:
		r.AvailableSquareMetersForCustomerStock = NewUnionNullLong()

		return r.AvailableSquareMetersForCustomerStock
	case 33:
		r.PositionsForCustomerStock = NewUnionNullLong()

		return r.PositionsForCustomerStock
	case 34:
		r.SquareMetersTotal = NewUnionNullLong()

		return r.SquareMetersTotal
	case 35:
		r.SquareMetersIndoor = NewUnionNullLong()

		return r.SquareMetersIndoor
	case 36:
		r.SquareMetersOutdoor = NewUnionNullLong()

		return r.SquareMetersOutdoor
	case 37:
		r.SquareMetersCommercialAttention = NewUnionNullLong()

		return r.SquareMetersCommercialAttention
	case 38:
		r.SquareMetersParkingForUnits = NewUnionNullLong()

		return r.SquareMetersParkingForUnits
	case 39:
		r.SquareMetersParkingForCustomers = NewUnionNullLong()

		return r.SquareMetersParkingForCustomers
	case 40:
		r.SquareMetersParkingForEmployees = NewUnionNullLong()

		return r.SquareMetersParkingForEmployees
	case 41:
		r.UrlFrontPicture = NewUnionNullString()

		return r.UrlFrontPicture
	case 42:
		r.UrlInsidePicture = NewUnionNullString()

		return r.UrlInsidePicture
	case 43:
		r.InsidePictureDateTime = NewUnionNullLong()

		return r.InsidePictureDateTime
	case 44:
		r.UrlDepositPicture = NewUnionNullString()

		return r.UrlDepositPicture
	case 45:
		r.FrontPictureDateTime = NewUnionNullLong()

		return r.FrontPictureDateTime
	case 46:
		r.DepositPictureDateTime = NewUnionNullLong()

		return r.DepositPictureDateTime
	case 47:
		w := types.String{Target: &r.Users}

		return w

	case 48:
		w := types.Long{Target: &r.Stamp}

		return w

	case 49:
		r.EnableDate = NewUnionNullLong()

		return r.EnableDate
	case 50:
		r.EnableState = NewUnionNullString()

		return r.EnableState
	case 51:
		r.StartDate = NewUnionNullLong()

		return r.StartDate
	case 52:
		w := types.String{Target: &r.DniResponsible}

		return w

	case 53:
		w := types.String{Target: &r.IdNetworkOwner}

		return w

	case 54:
		w := types.String{Target: &r.IdRegion}

		return w

	case 55:
		w := types.Long{Target: &r.ContractsState}

		return w

	case 56:
		r.ListOperativeUnitContracts = NewUnionNullArrayString()

		return r.ListOperativeUnitContracts
	case 57:
		r.ListDocks = NewUnionNullArrayString()

		return r.ListDocks
	case 58:
		r.ListCharacteristics = NewUnionNullArrayCharacteristics()

		return r.ListCharacteristics
	case 59:
		r.OperativeUnitTMSRelationship = NewOperativeUnitTMSRelationship()

		w := types.Record{Target: &r.OperativeUnitTMSRelationship}

		return w

	}
	panic("Unknown field index")
}

func (r *OperativeUnit) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *OperativeUnit) NullField(i int) {
	switch i {
	case 4:
		r.Email = nil
		return
	case 13:
		r.Neighborhood = nil
		return
	case 19:
		r.GeospatialPolygon = nil
		return
	case 20:
		r.CustomerServiceSchedule = nil
		return
	case 21:
		r.OperationServiceSchedule = nil
		return
	case 30:
		r.AvailableSquareMetersForCustody = nil
		return
	case 32:
		r.AvailableSquareMetersForCustomerStock = nil
		return
	case 33:
		r.PositionsForCustomerStock = nil
		return
	case 34:
		r.SquareMetersTotal = nil
		return
	case 35:
		r.SquareMetersIndoor = nil
		return
	case 36:
		r.SquareMetersOutdoor = nil
		return
	case 37:
		r.SquareMetersCommercialAttention = nil
		return
	case 38:
		r.SquareMetersParkingForUnits = nil
		return
	case 39:
		r.SquareMetersParkingForCustomers = nil
		return
	case 40:
		r.SquareMetersParkingForEmployees = nil
		return
	case 41:
		r.UrlFrontPicture = nil
		return
	case 42:
		r.UrlInsidePicture = nil
		return
	case 43:
		r.InsidePictureDateTime = nil
		return
	case 44:
		r.UrlDepositPicture = nil
		return
	case 45:
		r.FrontPictureDateTime = nil
		return
	case 46:
		r.DepositPictureDateTime = nil
		return
	case 49:
		r.EnableDate = nil
		return
	case 50:
		r.EnableState = nil
		return
	case 51:
		r.StartDate = nil
		return
	case 56:
		r.ListOperativeUnitContracts = nil
		return
	case 57:
		r.ListDocks = nil
		return
	case 58:
		r.ListCharacteristics = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ OperativeUnit) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ OperativeUnit) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ OperativeUnit) HintSize(int)                     { panic("Unsupported operation") }
func (_ OperativeUnit) Finalize()                        {}

func (_ OperativeUnit) AvroCRC64Fingerprint() []byte {
	return []byte(OperativeUnitAvroCRC64Fingerprint)
}

func (r OperativeUnit) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["code"], err = json.Marshal(r.Code)
	if err != nil {
		return nil, err
	}
	output["numberCode"], err = json.Marshal(r.NumberCode)
	if err != nil {
		return nil, err
	}
	output["email"], err = json.Marshal(r.Email)
	if err != nil {
		return nil, err
	}
	output["isFrontier"], err = json.Marshal(r.IsFrontier)
	if err != nil {
		return nil, err
	}
	output["isActive"], err = json.Marshal(r.IsActive)
	if err != nil {
		return nil, err
	}
	output["creationPending"], err = json.Marshal(r.CreationPending)
	if err != nil {
		return nil, err
	}
	output["digitize"], err = json.Marshal(r.Digitize)
	if err != nil {
		return nil, err
	}
	output["address"], err = json.Marshal(r.Address)
	if err != nil {
		return nil, err
	}
	output["numberAddress"], err = json.Marshal(r.NumberAddress)
	if err != nil {
		return nil, err
	}
	output["postalCode"], err = json.Marshal(r.PostalCode)
	if err != nil {
		return nil, err
	}
	output["city"], err = json.Marshal(r.City)
	if err != nil {
		return nil, err
	}
	output["neighborhood"], err = json.Marshal(r.Neighborhood)
	if err != nil {
		return nil, err
	}
	output["state"], err = json.Marshal(r.State)
	if err != nil {
		return nil, err
	}
	output["country"], err = json.Marshal(r.Country)
	if err != nil {
		return nil, err
	}
	output["taxJurisdiction"], err = json.Marshal(r.TaxJurisdiction)
	if err != nil {
		return nil, err
	}
	output["latitude"], err = json.Marshal(r.Latitude)
	if err != nil {
		return nil, err
	}
	output["longitude"], err = json.Marshal(r.Longitude)
	if err != nil {
		return nil, err
	}
	output["geospatialPolygon"], err = json.Marshal(r.GeospatialPolygon)
	if err != nil {
		return nil, err
	}
	output["customerServiceSchedule"], err = json.Marshal(r.CustomerServiceSchedule)
	if err != nil {
		return nil, err
	}
	output["operationServiceSchedule"], err = json.Marshal(r.OperationServiceSchedule)
	if err != nil {
		return nil, err
	}
	output["allowsCustomerClient"], err = json.Marshal(r.AllowsCustomerClient)
	if err != nil {
		return nil, err
	}
	output["allowsCentralizedReturn"], err = json.Marshal(r.AllowsCentralizedReturn)
	if err != nil {
		return nil, err
	}
	output["allowsCashSale"], err = json.Marshal(r.AllowsCashSale)
	if err != nil {
		return nil, err
	}
	output["allowsImprest"], err = json.Marshal(r.AllowsImprest)
	if err != nil {
		return nil, err
	}
	output["allowsChargeRecipient"], err = json.Marshal(r.AllowsChargeRecipient)
	if err != nil {
		return nil, err
	}
	output["allowsSaleSerializedProducts"], err = json.Marshal(r.AllowsSaleSerializedProducts)
	if err != nil {
		return nil, err
	}
	output["costCenter"], err = json.Marshal(r.CostCenter)
	if err != nil {
		return nil, err
	}
	output["allowsCustody"], err = json.Marshal(r.AllowsCustody)
	if err != nil {
		return nil, err
	}
	output["availableSquareMetersForCustody"], err = json.Marshal(r.AvailableSquareMetersForCustody)
	if err != nil {
		return nil, err
	}
	output["allowsCustomerStock"], err = json.Marshal(r.AllowsCustomerStock)
	if err != nil {
		return nil, err
	}
	output["availableSquareMetersForCustomerStock"], err = json.Marshal(r.AvailableSquareMetersForCustomerStock)
	if err != nil {
		return nil, err
	}
	output["positionsForCustomerStock"], err = json.Marshal(r.PositionsForCustomerStock)
	if err != nil {
		return nil, err
	}
	output["squareMetersTotal"], err = json.Marshal(r.SquareMetersTotal)
	if err != nil {
		return nil, err
	}
	output["squareMetersIndoor"], err = json.Marshal(r.SquareMetersIndoor)
	if err != nil {
		return nil, err
	}
	output["squareMetersOutdoor"], err = json.Marshal(r.SquareMetersOutdoor)
	if err != nil {
		return nil, err
	}
	output["squareMetersCommercialAttention"], err = json.Marshal(r.SquareMetersCommercialAttention)
	if err != nil {
		return nil, err
	}
	output["squareMetersParkingForUnits"], err = json.Marshal(r.SquareMetersParkingForUnits)
	if err != nil {
		return nil, err
	}
	output["squareMetersParkingForCustomers"], err = json.Marshal(r.SquareMetersParkingForCustomers)
	if err != nil {
		return nil, err
	}
	output["squareMetersParkingForEmployees"], err = json.Marshal(r.SquareMetersParkingForEmployees)
	if err != nil {
		return nil, err
	}
	output["urlFrontPicture"], err = json.Marshal(r.UrlFrontPicture)
	if err != nil {
		return nil, err
	}
	output["urlInsidePicture"], err = json.Marshal(r.UrlInsidePicture)
	if err != nil {
		return nil, err
	}
	output["insidePictureDateTime"], err = json.Marshal(r.InsidePictureDateTime)
	if err != nil {
		return nil, err
	}
	output["urlDepositPicture"], err = json.Marshal(r.UrlDepositPicture)
	if err != nil {
		return nil, err
	}
	output["frontPictureDateTime"], err = json.Marshal(r.FrontPictureDateTime)
	if err != nil {
		return nil, err
	}
	output["depositPictureDateTime"], err = json.Marshal(r.DepositPictureDateTime)
	if err != nil {
		return nil, err
	}
	output["users"], err = json.Marshal(r.Users)
	if err != nil {
		return nil, err
	}
	output["stamp"], err = json.Marshal(r.Stamp)
	if err != nil {
		return nil, err
	}
	output["enableDate"], err = json.Marshal(r.EnableDate)
	if err != nil {
		return nil, err
	}
	output["enableState"], err = json.Marshal(r.EnableState)
	if err != nil {
		return nil, err
	}
	output["startDate"], err = json.Marshal(r.StartDate)
	if err != nil {
		return nil, err
	}
	output["DniResponsible"], err = json.Marshal(r.DniResponsible)
	if err != nil {
		return nil, err
	}
	output["idNetworkOwner"], err = json.Marshal(r.IdNetworkOwner)
	if err != nil {
		return nil, err
	}
	output["idRegion"], err = json.Marshal(r.IdRegion)
	if err != nil {
		return nil, err
	}
	output["contractsState"], err = json.Marshal(r.ContractsState)
	if err != nil {
		return nil, err
	}
	output["listOperativeUnitContracts"], err = json.Marshal(r.ListOperativeUnitContracts)
	if err != nil {
		return nil, err
	}
	output["listDocks"], err = json.Marshal(r.ListDocks)
	if err != nil {
		return nil, err
	}
	output["listCharacteristics"], err = json.Marshal(r.ListCharacteristics)
	if err != nil {
		return nil, err
	}
	output["operativeUnitTMSRelationship"], err = json.Marshal(r.OperativeUnitTMSRelationship)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *OperativeUnit) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["code"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Code); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for code")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numberCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumberCode); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numberCode")
	}
	val = func() json.RawMessage {
		if v, ok := fields["email"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Email); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for email")
	}
	val = func() json.RawMessage {
		if v, ok := fields["isFrontier"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IsFrontier); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for isFrontier")
	}
	val = func() json.RawMessage {
		if v, ok := fields["isActive"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IsActive); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for isActive")
	}
	val = func() json.RawMessage {
		if v, ok := fields["creationPending"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreationPending); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for creationPending")
	}
	val = func() json.RawMessage {
		if v, ok := fields["digitize"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Digitize); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for digitize")
	}
	val = func() json.RawMessage {
		if v, ok := fields["address"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Address); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for address")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numberAddress"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumberAddress); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numberAddress")
	}
	val = func() json.RawMessage {
		if v, ok := fields["postalCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PostalCode); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for postalCode")
	}
	val = func() json.RawMessage {
		if v, ok := fields["city"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.City); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for city")
	}
	val = func() json.RawMessage {
		if v, ok := fields["neighborhood"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Neighborhood); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for neighborhood")
	}
	val = func() json.RawMessage {
		if v, ok := fields["state"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.State); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for state")
	}
	val = func() json.RawMessage {
		if v, ok := fields["country"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Country); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for country")
	}
	val = func() json.RawMessage {
		if v, ok := fields["taxJurisdiction"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TaxJurisdiction); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for taxJurisdiction")
	}
	val = func() json.RawMessage {
		if v, ok := fields["latitude"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Latitude); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for latitude")
	}
	val = func() json.RawMessage {
		if v, ok := fields["longitude"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Longitude); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for longitude")
	}
	val = func() json.RawMessage {
		if v, ok := fields["geospatialPolygon"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.GeospatialPolygon); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for geospatialPolygon")
	}
	val = func() json.RawMessage {
		if v, ok := fields["customerServiceSchedule"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CustomerServiceSchedule); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for customerServiceSchedule")
	}
	val = func() json.RawMessage {
		if v, ok := fields["operationServiceSchedule"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OperationServiceSchedule); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for operationServiceSchedule")
	}
	val = func() json.RawMessage {
		if v, ok := fields["allowsCustomerClient"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AllowsCustomerClient); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for allowsCustomerClient")
	}
	val = func() json.RawMessage {
		if v, ok := fields["allowsCentralizedReturn"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AllowsCentralizedReturn); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for allowsCentralizedReturn")
	}
	val = func() json.RawMessage {
		if v, ok := fields["allowsCashSale"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AllowsCashSale); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for allowsCashSale")
	}
	val = func() json.RawMessage {
		if v, ok := fields["allowsImprest"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AllowsImprest); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for allowsImprest")
	}
	val = func() json.RawMessage {
		if v, ok := fields["allowsChargeRecipient"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AllowsChargeRecipient); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for allowsChargeRecipient")
	}
	val = func() json.RawMessage {
		if v, ok := fields["allowsSaleSerializedProducts"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AllowsSaleSerializedProducts); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for allowsSaleSerializedProducts")
	}
	val = func() json.RawMessage {
		if v, ok := fields["costCenter"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CostCenter); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for costCenter")
	}
	val = func() json.RawMessage {
		if v, ok := fields["allowsCustody"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AllowsCustody); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for allowsCustody")
	}
	val = func() json.RawMessage {
		if v, ok := fields["availableSquareMetersForCustody"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AvailableSquareMetersForCustody); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for availableSquareMetersForCustody")
	}
	val = func() json.RawMessage {
		if v, ok := fields["allowsCustomerStock"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AllowsCustomerStock); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for allowsCustomerStock")
	}
	val = func() json.RawMessage {
		if v, ok := fields["availableSquareMetersForCustomerStock"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AvailableSquareMetersForCustomerStock); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for availableSquareMetersForCustomerStock")
	}
	val = func() json.RawMessage {
		if v, ok := fields["positionsForCustomerStock"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PositionsForCustomerStock); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for positionsForCustomerStock")
	}
	val = func() json.RawMessage {
		if v, ok := fields["squareMetersTotal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SquareMetersTotal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for squareMetersTotal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["squareMetersIndoor"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SquareMetersIndoor); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for squareMetersIndoor")
	}
	val = func() json.RawMessage {
		if v, ok := fields["squareMetersOutdoor"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SquareMetersOutdoor); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for squareMetersOutdoor")
	}
	val = func() json.RawMessage {
		if v, ok := fields["squareMetersCommercialAttention"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SquareMetersCommercialAttention); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for squareMetersCommercialAttention")
	}
	val = func() json.RawMessage {
		if v, ok := fields["squareMetersParkingForUnits"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SquareMetersParkingForUnits); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for squareMetersParkingForUnits")
	}
	val = func() json.RawMessage {
		if v, ok := fields["squareMetersParkingForCustomers"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SquareMetersParkingForCustomers); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for squareMetersParkingForCustomers")
	}
	val = func() json.RawMessage {
		if v, ok := fields["squareMetersParkingForEmployees"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SquareMetersParkingForEmployees); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for squareMetersParkingForEmployees")
	}
	val = func() json.RawMessage {
		if v, ok := fields["urlFrontPicture"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UrlFrontPicture); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for urlFrontPicture")
	}
	val = func() json.RawMessage {
		if v, ok := fields["urlInsidePicture"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UrlInsidePicture); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for urlInsidePicture")
	}
	val = func() json.RawMessage {
		if v, ok := fields["insidePictureDateTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InsidePictureDateTime); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for insidePictureDateTime")
	}
	val = func() json.RawMessage {
		if v, ok := fields["urlDepositPicture"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UrlDepositPicture); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for urlDepositPicture")
	}
	val = func() json.RawMessage {
		if v, ok := fields["frontPictureDateTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FrontPictureDateTime); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for frontPictureDateTime")
	}
	val = func() json.RawMessage {
		if v, ok := fields["depositPictureDateTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DepositPictureDateTime); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for depositPictureDateTime")
	}
	val = func() json.RawMessage {
		if v, ok := fields["users"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Users); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for users")
	}
	val = func() json.RawMessage {
		if v, ok := fields["stamp"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Stamp); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for stamp")
	}
	val = func() json.RawMessage {
		if v, ok := fields["enableDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EnableDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for enableDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["enableState"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EnableState); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for enableState")
	}
	val = func() json.RawMessage {
		if v, ok := fields["startDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StartDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for startDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DniResponsible"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DniResponsible); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DniResponsible")
	}
	val = func() json.RawMessage {
		if v, ok := fields["idNetworkOwner"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdNetworkOwner); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for idNetworkOwner")
	}
	val = func() json.RawMessage {
		if v, ok := fields["idRegion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdRegion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for idRegion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["contractsState"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ContractsState); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for contractsState")
	}
	val = func() json.RawMessage {
		if v, ok := fields["listOperativeUnitContracts"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ListOperativeUnitContracts); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for listOperativeUnitContracts")
	}
	val = func() json.RawMessage {
		if v, ok := fields["listDocks"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ListDocks); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for listDocks")
	}
	val = func() json.RawMessage {
		if v, ok := fields["listCharacteristics"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ListCharacteristics); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for listCharacteristics")
	}
	val = func() json.RawMessage {
		if v, ok := fields["operativeUnitTMSRelationship"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OperativeUnitTMSRelationship); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for operativeUnitTMSRelationship")
	}
	return nil
}
