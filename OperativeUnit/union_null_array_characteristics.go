// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     OperativeUnit.avsc
 */
package OperativeUnitEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayCharacteristicsTypeEnum int

const (
	UnionNullArrayCharacteristicsTypeEnumArrayCharacteristics UnionNullArrayCharacteristicsTypeEnum = 1
)

type UnionNullArrayCharacteristics struct {
	Null                 *types.NullVal
	ArrayCharacteristics []Characteristics
	UnionType            UnionNullArrayCharacteristicsTypeEnum
}

func writeUnionNullArrayCharacteristics(r *UnionNullArrayCharacteristics, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayCharacteristicsTypeEnumArrayCharacteristics:
		return writeArrayCharacteristics(r.ArrayCharacteristics, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayCharacteristics")
}

func NewUnionNullArrayCharacteristics() *UnionNullArrayCharacteristics {
	return &UnionNullArrayCharacteristics{}
}

func (r *UnionNullArrayCharacteristics) Serialize(w io.Writer) error {
	return writeUnionNullArrayCharacteristics(r, w)
}

func DeserializeUnionNullArrayCharacteristics(r io.Reader) (*UnionNullArrayCharacteristics, error) {
	t := NewUnionNullArrayCharacteristics()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayCharacteristicsFromSchema(r io.Reader, schema string) (*UnionNullArrayCharacteristics, error) {
	t := NewUnionNullArrayCharacteristics()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayCharacteristics) Schema() string {
	return "[\"null\",{\"items\":{\"fields\":[{\"name\":\"Id\",\"type\":\"long\"},{\"name\":\"Value\",\"type\":\"string\"}],\"name\":\"Characteristics\",\"type\":\"record\"},\"type\":\"array\"}]"
}

func (_ *UnionNullArrayCharacteristics) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullArrayCharacteristics) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullArrayCharacteristics) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullArrayCharacteristics) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullArrayCharacteristics) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullArrayCharacteristics) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullArrayCharacteristics) SetLong(v int64) {

	r.UnionType = (UnionNullArrayCharacteristicsTypeEnum)(v)
}

func (r *UnionNullArrayCharacteristics) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayCharacteristics = make([]Characteristics, 0)
		return &ArrayCharacteristicsWrapper{Target: (&r.ArrayCharacteristics)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayCharacteristics) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullArrayCharacteristics) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullArrayCharacteristics) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullArrayCharacteristics) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayCharacteristics) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *UnionNullArrayCharacteristics) Finalize()                {}

func (r *UnionNullArrayCharacteristics) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayCharacteristicsTypeEnumArrayCharacteristics:
		return json.Marshal(map[string]interface{}{"array": r.ArrayCharacteristics})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayCharacteristics")
}

func (r *UnionNullArrayCharacteristics) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayCharacteristics)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayCharacteristics")
}
