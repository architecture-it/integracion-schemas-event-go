// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     OrdenDeEnvio.avsc
 */
package SppeApiEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type OrdenDeEnvio struct {
	EtiquetaDeRemtioURL string `json:"EtiquetaDeRemtioURL"`

	AgrupadorDeBultos string `json:"AgrupadorDeBultos"`
}

const OrdenDeEnvioAvroCRC64Fingerprint = "F\xee\xd78\xc9K\xf0m"

func NewOrdenDeEnvio() OrdenDeEnvio {
	r := OrdenDeEnvio{}
	return r
}

func DeserializeOrdenDeEnvio(r io.Reader) (OrdenDeEnvio, error) {
	t := NewOrdenDeEnvio()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeOrdenDeEnvioFromSchema(r io.Reader, schema string) (OrdenDeEnvio, error) {
	t := NewOrdenDeEnvio()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeOrdenDeEnvio(r OrdenDeEnvio, w io.Writer) error {
	var err error
	err = vm.WriteString(r.EtiquetaDeRemtioURL, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.AgrupadorDeBultos, w)
	if err != nil {
		return err
	}
	return err
}

func (r OrdenDeEnvio) Serialize(w io.Writer) error {
	return writeOrdenDeEnvio(r, w)
}

func (r OrdenDeEnvio) Schema() string {
	return "{\"fields\":[{\"name\":\"EtiquetaDeRemtioURL\",\"type\":\"string\"},{\"name\":\"AgrupadorDeBultos\",\"type\":\"string\"}],\"name\":\"Andreani.SppeApi.Events.Record.OrdenDeEnvio\",\"type\":\"record\"}"
}

func (r OrdenDeEnvio) SchemaName() string {
	return "Andreani.SppeApi.Events.Record.OrdenDeEnvio"
}

func (_ OrdenDeEnvio) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ OrdenDeEnvio) SetInt(v int32)       { panic("Unsupported operation") }
func (_ OrdenDeEnvio) SetLong(v int64)      { panic("Unsupported operation") }
func (_ OrdenDeEnvio) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ OrdenDeEnvio) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ OrdenDeEnvio) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ OrdenDeEnvio) SetString(v string)   { panic("Unsupported operation") }
func (_ OrdenDeEnvio) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *OrdenDeEnvio) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.EtiquetaDeRemtioURL}

		return w

	case 1:
		w := types.String{Target: &r.AgrupadorDeBultos}

		return w

	}
	panic("Unknown field index")
}

func (r *OrdenDeEnvio) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *OrdenDeEnvio) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ OrdenDeEnvio) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ OrdenDeEnvio) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ OrdenDeEnvio) HintSize(int)                     { panic("Unsupported operation") }
func (_ OrdenDeEnvio) Finalize()                        {}

func (_ OrdenDeEnvio) AvroCRC64Fingerprint() []byte {
	return []byte(OrdenDeEnvioAvroCRC64Fingerprint)
}

func (r OrdenDeEnvio) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["EtiquetaDeRemtioURL"], err = json.Marshal(r.EtiquetaDeRemtioURL)
	if err != nil {
		return nil, err
	}
	output["AgrupadorDeBultos"], err = json.Marshal(r.AgrupadorDeBultos)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *OrdenDeEnvio) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["EtiquetaDeRemtioURL"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EtiquetaDeRemtioURL); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EtiquetaDeRemtioURL")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AgrupadorDeBultos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AgrupadorDeBultos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AgrupadorDeBultos")
	}
	return nil
}
