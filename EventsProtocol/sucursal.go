// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Sucursal.avsc
 */
package EventsProtocolEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Sucursal struct {
	Id int32 `json:"id"`

	Codigo string `json:"codigo"`

	Descripcion string `json:"descripcion"`

	Direccion string `json:"direccion"`

	HorarioAtencion string `json:"horarioAtencion"`

	CodigoPostal string `json:"codigoPostal"`
}

const SucursalAvroCRC64Fingerprint = "\x98e.\x7f\xc22\xe3%"

func NewSucursal() Sucursal {
	r := Sucursal{}
	return r
}

func DeserializeSucursal(r io.Reader) (Sucursal, error) {
	t := NewSucursal()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSucursalFromSchema(r io.Reader, schema string) (Sucursal, error) {
	t := NewSucursal()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSucursal(r Sucursal, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Codigo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Descripcion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Direccion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.HorarioAtencion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodigoPostal, w)
	if err != nil {
		return err
	}
	return err
}

func (r Sucursal) Serialize(w io.Writer) error {
	return writeSucursal(r, w)
}

func (r Sucursal) Schema() string {
	return "{\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"codigo\",\"type\":\"string\"},{\"name\":\"descripcion\",\"type\":\"string\"},{\"name\":\"direccion\",\"type\":\"string\"},{\"name\":\"horarioAtencion\",\"type\":\"string\"},{\"name\":\"codigoPostal\",\"type\":\"string\"}],\"name\":\"Andreani.Notificaciones.Events.Records.Sucursal\",\"type\":\"record\"}"
}

func (r Sucursal) SchemaName() string {
	return "Andreani.Notificaciones.Events.Records.Sucursal"
}

func (_ Sucursal) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Sucursal) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Sucursal) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Sucursal) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Sucursal) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Sucursal) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Sucursal) SetString(v string)   { panic("Unsupported operation") }
func (_ Sucursal) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Sucursal) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.Codigo}

		return w

	case 2:
		w := types.String{Target: &r.Descripcion}

		return w

	case 3:
		w := types.String{Target: &r.Direccion}

		return w

	case 4:
		w := types.String{Target: &r.HorarioAtencion}

		return w

	case 5:
		w := types.String{Target: &r.CodigoPostal}

		return w

	}
	panic("Unknown field index")
}

func (r *Sucursal) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Sucursal) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Sucursal) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Sucursal) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Sucursal) HintSize(int)                     { panic("Unsupported operation") }
func (_ Sucursal) Finalize()                        {}

func (_ Sucursal) AvroCRC64Fingerprint() []byte {
	return []byte(SucursalAvroCRC64Fingerprint)
}

func (r Sucursal) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["codigo"], err = json.Marshal(r.Codigo)
	if err != nil {
		return nil, err
	}
	output["descripcion"], err = json.Marshal(r.Descripcion)
	if err != nil {
		return nil, err
	}
	output["direccion"], err = json.Marshal(r.Direccion)
	if err != nil {
		return nil, err
	}
	output["horarioAtencion"], err = json.Marshal(r.HorarioAtencion)
	if err != nil {
		return nil, err
	}
	output["codigoPostal"], err = json.Marshal(r.CodigoPostal)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Sucursal) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Codigo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for codigo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["descripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Descripcion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for descripcion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["direccion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Direccion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for direccion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["horarioAtencion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HorarioAtencion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for horarioAtencion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoPostal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoPostal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for codigoPostal")
	}
	return nil
}
