// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Notificacion.avsc
 */
package EventsProtocolEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Notificacion struct {
	FechaNotificacion int64 `json:"fechaNotificacion"`

	FechaEvento int64 `json:"fechaEvento"`

	Contrato string `json:"contrato"`

	Evento string `json:"evento"`

	Envio string `json:"envio"`

	Sistema string `json:"sistema"`

	Salida string `json:"salida"`

	Motivo string `json:"motivo"`

	Destinatario string `json:"destinatario"`

	DestinatarioEstado string `json:"destinatarioEstado"`

	DestinatarioObservacion string `json:"destinatarioObservacion"`

	Remitente string `json:"remitente"`

	RemitenteEstado string `json:"remitenteEstado"`

	RemitenteObservacion string `json:"remitenteObservacion"`
}

const NotificacionAvroCRC64Fingerprint = "]b\xa4\x9b\xd5\xf0\x13t"

func NewNotificacion() Notificacion {
	r := Notificacion{}
	return r
}

func DeserializeNotificacion(r io.Reader) (Notificacion, error) {
	t := NewNotificacion()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeNotificacionFromSchema(r io.Reader, schema string) (Notificacion, error) {
	t := NewNotificacion()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeNotificacion(r Notificacion, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.FechaNotificacion, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.FechaEvento, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Contrato, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Evento, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Envio, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Sistema, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Salida, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Motivo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Destinatario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.DestinatarioEstado, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.DestinatarioObservacion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Remitente, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.RemitenteEstado, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.RemitenteObservacion, w)
	if err != nil {
		return err
	}
	return err
}

func (r Notificacion) Serialize(w io.Writer) error {
	return writeNotificacion(r, w)
}

func (r Notificacion) Schema() string {
	return "{\"fields\":[{\"name\":\"fechaNotificacion\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"fechaEvento\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"contrato\",\"type\":\"string\"},{\"name\":\"evento\",\"type\":\"string\"},{\"name\":\"envio\",\"type\":\"string\"},{\"name\":\"sistema\",\"type\":\"string\"},{\"name\":\"salida\",\"type\":\"string\"},{\"name\":\"motivo\",\"type\":\"string\"},{\"name\":\"destinatario\",\"type\":\"string\"},{\"name\":\"destinatarioEstado\",\"type\":\"string\"},{\"name\":\"destinatarioObservacion\",\"type\":\"string\"},{\"name\":\"remitente\",\"type\":\"string\"},{\"name\":\"remitenteEstado\",\"type\":\"string\"},{\"name\":\"remitenteObservacion\",\"type\":\"string\"}],\"name\":\"Andreani.Notificaciones.Events.Records.Notificacion\",\"type\":\"record\"}"
}

func (r Notificacion) SchemaName() string {
	return "Andreani.Notificaciones.Events.Records.Notificacion"
}

func (_ Notificacion) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Notificacion) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Notificacion) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Notificacion) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Notificacion) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Notificacion) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Notificacion) SetString(v string)   { panic("Unsupported operation") }
func (_ Notificacion) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Notificacion) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Long{Target: &r.FechaNotificacion}

		return w

	case 1:
		w := types.Long{Target: &r.FechaEvento}

		return w

	case 2:
		w := types.String{Target: &r.Contrato}

		return w

	case 3:
		w := types.String{Target: &r.Evento}

		return w

	case 4:
		w := types.String{Target: &r.Envio}

		return w

	case 5:
		w := types.String{Target: &r.Sistema}

		return w

	case 6:
		w := types.String{Target: &r.Salida}

		return w

	case 7:
		w := types.String{Target: &r.Motivo}

		return w

	case 8:
		w := types.String{Target: &r.Destinatario}

		return w

	case 9:
		w := types.String{Target: &r.DestinatarioEstado}

		return w

	case 10:
		w := types.String{Target: &r.DestinatarioObservacion}

		return w

	case 11:
		w := types.String{Target: &r.Remitente}

		return w

	case 12:
		w := types.String{Target: &r.RemitenteEstado}

		return w

	case 13:
		w := types.String{Target: &r.RemitenteObservacion}

		return w

	}
	panic("Unknown field index")
}

func (r *Notificacion) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Notificacion) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Notificacion) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Notificacion) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Notificacion) HintSize(int)                     { panic("Unsupported operation") }
func (_ Notificacion) Finalize()                        {}

func (_ Notificacion) AvroCRC64Fingerprint() []byte {
	return []byte(NotificacionAvroCRC64Fingerprint)
}

func (r Notificacion) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["fechaNotificacion"], err = json.Marshal(r.FechaNotificacion)
	if err != nil {
		return nil, err
	}
	output["fechaEvento"], err = json.Marshal(r.FechaEvento)
	if err != nil {
		return nil, err
	}
	output["contrato"], err = json.Marshal(r.Contrato)
	if err != nil {
		return nil, err
	}
	output["evento"], err = json.Marshal(r.Evento)
	if err != nil {
		return nil, err
	}
	output["envio"], err = json.Marshal(r.Envio)
	if err != nil {
		return nil, err
	}
	output["sistema"], err = json.Marshal(r.Sistema)
	if err != nil {
		return nil, err
	}
	output["salida"], err = json.Marshal(r.Salida)
	if err != nil {
		return nil, err
	}
	output["motivo"], err = json.Marshal(r.Motivo)
	if err != nil {
		return nil, err
	}
	output["destinatario"], err = json.Marshal(r.Destinatario)
	if err != nil {
		return nil, err
	}
	output["destinatarioEstado"], err = json.Marshal(r.DestinatarioEstado)
	if err != nil {
		return nil, err
	}
	output["destinatarioObservacion"], err = json.Marshal(r.DestinatarioObservacion)
	if err != nil {
		return nil, err
	}
	output["remitente"], err = json.Marshal(r.Remitente)
	if err != nil {
		return nil, err
	}
	output["remitenteEstado"], err = json.Marshal(r.RemitenteEstado)
	if err != nil {
		return nil, err
	}
	output["remitenteObservacion"], err = json.Marshal(r.RemitenteObservacion)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Notificacion) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["fechaNotificacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaNotificacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fechaNotificacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaEvento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaEvento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fechaEvento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["contrato"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contrato); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for contrato")
	}
	val = func() json.RawMessage {
		if v, ok := fields["evento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Evento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for evento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["envio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Envio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for envio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["sistema"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sistema); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for sistema")
	}
	val = func() json.RawMessage {
		if v, ok := fields["salida"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Salida); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for salida")
	}
	val = func() json.RawMessage {
		if v, ok := fields["motivo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Motivo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for motivo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["destinatario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Destinatario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for destinatario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["destinatarioEstado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinatarioEstado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for destinatarioEstado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["destinatarioObservacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinatarioObservacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for destinatarioObservacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["remitente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Remitente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for remitente")
	}
	val = func() json.RawMessage {
		if v, ok := fields["remitenteEstado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RemitenteEstado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for remitenteEstado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["remitenteObservacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RemitenteObservacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for remitenteObservacion")
	}
	return nil
}
