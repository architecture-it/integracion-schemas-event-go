// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     CorpoShipmentEvent.avsc
 */
package MEunoApiCorpoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CorpoResponse struct {
	Content Content `json:"content"`

	StatusCode int32 `json:"statusCode"`

	Notifications []Notification `json:"notifications"`

	IsValid bool `json:"isValid"`

	Headers Headers `json:"headers"`
}

const CorpoResponseAvroCRC64Fingerprint = "\x8d0ßƒ\xdaj~\xb2"

func NewCorpoResponse() CorpoResponse {
	r := CorpoResponse{}
	r.Content = NewContent()

	r.Notifications = make([]Notification, 0)

	r.Headers = NewHeaders()

	return r
}

func DeserializeCorpoResponse(r io.Reader) (CorpoResponse, error) {
	t := NewCorpoResponse()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCorpoResponseFromSchema(r io.Reader, schema string) (CorpoResponse, error) {
	t := NewCorpoResponse()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCorpoResponse(r CorpoResponse, w io.Writer) error {
	var err error
	err = writeContent(r.Content, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.StatusCode, w)
	if err != nil {
		return err
	}
	err = writeArrayNotification(r.Notifications, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.IsValid, w)
	if err != nil {
		return err
	}
	err = writeHeaders(r.Headers, w)
	if err != nil {
		return err
	}
	return err
}

func (r CorpoResponse) Serialize(w io.Writer) error {
	return writeCorpoResponse(r, w)
}

func (r CorpoResponse) Schema() string {
	return "{\"fields\":[{\"name\":\"content\",\"type\":{\"fields\":[{\"name\":\"envios\",\"type\":{\"items\":{\"fields\":[{\"name\":\"numeroInterno\",\"type\":\"string\"},{\"name\":\"numeroSeguimiento\",\"type\":\"string\"}],\"name\":\"EnvioResponse\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"enviosErroneos\",\"type\":{\"items\":{\"fields\":[{\"name\":\"numeroInterno\",\"type\":\"string\"},{\"name\":\"errorCorpo\",\"type\":\"string\"}],\"name\":\"EnviosErroneo\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Content\",\"type\":\"record\"}},{\"name\":\"statusCode\",\"type\":\"int\"},{\"name\":\"notifications\",\"type\":{\"items\":{\"fields\":[{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"property\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Notification\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"isValid\",\"type\":\"boolean\"},{\"name\":\"headers\",\"type\":{\"fields\":[{\"name\":\"additionalProp1\",\"type\":\"string\"},{\"name\":\"additionalProp2\",\"type\":\"string\"},{\"name\":\"additionalProp3\",\"type\":\"string\"}],\"name\":\"Headers\",\"type\":\"record\"}}],\"name\":\"Andreani.MEunoApiCorpo.Events.Record.Structs.CorpoResponse\",\"type\":\"record\"}"
}

func (r CorpoResponse) SchemaName() string {
	return "Andreani.MEunoApiCorpo.Events.Record.Structs.CorpoResponse"
}

func (_ CorpoResponse) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CorpoResponse) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CorpoResponse) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CorpoResponse) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CorpoResponse) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CorpoResponse) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CorpoResponse) SetString(v string)   { panic("Unsupported operation") }
func (_ CorpoResponse) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CorpoResponse) Get(i int) types.Field {
	switch i {
	case 0:
		r.Content = NewContent()

		w := types.Record{Target: &r.Content}

		return w

	case 1:
		w := types.Int{Target: &r.StatusCode}

		return w

	case 2:
		r.Notifications = make([]Notification, 0)

		w := ArrayNotificationWrapper{Target: &r.Notifications}

		return w

	case 3:
		w := types.Boolean{Target: &r.IsValid}

		return w

	case 4:
		r.Headers = NewHeaders()

		w := types.Record{Target: &r.Headers}

		return w

	}
	panic("Unknown field index")
}

func (r *CorpoResponse) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *CorpoResponse) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ CorpoResponse) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CorpoResponse) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CorpoResponse) HintSize(int)                     { panic("Unsupported operation") }
func (_ CorpoResponse) Finalize()                        {}

func (_ CorpoResponse) AvroCRC64Fingerprint() []byte {
	return []byte(CorpoResponseAvroCRC64Fingerprint)
}

func (r CorpoResponse) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["content"], err = json.Marshal(r.Content)
	if err != nil {
		return nil, err
	}
	output["statusCode"], err = json.Marshal(r.StatusCode)
	if err != nil {
		return nil, err
	}
	output["notifications"], err = json.Marshal(r.Notifications)
	if err != nil {
		return nil, err
	}
	output["isValid"], err = json.Marshal(r.IsValid)
	if err != nil {
		return nil, err
	}
	output["headers"], err = json.Marshal(r.Headers)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CorpoResponse) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["content"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Content); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for content")
	}
	val = func() json.RawMessage {
		if v, ok := fields["statusCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StatusCode); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for statusCode")
	}
	val = func() json.RawMessage {
		if v, ok := fields["notifications"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Notifications); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for notifications")
	}
	val = func() json.RawMessage {
		if v, ok := fields["isValid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IsValid); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for isValid")
	}
	val = func() json.RawMessage {
		if v, ok := fields["headers"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Headers); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for headers")
	}
	return nil
}
