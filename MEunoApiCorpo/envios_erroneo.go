// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EnviosErroneo.avsc
 */
package MEunoApiCorpoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EnviosErroneo struct {
	NumeroInterno string `json:"numeroInterno"`

	ErrorCorpo string `json:"errorCorpo"`
}

const EnviosErroneoAvroCRC64Fingerprint = "@\xd1c\x1e_\x84@\x93"

func NewEnviosErroneo() EnviosErroneo {
	r := EnviosErroneo{}
	return r
}

func DeserializeEnviosErroneo(r io.Reader) (EnviosErroneo, error) {
	t := NewEnviosErroneo()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEnviosErroneoFromSchema(r io.Reader, schema string) (EnviosErroneo, error) {
	t := NewEnviosErroneo()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEnviosErroneo(r EnviosErroneo, w io.Writer) error {
	var err error
	err = vm.WriteString(r.NumeroInterno, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ErrorCorpo, w)
	if err != nil {
		return err
	}
	return err
}

func (r EnviosErroneo) Serialize(w io.Writer) error {
	return writeEnviosErroneo(r, w)
}

func (r EnviosErroneo) Schema() string {
	return "{\"fields\":[{\"name\":\"numeroInterno\",\"type\":\"string\"},{\"name\":\"errorCorpo\",\"type\":\"string\"}],\"name\":\"Andreani.MEunoApiCorpo.Events.Record.Structs.EnviosErroneo\",\"type\":\"record\"}"
}

func (r EnviosErroneo) SchemaName() string {
	return "Andreani.MEunoApiCorpo.Events.Record.Structs.EnviosErroneo"
}

func (_ EnviosErroneo) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EnviosErroneo) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EnviosErroneo) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EnviosErroneo) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EnviosErroneo) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EnviosErroneo) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EnviosErroneo) SetString(v string)   { panic("Unsupported operation") }
func (_ EnviosErroneo) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EnviosErroneo) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.NumeroInterno}

		return w

	case 1:
		w := types.String{Target: &r.ErrorCorpo}

		return w

	}
	panic("Unknown field index")
}

func (r *EnviosErroneo) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *EnviosErroneo) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ EnviosErroneo) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EnviosErroneo) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EnviosErroneo) HintSize(int)                     { panic("Unsupported operation") }
func (_ EnviosErroneo) Finalize()                        {}

func (_ EnviosErroneo) AvroCRC64Fingerprint() []byte {
	return []byte(EnviosErroneoAvroCRC64Fingerprint)
}

func (r EnviosErroneo) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["numeroInterno"], err = json.Marshal(r.NumeroInterno)
	if err != nil {
		return nil, err
	}
	output["errorCorpo"], err = json.Marshal(r.ErrorCorpo)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EnviosErroneo) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["numeroInterno"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroInterno); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroInterno")
	}
	val = func() json.RawMessage {
		if v, ok := fields["errorCorpo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ErrorCorpo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for errorCorpo")
	}
	return nil
}
