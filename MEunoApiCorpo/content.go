// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     CorpoShipmentEvent.avsc
 */
package MEunoApiCorpoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Content struct {
	Envios []EnvioResponse `json:"envios"`

	EnviosErroneos []EnviosErroneo `json:"enviosErroneos"`
}

const ContentAvroCRC64Fingerprint = "\x9a\x0eGKé¡˜+"

func NewContent() Content {
	r := Content{}
	r.Envios = make([]EnvioResponse, 0)

	r.EnviosErroneos = make([]EnviosErroneo, 0)

	return r
}

func DeserializeContent(r io.Reader) (Content, error) {
	t := NewContent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeContentFromSchema(r io.Reader, schema string) (Content, error) {
	t := NewContent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeContent(r Content, w io.Writer) error {
	var err error
	err = writeArrayEnvioResponse(r.Envios, w)
	if err != nil {
		return err
	}
	err = writeArrayEnviosErroneo(r.EnviosErroneos, w)
	if err != nil {
		return err
	}
	return err
}

func (r Content) Serialize(w io.Writer) error {
	return writeContent(r, w)
}

func (r Content) Schema() string {
	return "{\"fields\":[{\"name\":\"envios\",\"type\":{\"items\":{\"fields\":[{\"name\":\"numeroInterno\",\"type\":\"string\"},{\"name\":\"numeroSeguimiento\",\"type\":\"string\"}],\"name\":\"EnvioResponse\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"enviosErroneos\",\"type\":{\"items\":{\"fields\":[{\"name\":\"numeroInterno\",\"type\":\"string\"},{\"name\":\"errorCorpo\",\"type\":\"string\"}],\"name\":\"EnviosErroneo\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Andreani.MEunoApiCorpo.Events.Record.Structs.Content\",\"type\":\"record\"}"
}

func (r Content) SchemaName() string {
	return "Andreani.MEunoApiCorpo.Events.Record.Structs.Content"
}

func (_ Content) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Content) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Content) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Content) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Content) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Content) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Content) SetString(v string)   { panic("Unsupported operation") }
func (_ Content) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Content) Get(i int) types.Field {
	switch i {
	case 0:
		r.Envios = make([]EnvioResponse, 0)

		w := ArrayEnvioResponseWrapper{Target: &r.Envios}

		return w

	case 1:
		r.EnviosErroneos = make([]EnviosErroneo, 0)

		w := ArrayEnviosErroneoWrapper{Target: &r.EnviosErroneos}

		return w

	}
	panic("Unknown field index")
}

func (r *Content) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Content) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Content) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Content) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Content) HintSize(int)                     { panic("Unsupported operation") }
func (_ Content) Finalize()                        {}

func (_ Content) AvroCRC64Fingerprint() []byte {
	return []byte(ContentAvroCRC64Fingerprint)
}

func (r Content) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["envios"], err = json.Marshal(r.Envios)
	if err != nil {
		return nil, err
	}
	output["enviosErroneos"], err = json.Marshal(r.EnviosErroneos)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Content) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["envios"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Envios); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for envios")
	}
	val = func() json.RawMessage {
		if v, ok := fields["enviosErroneos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EnviosErroneos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for enviosErroneos")
	}
	return nil
}
