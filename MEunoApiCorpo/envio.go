// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     SelfTransportShipmentEvent.avsc
 */
package MEunoApiCorpoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Envio struct {
	NumeroContrato string `json:"numeroContrato"`

	TipoServicio string `json:"tipoServicio"`

	ModoEntrega string `json:"modoEntrega"`

	Template string `json:"template"`

	DireccionRemitente DireccionRemitente `json:"direccionRemitente"`

	Destinatario Destinatario `json:"destinatario"`

	DireccionDestinatario DireccionDestinatario `json:"direccionDestinatario"`

	Largo int32 `json:"largo"`

	Ancho int32 `json:"ancho"`

	Alto int32 `json:"alto"`

	Peso int32 `json:"peso"`

	PesoUnidad string `json:"pesoUnidad"`

	CantidadBultos int32 `json:"cantidadBultos"`

	VolumenCm int32 `json:"volumenCm"`

	ValorDeclarado int32 `json:"valorDeclarado"`

	NumeroInterno string `json:"numeroInterno"`

	Remito string `json:"remito"`

	RemitosHijos string `json:"remitosHijos"`

	NumeroPreestablecido string `json:"numeroPreestablecido"`
}

const EnvioAvroCRC64Fingerprint = "r\xf1\xe7\x88c\u05fa>"

func NewEnvio() Envio {
	r := Envio{}
	r.DireccionRemitente = NewDireccionRemitente()

	r.Destinatario = NewDestinatario()

	r.DireccionDestinatario = NewDireccionDestinatario()

	return r
}

func DeserializeEnvio(r io.Reader) (Envio, error) {
	t := NewEnvio()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEnvioFromSchema(r io.Reader, schema string) (Envio, error) {
	t := NewEnvio()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEnvio(r Envio, w io.Writer) error {
	var err error
	err = vm.WriteString(r.NumeroContrato, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.TipoServicio, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ModoEntrega, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Template, w)
	if err != nil {
		return err
	}
	err = writeDireccionRemitente(r.DireccionRemitente, w)
	if err != nil {
		return err
	}
	err = writeDestinatario(r.Destinatario, w)
	if err != nil {
		return err
	}
	err = writeDireccionDestinatario(r.DireccionDestinatario, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Largo, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Ancho, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Alto, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Peso, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.PesoUnidad, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.CantidadBultos, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.VolumenCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.ValorDeclarado, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NumeroInterno, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Remito, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.RemitosHijos, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NumeroPreestablecido, w)
	if err != nil {
		return err
	}
	return err
}

func (r Envio) Serialize(w io.Writer) error {
	return writeEnvio(r, w)
}

func (r Envio) Schema() string {
	return "{\"fields\":[{\"name\":\"numeroContrato\",\"type\":\"string\"},{\"name\":\"tipoServicio\",\"type\":\"string\"},{\"name\":\"modoEntrega\",\"type\":\"string\"},{\"name\":\"template\",\"type\":\"string\"},{\"name\":\"direccionRemitente\",\"type\":{\"fields\":[{\"name\":\"idSucursal\",\"type\":\"int\"},{\"name\":\"calle\",\"type\":\"string\"},{\"name\":\"numero\",\"type\":\"string\"},{\"name\":\"piso\",\"type\":\"string\"},{\"name\":\"unidad\",\"type\":\"string\"},{\"name\":\"codigoPostal\",\"type\":\"string\"},{\"name\":\"localidad\",\"type\":\"string\"},{\"name\":\"provincia\",\"type\":\"string\"},{\"name\":\"observaciones\",\"type\":\"string\"}],\"name\":\"DireccionRemitente\",\"type\":\"record\"}},{\"name\":\"destinatario\",\"type\":{\"fields\":[{\"name\":\"nombre\",\"type\":\"string\"},{\"name\":\"apellido\",\"type\":\"string\"},{\"name\":\"dni\",\"type\":\"string\"},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"telefono\",\"type\":\"string\"}],\"name\":\"Destinatario\",\"type\":\"record\"}},{\"name\":\"direccionDestinatario\",\"type\":{\"fields\":[{\"name\":\"idSucursal\",\"type\":\"int\"},{\"name\":\"calle\",\"type\":\"string\"},{\"name\":\"numero\",\"type\":\"string\"},{\"name\":\"piso\",\"type\":\"string\"},{\"name\":\"unidad\",\"type\":\"string\"},{\"name\":\"codigoPostal\",\"type\":\"string\"},{\"name\":\"localidad\",\"type\":\"string\"},{\"name\":\"provincia\",\"type\":\"string\"},{\"name\":\"observaciones\",\"type\":\"string\"}],\"name\":\"DireccionDestinatario\",\"type\":\"record\"}},{\"name\":\"largo\",\"type\":\"int\"},{\"name\":\"ancho\",\"type\":\"int\"},{\"name\":\"alto\",\"type\":\"int\"},{\"name\":\"peso\",\"type\":\"int\"},{\"name\":\"pesoUnidad\",\"type\":\"string\"},{\"name\":\"cantidadBultos\",\"type\":\"int\"},{\"name\":\"volumenCm\",\"type\":\"int\"},{\"name\":\"valorDeclarado\",\"type\":\"int\"},{\"name\":\"numeroInterno\",\"type\":\"string\"},{\"name\":\"remito\",\"type\":\"string\"},{\"name\":\"remitosHijos\",\"type\":\"string\"},{\"name\":\"numeroPreestablecido\",\"type\":\"string\"}],\"name\":\"Andreani.MEunoApiCorpo.Events.Record.Structs.Envio\",\"type\":\"record\"}"
}

func (r Envio) SchemaName() string {
	return "Andreani.MEunoApiCorpo.Events.Record.Structs.Envio"
}

func (_ Envio) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Envio) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Envio) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Envio) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Envio) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Envio) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Envio) SetString(v string)   { panic("Unsupported operation") }
func (_ Envio) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Envio) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.NumeroContrato}

		return w

	case 1:
		w := types.String{Target: &r.TipoServicio}

		return w

	case 2:
		w := types.String{Target: &r.ModoEntrega}

		return w

	case 3:
		w := types.String{Target: &r.Template}

		return w

	case 4:
		r.DireccionRemitente = NewDireccionRemitente()

		w := types.Record{Target: &r.DireccionRemitente}

		return w

	case 5:
		r.Destinatario = NewDestinatario()

		w := types.Record{Target: &r.Destinatario}

		return w

	case 6:
		r.DireccionDestinatario = NewDireccionDestinatario()

		w := types.Record{Target: &r.DireccionDestinatario}

		return w

	case 7:
		w := types.Int{Target: &r.Largo}

		return w

	case 8:
		w := types.Int{Target: &r.Ancho}

		return w

	case 9:
		w := types.Int{Target: &r.Alto}

		return w

	case 10:
		w := types.Int{Target: &r.Peso}

		return w

	case 11:
		w := types.String{Target: &r.PesoUnidad}

		return w

	case 12:
		w := types.Int{Target: &r.CantidadBultos}

		return w

	case 13:
		w := types.Int{Target: &r.VolumenCm}

		return w

	case 14:
		w := types.Int{Target: &r.ValorDeclarado}

		return w

	case 15:
		w := types.String{Target: &r.NumeroInterno}

		return w

	case 16:
		w := types.String{Target: &r.Remito}

		return w

	case 17:
		w := types.String{Target: &r.RemitosHijos}

		return w

	case 18:
		w := types.String{Target: &r.NumeroPreestablecido}

		return w

	}
	panic("Unknown field index")
}

func (r *Envio) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Envio) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Envio) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Envio) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Envio) HintSize(int)                     { panic("Unsupported operation") }
func (_ Envio) Finalize()                        {}

func (_ Envio) AvroCRC64Fingerprint() []byte {
	return []byte(EnvioAvroCRC64Fingerprint)
}

func (r Envio) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["numeroContrato"], err = json.Marshal(r.NumeroContrato)
	if err != nil {
		return nil, err
	}
	output["tipoServicio"], err = json.Marshal(r.TipoServicio)
	if err != nil {
		return nil, err
	}
	output["modoEntrega"], err = json.Marshal(r.ModoEntrega)
	if err != nil {
		return nil, err
	}
	output["template"], err = json.Marshal(r.Template)
	if err != nil {
		return nil, err
	}
	output["direccionRemitente"], err = json.Marshal(r.DireccionRemitente)
	if err != nil {
		return nil, err
	}
	output["destinatario"], err = json.Marshal(r.Destinatario)
	if err != nil {
		return nil, err
	}
	output["direccionDestinatario"], err = json.Marshal(r.DireccionDestinatario)
	if err != nil {
		return nil, err
	}
	output["largo"], err = json.Marshal(r.Largo)
	if err != nil {
		return nil, err
	}
	output["ancho"], err = json.Marshal(r.Ancho)
	if err != nil {
		return nil, err
	}
	output["alto"], err = json.Marshal(r.Alto)
	if err != nil {
		return nil, err
	}
	output["peso"], err = json.Marshal(r.Peso)
	if err != nil {
		return nil, err
	}
	output["pesoUnidad"], err = json.Marshal(r.PesoUnidad)
	if err != nil {
		return nil, err
	}
	output["cantidadBultos"], err = json.Marshal(r.CantidadBultos)
	if err != nil {
		return nil, err
	}
	output["volumenCm"], err = json.Marshal(r.VolumenCm)
	if err != nil {
		return nil, err
	}
	output["valorDeclarado"], err = json.Marshal(r.ValorDeclarado)
	if err != nil {
		return nil, err
	}
	output["numeroInterno"], err = json.Marshal(r.NumeroInterno)
	if err != nil {
		return nil, err
	}
	output["remito"], err = json.Marshal(r.Remito)
	if err != nil {
		return nil, err
	}
	output["remitosHijos"], err = json.Marshal(r.RemitosHijos)
	if err != nil {
		return nil, err
	}
	output["numeroPreestablecido"], err = json.Marshal(r.NumeroPreestablecido)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Envio) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["numeroContrato"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroContrato); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroContrato")
	}
	val = func() json.RawMessage {
		if v, ok := fields["tipoServicio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoServicio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for tipoServicio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["modoEntrega"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ModoEntrega); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for modoEntrega")
	}
	val = func() json.RawMessage {
		if v, ok := fields["template"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Template); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for template")
	}
	val = func() json.RawMessage {
		if v, ok := fields["direccionRemitente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DireccionRemitente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for direccionRemitente")
	}
	val = func() json.RawMessage {
		if v, ok := fields["destinatario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Destinatario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for destinatario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["direccionDestinatario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DireccionDestinatario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for direccionDestinatario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["largo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Largo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for largo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ancho"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ancho); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ancho")
	}
	val = func() json.RawMessage {
		if v, ok := fields["alto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Alto); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for alto")
	}
	val = func() json.RawMessage {
		if v, ok := fields["peso"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Peso); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for peso")
	}
	val = func() json.RawMessage {
		if v, ok := fields["pesoUnidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoUnidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for pesoUnidad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["cantidadBultos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CantidadBultos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for cantidadBultos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["volumenCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VolumenCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for volumenCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["valorDeclarado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValorDeclarado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for valorDeclarado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numeroInterno"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroInterno); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroInterno")
	}
	val = func() json.RawMessage {
		if v, ok := fields["remito"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Remito); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for remito")
	}
	val = func() json.RawMessage {
		if v, ok := fields["remitosHijos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RemitosHijos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for remitosHijos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numeroPreestablecido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroPreestablecido); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroPreestablecido")
	}
	return nil
}
