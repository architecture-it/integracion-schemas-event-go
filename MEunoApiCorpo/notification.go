// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Notification.avsc
 */
package MEunoApiCorpoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Notification struct {
	Code string `json:"code"`

	Property string `json:"property"`

	Message string `json:"message"`
}

const NotificationAvroCRC64Fingerprint = "\xb6\xb2Em\x91\x00\x82>"

func NewNotification() Notification {
	r := Notification{}
	return r
}

func DeserializeNotification(r io.Reader) (Notification, error) {
	t := NewNotification()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeNotificationFromSchema(r io.Reader, schema string) (Notification, error) {
	t := NewNotification()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeNotification(r Notification, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Code, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Property, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Message, w)
	if err != nil {
		return err
	}
	return err
}

func (r Notification) Serialize(w io.Writer) error {
	return writeNotification(r, w)
}

func (r Notification) Schema() string {
	return "{\"fields\":[{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"property\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Andreani.MEunoApiCorpo.Events.Record.Structs.Notification\",\"type\":\"record\"}"
}

func (r Notification) SchemaName() string {
	return "Andreani.MEunoApiCorpo.Events.Record.Structs.Notification"
}

func (_ Notification) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Notification) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Notification) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Notification) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Notification) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Notification) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Notification) SetString(v string)   { panic("Unsupported operation") }
func (_ Notification) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Notification) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Code}

		return w

	case 1:
		w := types.String{Target: &r.Property}

		return w

	case 2:
		w := types.String{Target: &r.Message}

		return w

	}
	panic("Unknown field index")
}

func (r *Notification) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Notification) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Notification) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Notification) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Notification) HintSize(int)                     { panic("Unsupported operation") }
func (_ Notification) Finalize()                        {}

func (_ Notification) AvroCRC64Fingerprint() []byte {
	return []byte(NotificationAvroCRC64Fingerprint)
}

func (r Notification) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["code"], err = json.Marshal(r.Code)
	if err != nil {
		return nil, err
	}
	output["property"], err = json.Marshal(r.Property)
	if err != nil {
		return nil, err
	}
	output["message"], err = json.Marshal(r.Message)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Notification) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["code"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Code); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for code")
	}
	val = func() json.RawMessage {
		if v, ok := fields["property"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Property); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for property")
	}
	val = func() json.RawMessage {
		if v, ok := fields["message"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Message); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for message")
	}
	return nil
}
