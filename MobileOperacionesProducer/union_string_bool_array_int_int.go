// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TareaMobileConformada.avsc
 */
package MobileOperacionesProducerEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionStringBoolArrayIntIntTypeEnum int

const (
	UnionStringBoolArrayIntIntTypeEnumString UnionStringBoolArrayIntIntTypeEnum = 0

	UnionStringBoolArrayIntIntTypeEnumBool UnionStringBoolArrayIntIntTypeEnum = 1

	UnionStringBoolArrayIntIntTypeEnumArrayInt UnionStringBoolArrayIntIntTypeEnum = 2

	UnionStringBoolArrayIntIntTypeEnumInt UnionStringBoolArrayIntIntTypeEnum = 3
)

type UnionStringBoolArrayIntInt struct {
	String    string
	Bool      bool
	ArrayInt  []int32
	Int       int32
	UnionType UnionStringBoolArrayIntIntTypeEnum
}

func writeUnionStringBoolArrayIntInt(r UnionStringBoolArrayIntInt, w io.Writer) error {

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionStringBoolArrayIntIntTypeEnumString:
		return vm.WriteString(r.String, w)
	case UnionStringBoolArrayIntIntTypeEnumBool:
		return vm.WriteBool(r.Bool, w)
	case UnionStringBoolArrayIntIntTypeEnumArrayInt:
		return writeArrayInt(r.ArrayInt, w)
	case UnionStringBoolArrayIntIntTypeEnumInt:
		return vm.WriteInt(r.Int, w)
	}
	return fmt.Errorf("invalid value for UnionStringBoolArrayIntInt")
}

func NewUnionStringBoolArrayIntInt() UnionStringBoolArrayIntInt {
	return UnionStringBoolArrayIntInt{}
}

func (r UnionStringBoolArrayIntInt) Serialize(w io.Writer) error {
	return writeUnionStringBoolArrayIntInt(r, w)
}

func DeserializeUnionStringBoolArrayIntInt(r io.Reader) (UnionStringBoolArrayIntInt, error) {
	t := NewUnionStringBoolArrayIntInt()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionStringBoolArrayIntIntFromSchema(r io.Reader, schema string) (UnionStringBoolArrayIntInt, error) {
	t := NewUnionStringBoolArrayIntInt()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r UnionStringBoolArrayIntInt) Schema() string {
	return "[\"string\",\"boolean\",{\"items\":\"int\",\"type\":\"array\"},\"int\"]"
}

func (_ UnionStringBoolArrayIntInt) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ UnionStringBoolArrayIntInt) SetInt(v int32)      { panic("Unsupported operation") }
func (_ UnionStringBoolArrayIntInt) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ UnionStringBoolArrayIntInt) SetDouble(v float64) { panic("Unsupported operation") }
func (_ UnionStringBoolArrayIntInt) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ UnionStringBoolArrayIntInt) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionStringBoolArrayIntInt) SetLong(v int64) {

	r.UnionType = (UnionStringBoolArrayIntIntTypeEnum)(v)
}

func (r *UnionStringBoolArrayIntInt) Get(i int) types.Field {

	switch i {
	case 0:
		return &types.String{Target: (&r.String)}
	case 1:
		return &types.Boolean{Target: (&r.Bool)}
	case 2:
		r.ArrayInt = make([]int32, 0)
		return &ArrayIntWrapper{Target: (&r.ArrayInt)}
	case 3:
		return &types.Int{Target: (&r.Int)}
	}
	panic("Unknown field index")
}
func (_ UnionStringBoolArrayIntInt) NullField(i int)                  { panic("Unsupported operation") }
func (_ UnionStringBoolArrayIntInt) HintSize(i int)                   { panic("Unsupported operation") }
func (_ UnionStringBoolArrayIntInt) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ UnionStringBoolArrayIntInt) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ UnionStringBoolArrayIntInt) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ UnionStringBoolArrayIntInt) Finalize()                        {}

func (r UnionStringBoolArrayIntInt) MarshalJSON() ([]byte, error) {

	switch r.UnionType {
	case UnionStringBoolArrayIntIntTypeEnumString:
		return json.Marshal(map[string]interface{}{"string": r.String})
	case UnionStringBoolArrayIntIntTypeEnumBool:
		return json.Marshal(map[string]interface{}{"boolean": r.Bool})
	case UnionStringBoolArrayIntIntTypeEnumArrayInt:
		return json.Marshal(map[string]interface{}{"array": r.ArrayInt})
	case UnionStringBoolArrayIntIntTypeEnumInt:
		return json.Marshal(map[string]interface{}{"int": r.Int})
	}
	return nil, fmt.Errorf("invalid value for UnionStringBoolArrayIntInt")
}

func (r *UnionStringBoolArrayIntInt) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["string"]; ok {
		r.UnionType = 0
		return json.Unmarshal([]byte(value), &r.String)
	}
	if value, ok := fields["boolean"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.Bool)
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 2
		return json.Unmarshal([]byte(value), &r.ArrayInt)
	}
	if value, ok := fields["int"]; ok {
		r.UnionType = 3
		return json.Unmarshal([]byte(value), &r.Int)
	}
	return fmt.Errorf("invalid value for UnionStringBoolArrayIntInt")
}
