// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     PagoV2.avsc
 */
package MobileOperacionesProducerEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullDetallePagoV2TypeEnum int

const (
	UnionNullDetallePagoV2TypeEnumDetallePagoV2 UnionNullDetallePagoV2TypeEnum = 1
)

type UnionNullDetallePagoV2 struct {
	Null          *types.NullVal
	DetallePagoV2 DetallePagoV2
	UnionType     UnionNullDetallePagoV2TypeEnum
}

func writeUnionNullDetallePagoV2(r *UnionNullDetallePagoV2, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullDetallePagoV2TypeEnumDetallePagoV2:
		return writeDetallePagoV2(r.DetallePagoV2, w)
	}
	return fmt.Errorf("invalid value for *UnionNullDetallePagoV2")
}

func NewUnionNullDetallePagoV2() *UnionNullDetallePagoV2 {
	return &UnionNullDetallePagoV2{}
}

func (r *UnionNullDetallePagoV2) Serialize(w io.Writer) error {
	return writeUnionNullDetallePagoV2(r, w)
}

func DeserializeUnionNullDetallePagoV2(r io.Reader) (*UnionNullDetallePagoV2, error) {
	t := NewUnionNullDetallePagoV2()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullDetallePagoV2FromSchema(r io.Reader, schema string) (*UnionNullDetallePagoV2, error) {
	t := NewUnionNullDetallePagoV2()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullDetallePagoV2) Schema() string {
	return "[\"null\",{\"fields\":[{\"name\":\"bancoEmisor\",\"type\":[\"null\",\"string\"]},{\"name\":\"fechaDeEmision\",\"type\":[\"null\",\"string\"]},{\"name\":\"fechaDeVencimiento\",\"type\":[\"null\",\"string\"]},{\"name\":\"numeroDeCheque\",\"type\":[\"null\",\"string\"]},{\"name\":\"numeroDeRetencion\",\"type\":[\"null\",\"string\"]},{\"name\":\"numeroNotaCredito\",\"type\":[\"null\",\"string\"]},{\"name\":\"notas\",\"type\":[\"null\",\"string\"]}],\"name\":\"DetallePagoV2\",\"type\":\"record\"}]"
}

func (_ *UnionNullDetallePagoV2) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullDetallePagoV2) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullDetallePagoV2) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullDetallePagoV2) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullDetallePagoV2) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullDetallePagoV2) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullDetallePagoV2) SetLong(v int64) {

	r.UnionType = (UnionNullDetallePagoV2TypeEnum)(v)
}

func (r *UnionNullDetallePagoV2) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.DetallePagoV2 = NewDetallePagoV2()
		return &types.Record{Target: (&r.DetallePagoV2)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullDetallePagoV2) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionNullDetallePagoV2) HintSize(i int)                   { panic("Unsupported operation") }
func (_ *UnionNullDetallePagoV2) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionNullDetallePagoV2) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullDetallePagoV2) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionNullDetallePagoV2) Finalize()                        {}

func (r *UnionNullDetallePagoV2) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullDetallePagoV2TypeEnumDetallePagoV2:
		return json.Marshal(map[string]interface{}{"Andreani.MobileOperacionesProducer.Events.Record.DetallePagoV2": r.DetallePagoV2})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullDetallePagoV2")
}

func (r *UnionNullDetallePagoV2) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["Andreani.MobileOperacionesProducer.Events.Record.DetallePagoV2"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.DetallePagoV2)
	}
	return fmt.Errorf("invalid value for *UnionNullDetallePagoV2")
}
