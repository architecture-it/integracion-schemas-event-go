// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     RetiroDeValorMobile.avsc
 */
package MobileOperacionesProducerEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DetallePago struct {
	BancoEmisor *UnionNullString `json:"bancoEmisor"`

	FechaDePago *UnionNullString `json:"fechaDePago"`

	NumeroDeCheque *UnionNullString `json:"numeroDeCheque"`

	NumeroDeRetencion *UnionNullString `json:"numeroDeRetencion"`

	NumeroNotaCredito *UnionNullString `json:"numeroNotaCredito"`

	Notas *UnionNullString `json:"notas"`
}

const DetallePagoAvroCRC64Fingerprint = "+!i#l\xab\v\n"

func NewDetallePago() DetallePago {
	r := DetallePago{}
	return r
}

func DeserializeDetallePago(r io.Reader) (DetallePago, error) {
	t := NewDetallePago()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDetallePagoFromSchema(r io.Reader, schema string) (DetallePago, error) {
	t := NewDetallePago()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDetallePago(r DetallePago, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.BancoEmisor, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.FechaDePago, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NumeroDeCheque, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NumeroDeRetencion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NumeroNotaCredito, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Notas, w)
	if err != nil {
		return err
	}
	return err
}

func (r DetallePago) Serialize(w io.Writer) error {
	return writeDetallePago(r, w)
}

func (r DetallePago) Schema() string {
	return "{\"fields\":[{\"name\":\"bancoEmisor\",\"type\":[\"null\",\"string\"]},{\"name\":\"fechaDePago\",\"type\":[\"null\",\"string\"]},{\"name\":\"numeroDeCheque\",\"type\":[\"null\",\"string\"]},{\"name\":\"numeroDeRetencion\",\"type\":[\"null\",\"string\"]},{\"name\":\"numeroNotaCredito\",\"type\":[\"null\",\"string\"]},{\"name\":\"notas\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.MobileOperacionesProducer.Events.Record.DetallePago\",\"type\":\"record\"}"
}

func (r DetallePago) SchemaName() string {
	return "Andreani.MobileOperacionesProducer.Events.Record.DetallePago"
}

func (_ DetallePago) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DetallePago) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DetallePago) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DetallePago) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DetallePago) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DetallePago) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DetallePago) SetString(v string)   { panic("Unsupported operation") }
func (_ DetallePago) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DetallePago) Get(i int) types.Field {
	switch i {
	case 0:
		r.BancoEmisor = NewUnionNullString()

		return r.BancoEmisor
	case 1:
		r.FechaDePago = NewUnionNullString()

		return r.FechaDePago
	case 2:
		r.NumeroDeCheque = NewUnionNullString()

		return r.NumeroDeCheque
	case 3:
		r.NumeroDeRetencion = NewUnionNullString()

		return r.NumeroDeRetencion
	case 4:
		r.NumeroNotaCredito = NewUnionNullString()

		return r.NumeroNotaCredito
	case 5:
		r.Notas = NewUnionNullString()

		return r.Notas
	}
	panic("Unknown field index")
}

func (r *DetallePago) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *DetallePago) NullField(i int) {
	switch i {
	case 0:
		r.BancoEmisor = nil
		return
	case 1:
		r.FechaDePago = nil
		return
	case 2:
		r.NumeroDeCheque = nil
		return
	case 3:
		r.NumeroDeRetencion = nil
		return
	case 4:
		r.NumeroNotaCredito = nil
		return
	case 5:
		r.Notas = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ DetallePago) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DetallePago) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DetallePago) HintSize(int)                     { panic("Unsupported operation") }
func (_ DetallePago) Finalize()                        {}

func (_ DetallePago) AvroCRC64Fingerprint() []byte {
	return []byte(DetallePagoAvroCRC64Fingerprint)
}

func (r DetallePago) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["bancoEmisor"], err = json.Marshal(r.BancoEmisor)
	if err != nil {
		return nil, err
	}
	output["fechaDePago"], err = json.Marshal(r.FechaDePago)
	if err != nil {
		return nil, err
	}
	output["numeroDeCheque"], err = json.Marshal(r.NumeroDeCheque)
	if err != nil {
		return nil, err
	}
	output["numeroDeRetencion"], err = json.Marshal(r.NumeroDeRetencion)
	if err != nil {
		return nil, err
	}
	output["numeroNotaCredito"], err = json.Marshal(r.NumeroNotaCredito)
	if err != nil {
		return nil, err
	}
	output["notas"], err = json.Marshal(r.Notas)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DetallePago) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["bancoEmisor"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BancoEmisor); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for bancoEmisor")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaDePago"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaDePago); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fechaDePago")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numeroDeCheque"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeCheque); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroDeCheque")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numeroDeRetencion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeRetencion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroDeRetencion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numeroNotaCredito"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroNotaCredito); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroNotaCredito")
	}
	val = func() json.RawMessage {
		if v, ok := fields["notas"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Notas); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for notas")
	}
	return nil
}
