// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     RetiroDeValorMobile.avsc
 */
package MobileOperacionesProducerEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Pagos struct {
	TipoPago string `json:"tipoPago"`

	ImporteCobrado float64 `json:"importeCobrado"`

	Comprobante string `json:"comprobante"`

	Detalles *UnionNullDetallePago `json:"detalles"`
}

const PagosAvroCRC64Fingerprint = "\xe1p\xb7\xca\xdbf\xa0\xa7"

func NewPagos() Pagos {
	r := Pagos{}
	return r
}

func DeserializePagos(r io.Reader) (Pagos, error) {
	t := NewPagos()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePagosFromSchema(r io.Reader, schema string) (Pagos, error) {
	t := NewPagos()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePagos(r Pagos, w io.Writer) error {
	var err error
	err = vm.WriteString(r.TipoPago, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.ImporteCobrado, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Comprobante, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDetallePago(r.Detalles, w)
	if err != nil {
		return err
	}
	return err
}

func (r Pagos) Serialize(w io.Writer) error {
	return writePagos(r, w)
}

func (r Pagos) Schema() string {
	return "{\"fields\":[{\"name\":\"tipoPago\",\"type\":\"string\"},{\"name\":\"importeCobrado\",\"type\":\"double\"},{\"name\":\"comprobante\",\"type\":\"string\"},{\"name\":\"detalles\",\"type\":[\"null\",{\"fields\":[{\"name\":\"bancoEmisor\",\"type\":[\"null\",\"string\"]},{\"name\":\"fechaDePago\",\"type\":[\"null\",\"string\"]},{\"name\":\"numeroDeCheque\",\"type\":[\"null\",\"string\"]},{\"name\":\"numeroDeRetencion\",\"type\":[\"null\",\"string\"]},{\"name\":\"numeroNotaCredito\",\"type\":[\"null\",\"string\"]},{\"name\":\"notas\",\"type\":[\"null\",\"string\"]}],\"name\":\"DetallePago\",\"type\":\"record\"}]}],\"name\":\"Andreani.MobileOperacionesProducer.Events.Record.Pagos\",\"type\":\"record\"}"
}

func (r Pagos) SchemaName() string {
	return "Andreani.MobileOperacionesProducer.Events.Record.Pagos"
}

func (_ Pagos) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Pagos) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Pagos) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Pagos) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Pagos) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Pagos) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Pagos) SetString(v string)   { panic("Unsupported operation") }
func (_ Pagos) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Pagos) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.TipoPago}

		return w

	case 1:
		w := types.Double{Target: &r.ImporteCobrado}

		return w

	case 2:
		w := types.String{Target: &r.Comprobante}

		return w

	case 3:
		r.Detalles = NewUnionNullDetallePago()

		return r.Detalles
	}
	panic("Unknown field index")
}

func (r *Pagos) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Pagos) NullField(i int) {
	switch i {
	case 3:
		r.Detalles = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Pagos) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Pagos) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Pagos) HintSize(int)                     { panic("Unsupported operation") }
func (_ Pagos) Finalize()                        {}

func (_ Pagos) AvroCRC64Fingerprint() []byte {
	return []byte(PagosAvroCRC64Fingerprint)
}

func (r Pagos) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["tipoPago"], err = json.Marshal(r.TipoPago)
	if err != nil {
		return nil, err
	}
	output["importeCobrado"], err = json.Marshal(r.ImporteCobrado)
	if err != nil {
		return nil, err
	}
	output["comprobante"], err = json.Marshal(r.Comprobante)
	if err != nil {
		return nil, err
	}
	output["detalles"], err = json.Marshal(r.Detalles)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Pagos) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["tipoPago"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoPago); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for tipoPago")
	}
	val = func() json.RawMessage {
		if v, ok := fields["importeCobrado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ImporteCobrado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for importeCobrado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["comprobante"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Comprobante); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for comprobante")
	}
	val = func() json.RawMessage {
		if v, ok := fields["detalles"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Detalles); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for detalles")
	}
	return nil
}
