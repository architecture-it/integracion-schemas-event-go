// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Usuario.avsc
 */
package MobileOperacionesProducerEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Usuario struct {
	Username string `json:"username"`

	Dni string `json:"dni"`

	Nombre string `json:"nombre"`

	Apellido string `json:"apellido"`
}

const UsuarioAvroCRC64Fingerprint = "L\xc9XB\x9e\x00Ê¥"

func NewUsuario() Usuario {
	r := Usuario{}
	return r
}

func DeserializeUsuario(r io.Reader) (Usuario, error) {
	t := NewUsuario()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeUsuarioFromSchema(r io.Reader, schema string) (Usuario, error) {
	t := NewUsuario()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeUsuario(r Usuario, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Username, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Dni, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Nombre, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Apellido, w)
	if err != nil {
		return err
	}
	return err
}

func (r Usuario) Serialize(w io.Writer) error {
	return writeUsuario(r, w)
}

func (r Usuario) Schema() string {
	return "{\"fields\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"dni\",\"type\":\"string\"},{\"name\":\"nombre\",\"type\":\"string\"},{\"name\":\"apellido\",\"type\":\"string\"}],\"name\":\"Andreani.MobileOperacionesProducer.Events.Record.Usuario\",\"type\":\"record\"}"
}

func (r Usuario) SchemaName() string {
	return "Andreani.MobileOperacionesProducer.Events.Record.Usuario"
}

func (_ Usuario) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Usuario) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Usuario) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Usuario) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Usuario) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Usuario) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Usuario) SetString(v string)   { panic("Unsupported operation") }
func (_ Usuario) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Usuario) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Username}

		return w

	case 1:
		w := types.String{Target: &r.Dni}

		return w

	case 2:
		w := types.String{Target: &r.Nombre}

		return w

	case 3:
		w := types.String{Target: &r.Apellido}

		return w

	}
	panic("Unknown field index")
}

func (r *Usuario) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Usuario) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Usuario) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Usuario) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Usuario) HintSize(int)                     { panic("Unsupported operation") }
func (_ Usuario) Finalize()                        {}

func (_ Usuario) AvroCRC64Fingerprint() []byte {
	return []byte(UsuarioAvroCRC64Fingerprint)
}

func (r Usuario) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["username"], err = json.Marshal(r.Username)
	if err != nil {
		return nil, err
	}
	output["dni"], err = json.Marshal(r.Dni)
	if err != nil {
		return nil, err
	}
	output["nombre"], err = json.Marshal(r.Nombre)
	if err != nil {
		return nil, err
	}
	output["apellido"], err = json.Marshal(r.Apellido)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Usuario) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["username"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Username); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for username")
	}
	val = func() json.RawMessage {
		if v, ok := fields["dni"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Dni); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for dni")
	}
	val = func() json.RawMessage {
		if v, ok := fields["nombre"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nombre); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for nombre")
	}
	val = func() json.RawMessage {
		if v, ok := fields["apellido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Apellido); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for apellido")
	}
	return nil
}
