// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ContratosDeshabilitadosEvent.avsc
 */
package AcomPreenviosEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ContratosDeshabilitadosEvent struct {
	Contratos []Contrato `json:"contratos"`
}

const ContratosDeshabilitadosEventAvroCRC64Fingerprint = "\xff`\xca\xf0\xde\x0f\xd9\x11"

func NewContratosDeshabilitadosEvent() ContratosDeshabilitadosEvent {
	r := ContratosDeshabilitadosEvent{}
	r.Contratos = make([]Contrato, 0)

	return r
}

func DeserializeContratosDeshabilitadosEvent(r io.Reader) (ContratosDeshabilitadosEvent, error) {
	t := NewContratosDeshabilitadosEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeContratosDeshabilitadosEventFromSchema(r io.Reader, schema string) (ContratosDeshabilitadosEvent, error) {
	t := NewContratosDeshabilitadosEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeContratosDeshabilitadosEvent(r ContratosDeshabilitadosEvent, w io.Writer) error {
	var err error
	err = writeArrayContrato(r.Contratos, w)
	if err != nil {
		return err
	}
	return err
}

func (r ContratosDeshabilitadosEvent) Serialize(w io.Writer) error {
	return writeContratosDeshabilitadosEvent(r, w)
}

func (r ContratosDeshabilitadosEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"contratos\",\"type\":{\"items\":{\"fields\":[{\"name\":\"Numero\",\"type\":\"string\"}],\"name\":\"Contrato\",\"namespace\":\"Andreani.AcomPreenvios.Events.Common\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Andreani.AcomPreenvios.Events.Record.ContratosDeshabilitadosEvent\",\"type\":\"record\"}"
}

func (r ContratosDeshabilitadosEvent) SchemaName() string {
	return "Andreani.AcomPreenvios.Events.Record.ContratosDeshabilitadosEvent"
}

func (_ ContratosDeshabilitadosEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ContratosDeshabilitadosEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ContratosDeshabilitadosEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ContratosDeshabilitadosEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ContratosDeshabilitadosEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ContratosDeshabilitadosEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ContratosDeshabilitadosEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ ContratosDeshabilitadosEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ContratosDeshabilitadosEvent) Get(i int) types.Field {
	switch i {
	case 0:
		r.Contratos = make([]Contrato, 0)

		w := ArrayContratoWrapper{Target: &r.Contratos}

		return w

	}
	panic("Unknown field index")
}

func (r *ContratosDeshabilitadosEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ContratosDeshabilitadosEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ ContratosDeshabilitadosEvent) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ ContratosDeshabilitadosEvent) AppendArray() types.Field { panic("Unsupported operation") }
func (_ ContratosDeshabilitadosEvent) HintSize(int)             { panic("Unsupported operation") }
func (_ ContratosDeshabilitadosEvent) Finalize()                {}

func (_ ContratosDeshabilitadosEvent) AvroCRC64Fingerprint() []byte {
	return []byte(ContratosDeshabilitadosEventAvroCRC64Fingerprint)
}

func (r ContratosDeshabilitadosEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["contratos"], err = json.Marshal(r.Contratos)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ContratosDeshabilitadosEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["contratos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contratos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for contratos")
	}
	return nil
}
