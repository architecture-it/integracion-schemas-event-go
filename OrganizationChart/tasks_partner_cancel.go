// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TasksPartnerCancel.avsc
 */
package OrganizationChartEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TasksPartnerCancel struct {
	TaskId *UnionNullString `json:"taskId"`

	PartnerId *UnionNullString `json:"partnerId"`

	Amount int32 `json:"amount"`

	TotalAmount int32 `json:"totalAmount"`
}

const TasksPartnerCancelAvroCRC64Fingerprint = "\x8a\xea\x01?\xe7|\x94\x18"

func NewTasksPartnerCancel() TasksPartnerCancel {
	r := TasksPartnerCancel{}
	r.TaskId = nil
	r.PartnerId = nil
	return r
}

func DeserializeTasksPartnerCancel(r io.Reader) (TasksPartnerCancel, error) {
	t := NewTasksPartnerCancel()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTasksPartnerCancelFromSchema(r io.Reader, schema string) (TasksPartnerCancel, error) {
	t := NewTasksPartnerCancel()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTasksPartnerCancel(r TasksPartnerCancel, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.TaskId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PartnerId, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Amount, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.TotalAmount, w)
	if err != nil {
		return err
	}
	return err
}

func (r TasksPartnerCancel) Serialize(w io.Writer) error {
	return writeTasksPartnerCancel(r, w)
}

func (r TasksPartnerCancel) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"taskId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"partnerId\",\"type\":[\"null\",\"string\"]},{\"name\":\"amount\",\"type\":\"int\"},{\"name\":\"totalAmount\",\"type\":\"int\"}],\"name\":\"Andreani.OrganizationChart.Events.Record.TasksPartnerCancel\",\"type\":\"record\"}"
}

func (r TasksPartnerCancel) SchemaName() string {
	return "Andreani.OrganizationChart.Events.Record.TasksPartnerCancel"
}

func (_ TasksPartnerCancel) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TasksPartnerCancel) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TasksPartnerCancel) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TasksPartnerCancel) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TasksPartnerCancel) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TasksPartnerCancel) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TasksPartnerCancel) SetString(v string)   { panic("Unsupported operation") }
func (_ TasksPartnerCancel) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TasksPartnerCancel) Get(i int) types.Field {
	switch i {
	case 0:
		r.TaskId = NewUnionNullString()

		return r.TaskId
	case 1:
		r.PartnerId = NewUnionNullString()

		return r.PartnerId
	case 2:
		w := types.Int{Target: &r.Amount}

		return w

	case 3:
		w := types.Int{Target: &r.TotalAmount}

		return w

	}
	panic("Unknown field index")
}

func (r *TasksPartnerCancel) SetDefault(i int) {
	switch i {
	case 0:
		r.TaskId = nil
		return
	case 1:
		r.PartnerId = nil
		return
	}
	panic("Unknown field index")
}

func (r *TasksPartnerCancel) NullField(i int) {
	switch i {
	case 0:
		r.TaskId = nil
		return
	case 1:
		r.PartnerId = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ TasksPartnerCancel) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TasksPartnerCancel) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TasksPartnerCancel) HintSize(int)                     { panic("Unsupported operation") }
func (_ TasksPartnerCancel) Finalize()                        {}

func (_ TasksPartnerCancel) AvroCRC64Fingerprint() []byte {
	return []byte(TasksPartnerCancelAvroCRC64Fingerprint)
}

func (r TasksPartnerCancel) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["taskId"], err = json.Marshal(r.TaskId)
	if err != nil {
		return nil, err
	}
	output["partnerId"], err = json.Marshal(r.PartnerId)
	if err != nil {
		return nil, err
	}
	output["amount"], err = json.Marshal(r.Amount)
	if err != nil {
		return nil, err
	}
	output["totalAmount"], err = json.Marshal(r.TotalAmount)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TasksPartnerCancel) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["taskId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TaskId); err != nil {
			return err
		}
	} else {
		r.TaskId = NewUnionNullString()

		r.TaskId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["partnerId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PartnerId); err != nil {
			return err
		}
	} else {
		r.PartnerId = NewUnionNullString()

		r.PartnerId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["amount"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Amount); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for amount")
	}
	val = func() json.RawMessage {
		if v, ok := fields["totalAmount"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TotalAmount); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for totalAmount")
	}
	return nil
}
