// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     RoleUpdate.avsc
 */
package OrganizationChartEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type RoleUpdate struct {
	RoleId *UnionNullString `json:"roleId"`

	Name *UnionNullString `json:"name"`

	Permissions *UnionNullArrayString `json:"permissions"`
}

const RoleUpdateAvroCRC64Fingerprint = "\x82\xc2\xdf\xca!<w\x99"

func NewRoleUpdate() RoleUpdate {
	r := RoleUpdate{}
	r.RoleId = nil
	r.Name = nil
	r.Permissions = nil
	return r
}

func DeserializeRoleUpdate(r io.Reader) (RoleUpdate, error) {
	t := NewRoleUpdate()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeRoleUpdateFromSchema(r io.Reader, schema string) (RoleUpdate, error) {
	t := NewRoleUpdate()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeRoleUpdate(r RoleUpdate, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.RoleId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Name, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayString(r.Permissions, w)
	if err != nil {
		return err
	}
	return err
}

func (r RoleUpdate) Serialize(w io.Writer) error {
	return writeRoleUpdate(r, w)
}

func (r RoleUpdate) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"roleId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"permissions\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]}],\"name\":\"Andreani.OrganizationChart.Events.Record.RoleUpdate\",\"type\":\"record\"}"
}

func (r RoleUpdate) SchemaName() string {
	return "Andreani.OrganizationChart.Events.Record.RoleUpdate"
}

func (_ RoleUpdate) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ RoleUpdate) SetInt(v int32)       { panic("Unsupported operation") }
func (_ RoleUpdate) SetLong(v int64)      { panic("Unsupported operation") }
func (_ RoleUpdate) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ RoleUpdate) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ RoleUpdate) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ RoleUpdate) SetString(v string)   { panic("Unsupported operation") }
func (_ RoleUpdate) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *RoleUpdate) Get(i int) types.Field {
	switch i {
	case 0:
		r.RoleId = NewUnionNullString()

		return r.RoleId
	case 1:
		r.Name = NewUnionNullString()

		return r.Name
	case 2:
		r.Permissions = NewUnionNullArrayString()

		return r.Permissions
	}
	panic("Unknown field index")
}

func (r *RoleUpdate) SetDefault(i int) {
	switch i {
	case 0:
		r.RoleId = nil
		return
	case 1:
		r.Name = nil
		return
	case 2:
		r.Permissions = nil
		return
	}
	panic("Unknown field index")
}

func (r *RoleUpdate) NullField(i int) {
	switch i {
	case 0:
		r.RoleId = nil
		return
	case 1:
		r.Name = nil
		return
	case 2:
		r.Permissions = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ RoleUpdate) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ RoleUpdate) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ RoleUpdate) HintSize(int)                     { panic("Unsupported operation") }
func (_ RoleUpdate) Finalize()                        {}

func (_ RoleUpdate) AvroCRC64Fingerprint() []byte {
	return []byte(RoleUpdateAvroCRC64Fingerprint)
}

func (r RoleUpdate) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["roleId"], err = json.Marshal(r.RoleId)
	if err != nil {
		return nil, err
	}
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["permissions"], err = json.Marshal(r.Permissions)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *RoleUpdate) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["roleId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RoleId); err != nil {
			return err
		}
	} else {
		r.RoleId = NewUnionNullString()

		r.RoleId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		r.Name = NewUnionNullString()

		r.Name = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["permissions"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Permissions); err != nil {
			return err
		}
	} else {
		r.Permissions = NewUnionNullArrayString()

		r.Permissions = nil
	}
	return nil
}
