// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Tasks.avsc
 */
package OrganizationChartEvents


/* este es una prueba */ 

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Tasks struct {
	Id *UnionNullString `json:"id"`

	Name *UnionNullString `json:"name"`

	Description *UnionNullString `json:"description"`

	RequieredBy *UnionNullString `json:"requieredBy"`
}

const TasksAvroCRC64Fingerprint = "\xcbғ&\xdc隄"

func NewTasks() Tasks {
	r := Tasks{}
	r.Id = nil
	r.Name = nil
	r.Description = nil
	r.RequieredBy = nil
	return r
}

func DeserializeTasks(r io.Reader) (Tasks, error) {
	t := NewTasks()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTasksFromSchema(r io.Reader, schema string) (Tasks, error) {
	t := NewTasks()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTasks(r Tasks, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Name, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Description, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.RequieredBy, w)
	if err != nil {
		return err
	}
	return err
}

func (r Tasks) Serialize(w io.Writer) error {
	return writeTasks(r, w)
}

func (r Tasks) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"requieredBy\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.OrganizationChart.Events.Record.Tasks\",\"type\":\"record\"}"
}

func (r Tasks) SchemaName() string {
	return "Andreani.OrganizationChart.Events.Record.Tasks"
}

func (_ Tasks) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Tasks) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Tasks) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Tasks) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Tasks) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Tasks) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Tasks) SetString(v string)   { panic("Unsupported operation") }
func (_ Tasks) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Tasks) Get(i int) types.Field {
	switch i {
	case 0:
		r.Id = NewUnionNullString()

		return r.Id
	case 1:
		r.Name = NewUnionNullString()

		return r.Name
	case 2:
		r.Description = NewUnionNullString()

		return r.Description
	case 3:
		r.RequieredBy = NewUnionNullString()

		return r.RequieredBy
	}
	panic("Unknown field index")
}

func (r *Tasks) SetDefault(i int) {
	switch i {
	case 0:
		r.Id = nil
		return
	case 1:
		r.Name = nil
		return
	case 2:
		r.Description = nil
		return
	case 3:
		r.RequieredBy = nil
		return
	}
	panic("Unknown field index")
}

func (r *Tasks) NullField(i int) {
	switch i {
	case 0:
		r.Id = nil
		return
	case 1:
		r.Name = nil
		return
	case 2:
		r.Description = nil
		return
	case 3:
		r.RequieredBy = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Tasks) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Tasks) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Tasks) HintSize(int)                     { panic("Unsupported operation") }
func (_ Tasks) Finalize()                        {}

func (_ Tasks) AvroCRC64Fingerprint() []byte {
	return []byte(TasksAvroCRC64Fingerprint)
}

func (r Tasks) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["description"], err = json.Marshal(r.Description)
	if err != nil {
		return nil, err
	}
	output["requieredBy"], err = json.Marshal(r.RequieredBy)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Tasks) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		r.Id = NewUnionNullString()

		r.Id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		r.Name = NewUnionNullString()

		r.Name = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["description"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Description); err != nil {
			return err
		}
	} else {
		r.Description = NewUnionNullString()

		r.Description = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["requieredBy"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RequieredBy); err != nil {
			return err
		}
	} else {
		r.RequieredBy = NewUnionNullString()

		r.RequieredBy = nil
	}
	return nil
}
