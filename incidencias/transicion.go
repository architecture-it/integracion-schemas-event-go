// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Transicion.avsc
 */
package incidenciasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Transicion struct {
	EstadoAnterior Estado `json:"estadoAnterior"`

	EstadoActual Estado `json:"estadoActual"`

	MotivoTransicion MotivoTransicion `json:"motivoTransicion"`

	ResponsableAnterior *UnionNullUsuario `json:"responsableAnterior"`

	ResponsableActual *UnionNullUsuario `json:"responsableActual"`

	AccionEnDominio *UnionNullAccion `json:"accionEnDominio"`
}

const TransicionAvroCRC64Fingerprint = "\xef\xcd\x01\xc6m>\v)"

func NewTransicion() Transicion {
	r := Transicion{}
	r.EstadoAnterior = NewEstado()

	r.EstadoActual = NewEstado()

	r.MotivoTransicion = NewMotivoTransicion()

	r.ResponsableAnterior = nil
	r.ResponsableActual = nil
	r.AccionEnDominio = nil
	return r
}

func DeserializeTransicion(r io.Reader) (Transicion, error) {
	t := NewTransicion()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTransicionFromSchema(r io.Reader, schema string) (Transicion, error) {
	t := NewTransicion()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTransicion(r Transicion, w io.Writer) error {
	var err error
	err = writeEstado(r.EstadoAnterior, w)
	if err != nil {
		return err
	}
	err = writeEstado(r.EstadoActual, w)
	if err != nil {
		return err
	}
	err = writeMotivoTransicion(r.MotivoTransicion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullUsuario(r.ResponsableAnterior, w)
	if err != nil {
		return err
	}
	err = writeUnionNullUsuario(r.ResponsableActual, w)
	if err != nil {
		return err
	}
	err = writeUnionNullAccion(r.AccionEnDominio, w)
	if err != nil {
		return err
	}
	return err
}

func (r Transicion) Serialize(w io.Writer) error {
	return writeTransicion(r, w)
}

func (r Transicion) Schema() string {
	return "{\"fields\":[{\"name\":\"estadoAnterior\",\"type\":{\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"nombre\",\"type\":\"string\"}],\"name\":\"Estado\",\"type\":\"record\"}},{\"name\":\"estadoActual\",\"type\":\"Andreani.Incidencias.Events.Common.Estado\"},{\"name\":\"motivoTransicion\",\"type\":{\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"nombre\",\"type\":\"string\"}],\"name\":\"MotivoTransicion\",\"type\":\"record\"}},{\"default\":null,\"name\":\"responsableAnterior\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"usuarioId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"email\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"nombre\",\"type\":[\"null\",\"string\"]}],\"name\":\"Usuario\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"responsableActual\",\"type\":[\"null\",\"Andreani.Incidencias.Events.Common.Usuario\"]},{\"default\":null,\"name\":\"accionEnDominio\",\"type\":[\"null\",{\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"codigo\",\"type\":\"string\"}],\"name\":\"Accion\",\"type\":\"record\"}]}],\"name\":\"Andreani.Incidencias.Events.Common.Transicion\",\"type\":\"record\"}"
}

func (r Transicion) SchemaName() string {
	return "Andreani.Incidencias.Events.Common.Transicion"
}

func (_ Transicion) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Transicion) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Transicion) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Transicion) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Transicion) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Transicion) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Transicion) SetString(v string)   { panic("Unsupported operation") }
func (_ Transicion) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Transicion) Get(i int) types.Field {
	switch i {
	case 0:
		r.EstadoAnterior = NewEstado()

		w := types.Record{Target: &r.EstadoAnterior}

		return w

	case 1:
		r.EstadoActual = NewEstado()

		w := types.Record{Target: &r.EstadoActual}

		return w

	case 2:
		r.MotivoTransicion = NewMotivoTransicion()

		w := types.Record{Target: &r.MotivoTransicion}

		return w

	case 3:
		r.ResponsableAnterior = NewUnionNullUsuario()

		return r.ResponsableAnterior
	case 4:
		r.ResponsableActual = NewUnionNullUsuario()

		return r.ResponsableActual
	case 5:
		r.AccionEnDominio = NewUnionNullAccion()

		return r.AccionEnDominio
	}
	panic("Unknown field index")
}

func (r *Transicion) SetDefault(i int) {
	switch i {
	case 3:
		r.ResponsableAnterior = nil
		return
	case 4:
		r.ResponsableActual = nil
		return
	case 5:
		r.AccionEnDominio = nil
		return
	}
	panic("Unknown field index")
}

func (r *Transicion) NullField(i int) {
	switch i {
	case 3:
		r.ResponsableAnterior = nil
		return
	case 4:
		r.ResponsableActual = nil
		return
	case 5:
		r.AccionEnDominio = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Transicion) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Transicion) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Transicion) HintSize(int)                     { panic("Unsupported operation") }
func (_ Transicion) Finalize()                        {}

func (_ Transicion) AvroCRC64Fingerprint() []byte {
	return []byte(TransicionAvroCRC64Fingerprint)
}

func (r Transicion) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["estadoAnterior"], err = json.Marshal(r.EstadoAnterior)
	if err != nil {
		return nil, err
	}
	output["estadoActual"], err = json.Marshal(r.EstadoActual)
	if err != nil {
		return nil, err
	}
	output["motivoTransicion"], err = json.Marshal(r.MotivoTransicion)
	if err != nil {
		return nil, err
	}
	output["responsableAnterior"], err = json.Marshal(r.ResponsableAnterior)
	if err != nil {
		return nil, err
	}
	output["responsableActual"], err = json.Marshal(r.ResponsableActual)
	if err != nil {
		return nil, err
	}
	output["accionEnDominio"], err = json.Marshal(r.AccionEnDominio)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Transicion) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["estadoAnterior"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EstadoAnterior); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for estadoAnterior")
	}
	val = func() json.RawMessage {
		if v, ok := fields["estadoActual"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EstadoActual); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for estadoActual")
	}
	val = func() json.RawMessage {
		if v, ok := fields["motivoTransicion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MotivoTransicion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for motivoTransicion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["responsableAnterior"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ResponsableAnterior); err != nil {
			return err
		}
	} else {
		r.ResponsableAnterior = NewUnionNullUsuario()

		r.ResponsableAnterior = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["responsableActual"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ResponsableActual); err != nil {
			return err
		}
	} else {
		r.ResponsableActual = NewUnionNullUsuario()

		r.ResponsableActual = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["accionEnDominio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AccionEnDominio); err != nil {
			return err
		}
	} else {
		r.AccionEnDominio = NewUnionNullAccion()

		r.AccionEnDominio = nil
	}
	return nil
}
