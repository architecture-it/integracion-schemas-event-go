// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ErrorValidacion.avsc
 */
package incidenciasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ErrorValidacion struct {
	Codigo *UnionNullString `json:"codigo"`

	Mensaje string `json:"mensaje"`
}

const ErrorValidacionAvroCRC64Fingerprint = "\x90&\xd70\x1a\x86m\xd3"

func NewErrorValidacion() ErrorValidacion {
	r := ErrorValidacion{}
	r.Codigo = nil
	return r
}

func DeserializeErrorValidacion(r io.Reader) (ErrorValidacion, error) {
	t := NewErrorValidacion()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeErrorValidacionFromSchema(r io.Reader, schema string) (ErrorValidacion, error) {
	t := NewErrorValidacion()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeErrorValidacion(r ErrorValidacion, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Codigo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Mensaje, w)
	if err != nil {
		return err
	}
	return err
}

func (r ErrorValidacion) Serialize(w io.Writer) error {
	return writeErrorValidacion(r, w)
}

func (r ErrorValidacion) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"codigo\",\"type\":[\"null\",\"string\"]},{\"name\":\"mensaje\",\"type\":\"string\"}],\"name\":\"Andreani.Incidencias.Events.Common.ErrorValidacion\",\"type\":\"record\"}"
}

func (r ErrorValidacion) SchemaName() string {
	return "Andreani.Incidencias.Events.Common.ErrorValidacion"
}

func (_ ErrorValidacion) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ErrorValidacion) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ErrorValidacion) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ErrorValidacion) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ErrorValidacion) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ErrorValidacion) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ErrorValidacion) SetString(v string)   { panic("Unsupported operation") }
func (_ ErrorValidacion) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ErrorValidacion) Get(i int) types.Field {
	switch i {
	case 0:
		r.Codigo = NewUnionNullString()

		return r.Codigo
	case 1:
		w := types.String{Target: &r.Mensaje}

		return w

	}
	panic("Unknown field index")
}

func (r *ErrorValidacion) SetDefault(i int) {
	switch i {
	case 0:
		r.Codigo = nil
		return
	}
	panic("Unknown field index")
}

func (r *ErrorValidacion) NullField(i int) {
	switch i {
	case 0:
		r.Codigo = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ErrorValidacion) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ErrorValidacion) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ErrorValidacion) HintSize(int)                     { panic("Unsupported operation") }
func (_ ErrorValidacion) Finalize()                        {}

func (_ ErrorValidacion) AvroCRC64Fingerprint() []byte {
	return []byte(ErrorValidacionAvroCRC64Fingerprint)
}

func (r ErrorValidacion) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["codigo"], err = json.Marshal(r.Codigo)
	if err != nil {
		return nil, err
	}
	output["mensaje"], err = json.Marshal(r.Mensaje)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ErrorValidacion) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["codigo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Codigo); err != nil {
			return err
		}
	} else {
		r.Codigo = NewUnionNullString()

		r.Codigo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["mensaje"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Mensaje); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for mensaje")
	}
	return nil
}
