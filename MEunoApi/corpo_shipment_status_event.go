// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     CorpoShipmentStatusEvent.avsc
 */
package MEunoApiEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CorpoShipmentStatusEvent struct {
	TrackingNumber string `json:"TrackingNumber"`

	Status CorpoShipmentStatus `json:"Status"`
}

const CorpoShipmentStatusEventAvroCRC64Fingerprint = "<\xf8\xef\xd2[\xee`\xe5"

func NewCorpoShipmentStatusEvent() CorpoShipmentStatusEvent {
	r := CorpoShipmentStatusEvent{}
	return r
}

func DeserializeCorpoShipmentStatusEvent(r io.Reader) (CorpoShipmentStatusEvent, error) {
	t := NewCorpoShipmentStatusEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCorpoShipmentStatusEventFromSchema(r io.Reader, schema string) (CorpoShipmentStatusEvent, error) {
	t := NewCorpoShipmentStatusEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCorpoShipmentStatusEvent(r CorpoShipmentStatusEvent, w io.Writer) error {
	var err error
	err = vm.WriteString(r.TrackingNumber, w)
	if err != nil {
		return err
	}
	err = writeCorpoShipmentStatus(r.Status, w)
	if err != nil {
		return err
	}
	return err
}

func (r CorpoShipmentStatusEvent) Serialize(w io.Writer) error {
	return writeCorpoShipmentStatusEvent(r, w)
}

func (r CorpoShipmentStatusEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"TrackingNumber\",\"type\":\"string\"},{\"name\":\"Status\",\"type\":{\"name\":\"CorpoShipmentStatus\",\"namespace\":\"Andreani.MEunoApi.Events.Record.Structs\",\"symbols\":[\"Pending\",\"Shipped\",\"Delivered\",\"NotDelivered\"],\"type\":\"enum\"}}],\"name\":\"Andreani.MEunoApi.Events.Record.CorpoShipmentStatusEvent\",\"type\":\"record\"}"
}

func (r CorpoShipmentStatusEvent) SchemaName() string {
	return "Andreani.MEunoApi.Events.Record.CorpoShipmentStatusEvent"
}

func (_ CorpoShipmentStatusEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CorpoShipmentStatusEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CorpoShipmentStatusEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CorpoShipmentStatusEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CorpoShipmentStatusEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CorpoShipmentStatusEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CorpoShipmentStatusEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ CorpoShipmentStatusEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CorpoShipmentStatusEvent) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.TrackingNumber}

		return w

	case 1:
		w := CorpoShipmentStatusWrapper{Target: &r.Status}

		return w

	}
	panic("Unknown field index")
}

func (r *CorpoShipmentStatusEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *CorpoShipmentStatusEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ CorpoShipmentStatusEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CorpoShipmentStatusEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CorpoShipmentStatusEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ CorpoShipmentStatusEvent) Finalize()                        {}

func (_ CorpoShipmentStatusEvent) AvroCRC64Fingerprint() []byte {
	return []byte(CorpoShipmentStatusEventAvroCRC64Fingerprint)
}

func (r CorpoShipmentStatusEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["TrackingNumber"], err = json.Marshal(r.TrackingNumber)
	if err != nil {
		return nil, err
	}
	output["Status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CorpoShipmentStatusEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["TrackingNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TrackingNumber); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TrackingNumber")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Status")
	}
	return nil
}
