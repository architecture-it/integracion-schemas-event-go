// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Headers.avsc
 */
package MEunoApiEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Headers struct {
	AdditionalProp1 string `json:"additionalProp1"`

	AdditionalProp2 string `json:"additionalProp2"`

	AdditionalProp3 string `json:"additionalProp3"`
}

const HeadersAvroCRC64Fingerprint = "\xc1\x9e\xbf\xfb\x8b\x89\x8b?"

func NewHeaders() Headers {
	r := Headers{}
	return r
}

func DeserializeHeaders(r io.Reader) (Headers, error) {
	t := NewHeaders()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeHeadersFromSchema(r io.Reader, schema string) (Headers, error) {
	t := NewHeaders()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeHeaders(r Headers, w io.Writer) error {
	var err error
	err = vm.WriteString(r.AdditionalProp1, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.AdditionalProp2, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.AdditionalProp3, w)
	if err != nil {
		return err
	}
	return err
}

func (r Headers) Serialize(w io.Writer) error {
	return writeHeaders(r, w)
}

func (r Headers) Schema() string {
	return "{\"fields\":[{\"name\":\"additionalProp1\",\"type\":\"string\"},{\"name\":\"additionalProp2\",\"type\":\"string\"},{\"name\":\"additionalProp3\",\"type\":\"string\"}],\"name\":\"Andreani.MEunoApi.Events.Record.Structs.Headers\",\"type\":\"record\"}"
}

func (r Headers) SchemaName() string {
	return "Andreani.MEunoApi.Events.Record.Structs.Headers"
}

func (_ Headers) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Headers) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Headers) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Headers) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Headers) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Headers) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Headers) SetString(v string)   { panic("Unsupported operation") }
func (_ Headers) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Headers) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.AdditionalProp1}

		return w

	case 1:
		w := types.String{Target: &r.AdditionalProp2}

		return w

	case 2:
		w := types.String{Target: &r.AdditionalProp3}

		return w

	}
	panic("Unknown field index")
}

func (r *Headers) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Headers) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Headers) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Headers) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Headers) HintSize(int)                     { panic("Unsupported operation") }
func (_ Headers) Finalize()                        {}

func (_ Headers) AvroCRC64Fingerprint() []byte {
	return []byte(HeadersAvroCRC64Fingerprint)
}

func (r Headers) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["additionalProp1"], err = json.Marshal(r.AdditionalProp1)
	if err != nil {
		return nil, err
	}
	output["additionalProp2"], err = json.Marshal(r.AdditionalProp2)
	if err != nil {
		return nil, err
	}
	output["additionalProp3"], err = json.Marshal(r.AdditionalProp3)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Headers) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["additionalProp1"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AdditionalProp1); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for additionalProp1")
	}
	val = func() json.RawMessage {
		if v, ok := fields["additionalProp2"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AdditionalProp2); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for additionalProp2")
	}
	val = func() json.RawMessage {
		if v, ok := fields["additionalProp3"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AdditionalProp3); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for additionalProp3")
	}
	return nil
}
