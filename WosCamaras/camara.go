// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     InstruccionCamara.avsc
 */
package WosCamarasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Camara struct {
	Id *UnionNullString `json:"Id"`

	Ip *UnionNullString `json:"Ip"`

	Configuracion ConfiguracionCamara `json:"Configuracion"`
}

const CamaraAvroCRC64Fingerprint = "\xae\x9d\xdd\x7f\xa9\xcdp]"

func NewCamara() Camara {
	r := Camara{}
	r.Configuracion = NewConfiguracionCamara()

	return r
}

func DeserializeCamara(r io.Reader) (Camara, error) {
	t := NewCamara()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCamaraFromSchema(r io.Reader, schema string) (Camara, error) {
	t := NewCamara()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCamara(r Camara, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Ip, w)
	if err != nil {
		return err
	}
	err = writeConfiguracionCamara(r.Configuracion, w)
	if err != nil {
		return err
	}
	return err
}

func (r Camara) Serialize(w io.Writer) error {
	return writeCamara(r, w)
}

func (r Camara) Schema() string {
	return "{\"fields\":[{\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"name\":\"Ip\",\"type\":[\"null\",\"string\"]},{\"name\":\"Configuracion\",\"type\":{\"fields\":[{\"name\":\"Extension\",\"type\":[\"null\",\"string\"]},{\"name\":\"Codec\",\"type\":[\"null\",\"string\"]},{\"name\":\"Fps\",\"type\":[\"null\",\"int\"]},{\"name\":\"ResolucionVideoWidth\",\"type\":[\"null\",\"int\"]},{\"name\":\"ResolucionVideoHeight\",\"type\":[\"null\",\"int\"]}],\"name\":\"ConfiguracionCamara\",\"type\":\"record\"}}],\"name\":\"Andreani.WosCamaras.Events.Record.Camara\",\"type\":\"record\"}"
}

func (r Camara) SchemaName() string {
	return "Andreani.WosCamaras.Events.Record.Camara"
}

func (_ Camara) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Camara) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Camara) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Camara) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Camara) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Camara) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Camara) SetString(v string)   { panic("Unsupported operation") }
func (_ Camara) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Camara) Get(i int) types.Field {
	switch i {
	case 0:
		r.Id = NewUnionNullString()

		return r.Id
	case 1:
		r.Ip = NewUnionNullString()

		return r.Ip
	case 2:
		r.Configuracion = NewConfiguracionCamara()

		w := types.Record{Target: &r.Configuracion}

		return w

	}
	panic("Unknown field index")
}

func (r *Camara) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Camara) NullField(i int) {
	switch i {
	case 0:
		r.Id = nil
		return
	case 1:
		r.Ip = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Camara) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Camara) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Camara) HintSize(int)                     { panic("Unsupported operation") }
func (_ Camara) Finalize()                        {}

func (_ Camara) AvroCRC64Fingerprint() []byte {
	return []byte(CamaraAvroCRC64Fingerprint)
}

func (r Camara) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["Ip"], err = json.Marshal(r.Ip)
	if err != nil {
		return nil, err
	}
	output["Configuracion"], err = json.Marshal(r.Configuracion)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Camara) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Ip"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ip); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Ip")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Configuracion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Configuracion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Configuracion")
	}
	return nil
}
