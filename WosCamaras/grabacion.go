// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     InstruccionCamara.avsc
 */
package WosCamarasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Grabacion struct {
	Nombre *UnionNullString `json:"Nombre"`

	CarpetaBase *UnionNullString `json:"CarpetaBase"`

	TiempoMaximoDeGrabacion *UnionNullInt `json:"TiempoMaximoDeGrabacion"`

	TiempoPorParte *UnionNullInt `json:"TiempoPorParte"`

	TamanoPorParte *UnionNullFloat `json:"TamanoPorParte"`
}

const GrabacionAvroCRC64Fingerprint = "6'\xcav(\x10\xf9\xbf"

func NewGrabacion() Grabacion {
	r := Grabacion{}
	return r
}

func DeserializeGrabacion(r io.Reader) (Grabacion, error) {
	t := NewGrabacion()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeGrabacionFromSchema(r io.Reader, schema string) (Grabacion, error) {
	t := NewGrabacion()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeGrabacion(r Grabacion, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Nombre, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CarpetaBase, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.TiempoMaximoDeGrabacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.TiempoPorParte, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.TamanoPorParte, w)
	if err != nil {
		return err
	}
	return err
}

func (r Grabacion) Serialize(w io.Writer) error {
	return writeGrabacion(r, w)
}

func (r Grabacion) Schema() string {
	return "{\"fields\":[{\"name\":\"Nombre\",\"type\":[\"null\",\"string\"]},{\"name\":\"CarpetaBase\",\"type\":[\"null\",\"string\"]},{\"name\":\"TiempoMaximoDeGrabacion\",\"type\":[\"null\",\"int\"]},{\"name\":\"TiempoPorParte\",\"type\":[\"null\",\"int\"]},{\"name\":\"TamanoPorParte\",\"type\":[\"null\",\"float\"]}],\"name\":\"Andreani.WosCamaras.Events.Record.Grabacion\",\"type\":\"record\"}"
}

func (r Grabacion) SchemaName() string {
	return "Andreani.WosCamaras.Events.Record.Grabacion"
}

func (_ Grabacion) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Grabacion) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Grabacion) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Grabacion) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Grabacion) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Grabacion) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Grabacion) SetString(v string)   { panic("Unsupported operation") }
func (_ Grabacion) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Grabacion) Get(i int) types.Field {
	switch i {
	case 0:
		r.Nombre = NewUnionNullString()

		return r.Nombre
	case 1:
		r.CarpetaBase = NewUnionNullString()

		return r.CarpetaBase
	case 2:
		r.TiempoMaximoDeGrabacion = NewUnionNullInt()

		return r.TiempoMaximoDeGrabacion
	case 3:
		r.TiempoPorParte = NewUnionNullInt()

		return r.TiempoPorParte
	case 4:
		r.TamanoPorParte = NewUnionNullFloat()

		return r.TamanoPorParte
	}
	panic("Unknown field index")
}

func (r *Grabacion) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Grabacion) NullField(i int) {
	switch i {
	case 0:
		r.Nombre = nil
		return
	case 1:
		r.CarpetaBase = nil
		return
	case 2:
		r.TiempoMaximoDeGrabacion = nil
		return
	case 3:
		r.TiempoPorParte = nil
		return
	case 4:
		r.TamanoPorParte = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Grabacion) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Grabacion) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Grabacion) HintSize(int)                     { panic("Unsupported operation") }
func (_ Grabacion) Finalize()                        {}

func (_ Grabacion) AvroCRC64Fingerprint() []byte {
	return []byte(GrabacionAvroCRC64Fingerprint)
}

func (r Grabacion) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Nombre"], err = json.Marshal(r.Nombre)
	if err != nil {
		return nil, err
	}
	output["CarpetaBase"], err = json.Marshal(r.CarpetaBase)
	if err != nil {
		return nil, err
	}
	output["TiempoMaximoDeGrabacion"], err = json.Marshal(r.TiempoMaximoDeGrabacion)
	if err != nil {
		return nil, err
	}
	output["TiempoPorParte"], err = json.Marshal(r.TiempoPorParte)
	if err != nil {
		return nil, err
	}
	output["TamanoPorParte"], err = json.Marshal(r.TamanoPorParte)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Grabacion) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Nombre"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nombre); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Nombre")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CarpetaBase"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CarpetaBase); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CarpetaBase")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TiempoMaximoDeGrabacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TiempoMaximoDeGrabacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TiempoMaximoDeGrabacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TiempoPorParte"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TiempoPorParte); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TiempoPorParte")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TamanoPorParte"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TamanoPorParte); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TamanoPorParte")
	}
	return nil
}
