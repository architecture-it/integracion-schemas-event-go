// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Grabacion.avsc
 */
package WosCamarasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Grabacion struct {
	NombreCamara *UnionNullString `json:"NombreCamara"`

	CarpetaDestino *UnionNullString `json:"CarpetaDestino"`

	NombreGrabacion *UnionNullString `json:"NombreGrabacion"`

	InstruccionCamara InstruccionesCamara `json:"InstruccionCamara"`
}

const GrabacionAvroCRC64Fingerprint = "\ru\xaa\x02WX7\xf0"

func NewGrabacion() Grabacion {
	r := Grabacion{}
	return r
}

func DeserializeGrabacion(r io.Reader) (Grabacion, error) {
	t := NewGrabacion()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeGrabacionFromSchema(r io.Reader, schema string) (Grabacion, error) {
	t := NewGrabacion()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeGrabacion(r Grabacion, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.NombreCamara, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CarpetaDestino, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NombreGrabacion, w)
	if err != nil {
		return err
	}
	err = writeInstruccionesCamara(r.InstruccionCamara, w)
	if err != nil {
		return err
	}
	return err
}

func (r Grabacion) Serialize(w io.Writer) error {
	return writeGrabacion(r, w)
}

func (r Grabacion) Schema() string {
	return "{\"fields\":[{\"name\":\"NombreCamara\",\"type\":[\"null\",\"string\"]},{\"name\":\"CarpetaDestino\",\"type\":[\"null\",\"string\"]},{\"name\":\"NombreGrabacion\",\"type\":[\"null\",\"string\"]},{\"name\":\"InstruccionCamara\",\"type\":{\"name\":\"InstruccionesCamara\",\"symbols\":[\"IniciarGrabacion\",\"DetenerGrabacion\"],\"type\":\"enum\"}}],\"name\":\"Andreani.WosCamaras.Events.Record.Grabacion\",\"type\":\"record\"}"
}

func (r Grabacion) SchemaName() string {
	return "Andreani.WosCamaras.Events.Record.Grabacion"
}

func (_ Grabacion) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Grabacion) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Grabacion) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Grabacion) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Grabacion) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Grabacion) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Grabacion) SetString(v string)   { panic("Unsupported operation") }
func (_ Grabacion) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Grabacion) Get(i int) types.Field {
	switch i {
	case 0:
		r.NombreCamara = NewUnionNullString()

		return r.NombreCamara
	case 1:
		r.CarpetaDestino = NewUnionNullString()

		return r.CarpetaDestino
	case 2:
		r.NombreGrabacion = NewUnionNullString()

		return r.NombreGrabacion
	case 3:
		w := InstruccionesCamaraWrapper{Target: &r.InstruccionCamara}

		return w

	}
	panic("Unknown field index")
}

func (r *Grabacion) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Grabacion) NullField(i int) {
	switch i {
	case 0:
		r.NombreCamara = nil
		return
	case 1:
		r.CarpetaDestino = nil
		return
	case 2:
		r.NombreGrabacion = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Grabacion) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Grabacion) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Grabacion) HintSize(int)                     { panic("Unsupported operation") }
func (_ Grabacion) Finalize()                        {}

func (_ Grabacion) AvroCRC64Fingerprint() []byte {
	return []byte(GrabacionAvroCRC64Fingerprint)
}

func (r Grabacion) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["NombreCamara"], err = json.Marshal(r.NombreCamara)
	if err != nil {
		return nil, err
	}
	output["CarpetaDestino"], err = json.Marshal(r.CarpetaDestino)
	if err != nil {
		return nil, err
	}
	output["NombreGrabacion"], err = json.Marshal(r.NombreGrabacion)
	if err != nil {
		return nil, err
	}
	output["InstruccionCamara"], err = json.Marshal(r.InstruccionCamara)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Grabacion) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["NombreCamara"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NombreCamara); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NombreCamara")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CarpetaDestino"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CarpetaDestino); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CarpetaDestino")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NombreGrabacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NombreGrabacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NombreGrabacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["InstruccionCamara"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InstruccionCamara); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for InstruccionCamara")
	}
	return nil
}
