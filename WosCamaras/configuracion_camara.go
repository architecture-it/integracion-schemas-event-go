// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     InstruccionCamara.avsc
 */
package WosCamarasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ConfiguracionCamara struct {
	Extension *UnionNullString `json:"Extension"`

	Codec *UnionNullString `json:"Codec"`

	Fps *UnionNullInt `json:"Fps"`

	ResolucionVideoWidth *UnionNullInt `json:"ResolucionVideoWidth"`

	ResolucionVideoHeight *UnionNullInt `json:"ResolucionVideoHeight"`
}

const ConfiguracionCamaraAvroCRC64Fingerprint = "9\xb5\x9d\xe0\xdbY0\xab"

func NewConfiguracionCamara() ConfiguracionCamara {
	r := ConfiguracionCamara{}
	return r
}

func DeserializeConfiguracionCamara(r io.Reader) (ConfiguracionCamara, error) {
	t := NewConfiguracionCamara()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeConfiguracionCamaraFromSchema(r io.Reader, schema string) (ConfiguracionCamara, error) {
	t := NewConfiguracionCamara()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeConfiguracionCamara(r ConfiguracionCamara, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Extension, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Codec, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.Fps, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.ResolucionVideoWidth, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.ResolucionVideoHeight, w)
	if err != nil {
		return err
	}
	return err
}

func (r ConfiguracionCamara) Serialize(w io.Writer) error {
	return writeConfiguracionCamara(r, w)
}

func (r ConfiguracionCamara) Schema() string {
	return "{\"fields\":[{\"name\":\"Extension\",\"type\":[\"null\",\"string\"]},{\"name\":\"Codec\",\"type\":[\"null\",\"string\"]},{\"name\":\"Fps\",\"type\":[\"null\",\"int\"]},{\"name\":\"ResolucionVideoWidth\",\"type\":[\"null\",\"int\"]},{\"name\":\"ResolucionVideoHeight\",\"type\":[\"null\",\"int\"]}],\"name\":\"Andreani.WosCamaras.Events.Record.ConfiguracionCamara\",\"type\":\"record\"}"
}

func (r ConfiguracionCamara) SchemaName() string {
	return "Andreani.WosCamaras.Events.Record.ConfiguracionCamara"
}

func (_ ConfiguracionCamara) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ConfiguracionCamara) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ConfiguracionCamara) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ConfiguracionCamara) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ConfiguracionCamara) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ConfiguracionCamara) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ConfiguracionCamara) SetString(v string)   { panic("Unsupported operation") }
func (_ ConfiguracionCamara) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ConfiguracionCamara) Get(i int) types.Field {
	switch i {
	case 0:
		r.Extension = NewUnionNullString()

		return r.Extension
	case 1:
		r.Codec = NewUnionNullString()

		return r.Codec
	case 2:
		r.Fps = NewUnionNullInt()

		return r.Fps
	case 3:
		r.ResolucionVideoWidth = NewUnionNullInt()

		return r.ResolucionVideoWidth
	case 4:
		r.ResolucionVideoHeight = NewUnionNullInt()

		return r.ResolucionVideoHeight
	}
	panic("Unknown field index")
}

func (r *ConfiguracionCamara) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ConfiguracionCamara) NullField(i int) {
	switch i {
	case 0:
		r.Extension = nil
		return
	case 1:
		r.Codec = nil
		return
	case 2:
		r.Fps = nil
		return
	case 3:
		r.ResolucionVideoWidth = nil
		return
	case 4:
		r.ResolucionVideoHeight = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ConfiguracionCamara) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ConfiguracionCamara) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ConfiguracionCamara) HintSize(int)                     { panic("Unsupported operation") }
func (_ ConfiguracionCamara) Finalize()                        {}

func (_ ConfiguracionCamara) AvroCRC64Fingerprint() []byte {
	return []byte(ConfiguracionCamaraAvroCRC64Fingerprint)
}

func (r ConfiguracionCamara) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Extension"], err = json.Marshal(r.Extension)
	if err != nil {
		return nil, err
	}
	output["Codec"], err = json.Marshal(r.Codec)
	if err != nil {
		return nil, err
	}
	output["Fps"], err = json.Marshal(r.Fps)
	if err != nil {
		return nil, err
	}
	output["ResolucionVideoWidth"], err = json.Marshal(r.ResolucionVideoWidth)
	if err != nil {
		return nil, err
	}
	output["ResolucionVideoHeight"], err = json.Marshal(r.ResolucionVideoHeight)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ConfiguracionCamara) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Extension"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Extension); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Extension")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Codec"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Codec); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Codec")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Fps"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Fps); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Fps")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ResolucionVideoWidth"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ResolucionVideoWidth); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ResolucionVideoWidth")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ResolucionVideoHeight"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ResolucionVideoHeight); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ResolucionVideoHeight")
	}
	return nil
}
