// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TripEvent.avsc
 */
package DMSRoutesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TripEvent struct {
	TripId *UnionNullString `json:"TripId"`

	OriginOU *UnionNullString `json:"OriginOU"`

	DestinationOU *UnionNullString `json:"DestinationOU"`

	FirstDriverDNI *UnionNullString `json:"FirstDriverDNI"`

	SecondDriverDNI *UnionNullString `json:"SecondDriverDNI"`

	PrimaryVehicleDomain *UnionNullString `json:"PrimaryVehicleDomain"`

	PrimaryVechicleType *UnionNullString `json:"PrimaryVechicleType"`

	FirstSemiDomain *UnionNullString `json:"FirstSemiDomain"`

	SecondSemiDomain *UnionNullString `json:"SecondSemiDomain"`

	CloseDate *UnionNullString `json:"CloseDate"`

	Seals *UnionNullArrayString `json:"Seals"`

	CargoInsuredValue *UnionNullDouble `json:"CargoInsuredValue"`

	NumberOfCustodyVehicles *UnionNullInt `json:"NumberOfCustodyVehicles"`

	TripStatus *UnionNullString `json:"TripStatus"`

	StatusCode *UnionNullString `json:"StatusCode"`

	TripType *UnionNullString `json:"TripType"`
}

const TripEventAvroCRC64Fingerprint = "\x12\xfa\x05\xf1_\xb6\x14\xfa"

func NewTripEvent() TripEvent {
	r := TripEvent{}
	r.TripId = nil
	r.OriginOU = nil
	r.DestinationOU = nil
	r.FirstDriverDNI = nil
	r.SecondDriverDNI = nil
	r.PrimaryVehicleDomain = nil
	r.PrimaryVechicleType = nil
	r.FirstSemiDomain = nil
	r.SecondSemiDomain = nil
	r.CloseDate = nil
	r.Seals = nil
	r.CargoInsuredValue = nil
	r.NumberOfCustodyVehicles = nil
	r.TripStatus = nil
	r.StatusCode = nil
	r.TripType = nil
	return r
}

func DeserializeTripEvent(r io.Reader) (TripEvent, error) {
	t := NewTripEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTripEventFromSchema(r io.Reader, schema string) (TripEvent, error) {
	t := NewTripEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTripEvent(r TripEvent, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.TripId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.OriginOU, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DestinationOU, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.FirstDriverDNI, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SecondDriverDNI, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PrimaryVehicleDomain, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PrimaryVechicleType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.FirstSemiDomain, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SecondSemiDomain, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CloseDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayString(r.Seals, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.CargoInsuredValue, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.NumberOfCustodyVehicles, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TripStatus, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.StatusCode, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TripType, w)
	if err != nil {
		return err
	}
	return err
}

func (r TripEvent) Serialize(w io.Writer) error {
	return writeTripEvent(r, w)
}

func (r TripEvent) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"TripId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"OriginOU\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"DestinationOU\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FirstDriverDNI\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SecondDriverDNI\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PrimaryVehicleDomain\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PrimaryVechicleType\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FirstSemiDomain\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SecondSemiDomain\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CloseDate\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Seals\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"CargoInsuredValue\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"NumberOfCustodyVehicles\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"TripStatus\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StatusCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TripType\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.DMSRoutes.Events.Record.TripEvent\",\"type\":\"record\"}"
}

func (r TripEvent) SchemaName() string {
	return "Andreani.DMSRoutes.Events.Record.TripEvent"
}

func (_ TripEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TripEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TripEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TripEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TripEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TripEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TripEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ TripEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TripEvent) Get(i int) types.Field {
	switch i {
	case 0:
		r.TripId = NewUnionNullString()

		return r.TripId
	case 1:
		r.OriginOU = NewUnionNullString()

		return r.OriginOU
	case 2:
		r.DestinationOU = NewUnionNullString()

		return r.DestinationOU
	case 3:
		r.FirstDriverDNI = NewUnionNullString()

		return r.FirstDriverDNI
	case 4:
		r.SecondDriverDNI = NewUnionNullString()

		return r.SecondDriverDNI
	case 5:
		r.PrimaryVehicleDomain = NewUnionNullString()

		return r.PrimaryVehicleDomain
	case 6:
		r.PrimaryVechicleType = NewUnionNullString()

		return r.PrimaryVechicleType
	case 7:
		r.FirstSemiDomain = NewUnionNullString()

		return r.FirstSemiDomain
	case 8:
		r.SecondSemiDomain = NewUnionNullString()

		return r.SecondSemiDomain
	case 9:
		r.CloseDate = NewUnionNullString()

		return r.CloseDate
	case 10:
		r.Seals = NewUnionNullArrayString()

		return r.Seals
	case 11:
		r.CargoInsuredValue = NewUnionNullDouble()

		return r.CargoInsuredValue
	case 12:
		r.NumberOfCustodyVehicles = NewUnionNullInt()

		return r.NumberOfCustodyVehicles
	case 13:
		r.TripStatus = NewUnionNullString()

		return r.TripStatus
	case 14:
		r.StatusCode = NewUnionNullString()

		return r.StatusCode
	case 15:
		r.TripType = NewUnionNullString()

		return r.TripType
	}
	panic("Unknown field index")
}

func (r *TripEvent) SetDefault(i int) {
	switch i {
	case 0:
		r.TripId = nil
		return
	case 1:
		r.OriginOU = nil
		return
	case 2:
		r.DestinationOU = nil
		return
	case 3:
		r.FirstDriverDNI = nil
		return
	case 4:
		r.SecondDriverDNI = nil
		return
	case 5:
		r.PrimaryVehicleDomain = nil
		return
	case 6:
		r.PrimaryVechicleType = nil
		return
	case 7:
		r.FirstSemiDomain = nil
		return
	case 8:
		r.SecondSemiDomain = nil
		return
	case 9:
		r.CloseDate = nil
		return
	case 10:
		r.Seals = nil
		return
	case 11:
		r.CargoInsuredValue = nil
		return
	case 12:
		r.NumberOfCustodyVehicles = nil
		return
	case 13:
		r.TripStatus = nil
		return
	case 14:
		r.StatusCode = nil
		return
	case 15:
		r.TripType = nil
		return
	}
	panic("Unknown field index")
}

func (r *TripEvent) NullField(i int) {
	switch i {
	case 0:
		r.TripId = nil
		return
	case 1:
		r.OriginOU = nil
		return
	case 2:
		r.DestinationOU = nil
		return
	case 3:
		r.FirstDriverDNI = nil
		return
	case 4:
		r.SecondDriverDNI = nil
		return
	case 5:
		r.PrimaryVehicleDomain = nil
		return
	case 6:
		r.PrimaryVechicleType = nil
		return
	case 7:
		r.FirstSemiDomain = nil
		return
	case 8:
		r.SecondSemiDomain = nil
		return
	case 9:
		r.CloseDate = nil
		return
	case 10:
		r.Seals = nil
		return
	case 11:
		r.CargoInsuredValue = nil
		return
	case 12:
		r.NumberOfCustodyVehicles = nil
		return
	case 13:
		r.TripStatus = nil
		return
	case 14:
		r.StatusCode = nil
		return
	case 15:
		r.TripType = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ TripEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TripEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TripEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ TripEvent) Finalize()                        {}

func (_ TripEvent) AvroCRC64Fingerprint() []byte {
	return []byte(TripEventAvroCRC64Fingerprint)
}

func (r TripEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["TripId"], err = json.Marshal(r.TripId)
	if err != nil {
		return nil, err
	}
	output["OriginOU"], err = json.Marshal(r.OriginOU)
	if err != nil {
		return nil, err
	}
	output["DestinationOU"], err = json.Marshal(r.DestinationOU)
	if err != nil {
		return nil, err
	}
	output["FirstDriverDNI"], err = json.Marshal(r.FirstDriverDNI)
	if err != nil {
		return nil, err
	}
	output["SecondDriverDNI"], err = json.Marshal(r.SecondDriverDNI)
	if err != nil {
		return nil, err
	}
	output["PrimaryVehicleDomain"], err = json.Marshal(r.PrimaryVehicleDomain)
	if err != nil {
		return nil, err
	}
	output["PrimaryVechicleType"], err = json.Marshal(r.PrimaryVechicleType)
	if err != nil {
		return nil, err
	}
	output["FirstSemiDomain"], err = json.Marshal(r.FirstSemiDomain)
	if err != nil {
		return nil, err
	}
	output["SecondSemiDomain"], err = json.Marshal(r.SecondSemiDomain)
	if err != nil {
		return nil, err
	}
	output["CloseDate"], err = json.Marshal(r.CloseDate)
	if err != nil {
		return nil, err
	}
	output["Seals"], err = json.Marshal(r.Seals)
	if err != nil {
		return nil, err
	}
	output["CargoInsuredValue"], err = json.Marshal(r.CargoInsuredValue)
	if err != nil {
		return nil, err
	}
	output["NumberOfCustodyVehicles"], err = json.Marshal(r.NumberOfCustodyVehicles)
	if err != nil {
		return nil, err
	}
	output["TripStatus"], err = json.Marshal(r.TripStatus)
	if err != nil {
		return nil, err
	}
	output["StatusCode"], err = json.Marshal(r.StatusCode)
	if err != nil {
		return nil, err
	}
	output["TripType"], err = json.Marshal(r.TripType)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TripEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["TripId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TripId); err != nil {
			return err
		}
	} else {
		r.TripId = NewUnionNullString()

		r.TripId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["OriginOU"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OriginOU); err != nil {
			return err
		}
	} else {
		r.OriginOU = NewUnionNullString()

		r.OriginOU = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["DestinationOU"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinationOU); err != nil {
			return err
		}
	} else {
		r.DestinationOU = NewUnionNullString()

		r.DestinationOU = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FirstDriverDNI"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FirstDriverDNI); err != nil {
			return err
		}
	} else {
		r.FirstDriverDNI = NewUnionNullString()

		r.FirstDriverDNI = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SecondDriverDNI"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SecondDriverDNI); err != nil {
			return err
		}
	} else {
		r.SecondDriverDNI = NewUnionNullString()

		r.SecondDriverDNI = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PrimaryVehicleDomain"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PrimaryVehicleDomain); err != nil {
			return err
		}
	} else {
		r.PrimaryVehicleDomain = NewUnionNullString()

		r.PrimaryVehicleDomain = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PrimaryVechicleType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PrimaryVechicleType); err != nil {
			return err
		}
	} else {
		r.PrimaryVechicleType = NewUnionNullString()

		r.PrimaryVechicleType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FirstSemiDomain"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FirstSemiDomain); err != nil {
			return err
		}
	} else {
		r.FirstSemiDomain = NewUnionNullString()

		r.FirstSemiDomain = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SecondSemiDomain"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SecondSemiDomain); err != nil {
			return err
		}
	} else {
		r.SecondSemiDomain = NewUnionNullString()

		r.SecondSemiDomain = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CloseDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CloseDate); err != nil {
			return err
		}
	} else {
		r.CloseDate = NewUnionNullString()

		r.CloseDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Seals"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Seals); err != nil {
			return err
		}
	} else {
		r.Seals = NewUnionNullArrayString()

		r.Seals = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CargoInsuredValue"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CargoInsuredValue); err != nil {
			return err
		}
	} else {
		r.CargoInsuredValue = NewUnionNullDouble()

		r.CargoInsuredValue = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NumberOfCustodyVehicles"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumberOfCustodyVehicles); err != nil {
			return err
		}
	} else {
		r.NumberOfCustodyVehicles = NewUnionNullInt()

		r.NumberOfCustodyVehicles = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TripStatus"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TripStatus); err != nil {
			return err
		}
	} else {
		r.TripStatus = NewUnionNullString()

		r.TripStatus = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["StatusCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StatusCode); err != nil {
			return err
		}
	} else {
		r.StatusCode = NewUnionNullString()

		r.StatusCode = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TripType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TripType); err != nil {
			return err
		}
	} else {
		r.TripType = NewUnionNullString()

		r.TripType = nil
	}
	return nil
}
