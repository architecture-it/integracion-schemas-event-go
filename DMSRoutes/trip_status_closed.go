// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TripStatusClosed.avsc
 */
package DMSRoutesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TripStatusClosed struct {
	Id *UnionNullString `json:"Id"`

	TripId *UnionNullString `json:"TripId"`

	Seal *UnionNullString `json:"Seal"`

	OriginOperativeUnitId *UnionNullString `json:"OriginOperativeUnitId"`

	OriginOperativeUnitName *UnionNullString `json:"OriginOperativeUnitName"`

	DestinationOperativeUnitId *UnionNullString `json:"DestinationOperativeUnitId"`

	DestinationOperativeUnitName *UnionNullString `json:"DestinationOperativeUnitName"`

	JourneyStatus *UnionNullString `json:"JourneyStatus"`

	LastModified *UnionNullString `json:"LastModified"`

	LastStatusModify *UnionNullString `json:"LastStatusModify"`

	UserNameLastModifiedBy *UnionNullString `json:"UserNameLastModifiedBy"`
}

const TripStatusClosedAvroCRC64Fingerprint = "\xf1\xff?\xdfí–Ž\xfd"

func NewTripStatusClosed() TripStatusClosed {
	r := TripStatusClosed{}
	r.Id = nil
	r.TripId = nil
	r.Seal = nil
	r.OriginOperativeUnitId = nil
	r.OriginOperativeUnitName = nil
	r.DestinationOperativeUnitId = nil
	r.DestinationOperativeUnitName = nil
	r.JourneyStatus = nil
	r.LastModified = nil
	r.LastStatusModify = nil
	r.UserNameLastModifiedBy = nil
	return r
}

func DeserializeTripStatusClosed(r io.Reader) (TripStatusClosed, error) {
	t := NewTripStatusClosed()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTripStatusClosedFromSchema(r io.Reader, schema string) (TripStatusClosed, error) {
	t := NewTripStatusClosed()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTripStatusClosed(r TripStatusClosed, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TripId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Seal, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.OriginOperativeUnitId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.OriginOperativeUnitName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DestinationOperativeUnitId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DestinationOperativeUnitName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.JourneyStatus, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LastModified, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LastStatusModify, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.UserNameLastModifiedBy, w)
	if err != nil {
		return err
	}
	return err
}

func (r TripStatusClosed) Serialize(w io.Writer) error {
	return writeTripStatusClosed(r, w)
}

func (r TripStatusClosed) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TripId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Seal\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"OriginOperativeUnitId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"OriginOperativeUnitName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"DestinationOperativeUnitId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"DestinationOperativeUnitName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"JourneyStatus\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LastModified\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LastStatusModify\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"UserNameLastModifiedBy\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.DMSRoutes.Events.Record.TripStatusClosed\",\"type\":\"record\"}"
}

func (r TripStatusClosed) SchemaName() string {
	return "Andreani.DMSRoutes.Events.Record.TripStatusClosed"
}

func (_ TripStatusClosed) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TripStatusClosed) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TripStatusClosed) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TripStatusClosed) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TripStatusClosed) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TripStatusClosed) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TripStatusClosed) SetString(v string)   { panic("Unsupported operation") }
func (_ TripStatusClosed) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TripStatusClosed) Get(i int) types.Field {
	switch i {
	case 0:
		r.Id = NewUnionNullString()

		return r.Id
	case 1:
		r.TripId = NewUnionNullString()

		return r.TripId
	case 2:
		r.Seal = NewUnionNullString()

		return r.Seal
	case 3:
		r.OriginOperativeUnitId = NewUnionNullString()

		return r.OriginOperativeUnitId
	case 4:
		r.OriginOperativeUnitName = NewUnionNullString()

		return r.OriginOperativeUnitName
	case 5:
		r.DestinationOperativeUnitId = NewUnionNullString()

		return r.DestinationOperativeUnitId
	case 6:
		r.DestinationOperativeUnitName = NewUnionNullString()

		return r.DestinationOperativeUnitName
	case 7:
		r.JourneyStatus = NewUnionNullString()

		return r.JourneyStatus
	case 8:
		r.LastModified = NewUnionNullString()

		return r.LastModified
	case 9:
		r.LastStatusModify = NewUnionNullString()

		return r.LastStatusModify
	case 10:
		r.UserNameLastModifiedBy = NewUnionNullString()

		return r.UserNameLastModifiedBy
	}
	panic("Unknown field index")
}

func (r *TripStatusClosed) SetDefault(i int) {
	switch i {
	case 0:
		r.Id = nil
		return
	case 1:
		r.TripId = nil
		return
	case 2:
		r.Seal = nil
		return
	case 3:
		r.OriginOperativeUnitId = nil
		return
	case 4:
		r.OriginOperativeUnitName = nil
		return
	case 5:
		r.DestinationOperativeUnitId = nil
		return
	case 6:
		r.DestinationOperativeUnitName = nil
		return
	case 7:
		r.JourneyStatus = nil
		return
	case 8:
		r.LastModified = nil
		return
	case 9:
		r.LastStatusModify = nil
		return
	case 10:
		r.UserNameLastModifiedBy = nil
		return
	}
	panic("Unknown field index")
}

func (r *TripStatusClosed) NullField(i int) {
	switch i {
	case 0:
		r.Id = nil
		return
	case 1:
		r.TripId = nil
		return
	case 2:
		r.Seal = nil
		return
	case 3:
		r.OriginOperativeUnitId = nil
		return
	case 4:
		r.OriginOperativeUnitName = nil
		return
	case 5:
		r.DestinationOperativeUnitId = nil
		return
	case 6:
		r.DestinationOperativeUnitName = nil
		return
	case 7:
		r.JourneyStatus = nil
		return
	case 8:
		r.LastModified = nil
		return
	case 9:
		r.LastStatusModify = nil
		return
	case 10:
		r.UserNameLastModifiedBy = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ TripStatusClosed) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TripStatusClosed) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TripStatusClosed) HintSize(int)                     { panic("Unsupported operation") }
func (_ TripStatusClosed) Finalize()                        {}

func (_ TripStatusClosed) AvroCRC64Fingerprint() []byte {
	return []byte(TripStatusClosedAvroCRC64Fingerprint)
}

func (r TripStatusClosed) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["TripId"], err = json.Marshal(r.TripId)
	if err != nil {
		return nil, err
	}
	output["Seal"], err = json.Marshal(r.Seal)
	if err != nil {
		return nil, err
	}
	output["OriginOperativeUnitId"], err = json.Marshal(r.OriginOperativeUnitId)
	if err != nil {
		return nil, err
	}
	output["OriginOperativeUnitName"], err = json.Marshal(r.OriginOperativeUnitName)
	if err != nil {
		return nil, err
	}
	output["DestinationOperativeUnitId"], err = json.Marshal(r.DestinationOperativeUnitId)
	if err != nil {
		return nil, err
	}
	output["DestinationOperativeUnitName"], err = json.Marshal(r.DestinationOperativeUnitName)
	if err != nil {
		return nil, err
	}
	output["JourneyStatus"], err = json.Marshal(r.JourneyStatus)
	if err != nil {
		return nil, err
	}
	output["LastModified"], err = json.Marshal(r.LastModified)
	if err != nil {
		return nil, err
	}
	output["LastStatusModify"], err = json.Marshal(r.LastStatusModify)
	if err != nil {
		return nil, err
	}
	output["UserNameLastModifiedBy"], err = json.Marshal(r.UserNameLastModifiedBy)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TripStatusClosed) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		r.Id = NewUnionNullString()

		r.Id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TripId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TripId); err != nil {
			return err
		}
	} else {
		r.TripId = NewUnionNullString()

		r.TripId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Seal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Seal); err != nil {
			return err
		}
	} else {
		r.Seal = NewUnionNullString()

		r.Seal = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["OriginOperativeUnitId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OriginOperativeUnitId); err != nil {
			return err
		}
	} else {
		r.OriginOperativeUnitId = NewUnionNullString()

		r.OriginOperativeUnitId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["OriginOperativeUnitName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OriginOperativeUnitName); err != nil {
			return err
		}
	} else {
		r.OriginOperativeUnitName = NewUnionNullString()

		r.OriginOperativeUnitName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["DestinationOperativeUnitId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinationOperativeUnitId); err != nil {
			return err
		}
	} else {
		r.DestinationOperativeUnitId = NewUnionNullString()

		r.DestinationOperativeUnitId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["DestinationOperativeUnitName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DestinationOperativeUnitName); err != nil {
			return err
		}
	} else {
		r.DestinationOperativeUnitName = NewUnionNullString()

		r.DestinationOperativeUnitName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["JourneyStatus"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.JourneyStatus); err != nil {
			return err
		}
	} else {
		r.JourneyStatus = NewUnionNullString()

		r.JourneyStatus = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LastModified"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastModified); err != nil {
			return err
		}
	} else {
		r.LastModified = NewUnionNullString()

		r.LastModified = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LastStatusModify"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastStatusModify); err != nil {
			return err
		}
	} else {
		r.LastStatusModify = NewUnionNullString()

		r.LastStatusModify = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["UserNameLastModifiedBy"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UserNameLastModifiedBy); err != nil {
			return err
		}
	} else {
		r.UserNameLastModifiedBy = NewUnionNullString()

		r.UserNameLastModifiedBy = nil
	}
	return nil
}
