// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     MaestroCliente.avsc
 */
package NotificacionesMarketingEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type MaestroCliente struct {
	ClienteId *UnionNullString `json:"clienteId"`

	UsuarioId *UnionNullString `json:"usuarioId"`

	Nombre *UnionNullString `json:"nombre"`

	TelefonoCodigoArea *UnionNullString `json:"telefonoCodigoArea"`

	TelefonoNumero *UnionNullString `json:"telefonoNumero"`

	Categoria *UnionNullString `json:"categoria"`

	Cuando *UnionNullLong `json:"cuando"`

	Paridad *UnionNullBool `json:"paridad"`

	CodigoSolicitanteSAP *UnionNullString `json:"codigoSolicitanteSAP"`

	DescripcionSolicitanteSAP *UnionNullString `json:"descripcionSolicitanteSAP"`

	DireccionSolicitanteSAP *UnionNullString `json:"direccionSolicitanteSAP"`

	PisoSolicitanteSAP *UnionNullString `json:"pisoSolicitanteSAP"`

	DtoSolicitanteSAP *UnionNullString `json:"dtoSolicitanteSAP"`

	CodigoPostalSolicitanteSAP *UnionNullString `json:"codigoPostalSolicitanteSAP"`

	LocalidadSolicitanteSAP *UnionNullString `json:"localidadSolicitanteSAP"`

	ProvinciaSolicitanteSAP *UnionNullString `json:"provinciaSolicitanteSAP"`

	PaisSolicitanteSAP *UnionNullString `json:"paisSolicitanteSAP"`

	CodigoDestinatario *UnionNullString `json:"codigoDestinatario"`

	DescripcionDestinatario *UnionNullString `json:"descripcionDestinatario"`

	NombreFantasiaDestinatario *UnionNullString `json:"nombreFantasiaDestinatario"`

	CodigoClienteTMS *UnionNullString `json:"codigoClienteTMS"`

	DescripcionTMS *UnionNullString `json:"descripcionTMS"`

	Cuit *UnionNullString `json:"cuit"`

	ClienteFacturacion *UnionNullString `json:"clienteFacturacion"`

	Segmento *UnionNullString `json:"segmento"`

	NombreFantasia *UnionNullString `json:"nombreFantasia"`

	Mail *UnionNullString `json:"mail"`

	TieneTN *UnionNullBool `json:"tieneTN"`

	TieneCC *UnionNullBool `json:"tieneCC"`

	FechaAlta *UnionNullLong `json:"fechaAlta"`

	Rubro *UnionNullString `json:"rubro"`

	TipoDeFactura *UnionNullString `json:"tipoDeFactura"`

	CanalDeVenta *UnionNullString `json:"canalDeVenta"`

	TipoCliente *UnionNullString `json:"tipoCliente"`
}

const MaestroClienteAvroCRC64Fingerprint = "*\xa3`\x9b\x1c\x86z\xa6"

func NewMaestroCliente() MaestroCliente {
	r := MaestroCliente{}
	r.ClienteId = nil
	r.UsuarioId = nil
	r.Nombre = nil
	r.TelefonoCodigoArea = nil
	r.TelefonoNumero = nil
	r.Categoria = nil
	r.Cuando = nil
	r.Paridad = nil
	r.CodigoSolicitanteSAP = nil
	r.DescripcionSolicitanteSAP = nil
	r.DireccionSolicitanteSAP = nil
	r.PisoSolicitanteSAP = nil
	r.DtoSolicitanteSAP = nil
	r.CodigoPostalSolicitanteSAP = nil
	r.LocalidadSolicitanteSAP = nil
	r.ProvinciaSolicitanteSAP = nil
	r.PaisSolicitanteSAP = nil
	r.CodigoDestinatario = nil
	r.DescripcionDestinatario = nil
	r.NombreFantasiaDestinatario = nil
	r.CodigoClienteTMS = nil
	r.DescripcionTMS = nil
	r.Cuit = nil
	r.ClienteFacturacion = nil
	r.Segmento = nil
	r.NombreFantasia = nil
	r.Mail = nil
	r.TieneTN = nil
	r.TieneCC = nil
	r.FechaAlta = nil
	r.Rubro = nil
	r.TipoDeFactura = nil
	r.CanalDeVenta = nil
	r.TipoCliente = nil
	return r
}

func DeserializeMaestroCliente(r io.Reader) (MaestroCliente, error) {
	t := NewMaestroCliente()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeMaestroClienteFromSchema(r io.Reader, schema string) (MaestroCliente, error) {
	t := NewMaestroCliente()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeMaestroCliente(r MaestroCliente, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.ClienteId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.UsuarioId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Nombre, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TelefonoCodigoArea, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TelefonoNumero, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Categoria, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.Cuando, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.Paridad, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoSolicitanteSAP, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DescripcionSolicitanteSAP, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DireccionSolicitanteSAP, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PisoSolicitanteSAP, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DtoSolicitanteSAP, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoPostalSolicitanteSAP, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LocalidadSolicitanteSAP, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ProvinciaSolicitanteSAP, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PaisSolicitanteSAP, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoDestinatario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DescripcionDestinatario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NombreFantasiaDestinatario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoClienteTMS, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DescripcionTMS, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Cuit, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ClienteFacturacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Segmento, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NombreFantasia, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Mail, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.TieneTN, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.TieneCC, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaAlta, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Rubro, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoDeFactura, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CanalDeVenta, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoCliente, w)
	if err != nil {
		return err
	}
	return err
}

func (r MaestroCliente) Serialize(w io.Writer) error {
	return writeMaestroCliente(r, w)
}

func (r MaestroCliente) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"clienteId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"usuarioId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"nombre\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"telefonoCodigoArea\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"telefonoNumero\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"categoria\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"cuando\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"paridad\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"codigoSolicitanteSAP\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"descripcionSolicitanteSAP\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"direccionSolicitanteSAP\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"pisoSolicitanteSAP\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"dtoSolicitanteSAP\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"codigoPostalSolicitanteSAP\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"localidadSolicitanteSAP\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"provinciaSolicitanteSAP\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"paisSolicitanteSAP\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"codigoDestinatario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"descripcionDestinatario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"nombreFantasiaDestinatario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"codigoClienteTMS\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"descripcionTMS\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"cuit\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"clienteFacturacion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"segmento\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"nombreFantasia\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"mail\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"tieneTN\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"tieneCC\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"fechaAlta\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"rubro\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"tipoDeFactura\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"canalDeVenta\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"tipoCliente\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.NotificacionesMarketing.Events.Record.MaestroCliente\",\"type\":\"record\"}"
}

func (r MaestroCliente) SchemaName() string {
	return "Andreani.NotificacionesMarketing.Events.Record.MaestroCliente"
}

func (_ MaestroCliente) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ MaestroCliente) SetInt(v int32)       { panic("Unsupported operation") }
func (_ MaestroCliente) SetLong(v int64)      { panic("Unsupported operation") }
func (_ MaestroCliente) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ MaestroCliente) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ MaestroCliente) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ MaestroCliente) SetString(v string)   { panic("Unsupported operation") }
func (_ MaestroCliente) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *MaestroCliente) Get(i int) types.Field {
	switch i {
	case 0:
		r.ClienteId = NewUnionNullString()

		return r.ClienteId
	case 1:
		r.UsuarioId = NewUnionNullString()

		return r.UsuarioId
	case 2:
		r.Nombre = NewUnionNullString()

		return r.Nombre
	case 3:
		r.TelefonoCodigoArea = NewUnionNullString()

		return r.TelefonoCodigoArea
	case 4:
		r.TelefonoNumero = NewUnionNullString()

		return r.TelefonoNumero
	case 5:
		r.Categoria = NewUnionNullString()

		return r.Categoria
	case 6:
		r.Cuando = NewUnionNullLong()

		return r.Cuando
	case 7:
		r.Paridad = NewUnionNullBool()

		return r.Paridad
	case 8:
		r.CodigoSolicitanteSAP = NewUnionNullString()

		return r.CodigoSolicitanteSAP
	case 9:
		r.DescripcionSolicitanteSAP = NewUnionNullString()

		return r.DescripcionSolicitanteSAP
	case 10:
		r.DireccionSolicitanteSAP = NewUnionNullString()

		return r.DireccionSolicitanteSAP
	case 11:
		r.PisoSolicitanteSAP = NewUnionNullString()

		return r.PisoSolicitanteSAP
	case 12:
		r.DtoSolicitanteSAP = NewUnionNullString()

		return r.DtoSolicitanteSAP
	case 13:
		r.CodigoPostalSolicitanteSAP = NewUnionNullString()

		return r.CodigoPostalSolicitanteSAP
	case 14:
		r.LocalidadSolicitanteSAP = NewUnionNullString()

		return r.LocalidadSolicitanteSAP
	case 15:
		r.ProvinciaSolicitanteSAP = NewUnionNullString()

		return r.ProvinciaSolicitanteSAP
	case 16:
		r.PaisSolicitanteSAP = NewUnionNullString()

		return r.PaisSolicitanteSAP
	case 17:
		r.CodigoDestinatario = NewUnionNullString()

		return r.CodigoDestinatario
	case 18:
		r.DescripcionDestinatario = NewUnionNullString()

		return r.DescripcionDestinatario
	case 19:
		r.NombreFantasiaDestinatario = NewUnionNullString()

		return r.NombreFantasiaDestinatario
	case 20:
		r.CodigoClienteTMS = NewUnionNullString()

		return r.CodigoClienteTMS
	case 21:
		r.DescripcionTMS = NewUnionNullString()

		return r.DescripcionTMS
	case 22:
		r.Cuit = NewUnionNullString()

		return r.Cuit
	case 23:
		r.ClienteFacturacion = NewUnionNullString()

		return r.ClienteFacturacion
	case 24:
		r.Segmento = NewUnionNullString()

		return r.Segmento
	case 25:
		r.NombreFantasia = NewUnionNullString()

		return r.NombreFantasia
	case 26:
		r.Mail = NewUnionNullString()

		return r.Mail
	case 27:
		r.TieneTN = NewUnionNullBool()

		return r.TieneTN
	case 28:
		r.TieneCC = NewUnionNullBool()

		return r.TieneCC
	case 29:
		r.FechaAlta = NewUnionNullLong()

		return r.FechaAlta
	case 30:
		r.Rubro = NewUnionNullString()

		return r.Rubro
	case 31:
		r.TipoDeFactura = NewUnionNullString()

		return r.TipoDeFactura
	case 32:
		r.CanalDeVenta = NewUnionNullString()

		return r.CanalDeVenta
	case 33:
		r.TipoCliente = NewUnionNullString()

		return r.TipoCliente
	}
	panic("Unknown field index")
}

func (r *MaestroCliente) SetDefault(i int) {
	switch i {
	case 0:
		r.ClienteId = nil
		return
	case 1:
		r.UsuarioId = nil
		return
	case 2:
		r.Nombre = nil
		return
	case 3:
		r.TelefonoCodigoArea = nil
		return
	case 4:
		r.TelefonoNumero = nil
		return
	case 5:
		r.Categoria = nil
		return
	case 6:
		r.Cuando = nil
		return
	case 7:
		r.Paridad = nil
		return
	case 8:
		r.CodigoSolicitanteSAP = nil
		return
	case 9:
		r.DescripcionSolicitanteSAP = nil
		return
	case 10:
		r.DireccionSolicitanteSAP = nil
		return
	case 11:
		r.PisoSolicitanteSAP = nil
		return
	case 12:
		r.DtoSolicitanteSAP = nil
		return
	case 13:
		r.CodigoPostalSolicitanteSAP = nil
		return
	case 14:
		r.LocalidadSolicitanteSAP = nil
		return
	case 15:
		r.ProvinciaSolicitanteSAP = nil
		return
	case 16:
		r.PaisSolicitanteSAP = nil
		return
	case 17:
		r.CodigoDestinatario = nil
		return
	case 18:
		r.DescripcionDestinatario = nil
		return
	case 19:
		r.NombreFantasiaDestinatario = nil
		return
	case 20:
		r.CodigoClienteTMS = nil
		return
	case 21:
		r.DescripcionTMS = nil
		return
	case 22:
		r.Cuit = nil
		return
	case 23:
		r.ClienteFacturacion = nil
		return
	case 24:
		r.Segmento = nil
		return
	case 25:
		r.NombreFantasia = nil
		return
	case 26:
		r.Mail = nil
		return
	case 27:
		r.TieneTN = nil
		return
	case 28:
		r.TieneCC = nil
		return
	case 29:
		r.FechaAlta = nil
		return
	case 30:
		r.Rubro = nil
		return
	case 31:
		r.TipoDeFactura = nil
		return
	case 32:
		r.CanalDeVenta = nil
		return
	case 33:
		r.TipoCliente = nil
		return
	}
	panic("Unknown field index")
}

func (r *MaestroCliente) NullField(i int) {
	switch i {
	case 0:
		r.ClienteId = nil
		return
	case 1:
		r.UsuarioId = nil
		return
	case 2:
		r.Nombre = nil
		return
	case 3:
		r.TelefonoCodigoArea = nil
		return
	case 4:
		r.TelefonoNumero = nil
		return
	case 5:
		r.Categoria = nil
		return
	case 6:
		r.Cuando = nil
		return
	case 7:
		r.Paridad = nil
		return
	case 8:
		r.CodigoSolicitanteSAP = nil
		return
	case 9:
		r.DescripcionSolicitanteSAP = nil
		return
	case 10:
		r.DireccionSolicitanteSAP = nil
		return
	case 11:
		r.PisoSolicitanteSAP = nil
		return
	case 12:
		r.DtoSolicitanteSAP = nil
		return
	case 13:
		r.CodigoPostalSolicitanteSAP = nil
		return
	case 14:
		r.LocalidadSolicitanteSAP = nil
		return
	case 15:
		r.ProvinciaSolicitanteSAP = nil
		return
	case 16:
		r.PaisSolicitanteSAP = nil
		return
	case 17:
		r.CodigoDestinatario = nil
		return
	case 18:
		r.DescripcionDestinatario = nil
		return
	case 19:
		r.NombreFantasiaDestinatario = nil
		return
	case 20:
		r.CodigoClienteTMS = nil
		return
	case 21:
		r.DescripcionTMS = nil
		return
	case 22:
		r.Cuit = nil
		return
	case 23:
		r.ClienteFacturacion = nil
		return
	case 24:
		r.Segmento = nil
		return
	case 25:
		r.NombreFantasia = nil
		return
	case 26:
		r.Mail = nil
		return
	case 27:
		r.TieneTN = nil
		return
	case 28:
		r.TieneCC = nil
		return
	case 29:
		r.FechaAlta = nil
		return
	case 30:
		r.Rubro = nil
		return
	case 31:
		r.TipoDeFactura = nil
		return
	case 32:
		r.CanalDeVenta = nil
		return
	case 33:
		r.TipoCliente = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ MaestroCliente) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ MaestroCliente) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ MaestroCliente) HintSize(int)                     { panic("Unsupported operation") }
func (_ MaestroCliente) Finalize()                        {}

func (_ MaestroCliente) AvroCRC64Fingerprint() []byte {
	return []byte(MaestroClienteAvroCRC64Fingerprint)
}

func (r MaestroCliente) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["clienteId"], err = json.Marshal(r.ClienteId)
	if err != nil {
		return nil, err
	}
	output["usuarioId"], err = json.Marshal(r.UsuarioId)
	if err != nil {
		return nil, err
	}
	output["nombre"], err = json.Marshal(r.Nombre)
	if err != nil {
		return nil, err
	}
	output["telefonoCodigoArea"], err = json.Marshal(r.TelefonoCodigoArea)
	if err != nil {
		return nil, err
	}
	output["telefonoNumero"], err = json.Marshal(r.TelefonoNumero)
	if err != nil {
		return nil, err
	}
	output["categoria"], err = json.Marshal(r.Categoria)
	if err != nil {
		return nil, err
	}
	output["cuando"], err = json.Marshal(r.Cuando)
	if err != nil {
		return nil, err
	}
	output["paridad"], err = json.Marshal(r.Paridad)
	if err != nil {
		return nil, err
	}
	output["codigoSolicitanteSAP"], err = json.Marshal(r.CodigoSolicitanteSAP)
	if err != nil {
		return nil, err
	}
	output["descripcionSolicitanteSAP"], err = json.Marshal(r.DescripcionSolicitanteSAP)
	if err != nil {
		return nil, err
	}
	output["direccionSolicitanteSAP"], err = json.Marshal(r.DireccionSolicitanteSAP)
	if err != nil {
		return nil, err
	}
	output["pisoSolicitanteSAP"], err = json.Marshal(r.PisoSolicitanteSAP)
	if err != nil {
		return nil, err
	}
	output["dtoSolicitanteSAP"], err = json.Marshal(r.DtoSolicitanteSAP)
	if err != nil {
		return nil, err
	}
	output["codigoPostalSolicitanteSAP"], err = json.Marshal(r.CodigoPostalSolicitanteSAP)
	if err != nil {
		return nil, err
	}
	output["localidadSolicitanteSAP"], err = json.Marshal(r.LocalidadSolicitanteSAP)
	if err != nil {
		return nil, err
	}
	output["provinciaSolicitanteSAP"], err = json.Marshal(r.ProvinciaSolicitanteSAP)
	if err != nil {
		return nil, err
	}
	output["paisSolicitanteSAP"], err = json.Marshal(r.PaisSolicitanteSAP)
	if err != nil {
		return nil, err
	}
	output["codigoDestinatario"], err = json.Marshal(r.CodigoDestinatario)
	if err != nil {
		return nil, err
	}
	output["descripcionDestinatario"], err = json.Marshal(r.DescripcionDestinatario)
	if err != nil {
		return nil, err
	}
	output["nombreFantasiaDestinatario"], err = json.Marshal(r.NombreFantasiaDestinatario)
	if err != nil {
		return nil, err
	}
	output["codigoClienteTMS"], err = json.Marshal(r.CodigoClienteTMS)
	if err != nil {
		return nil, err
	}
	output["descripcionTMS"], err = json.Marshal(r.DescripcionTMS)
	if err != nil {
		return nil, err
	}
	output["cuit"], err = json.Marshal(r.Cuit)
	if err != nil {
		return nil, err
	}
	output["clienteFacturacion"], err = json.Marshal(r.ClienteFacturacion)
	if err != nil {
		return nil, err
	}
	output["segmento"], err = json.Marshal(r.Segmento)
	if err != nil {
		return nil, err
	}
	output["nombreFantasia"], err = json.Marshal(r.NombreFantasia)
	if err != nil {
		return nil, err
	}
	output["mail"], err = json.Marshal(r.Mail)
	if err != nil {
		return nil, err
	}
	output["tieneTN"], err = json.Marshal(r.TieneTN)
	if err != nil {
		return nil, err
	}
	output["tieneCC"], err = json.Marshal(r.TieneCC)
	if err != nil {
		return nil, err
	}
	output["fechaAlta"], err = json.Marshal(r.FechaAlta)
	if err != nil {
		return nil, err
	}
	output["rubro"], err = json.Marshal(r.Rubro)
	if err != nil {
		return nil, err
	}
	output["tipoDeFactura"], err = json.Marshal(r.TipoDeFactura)
	if err != nil {
		return nil, err
	}
	output["canalDeVenta"], err = json.Marshal(r.CanalDeVenta)
	if err != nil {
		return nil, err
	}
	output["tipoCliente"], err = json.Marshal(r.TipoCliente)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *MaestroCliente) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["clienteId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ClienteId); err != nil {
			return err
		}
	} else {
		r.ClienteId = NewUnionNullString()

		r.ClienteId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["usuarioId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UsuarioId); err != nil {
			return err
		}
	} else {
		r.UsuarioId = NewUnionNullString()

		r.UsuarioId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["nombre"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nombre); err != nil {
			return err
		}
	} else {
		r.Nombre = NewUnionNullString()

		r.Nombre = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["telefonoCodigoArea"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TelefonoCodigoArea); err != nil {
			return err
		}
	} else {
		r.TelefonoCodigoArea = NewUnionNullString()

		r.TelefonoCodigoArea = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["telefonoNumero"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TelefonoNumero); err != nil {
			return err
		}
	} else {
		r.TelefonoNumero = NewUnionNullString()

		r.TelefonoNumero = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["categoria"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Categoria); err != nil {
			return err
		}
	} else {
		r.Categoria = NewUnionNullString()

		r.Categoria = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["cuando"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cuando); err != nil {
			return err
		}
	} else {
		r.Cuando = NewUnionNullLong()

		r.Cuando = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["paridad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Paridad); err != nil {
			return err
		}
	} else {
		r.Paridad = NewUnionNullBool()

		r.Paridad = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoSolicitanteSAP"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoSolicitanteSAP); err != nil {
			return err
		}
	} else {
		r.CodigoSolicitanteSAP = NewUnionNullString()

		r.CodigoSolicitanteSAP = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["descripcionSolicitanteSAP"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DescripcionSolicitanteSAP); err != nil {
			return err
		}
	} else {
		r.DescripcionSolicitanteSAP = NewUnionNullString()

		r.DescripcionSolicitanteSAP = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["direccionSolicitanteSAP"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DireccionSolicitanteSAP); err != nil {
			return err
		}
	} else {
		r.DireccionSolicitanteSAP = NewUnionNullString()

		r.DireccionSolicitanteSAP = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["pisoSolicitanteSAP"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PisoSolicitanteSAP); err != nil {
			return err
		}
	} else {
		r.PisoSolicitanteSAP = NewUnionNullString()

		r.PisoSolicitanteSAP = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["dtoSolicitanteSAP"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DtoSolicitanteSAP); err != nil {
			return err
		}
	} else {
		r.DtoSolicitanteSAP = NewUnionNullString()

		r.DtoSolicitanteSAP = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoPostalSolicitanteSAP"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoPostalSolicitanteSAP); err != nil {
			return err
		}
	} else {
		r.CodigoPostalSolicitanteSAP = NewUnionNullString()

		r.CodigoPostalSolicitanteSAP = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["localidadSolicitanteSAP"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LocalidadSolicitanteSAP); err != nil {
			return err
		}
	} else {
		r.LocalidadSolicitanteSAP = NewUnionNullString()

		r.LocalidadSolicitanteSAP = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["provinciaSolicitanteSAP"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ProvinciaSolicitanteSAP); err != nil {
			return err
		}
	} else {
		r.ProvinciaSolicitanteSAP = NewUnionNullString()

		r.ProvinciaSolicitanteSAP = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["paisSolicitanteSAP"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PaisSolicitanteSAP); err != nil {
			return err
		}
	} else {
		r.PaisSolicitanteSAP = NewUnionNullString()

		r.PaisSolicitanteSAP = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoDestinatario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoDestinatario); err != nil {
			return err
		}
	} else {
		r.CodigoDestinatario = NewUnionNullString()

		r.CodigoDestinatario = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["descripcionDestinatario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DescripcionDestinatario); err != nil {
			return err
		}
	} else {
		r.DescripcionDestinatario = NewUnionNullString()

		r.DescripcionDestinatario = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["nombreFantasiaDestinatario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NombreFantasiaDestinatario); err != nil {
			return err
		}
	} else {
		r.NombreFantasiaDestinatario = NewUnionNullString()

		r.NombreFantasiaDestinatario = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoClienteTMS"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoClienteTMS); err != nil {
			return err
		}
	} else {
		r.CodigoClienteTMS = NewUnionNullString()

		r.CodigoClienteTMS = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["descripcionTMS"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DescripcionTMS); err != nil {
			return err
		}
	} else {
		r.DescripcionTMS = NewUnionNullString()

		r.DescripcionTMS = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["cuit"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cuit); err != nil {
			return err
		}
	} else {
		r.Cuit = NewUnionNullString()

		r.Cuit = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["clienteFacturacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ClienteFacturacion); err != nil {
			return err
		}
	} else {
		r.ClienteFacturacion = NewUnionNullString()

		r.ClienteFacturacion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["segmento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Segmento); err != nil {
			return err
		}
	} else {
		r.Segmento = NewUnionNullString()

		r.Segmento = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["nombreFantasia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NombreFantasia); err != nil {
			return err
		}
	} else {
		r.NombreFantasia = NewUnionNullString()

		r.NombreFantasia = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["mail"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Mail); err != nil {
			return err
		}
	} else {
		r.Mail = NewUnionNullString()

		r.Mail = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["tieneTN"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TieneTN); err != nil {
			return err
		}
	} else {
		r.TieneTN = NewUnionNullBool()

		r.TieneTN = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["tieneCC"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TieneCC); err != nil {
			return err
		}
	} else {
		r.TieneCC = NewUnionNullBool()

		r.TieneCC = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaAlta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaAlta); err != nil {
			return err
		}
	} else {
		r.FechaAlta = NewUnionNullLong()

		r.FechaAlta = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["rubro"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Rubro); err != nil {
			return err
		}
	} else {
		r.Rubro = NewUnionNullString()

		r.Rubro = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["tipoDeFactura"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoDeFactura); err != nil {
			return err
		}
	} else {
		r.TipoDeFactura = NewUnionNullString()

		r.TipoDeFactura = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["canalDeVenta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CanalDeVenta); err != nil {
			return err
		}
	} else {
		r.CanalDeVenta = NewUnionNullString()

		r.CanalDeVenta = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["tipoCliente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoCliente); err != nil {
			return err
		}
	} else {
		r.TipoCliente = NewUnionNullString()

		r.TipoCliente = nil
	}
	return nil
}
