// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ClientesExcelMarketing.avsc
 */
package NotificacionesMarketingEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ClienteExcel struct {
	Nombre *UnionNullString `json:"Nombre"`

	Mail *UnionNullString `json:"Mail"`

	Descuento *UnionNullString `json:"Descuento"`
}

const ClienteExcelAvroCRC64Fingerprint = "\x10\xa7\xfc\x92r\xbet\xdb"

func NewClienteExcel() ClienteExcel {
	r := ClienteExcel{}
	r.Nombre = nil
	r.Mail = nil
	r.Descuento = nil
	return r
}

func DeserializeClienteExcel(r io.Reader) (ClienteExcel, error) {
	t := NewClienteExcel()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeClienteExcelFromSchema(r io.Reader, schema string) (ClienteExcel, error) {
	t := NewClienteExcel()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeClienteExcel(r ClienteExcel, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Nombre, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Mail, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Descuento, w)
	if err != nil {
		return err
	}
	return err
}

func (r ClienteExcel) Serialize(w io.Writer) error {
	return writeClienteExcel(r, w)
}

func (r ClienteExcel) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Nombre\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Mail\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Descuento\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.NotificacionesMarketing.Events.Record.ClienteExcel\",\"type\":\"record\"}"
}

func (r ClienteExcel) SchemaName() string {
	return "Andreani.NotificacionesMarketing.Events.Record.ClienteExcel"
}

func (_ ClienteExcel) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ClienteExcel) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ClienteExcel) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ClienteExcel) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ClienteExcel) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ClienteExcel) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ClienteExcel) SetString(v string)   { panic("Unsupported operation") }
func (_ ClienteExcel) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ClienteExcel) Get(i int) types.Field {
	switch i {
	case 0:
		r.Nombre = NewUnionNullString()

		return r.Nombre
	case 1:
		r.Mail = NewUnionNullString()

		return r.Mail
	case 2:
		r.Descuento = NewUnionNullString()

		return r.Descuento
	}
	panic("Unknown field index")
}

func (r *ClienteExcel) SetDefault(i int) {
	switch i {
	case 0:
		r.Nombre = nil
		return
	case 1:
		r.Mail = nil
		return
	case 2:
		r.Descuento = nil
		return
	}
	panic("Unknown field index")
}

func (r *ClienteExcel) NullField(i int) {
	switch i {
	case 0:
		r.Nombre = nil
		return
	case 1:
		r.Mail = nil
		return
	case 2:
		r.Descuento = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ClienteExcel) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ClienteExcel) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ClienteExcel) HintSize(int)                     { panic("Unsupported operation") }
func (_ ClienteExcel) Finalize()                        {}

func (_ ClienteExcel) AvroCRC64Fingerprint() []byte {
	return []byte(ClienteExcelAvroCRC64Fingerprint)
}

func (r ClienteExcel) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Nombre"], err = json.Marshal(r.Nombre)
	if err != nil {
		return nil, err
	}
	output["Mail"], err = json.Marshal(r.Mail)
	if err != nil {
		return nil, err
	}
	output["Descuento"], err = json.Marshal(r.Descuento)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ClienteExcel) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Nombre"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nombre); err != nil {
			return err
		}
	} else {
		r.Nombre = NewUnionNullString()

		r.Nombre = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Mail"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Mail); err != nil {
			return err
		}
	} else {
		r.Mail = NewUnionNullString()

		r.Mail = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Descuento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Descuento); err != nil {
			return err
		}
	} else {
		r.Descuento = NewUnionNullString()

		r.Descuento = nil
	}
	return nil
}
