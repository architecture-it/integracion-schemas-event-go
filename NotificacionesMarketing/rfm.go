// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     RFM.avsc
 */
package NotificacionesMarketingEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type RFM struct {
	ClienteId *UnionNullString `json:"clienteId"`

	UsuarioLoginId *UnionNullString `json:"UsuarioLoginId"`

	Nombre *UnionNullString `json:"nombre"`

	TelefonoCodigoArea *UnionNullString `json:"telefonoCodigoArea"`

	TelefonoNumero *UnionNullString `json:"telefonoNumero"`

	Cuit *UnionNullString `json:"cuit"`

	UsuarioClienteId *UnionNullInt `json:"usuarioClienteId"`

	Cuando *UnionNullLong `json:"cuando"`
}

const RFMAvroCRC64Fingerprint = "goiw\t\xa7d7"

func NewRFM() RFM {
	r := RFM{}
	r.ClienteId = nil
	r.UsuarioLoginId = nil
	r.Nombre = nil
	r.TelefonoCodigoArea = nil
	r.TelefonoNumero = nil
	r.Cuit = nil
	r.UsuarioClienteId = nil
	r.Cuando = nil
	return r
}

func DeserializeRFM(r io.Reader) (RFM, error) {
	t := NewRFM()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeRFMFromSchema(r io.Reader, schema string) (RFM, error) {
	t := NewRFM()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeRFM(r RFM, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.ClienteId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.UsuarioLoginId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Nombre, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TelefonoCodigoArea, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TelefonoNumero, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Cuit, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.UsuarioClienteId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.Cuando, w)
	if err != nil {
		return err
	}
	return err
}

func (r RFM) Serialize(w io.Writer) error {
	return writeRFM(r, w)
}

func (r RFM) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"clienteId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"UsuarioLoginId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"nombre\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"telefonoCodigoArea\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"telefonoNumero\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"cuit\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"usuarioClienteId\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"cuando\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]}],\"name\":\"Andreani.NotificacionesMarketing.Events.Record.RFM\",\"type\":\"record\"}"
}

func (r RFM) SchemaName() string {
	return "Andreani.NotificacionesMarketing.Events.Record.RFM"
}

func (_ RFM) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ RFM) SetInt(v int32)       { panic("Unsupported operation") }
func (_ RFM) SetLong(v int64)      { panic("Unsupported operation") }
func (_ RFM) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ RFM) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ RFM) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ RFM) SetString(v string)   { panic("Unsupported operation") }
func (_ RFM) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *RFM) Get(i int) types.Field {
	switch i {
	case 0:
		r.ClienteId = NewUnionNullString()

		return r.ClienteId
	case 1:
		r.UsuarioLoginId = NewUnionNullString()

		return r.UsuarioLoginId
	case 2:
		r.Nombre = NewUnionNullString()

		return r.Nombre
	case 3:
		r.TelefonoCodigoArea = NewUnionNullString()

		return r.TelefonoCodigoArea
	case 4:
		r.TelefonoNumero = NewUnionNullString()

		return r.TelefonoNumero
	case 5:
		r.Cuit = NewUnionNullString()

		return r.Cuit
	case 6:
		r.UsuarioClienteId = NewUnionNullInt()

		return r.UsuarioClienteId
	case 7:
		r.Cuando = NewUnionNullLong()

		return r.Cuando
	}
	panic("Unknown field index")
}

func (r *RFM) SetDefault(i int) {
	switch i {
	case 0:
		r.ClienteId = nil
		return
	case 1:
		r.UsuarioLoginId = nil
		return
	case 2:
		r.Nombre = nil
		return
	case 3:
		r.TelefonoCodigoArea = nil
		return
	case 4:
		r.TelefonoNumero = nil
		return
	case 5:
		r.Cuit = nil
		return
	case 6:
		r.UsuarioClienteId = nil
		return
	case 7:
		r.Cuando = nil
		return
	}
	panic("Unknown field index")
}

func (r *RFM) NullField(i int) {
	switch i {
	case 0:
		r.ClienteId = nil
		return
	case 1:
		r.UsuarioLoginId = nil
		return
	case 2:
		r.Nombre = nil
		return
	case 3:
		r.TelefonoCodigoArea = nil
		return
	case 4:
		r.TelefonoNumero = nil
		return
	case 5:
		r.Cuit = nil
		return
	case 6:
		r.UsuarioClienteId = nil
		return
	case 7:
		r.Cuando = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ RFM) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ RFM) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ RFM) HintSize(int)                     { panic("Unsupported operation") }
func (_ RFM) Finalize()                        {}

func (_ RFM) AvroCRC64Fingerprint() []byte {
	return []byte(RFMAvroCRC64Fingerprint)
}

func (r RFM) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["clienteId"], err = json.Marshal(r.ClienteId)
	if err != nil {
		return nil, err
	}
	output["UsuarioLoginId"], err = json.Marshal(r.UsuarioLoginId)
	if err != nil {
		return nil, err
	}
	output["nombre"], err = json.Marshal(r.Nombre)
	if err != nil {
		return nil, err
	}
	output["telefonoCodigoArea"], err = json.Marshal(r.TelefonoCodigoArea)
	if err != nil {
		return nil, err
	}
	output["telefonoNumero"], err = json.Marshal(r.TelefonoNumero)
	if err != nil {
		return nil, err
	}
	output["cuit"], err = json.Marshal(r.Cuit)
	if err != nil {
		return nil, err
	}
	output["usuarioClienteId"], err = json.Marshal(r.UsuarioClienteId)
	if err != nil {
		return nil, err
	}
	output["cuando"], err = json.Marshal(r.Cuando)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *RFM) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["clienteId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ClienteId); err != nil {
			return err
		}
	} else {
		r.ClienteId = NewUnionNullString()

		r.ClienteId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["UsuarioLoginId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UsuarioLoginId); err != nil {
			return err
		}
	} else {
		r.UsuarioLoginId = NewUnionNullString()

		r.UsuarioLoginId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["nombre"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nombre); err != nil {
			return err
		}
	} else {
		r.Nombre = NewUnionNullString()

		r.Nombre = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["telefonoCodigoArea"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TelefonoCodigoArea); err != nil {
			return err
		}
	} else {
		r.TelefonoCodigoArea = NewUnionNullString()

		r.TelefonoCodigoArea = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["telefonoNumero"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TelefonoNumero); err != nil {
			return err
		}
	} else {
		r.TelefonoNumero = NewUnionNullString()

		r.TelefonoNumero = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["cuit"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cuit); err != nil {
			return err
		}
	} else {
		r.Cuit = NewUnionNullString()

		r.Cuit = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["usuarioClienteId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UsuarioClienteId); err != nil {
			return err
		}
	} else {
		r.UsuarioClienteId = NewUnionNullInt()

		r.UsuarioClienteId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["cuando"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cuando); err != nil {
			return err
		}
	} else {
		r.Cuando = NewUnionNullLong()

		r.Cuando = nil
	}
	return nil
}
