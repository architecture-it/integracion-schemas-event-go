// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     RFM.avsc
 */
package NotificacionesMarketingEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type RFM struct {
	ClienteId *UnionNullString `json:"clienteId"`

	Email *UnionNullString `json:"email"`

	Nombre *UnionNullString `json:"nombre"`

	TelefonoCodigoArea *UnionNullString `json:"telefonoCodigoArea"`

	TelefonoNumero *UnionNullString `json:"telefonoNumero"`

	Categoria *UnionNullString `json:"categoria"`

	Cuando *UnionNullLong `json:"cuando"`

	Paridad *UnionNullBool `json:"paridad"`

	Canal *UnionNullString `json:"canal"`

	CodigoContratoSAP *UnionNullString `json:"codigoContratoSAP"`

	DescripcionContratoSAP *UnionNullString `json:"descripcionContratoSAP"`

	CodigoSolicitanteSAP *UnionNullString `json:"codigoSolicitanteSAP"`

	DescripcionSolicitanteSAP *UnionNullString `json:"descripcionSolicitanteSAP"`

	CodigoDestinatario *UnionNullString `json:"codigoDestinatario"`

	DescripcionDestinatario *UnionNullString `json:"descripcionDestinatario"`

	NombreFantasiaDestinatario *UnionNullString `json:"nombreFantasiaDestinatario"`

	CodigoContratoTMS *UnionNullString `json:"codigoContratoTMS"`

	CodigoClienteTMS *UnionNullString `json:"codigoClienteTMS"`

	DescripcionTMS *UnionNullString `json:"descripcionTMS"`

	ClienteFacturacion *UnionNullString `json:"clienteFacturacion"`

	Segmento *UnionNullString `json:"segmento"`

	Cuit *UnionNullString `json:"cuit"`

	PlazoDeEntrega *UnionNullString `json:"plazoDeEntrega"`

	TipoEntrega *UnionNullString `json:"tipoEntrega"`

	TipoServicio *UnionNullString `json:"tipoServicio"`

	TipoServicioCodigo *UnionNullString `json:"tipoServicioCodigo"`

	SucursalRendicion *UnionNullString `json:"sucursalRendicion"`

	Habilitado *UnionNullInt `json:"habilitado"`

	Retiro *UnionNullBool `json:"retiro"`

	FechaHabilitado *UnionNullLong `json:"fechaHabilitado"`

	ValidoDesde *UnionNullLong `json:"validoDesde"`

	ValidoHasta *UnionNullLong `json:"validoHasta"`
}

const RFMAvroCRC64Fingerprint = "\x1a\x00`h6H\xa7\xdd"

func NewRFM() RFM {
	r := RFM{}
	r.ClienteId = nil
	r.Email = nil
	r.Nombre = nil
	r.TelefonoCodigoArea = nil
	r.TelefonoNumero = nil
	r.Categoria = nil
	r.Cuando = nil
	r.Paridad = nil
	r.Canal = nil
	r.CodigoContratoSAP = nil
	r.DescripcionContratoSAP = nil
	r.CodigoSolicitanteSAP = nil
	r.DescripcionSolicitanteSAP = nil
	r.CodigoDestinatario = nil
	r.DescripcionDestinatario = nil
	r.NombreFantasiaDestinatario = nil
	r.CodigoContratoTMS = nil
	r.CodigoClienteTMS = nil
	r.DescripcionTMS = nil
	r.ClienteFacturacion = nil
	r.Segmento = nil
	r.Cuit = nil
	r.PlazoDeEntrega = nil
	r.TipoEntrega = nil
	r.TipoServicio = nil
	r.TipoServicioCodigo = nil
	r.SucursalRendicion = nil
	r.Habilitado = nil
	r.Retiro = nil
	r.FechaHabilitado = nil
	r.ValidoDesde = nil
	r.ValidoHasta = nil
	return r
}

func DeserializeRFM(r io.Reader) (RFM, error) {
	t := NewRFM()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeRFMFromSchema(r io.Reader, schema string) (RFM, error) {
	t := NewRFM()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeRFM(r RFM, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.ClienteId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Email, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Nombre, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TelefonoCodigoArea, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TelefonoNumero, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Categoria, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.Cuando, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.Paridad, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Canal, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoContratoSAP, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DescripcionContratoSAP, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoSolicitanteSAP, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DescripcionSolicitanteSAP, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoDestinatario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DescripcionDestinatario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NombreFantasiaDestinatario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoContratoTMS, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoClienteTMS, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DescripcionTMS, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ClienteFacturacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Segmento, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Cuit, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PlazoDeEntrega, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoEntrega, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoServicio, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoServicioCodigo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SucursalRendicion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.Habilitado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.Retiro, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaHabilitado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.ValidoDesde, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.ValidoHasta, w)
	if err != nil {
		return err
	}
	return err
}

func (r RFM) Serialize(w io.Writer) error {
	return writeRFM(r, w)
}

func (r RFM) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"clienteId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"email\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"nombre\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"telefonoCodigoArea\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"telefonoNumero\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"categoria\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"cuando\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"paridad\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"canal\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"codigoContratoSAP\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"descripcionContratoSAP\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"codigoSolicitanteSAP\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"descripcionSolicitanteSAP\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"codigoDestinatario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"descripcionDestinatario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"nombreFantasiaDestinatario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"codigoContratoTMS\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"codigoClienteTMS\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"descripcionTMS\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"clienteFacturacion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"segmento\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"cuit\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"plazoDeEntrega\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"tipoEntrega\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"tipoServicio\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"tipoServicioCodigo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"sucursalRendicion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"habilitado\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"retiro\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"fechaHabilitado\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"validoDesde\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"validoHasta\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]}],\"name\":\"Andreani.RHpro.Events.Record.RFM\",\"type\":\"record\"}"
}

func (r RFM) SchemaName() string {
	return "Andreani.RHpro.Events.Record.RFM"
}

func (_ RFM) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ RFM) SetInt(v int32)       { panic("Unsupported operation") }
func (_ RFM) SetLong(v int64)      { panic("Unsupported operation") }
func (_ RFM) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ RFM) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ RFM) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ RFM) SetString(v string)   { panic("Unsupported operation") }
func (_ RFM) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *RFM) Get(i int) types.Field {
	switch i {
	case 0:
		r.ClienteId = NewUnionNullString()

		return r.ClienteId
	case 1:
		r.Email = NewUnionNullString()

		return r.Email
	case 2:
		r.Nombre = NewUnionNullString()

		return r.Nombre
	case 3:
		r.TelefonoCodigoArea = NewUnionNullString()

		return r.TelefonoCodigoArea
	case 4:
		r.TelefonoNumero = NewUnionNullString()

		return r.TelefonoNumero
	case 5:
		r.Categoria = NewUnionNullString()

		return r.Categoria
	case 6:
		r.Cuando = NewUnionNullLong()

		return r.Cuando
	case 7:
		r.Paridad = NewUnionNullBool()

		return r.Paridad
	case 8:
		r.Canal = NewUnionNullString()

		return r.Canal
	case 9:
		r.CodigoContratoSAP = NewUnionNullString()

		return r.CodigoContratoSAP
	case 10:
		r.DescripcionContratoSAP = NewUnionNullString()

		return r.DescripcionContratoSAP
	case 11:
		r.CodigoSolicitanteSAP = NewUnionNullString()

		return r.CodigoSolicitanteSAP
	case 12:
		r.DescripcionSolicitanteSAP = NewUnionNullString()

		return r.DescripcionSolicitanteSAP
	case 13:
		r.CodigoDestinatario = NewUnionNullString()

		return r.CodigoDestinatario
	case 14:
		r.DescripcionDestinatario = NewUnionNullString()

		return r.DescripcionDestinatario
	case 15:
		r.NombreFantasiaDestinatario = NewUnionNullString()

		return r.NombreFantasiaDestinatario
	case 16:
		r.CodigoContratoTMS = NewUnionNullString()

		return r.CodigoContratoTMS
	case 17:
		r.CodigoClienteTMS = NewUnionNullString()

		return r.CodigoClienteTMS
	case 18:
		r.DescripcionTMS = NewUnionNullString()

		return r.DescripcionTMS
	case 19:
		r.ClienteFacturacion = NewUnionNullString()

		return r.ClienteFacturacion
	case 20:
		r.Segmento = NewUnionNullString()

		return r.Segmento
	case 21:
		r.Cuit = NewUnionNullString()

		return r.Cuit
	case 22:
		r.PlazoDeEntrega = NewUnionNullString()

		return r.PlazoDeEntrega
	case 23:
		r.TipoEntrega = NewUnionNullString()

		return r.TipoEntrega
	case 24:
		r.TipoServicio = NewUnionNullString()

		return r.TipoServicio
	case 25:
		r.TipoServicioCodigo = NewUnionNullString()

		return r.TipoServicioCodigo
	case 26:
		r.SucursalRendicion = NewUnionNullString()

		return r.SucursalRendicion
	case 27:
		r.Habilitado = NewUnionNullInt()

		return r.Habilitado
	case 28:
		r.Retiro = NewUnionNullBool()

		return r.Retiro
	case 29:
		r.FechaHabilitado = NewUnionNullLong()

		return r.FechaHabilitado
	case 30:
		r.ValidoDesde = NewUnionNullLong()

		return r.ValidoDesde
	case 31:
		r.ValidoHasta = NewUnionNullLong()

		return r.ValidoHasta
	}
	panic("Unknown field index")
}

func (r *RFM) SetDefault(i int) {
	switch i {
	case 0:
		r.ClienteId = nil
		return
	case 1:
		r.Email = nil
		return
	case 2:
		r.Nombre = nil
		return
	case 3:
		r.TelefonoCodigoArea = nil
		return
	case 4:
		r.TelefonoNumero = nil
		return
	case 5:
		r.Categoria = nil
		return
	case 6:
		r.Cuando = nil
		return
	case 7:
		r.Paridad = nil
		return
	case 8:
		r.Canal = nil
		return
	case 9:
		r.CodigoContratoSAP = nil
		return
	case 10:
		r.DescripcionContratoSAP = nil
		return
	case 11:
		r.CodigoSolicitanteSAP = nil
		return
	case 12:
		r.DescripcionSolicitanteSAP = nil
		return
	case 13:
		r.CodigoDestinatario = nil
		return
	case 14:
		r.DescripcionDestinatario = nil
		return
	case 15:
		r.NombreFantasiaDestinatario = nil
		return
	case 16:
		r.CodigoContratoTMS = nil
		return
	case 17:
		r.CodigoClienteTMS = nil
		return
	case 18:
		r.DescripcionTMS = nil
		return
	case 19:
		r.ClienteFacturacion = nil
		return
	case 20:
		r.Segmento = nil
		return
	case 21:
		r.Cuit = nil
		return
	case 22:
		r.PlazoDeEntrega = nil
		return
	case 23:
		r.TipoEntrega = nil
		return
	case 24:
		r.TipoServicio = nil
		return
	case 25:
		r.TipoServicioCodigo = nil
		return
	case 26:
		r.SucursalRendicion = nil
		return
	case 27:
		r.Habilitado = nil
		return
	case 28:
		r.Retiro = nil
		return
	case 29:
		r.FechaHabilitado = nil
		return
	case 30:
		r.ValidoDesde = nil
		return
	case 31:
		r.ValidoHasta = nil
		return
	}
	panic("Unknown field index")
}

func (r *RFM) NullField(i int) {
	switch i {
	case 0:
		r.ClienteId = nil
		return
	case 1:
		r.Email = nil
		return
	case 2:
		r.Nombre = nil
		return
	case 3:
		r.TelefonoCodigoArea = nil
		return
	case 4:
		r.TelefonoNumero = nil
		return
	case 5:
		r.Categoria = nil
		return
	case 6:
		r.Cuando = nil
		return
	case 7:
		r.Paridad = nil
		return
	case 8:
		r.Canal = nil
		return
	case 9:
		r.CodigoContratoSAP = nil
		return
	case 10:
		r.DescripcionContratoSAP = nil
		return
	case 11:
		r.CodigoSolicitanteSAP = nil
		return
	case 12:
		r.DescripcionSolicitanteSAP = nil
		return
	case 13:
		r.CodigoDestinatario = nil
		return
	case 14:
		r.DescripcionDestinatario = nil
		return
	case 15:
		r.NombreFantasiaDestinatario = nil
		return
	case 16:
		r.CodigoContratoTMS = nil
		return
	case 17:
		r.CodigoClienteTMS = nil
		return
	case 18:
		r.DescripcionTMS = nil
		return
	case 19:
		r.ClienteFacturacion = nil
		return
	case 20:
		r.Segmento = nil
		return
	case 21:
		r.Cuit = nil
		return
	case 22:
		r.PlazoDeEntrega = nil
		return
	case 23:
		r.TipoEntrega = nil
		return
	case 24:
		r.TipoServicio = nil
		return
	case 25:
		r.TipoServicioCodigo = nil
		return
	case 26:
		r.SucursalRendicion = nil
		return
	case 27:
		r.Habilitado = nil
		return
	case 28:
		r.Retiro = nil
		return
	case 29:
		r.FechaHabilitado = nil
		return
	case 30:
		r.ValidoDesde = nil
		return
	case 31:
		r.ValidoHasta = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ RFM) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ RFM) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ RFM) HintSize(int)                     { panic("Unsupported operation") }
func (_ RFM) Finalize()                        {}

func (_ RFM) AvroCRC64Fingerprint() []byte {
	return []byte(RFMAvroCRC64Fingerprint)
}

func (r RFM) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["clienteId"], err = json.Marshal(r.ClienteId)
	if err != nil {
		return nil, err
	}
	output["email"], err = json.Marshal(r.Email)
	if err != nil {
		return nil, err
	}
	output["nombre"], err = json.Marshal(r.Nombre)
	if err != nil {
		return nil, err
	}
	output["telefonoCodigoArea"], err = json.Marshal(r.TelefonoCodigoArea)
	if err != nil {
		return nil, err
	}
	output["telefonoNumero"], err = json.Marshal(r.TelefonoNumero)
	if err != nil {
		return nil, err
	}
	output["categoria"], err = json.Marshal(r.Categoria)
	if err != nil {
		return nil, err
	}
	output["cuando"], err = json.Marshal(r.Cuando)
	if err != nil {
		return nil, err
	}
	output["paridad"], err = json.Marshal(r.Paridad)
	if err != nil {
		return nil, err
	}
	output["canal"], err = json.Marshal(r.Canal)
	if err != nil {
		return nil, err
	}
	output["codigoContratoSAP"], err = json.Marshal(r.CodigoContratoSAP)
	if err != nil {
		return nil, err
	}
	output["descripcionContratoSAP"], err = json.Marshal(r.DescripcionContratoSAP)
	if err != nil {
		return nil, err
	}
	output["codigoSolicitanteSAP"], err = json.Marshal(r.CodigoSolicitanteSAP)
	if err != nil {
		return nil, err
	}
	output["descripcionSolicitanteSAP"], err = json.Marshal(r.DescripcionSolicitanteSAP)
	if err != nil {
		return nil, err
	}
	output["codigoDestinatario"], err = json.Marshal(r.CodigoDestinatario)
	if err != nil {
		return nil, err
	}
	output["descripcionDestinatario"], err = json.Marshal(r.DescripcionDestinatario)
	if err != nil {
		return nil, err
	}
	output["nombreFantasiaDestinatario"], err = json.Marshal(r.NombreFantasiaDestinatario)
	if err != nil {
		return nil, err
	}
	output["codigoContratoTMS"], err = json.Marshal(r.CodigoContratoTMS)
	if err != nil {
		return nil, err
	}
	output["codigoClienteTMS"], err = json.Marshal(r.CodigoClienteTMS)
	if err != nil {
		return nil, err
	}
	output["descripcionTMS"], err = json.Marshal(r.DescripcionTMS)
	if err != nil {
		return nil, err
	}
	output["clienteFacturacion"], err = json.Marshal(r.ClienteFacturacion)
	if err != nil {
		return nil, err
	}
	output["segmento"], err = json.Marshal(r.Segmento)
	if err != nil {
		return nil, err
	}
	output["cuit"], err = json.Marshal(r.Cuit)
	if err != nil {
		return nil, err
	}
	output["plazoDeEntrega"], err = json.Marshal(r.PlazoDeEntrega)
	if err != nil {
		return nil, err
	}
	output["tipoEntrega"], err = json.Marshal(r.TipoEntrega)
	if err != nil {
		return nil, err
	}
	output["tipoServicio"], err = json.Marshal(r.TipoServicio)
	if err != nil {
		return nil, err
	}
	output["tipoServicioCodigo"], err = json.Marshal(r.TipoServicioCodigo)
	if err != nil {
		return nil, err
	}
	output["sucursalRendicion"], err = json.Marshal(r.SucursalRendicion)
	if err != nil {
		return nil, err
	}
	output["habilitado"], err = json.Marshal(r.Habilitado)
	if err != nil {
		return nil, err
	}
	output["retiro"], err = json.Marshal(r.Retiro)
	if err != nil {
		return nil, err
	}
	output["fechaHabilitado"], err = json.Marshal(r.FechaHabilitado)
	if err != nil {
		return nil, err
	}
	output["validoDesde"], err = json.Marshal(r.ValidoDesde)
	if err != nil {
		return nil, err
	}
	output["validoHasta"], err = json.Marshal(r.ValidoHasta)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *RFM) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["clienteId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ClienteId); err != nil {
			return err
		}
	} else {
		r.ClienteId = NewUnionNullString()

		r.ClienteId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["email"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Email); err != nil {
			return err
		}
	} else {
		r.Email = NewUnionNullString()

		r.Email = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["nombre"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nombre); err != nil {
			return err
		}
	} else {
		r.Nombre = NewUnionNullString()

		r.Nombre = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["telefonoCodigoArea"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TelefonoCodigoArea); err != nil {
			return err
		}
	} else {
		r.TelefonoCodigoArea = NewUnionNullString()

		r.TelefonoCodigoArea = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["telefonoNumero"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TelefonoNumero); err != nil {
			return err
		}
	} else {
		r.TelefonoNumero = NewUnionNullString()

		r.TelefonoNumero = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["categoria"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Categoria); err != nil {
			return err
		}
	} else {
		r.Categoria = NewUnionNullString()

		r.Categoria = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["cuando"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cuando); err != nil {
			return err
		}
	} else {
		r.Cuando = NewUnionNullLong()

		r.Cuando = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["paridad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Paridad); err != nil {
			return err
		}
	} else {
		r.Paridad = NewUnionNullBool()

		r.Paridad = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["canal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Canal); err != nil {
			return err
		}
	} else {
		r.Canal = NewUnionNullString()

		r.Canal = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoContratoSAP"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoContratoSAP); err != nil {
			return err
		}
	} else {
		r.CodigoContratoSAP = NewUnionNullString()

		r.CodigoContratoSAP = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["descripcionContratoSAP"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DescripcionContratoSAP); err != nil {
			return err
		}
	} else {
		r.DescripcionContratoSAP = NewUnionNullString()

		r.DescripcionContratoSAP = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoSolicitanteSAP"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoSolicitanteSAP); err != nil {
			return err
		}
	} else {
		r.CodigoSolicitanteSAP = NewUnionNullString()

		r.CodigoSolicitanteSAP = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["descripcionSolicitanteSAP"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DescripcionSolicitanteSAP); err != nil {
			return err
		}
	} else {
		r.DescripcionSolicitanteSAP = NewUnionNullString()

		r.DescripcionSolicitanteSAP = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoDestinatario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoDestinatario); err != nil {
			return err
		}
	} else {
		r.CodigoDestinatario = NewUnionNullString()

		r.CodigoDestinatario = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["descripcionDestinatario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DescripcionDestinatario); err != nil {
			return err
		}
	} else {
		r.DescripcionDestinatario = NewUnionNullString()

		r.DescripcionDestinatario = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["nombreFantasiaDestinatario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NombreFantasiaDestinatario); err != nil {
			return err
		}
	} else {
		r.NombreFantasiaDestinatario = NewUnionNullString()

		r.NombreFantasiaDestinatario = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoContratoTMS"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoContratoTMS); err != nil {
			return err
		}
	} else {
		r.CodigoContratoTMS = NewUnionNullString()

		r.CodigoContratoTMS = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoClienteTMS"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoClienteTMS); err != nil {
			return err
		}
	} else {
		r.CodigoClienteTMS = NewUnionNullString()

		r.CodigoClienteTMS = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["descripcionTMS"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DescripcionTMS); err != nil {
			return err
		}
	} else {
		r.DescripcionTMS = NewUnionNullString()

		r.DescripcionTMS = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["clienteFacturacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ClienteFacturacion); err != nil {
			return err
		}
	} else {
		r.ClienteFacturacion = NewUnionNullString()

		r.ClienteFacturacion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["segmento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Segmento); err != nil {
			return err
		}
	} else {
		r.Segmento = NewUnionNullString()

		r.Segmento = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["cuit"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cuit); err != nil {
			return err
		}
	} else {
		r.Cuit = NewUnionNullString()

		r.Cuit = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["plazoDeEntrega"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PlazoDeEntrega); err != nil {
			return err
		}
	} else {
		r.PlazoDeEntrega = NewUnionNullString()

		r.PlazoDeEntrega = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["tipoEntrega"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoEntrega); err != nil {
			return err
		}
	} else {
		r.TipoEntrega = NewUnionNullString()

		r.TipoEntrega = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["tipoServicio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoServicio); err != nil {
			return err
		}
	} else {
		r.TipoServicio = NewUnionNullString()

		r.TipoServicio = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["tipoServicioCodigo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoServicioCodigo); err != nil {
			return err
		}
	} else {
		r.TipoServicioCodigo = NewUnionNullString()

		r.TipoServicioCodigo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["sucursalRendicion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SucursalRendicion); err != nil {
			return err
		}
	} else {
		r.SucursalRendicion = NewUnionNullString()

		r.SucursalRendicion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["habilitado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Habilitado); err != nil {
			return err
		}
	} else {
		r.Habilitado = NewUnionNullInt()

		r.Habilitado = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["retiro"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Retiro); err != nil {
			return err
		}
	} else {
		r.Retiro = NewUnionNullBool()

		r.Retiro = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaHabilitado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaHabilitado); err != nil {
			return err
		}
	} else {
		r.FechaHabilitado = NewUnionNullLong()

		r.FechaHabilitado = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["validoDesde"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValidoDesde); err != nil {
			return err
		}
	} else {
		r.ValidoDesde = NewUnionNullLong()

		r.ValidoDesde = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["validoHasta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValidoHasta); err != nil {
			return err
		}
	} else {
		r.ValidoHasta = NewUnionNullLong()

		r.ValidoHasta = nil
	}
	return nil
}
