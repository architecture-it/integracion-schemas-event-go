// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     GeneracionEtiquetaContingencia.avsc
 */
package WosExpedicionEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type GeneracionEtiquetaContingencia struct {
	Key1 *UnionNullString `json:"Key1"`

	Wmwhseid *UnionNullString `json:"Wmwhseid"`

	Event *UnionNullString `json:"Event"`

	Instance *UnionNullString `json:"Instance"`
}

const GeneracionEtiquetaContingenciaAvroCRC64Fingerprint = "dP\x8c\x9a\xe6\t\xc7\xe0"

func NewGeneracionEtiquetaContingencia() GeneracionEtiquetaContingencia {
	r := GeneracionEtiquetaContingencia{}
	r.Key1 = nil
	r.Wmwhseid = nil
	r.Event = nil
	r.Instance = nil
	return r
}

func DeserializeGeneracionEtiquetaContingencia(r io.Reader) (GeneracionEtiquetaContingencia, error) {
	t := NewGeneracionEtiquetaContingencia()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeGeneracionEtiquetaContingenciaFromSchema(r io.Reader, schema string) (GeneracionEtiquetaContingencia, error) {
	t := NewGeneracionEtiquetaContingencia()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeGeneracionEtiquetaContingencia(r GeneracionEtiquetaContingencia, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Key1, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Wmwhseid, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Event, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Instance, w)
	if err != nil {
		return err
	}
	return err
}

func (r GeneracionEtiquetaContingencia) Serialize(w io.Writer) error {
	return writeGeneracionEtiquetaContingencia(r, w)
}

func (r GeneracionEtiquetaContingencia) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Key1\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Wmwhseid\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Event\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Instance\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.WosExpedicion.Events.Record.GeneracionEtiquetaContingencia\",\"type\":\"record\"}"
}

func (r GeneracionEtiquetaContingencia) SchemaName() string {
	return "Andreani.WosExpedicion.Events.Record.GeneracionEtiquetaContingencia"
}

func (_ GeneracionEtiquetaContingencia) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ GeneracionEtiquetaContingencia) SetInt(v int32)       { panic("Unsupported operation") }
func (_ GeneracionEtiquetaContingencia) SetLong(v int64)      { panic("Unsupported operation") }
func (_ GeneracionEtiquetaContingencia) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ GeneracionEtiquetaContingencia) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ GeneracionEtiquetaContingencia) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ GeneracionEtiquetaContingencia) SetString(v string)   { panic("Unsupported operation") }
func (_ GeneracionEtiquetaContingencia) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *GeneracionEtiquetaContingencia) Get(i int) types.Field {
	switch i {
	case 0:
		r.Key1 = NewUnionNullString()

		return r.Key1
	case 1:
		r.Wmwhseid = NewUnionNullString()

		return r.Wmwhseid
	case 2:
		r.Event = NewUnionNullString()

		return r.Event
	case 3:
		r.Instance = NewUnionNullString()

		return r.Instance
	}
	panic("Unknown field index")
}

func (r *GeneracionEtiquetaContingencia) SetDefault(i int) {
	switch i {
	case 0:
		r.Key1 = nil
		return
	case 1:
		r.Wmwhseid = nil
		return
	case 2:
		r.Event = nil
		return
	case 3:
		r.Instance = nil
		return
	}
	panic("Unknown field index")
}

func (r *GeneracionEtiquetaContingencia) NullField(i int) {
	switch i {
	case 0:
		r.Key1 = nil
		return
	case 1:
		r.Wmwhseid = nil
		return
	case 2:
		r.Event = nil
		return
	case 3:
		r.Instance = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ GeneracionEtiquetaContingencia) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ GeneracionEtiquetaContingencia) AppendArray() types.Field { panic("Unsupported operation") }
func (_ GeneracionEtiquetaContingencia) HintSize(int)             { panic("Unsupported operation") }
func (_ GeneracionEtiquetaContingencia) Finalize()                {}

func (_ GeneracionEtiquetaContingencia) AvroCRC64Fingerprint() []byte {
	return []byte(GeneracionEtiquetaContingenciaAvroCRC64Fingerprint)
}

func (r GeneracionEtiquetaContingencia) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Key1"], err = json.Marshal(r.Key1)
	if err != nil {
		return nil, err
	}
	output["Wmwhseid"], err = json.Marshal(r.Wmwhseid)
	if err != nil {
		return nil, err
	}
	output["Event"], err = json.Marshal(r.Event)
	if err != nil {
		return nil, err
	}
	output["Instance"], err = json.Marshal(r.Instance)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *GeneracionEtiquetaContingencia) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Key1"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Key1); err != nil {
			return err
		}
	} else {
		r.Key1 = NewUnionNullString()

		r.Key1 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Wmwhseid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Wmwhseid); err != nil {
			return err
		}
	} else {
		r.Wmwhseid = NewUnionNullString()

		r.Wmwhseid = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Event"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Event); err != nil {
			return err
		}
	} else {
		r.Event = NewUnionNullString()

		r.Event = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Instance"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Instance); err != nil {
			return err
		}
	} else {
		r.Instance = NewUnionNullString()

		r.Instance = nil
	}
	return nil
}
