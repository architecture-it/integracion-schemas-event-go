// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Impresiones.avsc
 */
package WosExpedicionEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Impresiones struct {
	Propietario string `json:"Propietario"`

	OrdenWh string `json:"OrdenWh"`

	OrdenCliente string `json:"OrdenCliente"`

	CodigoEmbalaje *UnionNullString `json:"CodigoEmbalaje"`

	TipoImpresion string `json:"TipoImpresion"`

	Motivo string `json:"Motivo"`

	Usuario string `json:"Usuario"`

	Ts string `json:"Ts"`
}

const ImpresionesAvroCRC64Fingerprint = "\xa9\xa9k\x95\xc1>Ä˜"

func NewImpresiones() Impresiones {
	r := Impresiones{}
	r.CodigoEmbalaje = nil
	return r
}

func DeserializeImpresiones(r io.Reader) (Impresiones, error) {
	t := NewImpresiones()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeImpresionesFromSchema(r io.Reader, schema string) (Impresiones, error) {
	t := NewImpresiones()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeImpresiones(r Impresiones, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Propietario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OrdenWh, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OrdenCliente, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoEmbalaje, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.TipoImpresion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Motivo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Usuario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Ts, w)
	if err != nil {
		return err
	}
	return err
}

func (r Impresiones) Serialize(w io.Writer) error {
	return writeImpresiones(r, w)
}

func (r Impresiones) Schema() string {
	return "{\"fields\":[{\"name\":\"Propietario\",\"type\":\"string\"},{\"name\":\"OrdenWh\",\"type\":\"string\"},{\"name\":\"OrdenCliente\",\"type\":\"string\"},{\"default\":null,\"name\":\"CodigoEmbalaje\",\"type\":[\"null\",\"string\"]},{\"name\":\"TipoImpresion\",\"type\":\"string\"},{\"name\":\"Motivo\",\"type\":\"string\"},{\"name\":\"Usuario\",\"type\":\"string\"},{\"name\":\"Ts\",\"type\":\"string\"}],\"name\":\"Andreani.WosExpedicion.Events.Record.Impresiones\",\"type\":\"record\"}"
}

func (r Impresiones) SchemaName() string {
	return "Andreani.WosExpedicion.Events.Record.Impresiones"
}

func (_ Impresiones) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Impresiones) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Impresiones) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Impresiones) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Impresiones) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Impresiones) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Impresiones) SetString(v string)   { panic("Unsupported operation") }
func (_ Impresiones) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Impresiones) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Propietario}

		return w

	case 1:
		w := types.String{Target: &r.OrdenWh}

		return w

	case 2:
		w := types.String{Target: &r.OrdenCliente}

		return w

	case 3:
		r.CodigoEmbalaje = NewUnionNullString()

		return r.CodigoEmbalaje
	case 4:
		w := types.String{Target: &r.TipoImpresion}

		return w

	case 5:
		w := types.String{Target: &r.Motivo}

		return w

	case 6:
		w := types.String{Target: &r.Usuario}

		return w

	case 7:
		w := types.String{Target: &r.Ts}

		return w

	}
	panic("Unknown field index")
}

func (r *Impresiones) SetDefault(i int) {
	switch i {
	case 3:
		r.CodigoEmbalaje = nil
		return
	}
	panic("Unknown field index")
}

func (r *Impresiones) NullField(i int) {
	switch i {
	case 3:
		r.CodigoEmbalaje = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Impresiones) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Impresiones) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Impresiones) HintSize(int)                     { panic("Unsupported operation") }
func (_ Impresiones) Finalize()                        {}

func (_ Impresiones) AvroCRC64Fingerprint() []byte {
	return []byte(ImpresionesAvroCRC64Fingerprint)
}

func (r Impresiones) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["OrdenWh"], err = json.Marshal(r.OrdenWh)
	if err != nil {
		return nil, err
	}
	output["OrdenCliente"], err = json.Marshal(r.OrdenCliente)
	if err != nil {
		return nil, err
	}
	output["CodigoEmbalaje"], err = json.Marshal(r.CodigoEmbalaje)
	if err != nil {
		return nil, err
	}
	output["TipoImpresion"], err = json.Marshal(r.TipoImpresion)
	if err != nil {
		return nil, err
	}
	output["Motivo"], err = json.Marshal(r.Motivo)
	if err != nil {
		return nil, err
	}
	output["Usuario"], err = json.Marshal(r.Usuario)
	if err != nil {
		return nil, err
	}
	output["Ts"], err = json.Marshal(r.Ts)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Impresiones) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Propietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OrdenWh"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrdenWh); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OrdenWh")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OrdenCliente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrdenCliente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OrdenCliente")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoEmbalaje"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoEmbalaje); err != nil {
			return err
		}
	} else {
		r.CodigoEmbalaje = NewUnionNullString()

		r.CodigoEmbalaje = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoImpresion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoImpresion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoImpresion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Motivo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Motivo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Motivo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Usuario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Usuario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Usuario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Ts"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ts); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Ts")
	}
	return nil
}
