// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     HdrCreada.avsc
 */
package DMSEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DistribuidorReferencia struct {
	Origen string `json:"Origen"`

	Sucursal string `json:"Sucursal"`

	Tipo string `json:"Tipo"`

	Codigo string `json:"Codigo"`
}

const DistribuidorReferenciaAvroCRC64Fingerprint = "\xdb,Ê«Re 8"

func NewDistribuidorReferencia() DistribuidorReferencia {
	r := DistribuidorReferencia{}
	return r
}

func DeserializeDistribuidorReferencia(r io.Reader) (DistribuidorReferencia, error) {
	t := NewDistribuidorReferencia()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDistribuidorReferenciaFromSchema(r io.Reader, schema string) (DistribuidorReferencia, error) {
	t := NewDistribuidorReferencia()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDistribuidorReferencia(r DistribuidorReferencia, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Origen, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Sucursal, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Tipo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Codigo, w)
	if err != nil {
		return err
	}
	return err
}

func (r DistribuidorReferencia) Serialize(w io.Writer) error {
	return writeDistribuidorReferencia(r, w)
}

func (r DistribuidorReferencia) Schema() string {
	return "{\"fields\":[{\"name\":\"Origen\",\"type\":\"string\"},{\"name\":\"Sucursal\",\"type\":\"string\"},{\"name\":\"Tipo\",\"type\":\"string\"},{\"name\":\"Codigo\",\"type\":\"string\"}],\"name\":\"Andreani.DMS.Events.Hdr.Common.DistribuidorReferencia\",\"type\":\"record\"}"
}

func (r DistribuidorReferencia) SchemaName() string {
	return "Andreani.DMS.Events.Hdr.Common.DistribuidorReferencia"
}

func (_ DistribuidorReferencia) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DistribuidorReferencia) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DistribuidorReferencia) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DistribuidorReferencia) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DistribuidorReferencia) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DistribuidorReferencia) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DistribuidorReferencia) SetString(v string)   { panic("Unsupported operation") }
func (_ DistribuidorReferencia) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DistribuidorReferencia) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Origen}

		return w

	case 1:
		w := types.String{Target: &r.Sucursal}

		return w

	case 2:
		w := types.String{Target: &r.Tipo}

		return w

	case 3:
		w := types.String{Target: &r.Codigo}

		return w

	}
	panic("Unknown field index")
}

func (r *DistribuidorReferencia) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *DistribuidorReferencia) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ DistribuidorReferencia) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DistribuidorReferencia) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DistribuidorReferencia) HintSize(int)                     { panic("Unsupported operation") }
func (_ DistribuidorReferencia) Finalize()                        {}

func (_ DistribuidorReferencia) AvroCRC64Fingerprint() []byte {
	return []byte(DistribuidorReferenciaAvroCRC64Fingerprint)
}

func (r DistribuidorReferencia) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Origen"], err = json.Marshal(r.Origen)
	if err != nil {
		return nil, err
	}
	output["Sucursal"], err = json.Marshal(r.Sucursal)
	if err != nil {
		return nil, err
	}
	output["Tipo"], err = json.Marshal(r.Tipo)
	if err != nil {
		return nil, err
	}
	output["Codigo"], err = json.Marshal(r.Codigo)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DistribuidorReferencia) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Origen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Origen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Origen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Sucursal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sucursal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Sucursal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Tipo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Tipo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Tipo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Codigo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Codigo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Codigo")
	}
	return nil
}
