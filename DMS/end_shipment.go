// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EndShipment.avsc
 */
package DMSEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EndShipment struct {
	Shipment string `json:"Shipment"`

	DateEnd string `json:"DateEnd"`

	Motive *UnionNullString `json:"motive"`

	SubMotive *UnionNullString `json:"SubMotive"`

	GrouperShipments *UnionNullInt `json:"GrouperShipments"`

	CurrentStatee *UnionNullArrayCurrentState `json:"CurrentStatee"`
}

const EndShipmentAvroCRC64Fingerprint = "\xa3\xf8y\x83\xe2\\D\xd9"

func NewEndShipment() EndShipment {
	r := EndShipment{}
	r.Motive = nil
	r.SubMotive = nil
	r.GrouperShipments = nil
	r.CurrentStatee = nil
	return r
}

func DeserializeEndShipment(r io.Reader) (EndShipment, error) {
	t := NewEndShipment()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEndShipmentFromSchema(r io.Reader, schema string) (EndShipment, error) {
	t := NewEndShipment()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEndShipment(r EndShipment, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Shipment, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.DateEnd, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Motive, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SubMotive, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.GrouperShipments, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayCurrentState(r.CurrentStatee, w)
	if err != nil {
		return err
	}
	return err
}

func (r EndShipment) Serialize(w io.Writer) error {
	return writeEndShipment(r, w)
}

func (r EndShipment) Schema() string {
	return "{\"fields\":[{\"name\":\"Shipment\",\"type\":\"string\"},{\"name\":\"DateEnd\",\"type\":\"string\"},{\"default\":null,\"name\":\"motive\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SubMotive\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"GrouperShipments\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"CurrentStatee\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"CycleName\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"default\":null,\"name\":\"NextState\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]}],\"name\":\"CurrentState\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"Andreani.DMS.Events.Record.EndShipment\",\"type\":\"record\"}"
}

func (r EndShipment) SchemaName() string {
	return "Andreani.DMS.Events.Record.EndShipment"
}

func (_ EndShipment) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EndShipment) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EndShipment) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EndShipment) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EndShipment) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EndShipment) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EndShipment) SetString(v string)   { panic("Unsupported operation") }
func (_ EndShipment) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EndShipment) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Shipment}

		return w

	case 1:
		w := types.String{Target: &r.DateEnd}

		return w

	case 2:
		r.Motive = NewUnionNullString()

		return r.Motive
	case 3:
		r.SubMotive = NewUnionNullString()

		return r.SubMotive
	case 4:
		r.GrouperShipments = NewUnionNullInt()

		return r.GrouperShipments
	case 5:
		r.CurrentStatee = NewUnionNullArrayCurrentState()

		return r.CurrentStatee
	}
	panic("Unknown field index")
}

func (r *EndShipment) SetDefault(i int) {
	switch i {
	case 2:
		r.Motive = nil
		return
	case 3:
		r.SubMotive = nil
		return
	case 4:
		r.GrouperShipments = nil
		return
	case 5:
		r.CurrentStatee = nil
		return
	}
	panic("Unknown field index")
}

func (r *EndShipment) NullField(i int) {
	switch i {
	case 2:
		r.Motive = nil
		return
	case 3:
		r.SubMotive = nil
		return
	case 4:
		r.GrouperShipments = nil
		return
	case 5:
		r.CurrentStatee = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ EndShipment) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EndShipment) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EndShipment) HintSize(int)                     { panic("Unsupported operation") }
func (_ EndShipment) Finalize()                        {}

func (_ EndShipment) AvroCRC64Fingerprint() []byte {
	return []byte(EndShipmentAvroCRC64Fingerprint)
}

func (r EndShipment) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Shipment"], err = json.Marshal(r.Shipment)
	if err != nil {
		return nil, err
	}
	output["DateEnd"], err = json.Marshal(r.DateEnd)
	if err != nil {
		return nil, err
	}
	output["motive"], err = json.Marshal(r.Motive)
	if err != nil {
		return nil, err
	}
	output["SubMotive"], err = json.Marshal(r.SubMotive)
	if err != nil {
		return nil, err
	}
	output["GrouperShipments"], err = json.Marshal(r.GrouperShipments)
	if err != nil {
		return nil, err
	}
	output["CurrentStatee"], err = json.Marshal(r.CurrentStatee)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EndShipment) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Shipment"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Shipment); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Shipment")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DateEnd"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DateEnd); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DateEnd")
	}
	val = func() json.RawMessage {
		if v, ok := fields["motive"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Motive); err != nil {
			return err
		}
	} else {
		r.Motive = NewUnionNullString()

		r.Motive = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SubMotive"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SubMotive); err != nil {
			return err
		}
	} else {
		r.SubMotive = NewUnionNullString()

		r.SubMotive = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["GrouperShipments"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.GrouperShipments); err != nil {
			return err
		}
	} else {
		r.GrouperShipments = NewUnionNullInt()

		r.GrouperShipments = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CurrentStatee"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CurrentStatee); err != nil {
			return err
		}
	} else {
		r.CurrentStatee = NewUnionNullArrayCurrentState()

		r.CurrentStatee = nil
	}
	return nil
}
