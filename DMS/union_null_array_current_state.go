// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EndShipment.avsc
 */
package DMSEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayCurrentStateTypeEnum int

const (
	UnionNullArrayCurrentStateTypeEnumArrayCurrentState UnionNullArrayCurrentStateTypeEnum = 1
)

type UnionNullArrayCurrentState struct {
	Null              *types.NullVal
	ArrayCurrentState []CurrentState
	UnionType         UnionNullArrayCurrentStateTypeEnum
}

func writeUnionNullArrayCurrentState(r *UnionNullArrayCurrentState, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayCurrentStateTypeEnumArrayCurrentState:
		return writeArrayCurrentState(r.ArrayCurrentState, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayCurrentState")
}

func NewUnionNullArrayCurrentState() *UnionNullArrayCurrentState {
	return &UnionNullArrayCurrentState{}
}

func (r *UnionNullArrayCurrentState) Serialize(w io.Writer) error {
	return writeUnionNullArrayCurrentState(r, w)
}

func DeserializeUnionNullArrayCurrentState(r io.Reader) (*UnionNullArrayCurrentState, error) {
	t := NewUnionNullArrayCurrentState()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayCurrentStateFromSchema(r io.Reader, schema string) (*UnionNullArrayCurrentState, error) {
	t := NewUnionNullArrayCurrentState()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayCurrentState) Schema() string {
	return "[\"null\",{\"items\":{\"fields\":[{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"CycleName\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"default\":null,\"name\":\"NextState\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]}],\"name\":\"CurrentState\",\"type\":\"record\"},\"type\":\"array\"}]"
}

func (_ *UnionNullArrayCurrentState) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullArrayCurrentState) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullArrayCurrentState) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullArrayCurrentState) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullArrayCurrentState) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullArrayCurrentState) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullArrayCurrentState) SetLong(v int64) {

	r.UnionType = (UnionNullArrayCurrentStateTypeEnum)(v)
}

func (r *UnionNullArrayCurrentState) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayCurrentState = make([]CurrentState, 0)
		return &ArrayCurrentStateWrapper{Target: (&r.ArrayCurrentState)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayCurrentState) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullArrayCurrentState) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullArrayCurrentState) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullArrayCurrentState) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayCurrentState) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *UnionNullArrayCurrentState) Finalize()                {}

func (r *UnionNullArrayCurrentState) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayCurrentStateTypeEnumArrayCurrentState:
		return json.Marshal(map[string]interface{}{"array": r.ArrayCurrentState})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayCurrentState")
}

func (r *UnionNullArrayCurrentState) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayCurrentState)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayCurrentState")
}
