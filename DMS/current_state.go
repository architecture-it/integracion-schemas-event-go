// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EndShipment.avsc
 */
package DMSEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CurrentState struct {
	Name string `json:"Name"`

	CycleName string `json:"CycleName"`

	Type string `json:"type"`

	NextState *UnionNullArrayString `json:"NextState"`
}

const CurrentStateAvroCRC64Fingerprint = "\x897\x99Bd{\xf2\xcb"

func NewCurrentState() CurrentState {
	r := CurrentState{}
	r.NextState = nil
	return r
}

func DeserializeCurrentState(r io.Reader) (CurrentState, error) {
	t := NewCurrentState()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCurrentStateFromSchema(r io.Reader, schema string) (CurrentState, error) {
	t := NewCurrentState()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCurrentState(r CurrentState, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CycleName, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Type, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayString(r.NextState, w)
	if err != nil {
		return err
	}
	return err
}

func (r CurrentState) Serialize(w io.Writer) error {
	return writeCurrentState(r, w)
}

func (r CurrentState) Schema() string {
	return "{\"fields\":[{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"CycleName\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"default\":null,\"name\":\"NextState\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]}],\"name\":\"Andreani.DMS.Events.Record.CurrentState\",\"type\":\"record\"}"
}

func (r CurrentState) SchemaName() string {
	return "Andreani.DMS.Events.Record.CurrentState"
}

func (_ CurrentState) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CurrentState) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CurrentState) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CurrentState) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CurrentState) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CurrentState) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CurrentState) SetString(v string)   { panic("Unsupported operation") }
func (_ CurrentState) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CurrentState) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Name}

		return w

	case 1:
		w := types.String{Target: &r.CycleName}

		return w

	case 2:
		w := types.String{Target: &r.Type}

		return w

	case 3:
		r.NextState = NewUnionNullArrayString()

		return r.NextState
	}
	panic("Unknown field index")
}

func (r *CurrentState) SetDefault(i int) {
	switch i {
	case 3:
		r.NextState = nil
		return
	}
	panic("Unknown field index")
}

func (r *CurrentState) NullField(i int) {
	switch i {
	case 3:
		r.NextState = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ CurrentState) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CurrentState) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CurrentState) HintSize(int)                     { panic("Unsupported operation") }
func (_ CurrentState) Finalize()                        {}

func (_ CurrentState) AvroCRC64Fingerprint() []byte {
	return []byte(CurrentStateAvroCRC64Fingerprint)
}

func (r CurrentState) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["CycleName"], err = json.Marshal(r.CycleName)
	if err != nil {
		return nil, err
	}
	output["type"], err = json.Marshal(r.Type)
	if err != nil {
		return nil, err
	}
	output["NextState"], err = json.Marshal(r.NextState)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CurrentState) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CycleName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CycleName); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CycleName")
	}
	val = func() json.RawMessage {
		if v, ok := fields["type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Type); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for type")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NextState"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NextState); err != nil {
			return err
		}
	} else {
		r.NextState = NewUnionNullArrayString()

		r.NextState = nil
	}
	return nil
}
