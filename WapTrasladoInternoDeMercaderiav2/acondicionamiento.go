// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TrasladoInternoDeMercaderiaSolicitadaV2.avsc
 */
package WapTrasladoInternoDeMercaderiav2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Acondicionamiento struct {
	CodigoDeAconding *UnionNullString `json:"CodigoDeAconding"`
}

const AcondicionamientoAvroCRC64Fingerprint = "\xc8c\xb4$\xdcR\x17\x1d"

func NewAcondicionamiento() Acondicionamiento {
	r := Acondicionamiento{}
	r.CodigoDeAconding = nil
	return r
}

func DeserializeAcondicionamiento(r io.Reader) (Acondicionamiento, error) {
	t := NewAcondicionamiento()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAcondicionamientoFromSchema(r io.Reader, schema string) (Acondicionamiento, error) {
	t := NewAcondicionamiento()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAcondicionamiento(r Acondicionamiento, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.CodigoDeAconding, w)
	if err != nil {
		return err
	}
	return err
}

func (r Acondicionamiento) Serialize(w io.Writer) error {
	return writeAcondicionamiento(r, w)
}

func (r Acondicionamiento) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"CodigoDeAconding\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.WapTrasladoInternoDeMercaderiaV2.Events.Record.Acondicionamiento\",\"type\":\"record\"}"
}

func (r Acondicionamiento) SchemaName() string {
	return "Andreani.WapTrasladoInternoDeMercaderiaV2.Events.Record.Acondicionamiento"
}

func (_ Acondicionamiento) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Acondicionamiento) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Acondicionamiento) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Acondicionamiento) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Acondicionamiento) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Acondicionamiento) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Acondicionamiento) SetString(v string)   { panic("Unsupported operation") }
func (_ Acondicionamiento) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Acondicionamiento) Get(i int) types.Field {
	switch i {
	case 0:
		r.CodigoDeAconding = NewUnionNullString()

		return r.CodigoDeAconding
	}
	panic("Unknown field index")
}

func (r *Acondicionamiento) SetDefault(i int) {
	switch i {
	case 0:
		r.CodigoDeAconding = nil
		return
	}
	panic("Unknown field index")
}

func (r *Acondicionamiento) NullField(i int) {
	switch i {
	case 0:
		r.CodigoDeAconding = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Acondicionamiento) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Acondicionamiento) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Acondicionamiento) HintSize(int)                     { panic("Unsupported operation") }
func (_ Acondicionamiento) Finalize()                        {}

func (_ Acondicionamiento) AvroCRC64Fingerprint() []byte {
	return []byte(AcondicionamientoAvroCRC64Fingerprint)
}

func (r Acondicionamiento) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CodigoDeAconding"], err = json.Marshal(r.CodigoDeAconding)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Acondicionamiento) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CodigoDeAconding"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoDeAconding); err != nil {
			return err
		}
	} else {
		r.CodigoDeAconding = NewUnionNullString()

		r.CodigoDeAconding = nil
	}
	return nil
}
