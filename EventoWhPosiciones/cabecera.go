// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EventoWhPosicionesAlta.avsc
 */
package EventoWhPosicionesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Cabecera struct {
	Ubicacion string `json:"Ubicacion"`

	TipoUbicacion string `json:"TipoUbicacion"`

	CategoriaUbicacion string `json:"CategoriaUbicacion"`

	ABC string `json:"ABC"`

	Zona string `json:"Zona"`

	MezclaSKU string `json:"MezclaSKU"`

	MezclaLote string `json:"MezclaLote"`

	PierdaLpn string `json:"PierdaLpn"`

	CapacidadCubica string `json:"CapacidadCubica"`

	CapacidadPeso string `json:"CapacidadPeso"`

	Altura string `json:"Altura"`

	Longitud string `json:"Longitud"`

	Anchura string `json:"Anchura"`

	Nivel string `json:"Nivel"`

	Estado string `json:"Estado"`

	Temperatura string `json:"Temperatura"`

	FormatoUbicacion string `json:"FormatoUbicacion"`

	FamiliaProducto string `json:"FamiliaProducto"`

	Cliente string `json:"Cliente"`

	Situacion string `json:"Situacion"`

	TipoUbicacion2 string `json:"TipoUbicacion2"`

	EuroEquivalente string `json:"EuroEquivalente"`

	Llena string `json:"Llena"`

	Vacia string `json:"Vacia"`

	PorcentajeLleno string `json:"PorcentajeLleno"`

	CantidadEvento float32 `json:"CantidadEvento"`

	CantidadStock float32 `json:"CantidadStock"`
}

const CabeceraAvroCRC64Fingerprint = "o\xf1\x05\xab\xeb\xe0\xda\xdb"

func NewCabecera() Cabecera {
	r := Cabecera{}
	return r
}

func DeserializeCabecera(r io.Reader) (Cabecera, error) {
	t := NewCabecera()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCabeceraFromSchema(r io.Reader, schema string) (Cabecera, error) {
	t := NewCabecera()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCabecera(r Cabecera, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Ubicacion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.TipoUbicacion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CategoriaUbicacion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ABC, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Zona, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.MezclaSKU, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.MezclaLote, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.PierdaLpn, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CapacidadCubica, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CapacidadPeso, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Altura, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Longitud, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Anchura, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Nivel, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Estado, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Temperatura, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.FormatoUbicacion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.FamiliaProducto, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Cliente, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Situacion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.TipoUbicacion2, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.EuroEquivalente, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Llena, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Vacia, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.PorcentajeLleno, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.CantidadEvento, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.CantidadStock, w)
	if err != nil {
		return err
	}
	return err
}

func (r Cabecera) Serialize(w io.Writer) error {
	return writeCabecera(r, w)
}

func (r Cabecera) Schema() string {
	return "{\"fields\":[{\"name\":\"Ubicacion\",\"type\":\"string\"},{\"name\":\"TipoUbicacion\",\"type\":\"string\"},{\"name\":\"CategoriaUbicacion\",\"type\":\"string\"},{\"name\":\"ABC\",\"type\":\"string\"},{\"name\":\"Zona\",\"type\":\"string\"},{\"name\":\"MezclaSKU\",\"type\":\"string\"},{\"name\":\"MezclaLote\",\"type\":\"string\"},{\"name\":\"PierdaLpn\",\"type\":\"string\"},{\"name\":\"CapacidadCubica\",\"type\":\"string\"},{\"name\":\"CapacidadPeso\",\"type\":\"string\"},{\"name\":\"Altura\",\"type\":\"string\"},{\"name\":\"Longitud\",\"type\":\"string\"},{\"name\":\"Anchura\",\"type\":\"string\"},{\"name\":\"Nivel\",\"type\":\"string\"},{\"name\":\"Estado\",\"type\":\"string\"},{\"name\":\"Temperatura\",\"type\":\"string\"},{\"name\":\"FormatoUbicacion\",\"type\":\"string\"},{\"name\":\"FamiliaProducto\",\"type\":\"string\"},{\"name\":\"Cliente\",\"type\":\"string\"},{\"name\":\"Situacion\",\"type\":\"string\"},{\"name\":\"TipoUbicacion2\",\"type\":\"string\"},{\"name\":\"EuroEquivalente\",\"type\":\"string\"},{\"name\":\"Llena\",\"type\":\"string\"},{\"name\":\"Vacia\",\"type\":\"string\"},{\"name\":\"PorcentajeLleno\",\"type\":\"string\"},{\"name\":\"CantidadEvento\",\"type\":\"float\"},{\"name\":\"CantidadStock\",\"type\":\"float\"}],\"name\":\"Andreani.EventoWhPosiciones.Events.AltaCommon.Cabecera\",\"type\":\"record\"}"
}

func (r Cabecera) SchemaName() string {
	return "Andreani.EventoWhPosiciones.Events.AltaCommon.Cabecera"
}

func (_ Cabecera) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Cabecera) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Cabecera) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Cabecera) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Cabecera) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Cabecera) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Cabecera) SetString(v string)   { panic("Unsupported operation") }
func (_ Cabecera) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Cabecera) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Ubicacion}

		return w

	case 1:
		w := types.String{Target: &r.TipoUbicacion}

		return w

	case 2:
		w := types.String{Target: &r.CategoriaUbicacion}

		return w

	case 3:
		w := types.String{Target: &r.ABC}

		return w

	case 4:
		w := types.String{Target: &r.Zona}

		return w

	case 5:
		w := types.String{Target: &r.MezclaSKU}

		return w

	case 6:
		w := types.String{Target: &r.MezclaLote}

		return w

	case 7:
		w := types.String{Target: &r.PierdaLpn}

		return w

	case 8:
		w := types.String{Target: &r.CapacidadCubica}

		return w

	case 9:
		w := types.String{Target: &r.CapacidadPeso}

		return w

	case 10:
		w := types.String{Target: &r.Altura}

		return w

	case 11:
		w := types.String{Target: &r.Longitud}

		return w

	case 12:
		w := types.String{Target: &r.Anchura}

		return w

	case 13:
		w := types.String{Target: &r.Nivel}

		return w

	case 14:
		w := types.String{Target: &r.Estado}

		return w

	case 15:
		w := types.String{Target: &r.Temperatura}

		return w

	case 16:
		w := types.String{Target: &r.FormatoUbicacion}

		return w

	case 17:
		w := types.String{Target: &r.FamiliaProducto}

		return w

	case 18:
		w := types.String{Target: &r.Cliente}

		return w

	case 19:
		w := types.String{Target: &r.Situacion}

		return w

	case 20:
		w := types.String{Target: &r.TipoUbicacion2}

		return w

	case 21:
		w := types.String{Target: &r.EuroEquivalente}

		return w

	case 22:
		w := types.String{Target: &r.Llena}

		return w

	case 23:
		w := types.String{Target: &r.Vacia}

		return w

	case 24:
		w := types.String{Target: &r.PorcentajeLleno}

		return w

	case 25:
		w := types.Float{Target: &r.CantidadEvento}

		return w

	case 26:
		w := types.Float{Target: &r.CantidadStock}

		return w

	}
	panic("Unknown field index")
}

func (r *Cabecera) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Cabecera) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Cabecera) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Cabecera) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Cabecera) HintSize(int)                     { panic("Unsupported operation") }
func (_ Cabecera) Finalize()                        {}

func (_ Cabecera) AvroCRC64Fingerprint() []byte {
	return []byte(CabeceraAvroCRC64Fingerprint)
}

func (r Cabecera) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Ubicacion"], err = json.Marshal(r.Ubicacion)
	if err != nil {
		return nil, err
	}
	output["TipoUbicacion"], err = json.Marshal(r.TipoUbicacion)
	if err != nil {
		return nil, err
	}
	output["CategoriaUbicacion"], err = json.Marshal(r.CategoriaUbicacion)
	if err != nil {
		return nil, err
	}
	output["ABC"], err = json.Marshal(r.ABC)
	if err != nil {
		return nil, err
	}
	output["Zona"], err = json.Marshal(r.Zona)
	if err != nil {
		return nil, err
	}
	output["MezclaSKU"], err = json.Marshal(r.MezclaSKU)
	if err != nil {
		return nil, err
	}
	output["MezclaLote"], err = json.Marshal(r.MezclaLote)
	if err != nil {
		return nil, err
	}
	output["PierdaLpn"], err = json.Marshal(r.PierdaLpn)
	if err != nil {
		return nil, err
	}
	output["CapacidadCubica"], err = json.Marshal(r.CapacidadCubica)
	if err != nil {
		return nil, err
	}
	output["CapacidadPeso"], err = json.Marshal(r.CapacidadPeso)
	if err != nil {
		return nil, err
	}
	output["Altura"], err = json.Marshal(r.Altura)
	if err != nil {
		return nil, err
	}
	output["Longitud"], err = json.Marshal(r.Longitud)
	if err != nil {
		return nil, err
	}
	output["Anchura"], err = json.Marshal(r.Anchura)
	if err != nil {
		return nil, err
	}
	output["Nivel"], err = json.Marshal(r.Nivel)
	if err != nil {
		return nil, err
	}
	output["Estado"], err = json.Marshal(r.Estado)
	if err != nil {
		return nil, err
	}
	output["Temperatura"], err = json.Marshal(r.Temperatura)
	if err != nil {
		return nil, err
	}
	output["FormatoUbicacion"], err = json.Marshal(r.FormatoUbicacion)
	if err != nil {
		return nil, err
	}
	output["FamiliaProducto"], err = json.Marshal(r.FamiliaProducto)
	if err != nil {
		return nil, err
	}
	output["Cliente"], err = json.Marshal(r.Cliente)
	if err != nil {
		return nil, err
	}
	output["Situacion"], err = json.Marshal(r.Situacion)
	if err != nil {
		return nil, err
	}
	output["TipoUbicacion2"], err = json.Marshal(r.TipoUbicacion2)
	if err != nil {
		return nil, err
	}
	output["EuroEquivalente"], err = json.Marshal(r.EuroEquivalente)
	if err != nil {
		return nil, err
	}
	output["Llena"], err = json.Marshal(r.Llena)
	if err != nil {
		return nil, err
	}
	output["Vacia"], err = json.Marshal(r.Vacia)
	if err != nil {
		return nil, err
	}
	output["PorcentajeLleno"], err = json.Marshal(r.PorcentajeLleno)
	if err != nil {
		return nil, err
	}
	output["CantidadEvento"], err = json.Marshal(r.CantidadEvento)
	if err != nil {
		return nil, err
	}
	output["CantidadStock"], err = json.Marshal(r.CantidadStock)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Cabecera) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Ubicacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ubicacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Ubicacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoUbicacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoUbicacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoUbicacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CategoriaUbicacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CategoriaUbicacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CategoriaUbicacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ABC"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ABC); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ABC")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Zona"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Zona); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Zona")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MezclaSKU"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MezclaSKU); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for MezclaSKU")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MezclaLote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MezclaLote); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for MezclaLote")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PierdaLpn"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PierdaLpn); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PierdaLpn")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CapacidadCubica"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CapacidadCubica); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CapacidadCubica")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CapacidadPeso"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CapacidadPeso); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CapacidadPeso")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Altura"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Altura); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Altura")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Longitud"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Longitud); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Longitud")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Anchura"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Anchura); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Anchura")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Nivel"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nivel); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Nivel")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Estado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Estado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Temperatura"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Temperatura); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Temperatura")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FormatoUbicacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FormatoUbicacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FormatoUbicacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FamiliaProducto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FamiliaProducto); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FamiliaProducto")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Cliente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cliente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Cliente")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Situacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Situacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Situacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoUbicacion2"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoUbicacion2); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoUbicacion2")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EuroEquivalente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EuroEquivalente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EuroEquivalente")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Llena"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Llena); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Llena")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Vacia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Vacia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Vacia")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PorcentajeLleno"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PorcentajeLleno); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PorcentajeLleno")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CantidadEvento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CantidadEvento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CantidadEvento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CantidadStock"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CantidadStock); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CantidadStock")
	}
	return nil
}
