// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     SolicitudModificacionArticulo.avsc
 */
package WarehouseArticuloEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ArticuloAECOM struct {
	Ean *UnionNullString `json:"Ean"`

	TipoEan *UnionNullString `json:"TipoEan"`

	Alto float32 `json:"Alto"`

	Ancho float32 `json:"Ancho"`

	Largo float32 `json:"Largo"`

	PesoBruto float32 `json:"PesoBruto"`
}

const ArticuloAECOMAvroCRC64Fingerprint = "lv\xb9o\r5\xa9\x1e"

func NewArticuloAECOM() ArticuloAECOM {
	r := ArticuloAECOM{}
	r.Ean = nil
	r.TipoEan = nil
	return r
}

func DeserializeArticuloAECOM(r io.Reader) (ArticuloAECOM, error) {
	t := NewArticuloAECOM()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeArticuloAECOMFromSchema(r io.Reader, schema string) (ArticuloAECOM, error) {
	t := NewArticuloAECOM()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeArticuloAECOM(r ArticuloAECOM, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Ean, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoEan, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.Alto, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.Ancho, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.Largo, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PesoBruto, w)
	if err != nil {
		return err
	}
	return err
}

func (r ArticuloAECOM) Serialize(w io.Writer) error {
	return writeArticuloAECOM(r, w)
}

func (r ArticuloAECOM) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Ean\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TipoEan\",\"type\":[\"null\",\"string\"]},{\"name\":\"Alto\",\"type\":\"float\"},{\"name\":\"Ancho\",\"type\":\"float\"},{\"name\":\"Largo\",\"type\":\"float\"},{\"name\":\"PesoBruto\",\"type\":\"float\"}],\"name\":\"Andreani.WarehouseArticulo.Events.Record.ArticuloAECOM\",\"type\":\"record\"}"
}

func (r ArticuloAECOM) SchemaName() string {
	return "Andreani.WarehouseArticulo.Events.Record.ArticuloAECOM"
}

func (_ ArticuloAECOM) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ArticuloAECOM) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ArticuloAECOM) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ArticuloAECOM) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ArticuloAECOM) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ArticuloAECOM) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ArticuloAECOM) SetString(v string)   { panic("Unsupported operation") }
func (_ ArticuloAECOM) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ArticuloAECOM) Get(i int) types.Field {
	switch i {
	case 0:
		r.Ean = NewUnionNullString()

		return r.Ean
	case 1:
		r.TipoEan = NewUnionNullString()

		return r.TipoEan
	case 2:
		w := types.Float{Target: &r.Alto}

		return w

	case 3:
		w := types.Float{Target: &r.Ancho}

		return w

	case 4:
		w := types.Float{Target: &r.Largo}

		return w

	case 5:
		w := types.Float{Target: &r.PesoBruto}

		return w

	}
	panic("Unknown field index")
}

func (r *ArticuloAECOM) SetDefault(i int) {
	switch i {
	case 0:
		r.Ean = nil
		return
	case 1:
		r.TipoEan = nil
		return
	}
	panic("Unknown field index")
}

func (r *ArticuloAECOM) NullField(i int) {
	switch i {
	case 0:
		r.Ean = nil
		return
	case 1:
		r.TipoEan = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ArticuloAECOM) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ArticuloAECOM) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ArticuloAECOM) HintSize(int)                     { panic("Unsupported operation") }
func (_ ArticuloAECOM) Finalize()                        {}

func (_ ArticuloAECOM) AvroCRC64Fingerprint() []byte {
	return []byte(ArticuloAECOMAvroCRC64Fingerprint)
}

func (r ArticuloAECOM) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Ean"], err = json.Marshal(r.Ean)
	if err != nil {
		return nil, err
	}
	output["TipoEan"], err = json.Marshal(r.TipoEan)
	if err != nil {
		return nil, err
	}
	output["Alto"], err = json.Marshal(r.Alto)
	if err != nil {
		return nil, err
	}
	output["Ancho"], err = json.Marshal(r.Ancho)
	if err != nil {
		return nil, err
	}
	output["Largo"], err = json.Marshal(r.Largo)
	if err != nil {
		return nil, err
	}
	output["PesoBruto"], err = json.Marshal(r.PesoBruto)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ArticuloAECOM) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Ean"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ean); err != nil {
			return err
		}
	} else {
		r.Ean = NewUnionNullString()

		r.Ean = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoEan"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoEan); err != nil {
			return err
		}
	} else {
		r.TipoEan = NewUnionNullString()

		r.TipoEan = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Alto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Alto); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Alto")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Ancho"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ancho); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Ancho")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Largo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Largo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Largo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PesoBruto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoBruto); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PesoBruto")
	}
	return nil
}
