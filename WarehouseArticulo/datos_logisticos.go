// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     DatosLogisticos.avsc
 */
package WarehouseArticuloEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DatosLogisticos struct {
	Volumen *UnionNullFloat `json:"volumen"`

	PesoBruto *UnionNullFloat `json:"pesoBruto"`

	PesoTara *UnionNullFloat `json:"pesoTara"`

	PesoNeto *UnionNullFloat `json:"pesoNeto"`

	CantidadporPaquete *UnionNullFloat `json:"cantidadporPaquete"`

	CantidadporCaja *UnionNullFloat `json:"cantidadporCaja"`

	CantidadporPallet *UnionNullFloat `json:"cantidadporPallet"`

	AlturaUnidad *UnionNullFloat `json:"alturaUnidad"`

	LargoUnidad *UnionNullFloat `json:"largoUnidad"`

	AnchoUnidad *UnionNullFloat `json:"anchoUnidad"`

	PesoPack *UnionNullFloat `json:"pesoPack"`

	AlturaPack *UnionNullFloat `json:"alturaPack"`

	LargoPack *UnionNullFloat `json:"largoPack"`

	AnchoPack *UnionNullFloat `json:"anchoPack"`

	PesoCaja *UnionNullFloat `json:"pesoCaja"`

	AltoCaja *UnionNullFloat `json:"altoCaja"`

	LargoCaja *UnionNullFloat `json:"largoCaja"`

	AnchoCaja *UnionNullFloat `json:"anchoCaja"`

	PesoPallet *UnionNullFloat `json:"pesoPallet"`

	AltoPallet *UnionNullFloat `json:"altoPallet"`

	LargoPallet *UnionNullFloat `json:"largoPallet"`

	AnchoPallet *UnionNullFloat `json:"anchoPallet"`

	NivelesporPallet *UnionNullFloat `json:"nivelesporPallet"`

	CajasporNivel *UnionNullFloat `json:"cajasporNivel"`

	Altura *UnionNullFloat `json:"altura"`

	Longitud *UnionNullFloat `json:"longitud"`

	Anchura *UnionNullFloat `json:"anchura"`

	Volumencubico *UnionNullFloat `json:"volumencubico"`
}

const DatosLogisticosAvroCRC64Fingerprint = "\xc6WÐ¶LSa\x0e"

func NewDatosLogisticos() DatosLogisticos {
	r := DatosLogisticos{}
	r.Volumen = nil
	r.PesoBruto = nil
	r.PesoTara = nil
	r.PesoNeto = nil
	r.CantidadporPaquete = nil
	r.CantidadporCaja = nil
	r.CantidadporPallet = nil
	r.AlturaUnidad = nil
	r.LargoUnidad = nil
	r.AnchoUnidad = nil
	r.PesoPack = nil
	r.AlturaPack = nil
	r.LargoPack = nil
	r.AnchoPack = nil
	r.PesoCaja = nil
	r.AltoCaja = nil
	r.LargoCaja = nil
	r.AnchoCaja = nil
	r.PesoPallet = nil
	r.AltoPallet = nil
	r.LargoPallet = nil
	r.AnchoPallet = nil
	r.NivelesporPallet = nil
	r.CajasporNivel = nil
	r.Altura = nil
	r.Longitud = nil
	r.Anchura = nil
	r.Volumencubico = nil
	return r
}

func DeserializeDatosLogisticos(r io.Reader) (DatosLogisticos, error) {
	t := NewDatosLogisticos()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDatosLogisticosFromSchema(r io.Reader, schema string) (DatosLogisticos, error) {
	t := NewDatosLogisticos()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDatosLogisticos(r DatosLogisticos, w io.Writer) error {
	var err error
	err = writeUnionNullFloat(r.Volumen, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.PesoBruto, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.PesoTara, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.PesoNeto, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.CantidadporPaquete, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.CantidadporCaja, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.CantidadporPallet, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.AlturaUnidad, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.LargoUnidad, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.AnchoUnidad, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.PesoPack, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.AlturaPack, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.LargoPack, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.AnchoPack, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.PesoCaja, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.AltoCaja, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.LargoCaja, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.AnchoCaja, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.PesoPallet, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.AltoPallet, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.LargoPallet, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.AnchoPallet, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.NivelesporPallet, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.CajasporNivel, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.Altura, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.Longitud, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.Anchura, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.Volumencubico, w)
	if err != nil {
		return err
	}
	return err
}

func (r DatosLogisticos) Serialize(w io.Writer) error {
	return writeDatosLogisticos(r, w)
}

func (r DatosLogisticos) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"volumen\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"pesoBruto\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"pesoTara\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"pesoNeto\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"cantidadporPaquete\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"cantidadporCaja\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"cantidadporPallet\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"alturaUnidad\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"largoUnidad\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"anchoUnidad\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"pesoPack\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"alturaPack\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"largoPack\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"anchoPack\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"pesoCaja\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"altoCaja\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"largoCaja\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"anchoCaja\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"pesoPallet\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"altoPallet\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"largoPallet\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"anchoPallet\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"nivelesporPallet\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"cajasporNivel\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"altura\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"longitud\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"anchura\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"volumencubico\",\"type\":[\"null\",\"float\"]}],\"name\":\"Andreani.WarehouseArticulo.Events.Record.DatosLogisticos\",\"type\":\"record\"}"
}

func (r DatosLogisticos) SchemaName() string {
	return "Andreani.WarehouseArticulo.Events.Record.DatosLogisticos"
}

func (_ DatosLogisticos) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DatosLogisticos) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DatosLogisticos) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DatosLogisticos) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DatosLogisticos) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DatosLogisticos) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DatosLogisticos) SetString(v string)   { panic("Unsupported operation") }
func (_ DatosLogisticos) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DatosLogisticos) Get(i int) types.Field {
	switch i {
	case 0:
		r.Volumen = NewUnionNullFloat()

		return r.Volumen
	case 1:
		r.PesoBruto = NewUnionNullFloat()

		return r.PesoBruto
	case 2:
		r.PesoTara = NewUnionNullFloat()

		return r.PesoTara
	case 3:
		r.PesoNeto = NewUnionNullFloat()

		return r.PesoNeto
	case 4:
		r.CantidadporPaquete = NewUnionNullFloat()

		return r.CantidadporPaquete
	case 5:
		r.CantidadporCaja = NewUnionNullFloat()

		return r.CantidadporCaja
	case 6:
		r.CantidadporPallet = NewUnionNullFloat()

		return r.CantidadporPallet
	case 7:
		r.AlturaUnidad = NewUnionNullFloat()

		return r.AlturaUnidad
	case 8:
		r.LargoUnidad = NewUnionNullFloat()

		return r.LargoUnidad
	case 9:
		r.AnchoUnidad = NewUnionNullFloat()

		return r.AnchoUnidad
	case 10:
		r.PesoPack = NewUnionNullFloat()

		return r.PesoPack
	case 11:
		r.AlturaPack = NewUnionNullFloat()

		return r.AlturaPack
	case 12:
		r.LargoPack = NewUnionNullFloat()

		return r.LargoPack
	case 13:
		r.AnchoPack = NewUnionNullFloat()

		return r.AnchoPack
	case 14:
		r.PesoCaja = NewUnionNullFloat()

		return r.PesoCaja
	case 15:
		r.AltoCaja = NewUnionNullFloat()

		return r.AltoCaja
	case 16:
		r.LargoCaja = NewUnionNullFloat()

		return r.LargoCaja
	case 17:
		r.AnchoCaja = NewUnionNullFloat()

		return r.AnchoCaja
	case 18:
		r.PesoPallet = NewUnionNullFloat()

		return r.PesoPallet
	case 19:
		r.AltoPallet = NewUnionNullFloat()

		return r.AltoPallet
	case 20:
		r.LargoPallet = NewUnionNullFloat()

		return r.LargoPallet
	case 21:
		r.AnchoPallet = NewUnionNullFloat()

		return r.AnchoPallet
	case 22:
		r.NivelesporPallet = NewUnionNullFloat()

		return r.NivelesporPallet
	case 23:
		r.CajasporNivel = NewUnionNullFloat()

		return r.CajasporNivel
	case 24:
		r.Altura = NewUnionNullFloat()

		return r.Altura
	case 25:
		r.Longitud = NewUnionNullFloat()

		return r.Longitud
	case 26:
		r.Anchura = NewUnionNullFloat()

		return r.Anchura
	case 27:
		r.Volumencubico = NewUnionNullFloat()

		return r.Volumencubico
	}
	panic("Unknown field index")
}

func (r *DatosLogisticos) SetDefault(i int) {
	switch i {
	case 0:
		r.Volumen = nil
		return
	case 1:
		r.PesoBruto = nil
		return
	case 2:
		r.PesoTara = nil
		return
	case 3:
		r.PesoNeto = nil
		return
	case 4:
		r.CantidadporPaquete = nil
		return
	case 5:
		r.CantidadporCaja = nil
		return
	case 6:
		r.CantidadporPallet = nil
		return
	case 7:
		r.AlturaUnidad = nil
		return
	case 8:
		r.LargoUnidad = nil
		return
	case 9:
		r.AnchoUnidad = nil
		return
	case 10:
		r.PesoPack = nil
		return
	case 11:
		r.AlturaPack = nil
		return
	case 12:
		r.LargoPack = nil
		return
	case 13:
		r.AnchoPack = nil
		return
	case 14:
		r.PesoCaja = nil
		return
	case 15:
		r.AltoCaja = nil
		return
	case 16:
		r.LargoCaja = nil
		return
	case 17:
		r.AnchoCaja = nil
		return
	case 18:
		r.PesoPallet = nil
		return
	case 19:
		r.AltoPallet = nil
		return
	case 20:
		r.LargoPallet = nil
		return
	case 21:
		r.AnchoPallet = nil
		return
	case 22:
		r.NivelesporPallet = nil
		return
	case 23:
		r.CajasporNivel = nil
		return
	case 24:
		r.Altura = nil
		return
	case 25:
		r.Longitud = nil
		return
	case 26:
		r.Anchura = nil
		return
	case 27:
		r.Volumencubico = nil
		return
	}
	panic("Unknown field index")
}

func (r *DatosLogisticos) NullField(i int) {
	switch i {
	case 0:
		r.Volumen = nil
		return
	case 1:
		r.PesoBruto = nil
		return
	case 2:
		r.PesoTara = nil
		return
	case 3:
		r.PesoNeto = nil
		return
	case 4:
		r.CantidadporPaquete = nil
		return
	case 5:
		r.CantidadporCaja = nil
		return
	case 6:
		r.CantidadporPallet = nil
		return
	case 7:
		r.AlturaUnidad = nil
		return
	case 8:
		r.LargoUnidad = nil
		return
	case 9:
		r.AnchoUnidad = nil
		return
	case 10:
		r.PesoPack = nil
		return
	case 11:
		r.AlturaPack = nil
		return
	case 12:
		r.LargoPack = nil
		return
	case 13:
		r.AnchoPack = nil
		return
	case 14:
		r.PesoCaja = nil
		return
	case 15:
		r.AltoCaja = nil
		return
	case 16:
		r.LargoCaja = nil
		return
	case 17:
		r.AnchoCaja = nil
		return
	case 18:
		r.PesoPallet = nil
		return
	case 19:
		r.AltoPallet = nil
		return
	case 20:
		r.LargoPallet = nil
		return
	case 21:
		r.AnchoPallet = nil
		return
	case 22:
		r.NivelesporPallet = nil
		return
	case 23:
		r.CajasporNivel = nil
		return
	case 24:
		r.Altura = nil
		return
	case 25:
		r.Longitud = nil
		return
	case 26:
		r.Anchura = nil
		return
	case 27:
		r.Volumencubico = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ DatosLogisticos) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DatosLogisticos) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DatosLogisticos) HintSize(int)                     { panic("Unsupported operation") }
func (_ DatosLogisticos) Finalize()                        {}

func (_ DatosLogisticos) AvroCRC64Fingerprint() []byte {
	return []byte(DatosLogisticosAvroCRC64Fingerprint)
}

func (r DatosLogisticos) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["volumen"], err = json.Marshal(r.Volumen)
	if err != nil {
		return nil, err
	}
	output["pesoBruto"], err = json.Marshal(r.PesoBruto)
	if err != nil {
		return nil, err
	}
	output["pesoTara"], err = json.Marshal(r.PesoTara)
	if err != nil {
		return nil, err
	}
	output["pesoNeto"], err = json.Marshal(r.PesoNeto)
	if err != nil {
		return nil, err
	}
	output["cantidadporPaquete"], err = json.Marshal(r.CantidadporPaquete)
	if err != nil {
		return nil, err
	}
	output["cantidadporCaja"], err = json.Marshal(r.CantidadporCaja)
	if err != nil {
		return nil, err
	}
	output["cantidadporPallet"], err = json.Marshal(r.CantidadporPallet)
	if err != nil {
		return nil, err
	}
	output["alturaUnidad"], err = json.Marshal(r.AlturaUnidad)
	if err != nil {
		return nil, err
	}
	output["largoUnidad"], err = json.Marshal(r.LargoUnidad)
	if err != nil {
		return nil, err
	}
	output["anchoUnidad"], err = json.Marshal(r.AnchoUnidad)
	if err != nil {
		return nil, err
	}
	output["pesoPack"], err = json.Marshal(r.PesoPack)
	if err != nil {
		return nil, err
	}
	output["alturaPack"], err = json.Marshal(r.AlturaPack)
	if err != nil {
		return nil, err
	}
	output["largoPack"], err = json.Marshal(r.LargoPack)
	if err != nil {
		return nil, err
	}
	output["anchoPack"], err = json.Marshal(r.AnchoPack)
	if err != nil {
		return nil, err
	}
	output["pesoCaja"], err = json.Marshal(r.PesoCaja)
	if err != nil {
		return nil, err
	}
	output["altoCaja"], err = json.Marshal(r.AltoCaja)
	if err != nil {
		return nil, err
	}
	output["largoCaja"], err = json.Marshal(r.LargoCaja)
	if err != nil {
		return nil, err
	}
	output["anchoCaja"], err = json.Marshal(r.AnchoCaja)
	if err != nil {
		return nil, err
	}
	output["pesoPallet"], err = json.Marshal(r.PesoPallet)
	if err != nil {
		return nil, err
	}
	output["altoPallet"], err = json.Marshal(r.AltoPallet)
	if err != nil {
		return nil, err
	}
	output["largoPallet"], err = json.Marshal(r.LargoPallet)
	if err != nil {
		return nil, err
	}
	output["anchoPallet"], err = json.Marshal(r.AnchoPallet)
	if err != nil {
		return nil, err
	}
	output["nivelesporPallet"], err = json.Marshal(r.NivelesporPallet)
	if err != nil {
		return nil, err
	}
	output["cajasporNivel"], err = json.Marshal(r.CajasporNivel)
	if err != nil {
		return nil, err
	}
	output["altura"], err = json.Marshal(r.Altura)
	if err != nil {
		return nil, err
	}
	output["longitud"], err = json.Marshal(r.Longitud)
	if err != nil {
		return nil, err
	}
	output["anchura"], err = json.Marshal(r.Anchura)
	if err != nil {
		return nil, err
	}
	output["volumencubico"], err = json.Marshal(r.Volumencubico)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DatosLogisticos) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["volumen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Volumen); err != nil {
			return err
		}
	} else {
		r.Volumen = NewUnionNullFloat()

		r.Volumen = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["pesoBruto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoBruto); err != nil {
			return err
		}
	} else {
		r.PesoBruto = NewUnionNullFloat()

		r.PesoBruto = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["pesoTara"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoTara); err != nil {
			return err
		}
	} else {
		r.PesoTara = NewUnionNullFloat()

		r.PesoTara = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["pesoNeto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoNeto); err != nil {
			return err
		}
	} else {
		r.PesoNeto = NewUnionNullFloat()

		r.PesoNeto = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["cantidadporPaquete"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CantidadporPaquete); err != nil {
			return err
		}
	} else {
		r.CantidadporPaquete = NewUnionNullFloat()

		r.CantidadporPaquete = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["cantidadporCaja"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CantidadporCaja); err != nil {
			return err
		}
	} else {
		r.CantidadporCaja = NewUnionNullFloat()

		r.CantidadporCaja = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["cantidadporPallet"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CantidadporPallet); err != nil {
			return err
		}
	} else {
		r.CantidadporPallet = NewUnionNullFloat()

		r.CantidadporPallet = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["alturaUnidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AlturaUnidad); err != nil {
			return err
		}
	} else {
		r.AlturaUnidad = NewUnionNullFloat()

		r.AlturaUnidad = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["largoUnidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LargoUnidad); err != nil {
			return err
		}
	} else {
		r.LargoUnidad = NewUnionNullFloat()

		r.LargoUnidad = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["anchoUnidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AnchoUnidad); err != nil {
			return err
		}
	} else {
		r.AnchoUnidad = NewUnionNullFloat()

		r.AnchoUnidad = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["pesoPack"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoPack); err != nil {
			return err
		}
	} else {
		r.PesoPack = NewUnionNullFloat()

		r.PesoPack = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["alturaPack"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AlturaPack); err != nil {
			return err
		}
	} else {
		r.AlturaPack = NewUnionNullFloat()

		r.AlturaPack = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["largoPack"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LargoPack); err != nil {
			return err
		}
	} else {
		r.LargoPack = NewUnionNullFloat()

		r.LargoPack = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["anchoPack"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AnchoPack); err != nil {
			return err
		}
	} else {
		r.AnchoPack = NewUnionNullFloat()

		r.AnchoPack = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["pesoCaja"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoCaja); err != nil {
			return err
		}
	} else {
		r.PesoCaja = NewUnionNullFloat()

		r.PesoCaja = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["altoCaja"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AltoCaja); err != nil {
			return err
		}
	} else {
		r.AltoCaja = NewUnionNullFloat()

		r.AltoCaja = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["largoCaja"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LargoCaja); err != nil {
			return err
		}
	} else {
		r.LargoCaja = NewUnionNullFloat()

		r.LargoCaja = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["anchoCaja"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AnchoCaja); err != nil {
			return err
		}
	} else {
		r.AnchoCaja = NewUnionNullFloat()

		r.AnchoCaja = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["pesoPallet"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoPallet); err != nil {
			return err
		}
	} else {
		r.PesoPallet = NewUnionNullFloat()

		r.PesoPallet = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["altoPallet"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AltoPallet); err != nil {
			return err
		}
	} else {
		r.AltoPallet = NewUnionNullFloat()

		r.AltoPallet = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["largoPallet"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LargoPallet); err != nil {
			return err
		}
	} else {
		r.LargoPallet = NewUnionNullFloat()

		r.LargoPallet = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["anchoPallet"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AnchoPallet); err != nil {
			return err
		}
	} else {
		r.AnchoPallet = NewUnionNullFloat()

		r.AnchoPallet = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["nivelesporPallet"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NivelesporPallet); err != nil {
			return err
		}
	} else {
		r.NivelesporPallet = NewUnionNullFloat()

		r.NivelesporPallet = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["cajasporNivel"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CajasporNivel); err != nil {
			return err
		}
	} else {
		r.CajasporNivel = NewUnionNullFloat()

		r.CajasporNivel = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["altura"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Altura); err != nil {
			return err
		}
	} else {
		r.Altura = NewUnionNullFloat()

		r.Altura = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["longitud"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Longitud); err != nil {
			return err
		}
	} else {
		r.Longitud = NewUnionNullFloat()

		r.Longitud = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["anchura"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Anchura); err != nil {
			return err
		}
	} else {
		r.Anchura = NewUnionNullFloat()

		r.Anchura = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["volumencubico"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Volumencubico); err != nil {
			return err
		}
	} else {
		r.Volumencubico = NewUnionNullFloat()

		r.Volumencubico = nil
	}
	return nil
}
