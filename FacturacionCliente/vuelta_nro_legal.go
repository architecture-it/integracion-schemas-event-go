// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     VueltaNroLegal.avsc
 */
package FacturacionClienteEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type VueltaNroLegal struct {
	SistemaDestino string `json:"SistemaDestino"`

	Sucursal string `json:"Sucursal"`

	CentroEmisor int32 `json:"CentroEmisor"`

	NumeroComprobante int32 `json:"NumeroComprobante"`

	LetraComprobante Letra `json:"LetraComprobante"`

	FechaComprobante int64 `json:"FechaComprobante"`

	SerieComprobante string `json:"SerieComprobante"`

	NumeroPrefactura string `json:"NumeroPrefactura"`

	Facturado bool `json:"Facturado"`
}

const VueltaNroLegalAvroCRC64Fingerprint = "\x93E\xae\"1L\x8b\xde"

func NewVueltaNroLegal() VueltaNroLegal {
	r := VueltaNroLegal{}
	return r
}

func DeserializeVueltaNroLegal(r io.Reader) (VueltaNroLegal, error) {
	t := NewVueltaNroLegal()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeVueltaNroLegalFromSchema(r io.Reader, schema string) (VueltaNroLegal, error) {
	t := NewVueltaNroLegal()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeVueltaNroLegal(r VueltaNroLegal, w io.Writer) error {
	var err error
	err = vm.WriteString(r.SistemaDestino, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Sucursal, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.CentroEmisor, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.NumeroComprobante, w)
	if err != nil {
		return err
	}
	err = writeLetra(r.LetraComprobante, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.FechaComprobante, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.SerieComprobante, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NumeroPrefactura, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Facturado, w)
	if err != nil {
		return err
	}
	return err
}

func (r VueltaNroLegal) Serialize(w io.Writer) error {
	return writeVueltaNroLegal(r, w)
}

func (r VueltaNroLegal) Schema() string {
	return "{\"fields\":[{\"name\":\"SistemaDestino\",\"type\":\"string\"},{\"name\":\"Sucursal\",\"type\":\"string\"},{\"name\":\"CentroEmisor\",\"type\":\"int\"},{\"name\":\"NumeroComprobante\",\"type\":\"int\"},{\"name\":\"LetraComprobante\",\"type\":{\"name\":\"Letra\",\"namespace\":\"Andreani.FacturacionCliente.Events.Common\",\"symbols\":[\"A\",\"B\",\"undefined\",\"all\"],\"type\":\"enum\"}},{\"name\":\"FechaComprobante\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"SerieComprobante\",\"type\":\"string\"},{\"name\":\"NumeroPrefactura\",\"type\":\"string\"},{\"name\":\"Facturado\",\"type\":\"boolean\"}],\"name\":\"Andreani.FacturacionCliente.Events.Record.VueltaNroLegal\",\"type\":\"record\"}"
}

func (r VueltaNroLegal) SchemaName() string {
	return "Andreani.FacturacionCliente.Events.Record.VueltaNroLegal"
}

func (_ VueltaNroLegal) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ VueltaNroLegal) SetInt(v int32)       { panic("Unsupported operation") }
func (_ VueltaNroLegal) SetLong(v int64)      { panic("Unsupported operation") }
func (_ VueltaNroLegal) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ VueltaNroLegal) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ VueltaNroLegal) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ VueltaNroLegal) SetString(v string)   { panic("Unsupported operation") }
func (_ VueltaNroLegal) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *VueltaNroLegal) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.SistemaDestino}

		return w

	case 1:
		w := types.String{Target: &r.Sucursal}

		return w

	case 2:
		w := types.Int{Target: &r.CentroEmisor}

		return w

	case 3:
		w := types.Int{Target: &r.NumeroComprobante}

		return w

	case 4:
		w := LetraWrapper{Target: &r.LetraComprobante}

		return w

	case 5:
		w := types.Long{Target: &r.FechaComprobante}

		return w

	case 6:
		w := types.String{Target: &r.SerieComprobante}

		return w

	case 7:
		w := types.String{Target: &r.NumeroPrefactura}

		return w

	case 8:
		w := types.Boolean{Target: &r.Facturado}

		return w

	}
	panic("Unknown field index")
}

func (r *VueltaNroLegal) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *VueltaNroLegal) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ VueltaNroLegal) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ VueltaNroLegal) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ VueltaNroLegal) HintSize(int)                     { panic("Unsupported operation") }
func (_ VueltaNroLegal) Finalize()                        {}

func (_ VueltaNroLegal) AvroCRC64Fingerprint() []byte {
	return []byte(VueltaNroLegalAvroCRC64Fingerprint)
}

func (r VueltaNroLegal) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["SistemaDestino"], err = json.Marshal(r.SistemaDestino)
	if err != nil {
		return nil, err
	}
	output["Sucursal"], err = json.Marshal(r.Sucursal)
	if err != nil {
		return nil, err
	}
	output["CentroEmisor"], err = json.Marshal(r.CentroEmisor)
	if err != nil {
		return nil, err
	}
	output["NumeroComprobante"], err = json.Marshal(r.NumeroComprobante)
	if err != nil {
		return nil, err
	}
	output["LetraComprobante"], err = json.Marshal(r.LetraComprobante)
	if err != nil {
		return nil, err
	}
	output["FechaComprobante"], err = json.Marshal(r.FechaComprobante)
	if err != nil {
		return nil, err
	}
	output["SerieComprobante"], err = json.Marshal(r.SerieComprobante)
	if err != nil {
		return nil, err
	}
	output["NumeroPrefactura"], err = json.Marshal(r.NumeroPrefactura)
	if err != nil {
		return nil, err
	}
	output["Facturado"], err = json.Marshal(r.Facturado)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *VueltaNroLegal) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["SistemaDestino"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SistemaDestino); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for SistemaDestino")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Sucursal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sucursal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Sucursal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CentroEmisor"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CentroEmisor); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CentroEmisor")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NumeroComprobante"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroComprobante); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NumeroComprobante")
	}
	val = func() json.RawMessage {
		if v, ok := fields["LetraComprobante"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LetraComprobante); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for LetraComprobante")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaComprobante"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaComprobante); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FechaComprobante")
	}
	val = func() json.RawMessage {
		if v, ok := fields["SerieComprobante"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SerieComprobante); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for SerieComprobante")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NumeroPrefactura"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroPrefactura); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NumeroPrefactura")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Facturado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Facturado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Facturado")
	}
	return nil
}
