// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     NovedadDireccion.avsc
 */
package FacturacionClienteEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DatosDomicilio struct {
	AbreviaturaProvincia string `json:"AbreviaturaProvincia"`

	Calle string `json:"Calle"`

	CodigoCiudad string `json:"CodigoCiudad"`

	CodigoPostal int32 `json:"CodigoPostal"`

	NombreProvincia string `json:"NombreProvincia"`

	Numero int32 `json:"Numero"`
}

const DatosDomicilioAvroCRC64Fingerprint = "U9\xb1\x17K\x94B "

func NewDatosDomicilio() DatosDomicilio {
	r := DatosDomicilio{}
	return r
}

func DeserializeDatosDomicilio(r io.Reader) (DatosDomicilio, error) {
	t := NewDatosDomicilio()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDatosDomicilioFromSchema(r io.Reader, schema string) (DatosDomicilio, error) {
	t := NewDatosDomicilio()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDatosDomicilio(r DatosDomicilio, w io.Writer) error {
	var err error
	err = vm.WriteString(r.AbreviaturaProvincia, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Calle, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodigoCiudad, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.CodigoPostal, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NombreProvincia, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Numero, w)
	if err != nil {
		return err
	}
	return err
}

func (r DatosDomicilio) Serialize(w io.Writer) error {
	return writeDatosDomicilio(r, w)
}

func (r DatosDomicilio) Schema() string {
	return "{\"fields\":[{\"name\":\"AbreviaturaProvincia\",\"type\":\"string\"},{\"name\":\"Calle\",\"type\":\"string\"},{\"name\":\"CodigoCiudad\",\"type\":\"string\"},{\"name\":\"CodigoPostal\",\"type\":\"int\"},{\"name\":\"NombreProvincia\",\"type\":\"string\"},{\"name\":\"Numero\",\"type\":\"int\"}],\"name\":\"Andreani.FacturacionCliente.Events.Common.DatosDomicilio\",\"type\":\"record\"}"
}

func (r DatosDomicilio) SchemaName() string {
	return "Andreani.FacturacionCliente.Events.Common.DatosDomicilio"
}

func (_ DatosDomicilio) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DatosDomicilio) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DatosDomicilio) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DatosDomicilio) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DatosDomicilio) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DatosDomicilio) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DatosDomicilio) SetString(v string)   { panic("Unsupported operation") }
func (_ DatosDomicilio) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DatosDomicilio) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.AbreviaturaProvincia}

		return w

	case 1:
		w := types.String{Target: &r.Calle}

		return w

	case 2:
		w := types.String{Target: &r.CodigoCiudad}

		return w

	case 3:
		w := types.Int{Target: &r.CodigoPostal}

		return w

	case 4:
		w := types.String{Target: &r.NombreProvincia}

		return w

	case 5:
		w := types.Int{Target: &r.Numero}

		return w

	}
	panic("Unknown field index")
}

func (r *DatosDomicilio) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *DatosDomicilio) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ DatosDomicilio) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DatosDomicilio) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DatosDomicilio) HintSize(int)                     { panic("Unsupported operation") }
func (_ DatosDomicilio) Finalize()                        {}

func (_ DatosDomicilio) AvroCRC64Fingerprint() []byte {
	return []byte(DatosDomicilioAvroCRC64Fingerprint)
}

func (r DatosDomicilio) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["AbreviaturaProvincia"], err = json.Marshal(r.AbreviaturaProvincia)
	if err != nil {
		return nil, err
	}
	output["Calle"], err = json.Marshal(r.Calle)
	if err != nil {
		return nil, err
	}
	output["CodigoCiudad"], err = json.Marshal(r.CodigoCiudad)
	if err != nil {
		return nil, err
	}
	output["CodigoPostal"], err = json.Marshal(r.CodigoPostal)
	if err != nil {
		return nil, err
	}
	output["NombreProvincia"], err = json.Marshal(r.NombreProvincia)
	if err != nil {
		return nil, err
	}
	output["Numero"], err = json.Marshal(r.Numero)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DatosDomicilio) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["AbreviaturaProvincia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AbreviaturaProvincia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AbreviaturaProvincia")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Calle"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Calle); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Calle")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoCiudad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoCiudad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoCiudad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoPostal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoPostal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoPostal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NombreProvincia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NombreProvincia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NombreProvincia")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Numero"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Numero); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Numero")
	}
	return nil
}
