// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ListInterface671.avsc
 */
package HCMInterface671Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Interface671Data struct {
	Legajo string `json:"Legajo"`

	Estado string `json:"Estado"`

	FormaDePago string `json:"FormaDePago"`

	CodigoBanco string `json:"CodigoBanco"`

	NroCuenta string `json:"NroCuenta"`

	CBU string `json:"CBU"`

	TipoDePago string `json:"TipoDePago"`

	CuentaADebitarEmpresa string `json:"CuentaADebitarEmpresa"`

	BranchCode string `json:"BranchCode"`

	Sucursal string `json:"Sucursal"`

	Porcentaje string `json:"Porcentaje"`

	Asiento string `json:"Asiento"`
}

const Interface671DataAvroCRC64Fingerprint = "\x8d\xd9E\xf8RMl\xd2"

func NewInterface671Data() Interface671Data {
	r := Interface671Data{}
	return r
}

func DeserializeInterface671Data(r io.Reader) (Interface671Data, error) {
	t := NewInterface671Data()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeInterface671DataFromSchema(r io.Reader, schema string) (Interface671Data, error) {
	t := NewInterface671Data()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeInterface671Data(r Interface671Data, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Legajo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Estado, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.FormaDePago, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodigoBanco, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NroCuenta, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CBU, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.TipoDePago, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CuentaADebitarEmpresa, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.BranchCode, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Sucursal, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Porcentaje, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Asiento, w)
	if err != nil {
		return err
	}
	return err
}

func (r Interface671Data) Serialize(w io.Writer) error {
	return writeInterface671Data(r, w)
}

func (r Interface671Data) Schema() string {
	return "{\"fields\":[{\"name\":\"Legajo\",\"type\":\"string\"},{\"name\":\"Estado\",\"type\":\"string\"},{\"name\":\"FormaDePago\",\"type\":\"string\"},{\"name\":\"CodigoBanco\",\"type\":\"string\"},{\"name\":\"NroCuenta\",\"type\":\"string\"},{\"name\":\"CBU\",\"type\":\"string\"},{\"name\":\"TipoDePago\",\"type\":\"string\"},{\"name\":\"CuentaADebitarEmpresa\",\"type\":\"string\"},{\"name\":\"BranchCode\",\"type\":\"string\"},{\"name\":\"Sucursal\",\"type\":\"string\"},{\"name\":\"Porcentaje\",\"type\":\"string\"},{\"name\":\"Asiento\",\"type\":\"string\"}],\"name\":\"Andreani.HCMInterface671.Events.Record.Interface671Data\",\"type\":\"record\"}"
}

func (r Interface671Data) SchemaName() string {
	return "Andreani.HCMInterface671.Events.Record.Interface671Data"
}

func (_ Interface671Data) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Interface671Data) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Interface671Data) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Interface671Data) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Interface671Data) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Interface671Data) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Interface671Data) SetString(v string)   { panic("Unsupported operation") }
func (_ Interface671Data) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Interface671Data) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Legajo}

		return w

	case 1:
		w := types.String{Target: &r.Estado}

		return w

	case 2:
		w := types.String{Target: &r.FormaDePago}

		return w

	case 3:
		w := types.String{Target: &r.CodigoBanco}

		return w

	case 4:
		w := types.String{Target: &r.NroCuenta}

		return w

	case 5:
		w := types.String{Target: &r.CBU}

		return w

	case 6:
		w := types.String{Target: &r.TipoDePago}

		return w

	case 7:
		w := types.String{Target: &r.CuentaADebitarEmpresa}

		return w

	case 8:
		w := types.String{Target: &r.BranchCode}

		return w

	case 9:
		w := types.String{Target: &r.Sucursal}

		return w

	case 10:
		w := types.String{Target: &r.Porcentaje}

		return w

	case 11:
		w := types.String{Target: &r.Asiento}

		return w

	}
	panic("Unknown field index")
}

func (r *Interface671Data) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Interface671Data) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Interface671Data) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Interface671Data) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Interface671Data) HintSize(int)                     { panic("Unsupported operation") }
func (_ Interface671Data) Finalize()                        {}

func (_ Interface671Data) AvroCRC64Fingerprint() []byte {
	return []byte(Interface671DataAvroCRC64Fingerprint)
}

func (r Interface671Data) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Legajo"], err = json.Marshal(r.Legajo)
	if err != nil {
		return nil, err
	}
	output["Estado"], err = json.Marshal(r.Estado)
	if err != nil {
		return nil, err
	}
	output["FormaDePago"], err = json.Marshal(r.FormaDePago)
	if err != nil {
		return nil, err
	}
	output["CodigoBanco"], err = json.Marshal(r.CodigoBanco)
	if err != nil {
		return nil, err
	}
	output["NroCuenta"], err = json.Marshal(r.NroCuenta)
	if err != nil {
		return nil, err
	}
	output["CBU"], err = json.Marshal(r.CBU)
	if err != nil {
		return nil, err
	}
	output["TipoDePago"], err = json.Marshal(r.TipoDePago)
	if err != nil {
		return nil, err
	}
	output["CuentaADebitarEmpresa"], err = json.Marshal(r.CuentaADebitarEmpresa)
	if err != nil {
		return nil, err
	}
	output["BranchCode"], err = json.Marshal(r.BranchCode)
	if err != nil {
		return nil, err
	}
	output["Sucursal"], err = json.Marshal(r.Sucursal)
	if err != nil {
		return nil, err
	}
	output["Porcentaje"], err = json.Marshal(r.Porcentaje)
	if err != nil {
		return nil, err
	}
	output["Asiento"], err = json.Marshal(r.Asiento)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Interface671Data) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Legajo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Legajo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Legajo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Estado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Estado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FormaDePago"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FormaDePago); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FormaDePago")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoBanco"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoBanco); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoBanco")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NroCuenta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NroCuenta); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NroCuenta")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CBU"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CBU); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CBU")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoDePago"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoDePago); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoDePago")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CuentaADebitarEmpresa"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CuentaADebitarEmpresa); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CuentaADebitarEmpresa")
	}
	val = func() json.RawMessage {
		if v, ok := fields["BranchCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BranchCode); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for BranchCode")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Sucursal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sucursal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Sucursal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Porcentaje"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Porcentaje); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Porcentaje")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Asiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Asiento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Asiento")
	}
	return nil
}
