// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Series.avsc
 */
package EventoWhRecepcionEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Series struct {
	SKU *UnionNullString `json:"SKU"`

	NumeroSerie *UnionNullString `json:"NumeroSerie"`

	NumeroSerieCorto *UnionNullString `json:"NumeroSerieCorto"`

	EtiquetaContenedora *UnionNullString `json:"EtiquetaContenedora"`

	GTIN *UnionNullString `json:"GTIN"`

	IOTHER4 *UnionNullString `json:"IOTHER4"`

	IOTHER5 *UnionNullString `json:"IOTHER5"`

	IOTHER6 *UnionNullString `json:"IOTHER6"`

	IOTHER7 *UnionNullString `json:"IOTHER7"`

	IOTHER8 *UnionNullString `json:"IOTHER8"`

	IOTHER9 *UnionNullString `json:"IOTHER9"`

	IOTHER10 *UnionNullString `json:"IOTHER10"`

	LPNDestino *UnionNullString `json:"LPNDestino"`

	RecepcionWH *UnionNullString `json:"RecepcionWH"`

	NumeroLineaAsn *UnionNullString `json:"NumeroLineaAsn"`
}

const SeriesAvroCRC64Fingerprint = "\x82\x93i\x97Z\xf5\xe0\xdd"

func NewSeries() Series {
	r := Series{}
	r.SKU = nil
	r.NumeroSerie = nil
	r.NumeroSerieCorto = nil
	r.EtiquetaContenedora = nil
	r.GTIN = nil
	r.IOTHER4 = nil
	r.IOTHER5 = nil
	r.IOTHER6 = nil
	r.IOTHER7 = nil
	r.IOTHER8 = nil
	r.IOTHER9 = nil
	r.IOTHER10 = nil
	r.LPNDestino = nil
	r.RecepcionWH = nil
	r.NumeroLineaAsn = nil
	return r
}

func DeserializeSeries(r io.Reader) (Series, error) {
	t := NewSeries()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSeriesFromSchema(r io.Reader, schema string) (Series, error) {
	t := NewSeries()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSeries(r Series, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.SKU, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NumeroSerie, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NumeroSerieCorto, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EtiquetaContenedora, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.GTIN, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.IOTHER4, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.IOTHER5, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.IOTHER6, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.IOTHER7, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.IOTHER8, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.IOTHER9, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.IOTHER10, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LPNDestino, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.RecepcionWH, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NumeroLineaAsn, w)
	if err != nil {
		return err
	}
	return err
}

func (r Series) Serialize(w io.Writer) error {
	return writeSeries(r, w)
}

func (r Series) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"SKU\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NumeroSerie\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NumeroSerieCorto\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EtiquetaContenedora\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"GTIN\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"IOTHER4\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"IOTHER5\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"IOTHER6\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"IOTHER7\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"IOTHER8\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"IOTHER9\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"IOTHER10\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LPNDestino\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"RecepcionWH\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NumeroLineaAsn\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.EventoWhRecepcion.Events.RecepcionCompletadoCommon.Series\",\"type\":\"record\"}"
}

func (r Series) SchemaName() string {
	return "Andreani.EventoWhRecepcion.Events.RecepcionCompletadoCommon.Series"
}

func (_ Series) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Series) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Series) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Series) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Series) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Series) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Series) SetString(v string)   { panic("Unsupported operation") }
func (_ Series) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Series) Get(i int) types.Field {
	switch i {
	case 0:
		r.SKU = NewUnionNullString()

		return r.SKU
	case 1:
		r.NumeroSerie = NewUnionNullString()

		return r.NumeroSerie
	case 2:
		r.NumeroSerieCorto = NewUnionNullString()

		return r.NumeroSerieCorto
	case 3:
		r.EtiquetaContenedora = NewUnionNullString()

		return r.EtiquetaContenedora
	case 4:
		r.GTIN = NewUnionNullString()

		return r.GTIN
	case 5:
		r.IOTHER4 = NewUnionNullString()

		return r.IOTHER4
	case 6:
		r.IOTHER5 = NewUnionNullString()

		return r.IOTHER5
	case 7:
		r.IOTHER6 = NewUnionNullString()

		return r.IOTHER6
	case 8:
		r.IOTHER7 = NewUnionNullString()

		return r.IOTHER7
	case 9:
		r.IOTHER8 = NewUnionNullString()

		return r.IOTHER8
	case 10:
		r.IOTHER9 = NewUnionNullString()

		return r.IOTHER9
	case 11:
		r.IOTHER10 = NewUnionNullString()

		return r.IOTHER10
	case 12:
		r.LPNDestino = NewUnionNullString()

		return r.LPNDestino
	case 13:
		r.RecepcionWH = NewUnionNullString()

		return r.RecepcionWH
	case 14:
		r.NumeroLineaAsn = NewUnionNullString()

		return r.NumeroLineaAsn
	}
	panic("Unknown field index")
}

func (r *Series) SetDefault(i int) {
	switch i {
	case 0:
		r.SKU = nil
		return
	case 1:
		r.NumeroSerie = nil
		return
	case 2:
		r.NumeroSerieCorto = nil
		return
	case 3:
		r.EtiquetaContenedora = nil
		return
	case 4:
		r.GTIN = nil
		return
	case 5:
		r.IOTHER4 = nil
		return
	case 6:
		r.IOTHER5 = nil
		return
	case 7:
		r.IOTHER6 = nil
		return
	case 8:
		r.IOTHER7 = nil
		return
	case 9:
		r.IOTHER8 = nil
		return
	case 10:
		r.IOTHER9 = nil
		return
	case 11:
		r.IOTHER10 = nil
		return
	case 12:
		r.LPNDestino = nil
		return
	case 13:
		r.RecepcionWH = nil
		return
	case 14:
		r.NumeroLineaAsn = nil
		return
	}
	panic("Unknown field index")
}

func (r *Series) NullField(i int) {
	switch i {
	case 0:
		r.SKU = nil
		return
	case 1:
		r.NumeroSerie = nil
		return
	case 2:
		r.NumeroSerieCorto = nil
		return
	case 3:
		r.EtiquetaContenedora = nil
		return
	case 4:
		r.GTIN = nil
		return
	case 5:
		r.IOTHER4 = nil
		return
	case 6:
		r.IOTHER5 = nil
		return
	case 7:
		r.IOTHER6 = nil
		return
	case 8:
		r.IOTHER7 = nil
		return
	case 9:
		r.IOTHER8 = nil
		return
	case 10:
		r.IOTHER9 = nil
		return
	case 11:
		r.IOTHER10 = nil
		return
	case 12:
		r.LPNDestino = nil
		return
	case 13:
		r.RecepcionWH = nil
		return
	case 14:
		r.NumeroLineaAsn = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Series) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Series) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Series) HintSize(int)                     { panic("Unsupported operation") }
func (_ Series) Finalize()                        {}

func (_ Series) AvroCRC64Fingerprint() []byte {
	return []byte(SeriesAvroCRC64Fingerprint)
}

func (r Series) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["SKU"], err = json.Marshal(r.SKU)
	if err != nil {
		return nil, err
	}
	output["NumeroSerie"], err = json.Marshal(r.NumeroSerie)
	if err != nil {
		return nil, err
	}
	output["NumeroSerieCorto"], err = json.Marshal(r.NumeroSerieCorto)
	if err != nil {
		return nil, err
	}
	output["EtiquetaContenedora"], err = json.Marshal(r.EtiquetaContenedora)
	if err != nil {
		return nil, err
	}
	output["GTIN"], err = json.Marshal(r.GTIN)
	if err != nil {
		return nil, err
	}
	output["IOTHER4"], err = json.Marshal(r.IOTHER4)
	if err != nil {
		return nil, err
	}
	output["IOTHER5"], err = json.Marshal(r.IOTHER5)
	if err != nil {
		return nil, err
	}
	output["IOTHER6"], err = json.Marshal(r.IOTHER6)
	if err != nil {
		return nil, err
	}
	output["IOTHER7"], err = json.Marshal(r.IOTHER7)
	if err != nil {
		return nil, err
	}
	output["IOTHER8"], err = json.Marshal(r.IOTHER8)
	if err != nil {
		return nil, err
	}
	output["IOTHER9"], err = json.Marshal(r.IOTHER9)
	if err != nil {
		return nil, err
	}
	output["IOTHER10"], err = json.Marshal(r.IOTHER10)
	if err != nil {
		return nil, err
	}
	output["LPNDestino"], err = json.Marshal(r.LPNDestino)
	if err != nil {
		return nil, err
	}
	output["RecepcionWH"], err = json.Marshal(r.RecepcionWH)
	if err != nil {
		return nil, err
	}
	output["NumeroLineaAsn"], err = json.Marshal(r.NumeroLineaAsn)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Series) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["SKU"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SKU); err != nil {
			return err
		}
	} else {
		r.SKU = NewUnionNullString()

		r.SKU = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NumeroSerie"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroSerie); err != nil {
			return err
		}
	} else {
		r.NumeroSerie = NewUnionNullString()

		r.NumeroSerie = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NumeroSerieCorto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroSerieCorto); err != nil {
			return err
		}
	} else {
		r.NumeroSerieCorto = NewUnionNullString()

		r.NumeroSerieCorto = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EtiquetaContenedora"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EtiquetaContenedora); err != nil {
			return err
		}
	} else {
		r.EtiquetaContenedora = NewUnionNullString()

		r.EtiquetaContenedora = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["GTIN"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.GTIN); err != nil {
			return err
		}
	} else {
		r.GTIN = NewUnionNullString()

		r.GTIN = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["IOTHER4"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IOTHER4); err != nil {
			return err
		}
	} else {
		r.IOTHER4 = NewUnionNullString()

		r.IOTHER4 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["IOTHER5"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IOTHER5); err != nil {
			return err
		}
	} else {
		r.IOTHER5 = NewUnionNullString()

		r.IOTHER5 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["IOTHER6"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IOTHER6); err != nil {
			return err
		}
	} else {
		r.IOTHER6 = NewUnionNullString()

		r.IOTHER6 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["IOTHER7"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IOTHER7); err != nil {
			return err
		}
	} else {
		r.IOTHER7 = NewUnionNullString()

		r.IOTHER7 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["IOTHER8"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IOTHER8); err != nil {
			return err
		}
	} else {
		r.IOTHER8 = NewUnionNullString()

		r.IOTHER8 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["IOTHER9"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IOTHER9); err != nil {
			return err
		}
	} else {
		r.IOTHER9 = NewUnionNullString()

		r.IOTHER9 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["IOTHER10"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IOTHER10); err != nil {
			return err
		}
	} else {
		r.IOTHER10 = NewUnionNullString()

		r.IOTHER10 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LPNDestino"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LPNDestino); err != nil {
			return err
		}
	} else {
		r.LPNDestino = NewUnionNullString()

		r.LPNDestino = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["RecepcionWH"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RecepcionWH); err != nil {
			return err
		}
	} else {
		r.RecepcionWH = NewUnionNullString()

		r.RecepcionWH = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NumeroLineaAsn"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroLineaAsn); err != nil {
			return err
		}
	} else {
		r.NumeroLineaAsn = NewUnionNullString()

		r.NumeroLineaAsn = nil
	}
	return nil
}
