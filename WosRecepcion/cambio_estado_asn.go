// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     WosRecepcionEstadoAsn.avsc
 */
package WosRecepcionEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CambioEstadoAsn struct {
	AsnId int32 `json:"AsnId"`

	AsnIdExterno string `json:"AsnIdExterno"`

	PlantaOperacionId int32 `json:"PlantaOperacionId"`

	EstadoId int32 `json:"EstadoId"`

	Fecha int64 `json:"Fecha"`

	UsuarioId *UnionNullInt `json:"UsuarioId"`

	Usuario *UnionNullString `json:"Usuario"`

	TiempoReal *UnionNullInt `json:"TiempoReal"`
}

const CambioEstadoAsnAvroCRC64Fingerprint = "\x87\x1d\x9c\x9d\t\xf2\x11\xda"

func NewCambioEstadoAsn() CambioEstadoAsn {
	r := CambioEstadoAsn{}
	r.UsuarioId = nil
	r.Usuario = nil
	r.TiempoReal = nil
	return r
}

func DeserializeCambioEstadoAsn(r io.Reader) (CambioEstadoAsn, error) {
	t := NewCambioEstadoAsn()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCambioEstadoAsnFromSchema(r io.Reader, schema string) (CambioEstadoAsn, error) {
	t := NewCambioEstadoAsn()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCambioEstadoAsn(r CambioEstadoAsn, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.AsnId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.AsnIdExterno, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.PlantaOperacionId, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.EstadoId, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Fecha, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.UsuarioId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Usuario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.TiempoReal, w)
	if err != nil {
		return err
	}
	return err
}

func (r CambioEstadoAsn) Serialize(w io.Writer) error {
	return writeCambioEstadoAsn(r, w)
}

func (r CambioEstadoAsn) Schema() string {
	return "{\"fields\":[{\"name\":\"AsnId\",\"type\":\"int\"},{\"name\":\"AsnIdExterno\",\"type\":\"string\"},{\"name\":\"PlantaOperacionId\",\"type\":\"int\"},{\"name\":\"EstadoId\",\"type\":\"int\"},{\"name\":\"Fecha\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"default\":null,\"name\":\"UsuarioId\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"Usuario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TiempoReal\",\"type\":[\"null\",\"int\"]}],\"name\":\"Andreani.WosRecepcion.Events.CambioEstadoAsnCommon.CambioEstadoAsn\",\"type\":\"record\"}"
}

func (r CambioEstadoAsn) SchemaName() string {
	return "Andreani.WosRecepcion.Events.CambioEstadoAsnCommon.CambioEstadoAsn"
}

func (_ CambioEstadoAsn) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CambioEstadoAsn) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CambioEstadoAsn) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CambioEstadoAsn) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CambioEstadoAsn) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CambioEstadoAsn) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CambioEstadoAsn) SetString(v string)   { panic("Unsupported operation") }
func (_ CambioEstadoAsn) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CambioEstadoAsn) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.AsnId}

		return w

	case 1:
		w := types.String{Target: &r.AsnIdExterno}

		return w

	case 2:
		w := types.Int{Target: &r.PlantaOperacionId}

		return w

	case 3:
		w := types.Int{Target: &r.EstadoId}

		return w

	case 4:
		w := types.Long{Target: &r.Fecha}

		return w

	case 5:
		r.UsuarioId = NewUnionNullInt()

		return r.UsuarioId
	case 6:
		r.Usuario = NewUnionNullString()

		return r.Usuario
	case 7:
		r.TiempoReal = NewUnionNullInt()

		return r.TiempoReal
	}
	panic("Unknown field index")
}

func (r *CambioEstadoAsn) SetDefault(i int) {
	switch i {
	case 5:
		r.UsuarioId = nil
		return
	case 6:
		r.Usuario = nil
		return
	case 7:
		r.TiempoReal = nil
		return
	}
	panic("Unknown field index")
}

func (r *CambioEstadoAsn) NullField(i int) {
	switch i {
	case 5:
		r.UsuarioId = nil
		return
	case 6:
		r.Usuario = nil
		return
	case 7:
		r.TiempoReal = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ CambioEstadoAsn) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CambioEstadoAsn) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CambioEstadoAsn) HintSize(int)                     { panic("Unsupported operation") }
func (_ CambioEstadoAsn) Finalize()                        {}

func (_ CambioEstadoAsn) AvroCRC64Fingerprint() []byte {
	return []byte(CambioEstadoAsnAvroCRC64Fingerprint)
}

func (r CambioEstadoAsn) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["AsnId"], err = json.Marshal(r.AsnId)
	if err != nil {
		return nil, err
	}
	output["AsnIdExterno"], err = json.Marshal(r.AsnIdExterno)
	if err != nil {
		return nil, err
	}
	output["PlantaOperacionId"], err = json.Marshal(r.PlantaOperacionId)
	if err != nil {
		return nil, err
	}
	output["EstadoId"], err = json.Marshal(r.EstadoId)
	if err != nil {
		return nil, err
	}
	output["Fecha"], err = json.Marshal(r.Fecha)
	if err != nil {
		return nil, err
	}
	output["UsuarioId"], err = json.Marshal(r.UsuarioId)
	if err != nil {
		return nil, err
	}
	output["Usuario"], err = json.Marshal(r.Usuario)
	if err != nil {
		return nil, err
	}
	output["TiempoReal"], err = json.Marshal(r.TiempoReal)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CambioEstadoAsn) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["AsnId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AsnId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AsnId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AsnIdExterno"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AsnIdExterno); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AsnIdExterno")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PlantaOperacionId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PlantaOperacionId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PlantaOperacionId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EstadoId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EstadoId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EstadoId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Fecha"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Fecha); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Fecha")
	}
	val = func() json.RawMessage {
		if v, ok := fields["UsuarioId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UsuarioId); err != nil {
			return err
		}
	} else {
		r.UsuarioId = NewUnionNullInt()

		r.UsuarioId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Usuario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Usuario); err != nil {
			return err
		}
	} else {
		r.Usuario = NewUnionNullString()

		r.Usuario = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TiempoReal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TiempoReal); err != nil {
			return err
		}
	} else {
		r.TiempoReal = NewUnionNullInt()

		r.TiempoReal = nil
	}
	return nil
}
