// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Request.avsc
 */
package IntegracionHdrDmsEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Request struct {
	SheetRouteId *UnionNullString `json:"SheetRouteId"`

	SheetRoute *UnionNullString `json:"SheetRoute"`

	Shipment *UnionNullString `json:"Shipment"`

	Motive *UnionNullString `json:"Motive"`

	SubMotive *UnionNullString `json:"SubMotive"`

	Observation *UnionNullString `json:"Observation"`

	Fecha *UnionNullString `json:"Fecha"`
}

const RequestAvroCRC64Fingerprint = "\xd2\xf8r\xdaë·‰\xc5"

func NewRequest() Request {
	r := Request{}
	r.SheetRouteId = nil
	r.SheetRoute = nil
	r.Shipment = nil
	r.Motive = nil
	r.SubMotive = nil
	r.Observation = nil
	r.Fecha = nil
	return r
}

func DeserializeRequest(r io.Reader) (Request, error) {
	t := NewRequest()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeRequestFromSchema(r io.Reader, schema string) (Request, error) {
	t := NewRequest()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeRequest(r Request, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.SheetRouteId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SheetRoute, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Shipment, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Motive, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SubMotive, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Observation, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Fecha, w)
	if err != nil {
		return err
	}
	return err
}

func (r Request) Serialize(w io.Writer) error {
	return writeRequest(r, w)
}

func (r Request) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"SheetRouteId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SheetRoute\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Shipment\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Motive\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SubMotive\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Observation\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Fecha\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.IntegracionHdrDms.Events.Common.Request\",\"type\":\"record\"}"
}

func (r Request) SchemaName() string {
	return "Andreani.IntegracionHdrDms.Events.Common.Request"
}

func (_ Request) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Request) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Request) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Request) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Request) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Request) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Request) SetString(v string)   { panic("Unsupported operation") }
func (_ Request) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Request) Get(i int) types.Field {
	switch i {
	case 0:
		r.SheetRouteId = NewUnionNullString()

		return r.SheetRouteId
	case 1:
		r.SheetRoute = NewUnionNullString()

		return r.SheetRoute
	case 2:
		r.Shipment = NewUnionNullString()

		return r.Shipment
	case 3:
		r.Motive = NewUnionNullString()

		return r.Motive
	case 4:
		r.SubMotive = NewUnionNullString()

		return r.SubMotive
	case 5:
		r.Observation = NewUnionNullString()

		return r.Observation
	case 6:
		r.Fecha = NewUnionNullString()

		return r.Fecha
	}
	panic("Unknown field index")
}

func (r *Request) SetDefault(i int) {
	switch i {
	case 0:
		r.SheetRouteId = nil
		return
	case 1:
		r.SheetRoute = nil
		return
	case 2:
		r.Shipment = nil
		return
	case 3:
		r.Motive = nil
		return
	case 4:
		r.SubMotive = nil
		return
	case 5:
		r.Observation = nil
		return
	case 6:
		r.Fecha = nil
		return
	}
	panic("Unknown field index")
}

func (r *Request) NullField(i int) {
	switch i {
	case 0:
		r.SheetRouteId = nil
		return
	case 1:
		r.SheetRoute = nil
		return
	case 2:
		r.Shipment = nil
		return
	case 3:
		r.Motive = nil
		return
	case 4:
		r.SubMotive = nil
		return
	case 5:
		r.Observation = nil
		return
	case 6:
		r.Fecha = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Request) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Request) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Request) HintSize(int)                     { panic("Unsupported operation") }
func (_ Request) Finalize()                        {}

func (_ Request) AvroCRC64Fingerprint() []byte {
	return []byte(RequestAvroCRC64Fingerprint)
}

func (r Request) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["SheetRouteId"], err = json.Marshal(r.SheetRouteId)
	if err != nil {
		return nil, err
	}
	output["SheetRoute"], err = json.Marshal(r.SheetRoute)
	if err != nil {
		return nil, err
	}
	output["Shipment"], err = json.Marshal(r.Shipment)
	if err != nil {
		return nil, err
	}
	output["Motive"], err = json.Marshal(r.Motive)
	if err != nil {
		return nil, err
	}
	output["SubMotive"], err = json.Marshal(r.SubMotive)
	if err != nil {
		return nil, err
	}
	output["Observation"], err = json.Marshal(r.Observation)
	if err != nil {
		return nil, err
	}
	output["Fecha"], err = json.Marshal(r.Fecha)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Request) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["SheetRouteId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SheetRouteId); err != nil {
			return err
		}
	} else {
		r.SheetRouteId = NewUnionNullString()

		r.SheetRouteId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SheetRoute"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SheetRoute); err != nil {
			return err
		}
	} else {
		r.SheetRoute = NewUnionNullString()

		r.SheetRoute = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Shipment"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Shipment); err != nil {
			return err
		}
	} else {
		r.Shipment = NewUnionNullString()

		r.Shipment = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Motive"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Motive); err != nil {
			return err
		}
	} else {
		r.Motive = NewUnionNullString()

		r.Motive = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SubMotive"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SubMotive); err != nil {
			return err
		}
	} else {
		r.SubMotive = NewUnionNullString()

		r.SubMotive = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Observation"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Observation); err != nil {
			return err
		}
	} else {
		r.Observation = NewUnionNullString()

		r.Observation = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Fecha"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Fecha); err != nil {
			return err
		}
	} else {
		r.Fecha = NewUnionNullString()

		r.Fecha = nil
	}
	return nil
}
