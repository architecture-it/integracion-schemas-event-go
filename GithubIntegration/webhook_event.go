// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     WebhookEvent.avsc
 */
package GithubIntegrationEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type WebhookEvent struct {
	AppId int32 `json:"AppId"`

	Payload string `json:"Payload"`

	Headers string `json:"Headers"`

	AppData *UnionNullString `json:"AppData"`
}

const WebhookEventAvroCRC64Fingerprint = "\xcb6\xd5\x11\x13\x80\x1d\xe0"

func NewWebhookEvent() WebhookEvent {
	r := WebhookEvent{}
	return r
}

func DeserializeWebhookEvent(r io.Reader) (WebhookEvent, error) {
	t := NewWebhookEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeWebhookEventFromSchema(r io.Reader, schema string) (WebhookEvent, error) {
	t := NewWebhookEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeWebhookEvent(r WebhookEvent, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.AppId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Payload, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Headers, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.AppData, w)
	if err != nil {
		return err
	}
	return err
}

func (r WebhookEvent) Serialize(w io.Writer) error {
	return writeWebhookEvent(r, w)
}

func (r WebhookEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"AppId\",\"type\":\"int\"},{\"name\":\"Payload\",\"type\":\"string\"},{\"name\":\"Headers\",\"type\":\"string\"},{\"name\":\"AppData\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.GithubIntegration.Events.Record.WebhookEvent\",\"type\":\"record\"}"
}

func (r WebhookEvent) SchemaName() string {
	return "Andreani.GithubIntegration.Events.Record.WebhookEvent"
}

func (_ WebhookEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ WebhookEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ WebhookEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ WebhookEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ WebhookEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ WebhookEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ WebhookEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ WebhookEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *WebhookEvent) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.AppId}

		return w

	case 1:
		w := types.String{Target: &r.Payload}

		return w

	case 2:
		w := types.String{Target: &r.Headers}

		return w

	case 3:
		r.AppData = NewUnionNullString()

		return r.AppData
	}
	panic("Unknown field index")
}

func (r *WebhookEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *WebhookEvent) NullField(i int) {
	switch i {
	case 3:
		r.AppData = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ WebhookEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ WebhookEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ WebhookEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ WebhookEvent) Finalize()                        {}

func (_ WebhookEvent) AvroCRC64Fingerprint() []byte {
	return []byte(WebhookEventAvroCRC64Fingerprint)
}

func (r WebhookEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["AppId"], err = json.Marshal(r.AppId)
	if err != nil {
		return nil, err
	}
	output["Payload"], err = json.Marshal(r.Payload)
	if err != nil {
		return nil, err
	}
	output["Headers"], err = json.Marshal(r.Headers)
	if err != nil {
		return nil, err
	}
	output["AppData"], err = json.Marshal(r.AppData)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *WebhookEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["AppId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AppId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AppId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Payload"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Payload); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Payload")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Headers"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Headers); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Headers")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AppData"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AppData); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AppData")
	}
	return nil
}
