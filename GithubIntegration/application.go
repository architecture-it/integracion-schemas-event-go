// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Repository.avsc
 */
package GithubIntegrationEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Application struct {
	Id int32 `json:"Id"`

	Name string `json:"Name"`

	Deleted bool `json:"Deleted"`

	IsMigration bool `json:"IsMigration"`

	Project Project `json:"Project"`

	PipelineVersion PipelineVersion `json:"PipelineVersion"`
}

const ApplicationAvroCRC64Fingerprint = "\xb6\xa3\xa9\x14VN\xcds"

func NewApplication() Application {
	r := Application{}
	r.Project = NewProject()

	r.PipelineVersion = NewPipelineVersion()

	return r
}

func DeserializeApplication(r io.Reader) (Application, error) {
	t := NewApplication()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeApplicationFromSchema(r io.Reader, schema string) (Application, error) {
	t := NewApplication()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeApplication(r Application, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Deleted, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.IsMigration, w)
	if err != nil {
		return err
	}
	err = writeProject(r.Project, w)
	if err != nil {
		return err
	}
	err = writePipelineVersion(r.PipelineVersion, w)
	if err != nil {
		return err
	}
	return err
}

func (r Application) Serialize(w io.Writer) error {
	return writeApplication(r, w)
}

func (r Application) Schema() string {
	return "{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"Deleted\",\"type\":\"boolean\"},{\"name\":\"IsMigration\",\"type\":\"boolean\"},{\"name\":\"Project\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"Acronym\",\"type\":\"string\"},{\"name\":\"OwnerMail\",\"type\":\"string\"},{\"name\":\"Deleted\",\"type\":\"boolean\"}],\"name\":\"Project\",\"type\":\"record\"}},{\"name\":\"PipelineVersion\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Version\",\"type\":\"string\"},{\"name\":\"ReleaseNotes\",\"type\":\"string\"},{\"name\":\"Deleted\",\"type\":\"boolean\"},{\"name\":\"Latest\",\"type\":\"boolean\"},{\"name\":\"Pipeline\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"Description\",\"type\":\"string\"},{\"name\":\"RepositoryConfig\",\"type\":\"string\"},{\"name\":\"Deleted\",\"type\":\"boolean\"}],\"name\":\"Pipeline\",\"type\":\"record\"}}],\"name\":\"PipelineVersion\",\"type\":\"record\"}}],\"name\":\"Andreani.GithubIntegration.Events.Record.Application\",\"type\":\"record\"}"
}

func (r Application) SchemaName() string {
	return "Andreani.GithubIntegration.Events.Record.Application"
}

func (_ Application) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Application) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Application) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Application) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Application) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Application) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Application) SetString(v string)   { panic("Unsupported operation") }
func (_ Application) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Application) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.Name}

		return w

	case 2:
		w := types.Boolean{Target: &r.Deleted}

		return w

	case 3:
		w := types.Boolean{Target: &r.IsMigration}

		return w

	case 4:
		r.Project = NewProject()

		w := types.Record{Target: &r.Project}

		return w

	case 5:
		r.PipelineVersion = NewPipelineVersion()

		w := types.Record{Target: &r.PipelineVersion}

		return w

	}
	panic("Unknown field index")
}

func (r *Application) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Application) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Application) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Application) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Application) HintSize(int)                     { panic("Unsupported operation") }
func (_ Application) Finalize()                        {}

func (_ Application) AvroCRC64Fingerprint() []byte {
	return []byte(ApplicationAvroCRC64Fingerprint)
}

func (r Application) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["Name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["Deleted"], err = json.Marshal(r.Deleted)
	if err != nil {
		return nil, err
	}
	output["IsMigration"], err = json.Marshal(r.IsMigration)
	if err != nil {
		return nil, err
	}
	output["Project"], err = json.Marshal(r.Project)
	if err != nil {
		return nil, err
	}
	output["PipelineVersion"], err = json.Marshal(r.PipelineVersion)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Application) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Deleted"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Deleted); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Deleted")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IsMigration"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IsMigration); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IsMigration")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Project"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Project); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Project")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PipelineVersion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PipelineVersion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PipelineVersion")
	}
	return nil
}
