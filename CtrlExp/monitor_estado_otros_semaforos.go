// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     MonitorEstadoOtrosSemaforos.avsc
 */
package CtrlExpEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type MonitorEstadoOtrosSemaforos struct {
	Semaforo string `json:"Semaforo"`

	Valor bool `json:"Valor"`
}

const MonitorEstadoOtrosSemaforosAvroCRC64Fingerprint = "\x84D\xfb`q$\xb7\xfb"

func NewMonitorEstadoOtrosSemaforos() MonitorEstadoOtrosSemaforos {
	r := MonitorEstadoOtrosSemaforos{}
	return r
}

func DeserializeMonitorEstadoOtrosSemaforos(r io.Reader) (MonitorEstadoOtrosSemaforos, error) {
	t := NewMonitorEstadoOtrosSemaforos()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeMonitorEstadoOtrosSemaforosFromSchema(r io.Reader, schema string) (MonitorEstadoOtrosSemaforos, error) {
	t := NewMonitorEstadoOtrosSemaforos()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeMonitorEstadoOtrosSemaforos(r MonitorEstadoOtrosSemaforos, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Semaforo, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Valor, w)
	if err != nil {
		return err
	}
	return err
}

func (r MonitorEstadoOtrosSemaforos) Serialize(w io.Writer) error {
	return writeMonitorEstadoOtrosSemaforos(r, w)
}

func (r MonitorEstadoOtrosSemaforos) Schema() string {
	return "{\"fields\":[{\"name\":\"Semaforo\",\"type\":\"string\"},{\"name\":\"Valor\",\"type\":\"boolean\"}],\"name\":\"Andreani.CtrlExp.Events.Record.MonitorEstadoOtrosSemaforos\",\"type\":\"record\"}"
}

func (r MonitorEstadoOtrosSemaforos) SchemaName() string {
	return "Andreani.CtrlExp.Events.Record.MonitorEstadoOtrosSemaforos"
}

func (_ MonitorEstadoOtrosSemaforos) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ MonitorEstadoOtrosSemaforos) SetInt(v int32)       { panic("Unsupported operation") }
func (_ MonitorEstadoOtrosSemaforos) SetLong(v int64)      { panic("Unsupported operation") }
func (_ MonitorEstadoOtrosSemaforos) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ MonitorEstadoOtrosSemaforos) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ MonitorEstadoOtrosSemaforos) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ MonitorEstadoOtrosSemaforos) SetString(v string)   { panic("Unsupported operation") }
func (_ MonitorEstadoOtrosSemaforos) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *MonitorEstadoOtrosSemaforos) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Semaforo}

		return w

	case 1:
		w := types.Boolean{Target: &r.Valor}

		return w

	}
	panic("Unknown field index")
}

func (r *MonitorEstadoOtrosSemaforos) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *MonitorEstadoOtrosSemaforos) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ MonitorEstadoOtrosSemaforos) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ MonitorEstadoOtrosSemaforos) AppendArray() types.Field { panic("Unsupported operation") }
func (_ MonitorEstadoOtrosSemaforos) HintSize(int)             { panic("Unsupported operation") }
func (_ MonitorEstadoOtrosSemaforos) Finalize()                {}

func (_ MonitorEstadoOtrosSemaforos) AvroCRC64Fingerprint() []byte {
	return []byte(MonitorEstadoOtrosSemaforosAvroCRC64Fingerprint)
}

func (r MonitorEstadoOtrosSemaforos) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Semaforo"], err = json.Marshal(r.Semaforo)
	if err != nil {
		return nil, err
	}
	output["Valor"], err = json.Marshal(r.Valor)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *MonitorEstadoOtrosSemaforos) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Semaforo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Semaforo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Semaforo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Valor"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Valor); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Valor")
	}
	return nil
}
