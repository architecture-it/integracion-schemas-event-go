// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     LiberacionBandeja.avsc
 */
package CtrlExpEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type LiberacionBandeja struct {
	Bandeja string `json:"Bandeja"`

	SchemaDb *UnionNullString `json:"SchemaDb"`
}

const LiberacionBandejaAvroCRC64Fingerprint = "\x88d3\xdf\xc8rI\n"

func NewLiberacionBandeja() LiberacionBandeja {
	r := LiberacionBandeja{}
	r.SchemaDb = nil
	return r
}

func DeserializeLiberacionBandeja(r io.Reader) (LiberacionBandeja, error) {
	t := NewLiberacionBandeja()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeLiberacionBandejaFromSchema(r io.Reader, schema string) (LiberacionBandeja, error) {
	t := NewLiberacionBandeja()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeLiberacionBandeja(r LiberacionBandeja, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Bandeja, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SchemaDb, w)
	if err != nil {
		return err
	}
	return err
}

func (r LiberacionBandeja) Serialize(w io.Writer) error {
	return writeLiberacionBandeja(r, w)
}

func (r LiberacionBandeja) Schema() string {
	return "{\"fields\":[{\"name\":\"Bandeja\",\"type\":\"string\"},{\"default\":null,\"name\":\"SchemaDb\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.CtrlExp.Events.Record.LiberacionBandeja\",\"type\":\"record\"}"
}

func (r LiberacionBandeja) SchemaName() string {
	return "Andreani.CtrlExp.Events.Record.LiberacionBandeja"
}

func (_ LiberacionBandeja) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ LiberacionBandeja) SetInt(v int32)       { panic("Unsupported operation") }
func (_ LiberacionBandeja) SetLong(v int64)      { panic("Unsupported operation") }
func (_ LiberacionBandeja) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ LiberacionBandeja) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ LiberacionBandeja) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ LiberacionBandeja) SetString(v string)   { panic("Unsupported operation") }
func (_ LiberacionBandeja) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *LiberacionBandeja) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Bandeja}

		return w

	case 1:
		r.SchemaDb = NewUnionNullString()

		return r.SchemaDb
	}
	panic("Unknown field index")
}

func (r *LiberacionBandeja) SetDefault(i int) {
	switch i {
	case 1:
		r.SchemaDb = nil
		return
	}
	panic("Unknown field index")
}

func (r *LiberacionBandeja) NullField(i int) {
	switch i {
	case 1:
		r.SchemaDb = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ LiberacionBandeja) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ LiberacionBandeja) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ LiberacionBandeja) HintSize(int)                     { panic("Unsupported operation") }
func (_ LiberacionBandeja) Finalize()                        {}

func (_ LiberacionBandeja) AvroCRC64Fingerprint() []byte {
	return []byte(LiberacionBandejaAvroCRC64Fingerprint)
}

func (r LiberacionBandeja) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Bandeja"], err = json.Marshal(r.Bandeja)
	if err != nil {
		return nil, err
	}
	output["SchemaDb"], err = json.Marshal(r.SchemaDb)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *LiberacionBandeja) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Bandeja"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Bandeja); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Bandeja")
	}
	val = func() json.RawMessage {
		if v, ok := fields["SchemaDb"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SchemaDb); err != nil {
			return err
		}
	} else {
		r.SchemaDb = NewUnionNullString()

		r.SchemaDb = nil
	}
	return nil
}
