// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     LogLectura.avsc
 */
package CtrlExpEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type LogLectura struct {
	IdTipoLectura int32 `json:"IdTipoLectura"`

	Codigo string `json:"Codigo"`

	FechaLectura int64 `json:"FechaLectura"`

	Bandeja *UnionNullString `json:"Bandeja"`

	NroPedido *UnionNullString `json:"NroPedido"`

	Lpn *UnionNullString `json:"Lpn"`

	Cantidad *UnionNullInt `json:"Cantidad"`
}

const LogLecturaAvroCRC64Fingerprint = "\xe0\xd7:\xa6\xa9V\xa6\x9c"

func NewLogLectura() LogLectura {
	r := LogLectura{}
	return r
}

func DeserializeLogLectura(r io.Reader) (LogLectura, error) {
	t := NewLogLectura()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeLogLecturaFromSchema(r io.Reader, schema string) (LogLectura, error) {
	t := NewLogLectura()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeLogLectura(r LogLectura, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.IdTipoLectura, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Codigo, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.FechaLectura, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Bandeja, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NroPedido, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Lpn, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.Cantidad, w)
	if err != nil {
		return err
	}
	return err
}

func (r LogLectura) Serialize(w io.Writer) error {
	return writeLogLectura(r, w)
}

func (r LogLectura) Schema() string {
	return "{\"fields\":[{\"name\":\"IdTipoLectura\",\"type\":\"int\"},{\"name\":\"Codigo\",\"type\":\"string\"},{\"name\":\"FechaLectura\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"Bandeja\",\"type\":[\"null\",\"string\"]},{\"name\":\"NroPedido\",\"type\":[\"null\",\"string\"]},{\"name\":\"Lpn\",\"type\":[\"null\",\"string\"]},{\"name\":\"Cantidad\",\"type\":[\"null\",\"int\"]}],\"name\":\"Andreani.CtrlExp.Events.Record.LogLectura\",\"type\":\"record\"}"
}

func (r LogLectura) SchemaName() string {
	return "Andreani.CtrlExp.Events.Record.LogLectura"
}

func (_ LogLectura) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ LogLectura) SetInt(v int32)       { panic("Unsupported operation") }
func (_ LogLectura) SetLong(v int64)      { panic("Unsupported operation") }
func (_ LogLectura) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ LogLectura) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ LogLectura) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ LogLectura) SetString(v string)   { panic("Unsupported operation") }
func (_ LogLectura) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *LogLectura) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.IdTipoLectura}

		return w

	case 1:
		w := types.String{Target: &r.Codigo}

		return w

	case 2:
		w := types.Long{Target: &r.FechaLectura}

		return w

	case 3:
		r.Bandeja = NewUnionNullString()

		return r.Bandeja
	case 4:
		r.NroPedido = NewUnionNullString()

		return r.NroPedido
	case 5:
		r.Lpn = NewUnionNullString()

		return r.Lpn
	case 6:
		r.Cantidad = NewUnionNullInt()

		return r.Cantidad
	}
	panic("Unknown field index")
}

func (r *LogLectura) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *LogLectura) NullField(i int) {
	switch i {
	case 3:
		r.Bandeja = nil
		return
	case 4:
		r.NroPedido = nil
		return
	case 5:
		r.Lpn = nil
		return
	case 6:
		r.Cantidad = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ LogLectura) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ LogLectura) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ LogLectura) HintSize(int)                     { panic("Unsupported operation") }
func (_ LogLectura) Finalize()                        {}

func (_ LogLectura) AvroCRC64Fingerprint() []byte {
	return []byte(LogLecturaAvroCRC64Fingerprint)
}

func (r LogLectura) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["IdTipoLectura"], err = json.Marshal(r.IdTipoLectura)
	if err != nil {
		return nil, err
	}
	output["Codigo"], err = json.Marshal(r.Codigo)
	if err != nil {
		return nil, err
	}
	output["FechaLectura"], err = json.Marshal(r.FechaLectura)
	if err != nil {
		return nil, err
	}
	output["Bandeja"], err = json.Marshal(r.Bandeja)
	if err != nil {
		return nil, err
	}
	output["NroPedido"], err = json.Marshal(r.NroPedido)
	if err != nil {
		return nil, err
	}
	output["Lpn"], err = json.Marshal(r.Lpn)
	if err != nil {
		return nil, err
	}
	output["Cantidad"], err = json.Marshal(r.Cantidad)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *LogLectura) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["IdTipoLectura"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdTipoLectura); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdTipoLectura")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Codigo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Codigo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Codigo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaLectura"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaLectura); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FechaLectura")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Bandeja"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Bandeja); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Bandeja")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NroPedido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NroPedido); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NroPedido")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Lpn"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Lpn); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Lpn")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Cantidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cantidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Cantidad")
	}
	return nil
}
