// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     MonitorEstado.avsc
 */
package CtrlExpEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayMonitorEstadoOtrosContadoresTypeEnum int

const (
	UnionNullArrayMonitorEstadoOtrosContadoresTypeEnumArrayMonitorEstadoOtrosContadores UnionNullArrayMonitorEstadoOtrosContadoresTypeEnum = 1
)

type UnionNullArrayMonitorEstadoOtrosContadores struct {
	Null                              *types.NullVal
	ArrayMonitorEstadoOtrosContadores []MonitorEstadoOtrosContadores
	UnionType                         UnionNullArrayMonitorEstadoOtrosContadoresTypeEnum
}

func writeUnionNullArrayMonitorEstadoOtrosContadores(r *UnionNullArrayMonitorEstadoOtrosContadores, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayMonitorEstadoOtrosContadoresTypeEnumArrayMonitorEstadoOtrosContadores:
		return writeArrayMonitorEstadoOtrosContadores(r.ArrayMonitorEstadoOtrosContadores, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayMonitorEstadoOtrosContadores")
}

func NewUnionNullArrayMonitorEstadoOtrosContadores() *UnionNullArrayMonitorEstadoOtrosContadores {
	return &UnionNullArrayMonitorEstadoOtrosContadores{}
}

func (r *UnionNullArrayMonitorEstadoOtrosContadores) Serialize(w io.Writer) error {
	return writeUnionNullArrayMonitorEstadoOtrosContadores(r, w)
}

func DeserializeUnionNullArrayMonitorEstadoOtrosContadores(r io.Reader) (*UnionNullArrayMonitorEstadoOtrosContadores, error) {
	t := NewUnionNullArrayMonitorEstadoOtrosContadores()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayMonitorEstadoOtrosContadoresFromSchema(r io.Reader, schema string) (*UnionNullArrayMonitorEstadoOtrosContadores, error) {
	t := NewUnionNullArrayMonitorEstadoOtrosContadores()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayMonitorEstadoOtrosContadores) Schema() string {
	return "[\"null\",{\"items\":{\"fields\":[{\"name\":\"Contador\",\"type\":\"string\"},{\"name\":\"Valor\",\"type\":\"int\"}],\"name\":\"MonitorEstadoOtrosContadores\",\"type\":\"record\"},\"type\":\"array\"}]"
}

func (_ *UnionNullArrayMonitorEstadoOtrosContadores) SetBoolean(v bool) {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayMonitorEstadoOtrosContadores) SetInt(v int32) { panic("Unsupported operation") }
func (_ *UnionNullArrayMonitorEstadoOtrosContadores) SetFloat(v float32) {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayMonitorEstadoOtrosContadores) SetDouble(v float64) {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayMonitorEstadoOtrosContadores) SetBytes(v []byte) {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayMonitorEstadoOtrosContadores) SetString(v string) {
	panic("Unsupported operation")
}

func (r *UnionNullArrayMonitorEstadoOtrosContadores) SetLong(v int64) {

	r.UnionType = (UnionNullArrayMonitorEstadoOtrosContadoresTypeEnum)(v)
}

func (r *UnionNullArrayMonitorEstadoOtrosContadores) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayMonitorEstadoOtrosContadores = make([]MonitorEstadoOtrosContadores, 0)
		return &ArrayMonitorEstadoOtrosContadoresWrapper{Target: (&r.ArrayMonitorEstadoOtrosContadores)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayMonitorEstadoOtrosContadores) NullField(i int) { panic("Unsupported operation") }
func (_ *UnionNullArrayMonitorEstadoOtrosContadores) HintSize(i int)  { panic("Unsupported operation") }
func (_ *UnionNullArrayMonitorEstadoOtrosContadores) SetDefault(i int) {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayMonitorEstadoOtrosContadores) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayMonitorEstadoOtrosContadores) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayMonitorEstadoOtrosContadores) Finalize() {}

func (r *UnionNullArrayMonitorEstadoOtrosContadores) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayMonitorEstadoOtrosContadoresTypeEnumArrayMonitorEstadoOtrosContadores:
		return json.Marshal(map[string]interface{}{"array": r.ArrayMonitorEstadoOtrosContadores})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayMonitorEstadoOtrosContadores")
}

func (r *UnionNullArrayMonitorEstadoOtrosContadores) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayMonitorEstadoOtrosContadores)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayMonitorEstadoOtrosContadores")
}
