// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     MantenimientoDeLoteSolicitado.avsc
 */
package WapEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DetalleDeLote struct {
	Propietario string `json:"propietario"`

	Articulo string `json:"articulo"`

	Paquete string `json:"paquete"`

	LoteCaja string `json:"loteCaja"`

	LoteSecundario string `json:"loteSecundario"`

	LoteSap string `json:"loteSap"`

	FechaFabricacion string `json:"fechaFabricacion"`

	FechaVencimiento string `json:"fechaVencimiento"`

	Trazable string `json:"trazable"`

	Estado string `json:"estado"`

	Procedencia string `json:"procedencia"`

	CampoLibre1 string `json:"campoLibre1"`

	CampoLibre2 string `json:"campoLibre2"`

	CampoLibre3 string `json:"campoLibre3"`

	CampoLibre4 string `json:"campoLibre4"`

	CampoLibre5 string `json:"campoLibre5"`

	LoteExternoCliente string `json:"loteExternoCliente"`

	DeliverByDate string `json:"deliverByDate"`

	BestByDate string `json:"bestByDate"`

	FechaCreacion string `json:"fechaCreacion"`

	UsuarioCreacion string `json:"usuarioCreacion"`

	FechaEdicion string `json:"fechaEdicion"`

	UsuarioEdicion string `json:"usuarioEdicion"`
}

const DetalleDeLoteAvroCRC64Fingerprint = "\x82\xff\xbc\x88\xbe…µ\x96"

func NewDetalleDeLote() DetalleDeLote {
	r := DetalleDeLote{}
	return r
}

func DeserializeDetalleDeLote(r io.Reader) (DetalleDeLote, error) {
	t := NewDetalleDeLote()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDetalleDeLoteFromSchema(r io.Reader, schema string) (DetalleDeLote, error) {
	t := NewDetalleDeLote()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDetalleDeLote(r DetalleDeLote, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Propietario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Articulo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Paquete, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteCaja, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteSecundario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteSap, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.FechaFabricacion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.FechaVencimiento, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Trazable, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Estado, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Procedencia, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CampoLibre1, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CampoLibre2, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CampoLibre3, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CampoLibre4, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CampoLibre5, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteExternoCliente, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.DeliverByDate, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.BestByDate, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.FechaCreacion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.UsuarioCreacion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.FechaEdicion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.UsuarioEdicion, w)
	if err != nil {
		return err
	}
	return err
}

func (r DetalleDeLote) Serialize(w io.Writer) error {
	return writeDetalleDeLote(r, w)
}

func (r DetalleDeLote) Schema() string {
	return "{\"fields\":[{\"name\":\"propietario\",\"type\":\"string\"},{\"name\":\"articulo\",\"type\":\"string\"},{\"name\":\"paquete\",\"type\":\"string\"},{\"name\":\"loteCaja\",\"type\":\"string\"},{\"name\":\"loteSecundario\",\"type\":\"string\"},{\"name\":\"loteSap\",\"type\":\"string\"},{\"name\":\"fechaFabricacion\",\"type\":\"string\"},{\"name\":\"fechaVencimiento\",\"type\":\"string\"},{\"name\":\"trazable\",\"type\":\"string\"},{\"name\":\"estado\",\"type\":\"string\"},{\"name\":\"procedencia\",\"type\":\"string\"},{\"name\":\"campoLibre1\",\"type\":\"string\"},{\"name\":\"campoLibre2\",\"type\":\"string\"},{\"name\":\"campoLibre3\",\"type\":\"string\"},{\"name\":\"campoLibre4\",\"type\":\"string\"},{\"name\":\"campoLibre5\",\"type\":\"string\"},{\"name\":\"loteExternoCliente\",\"type\":\"string\"},{\"name\":\"deliverByDate\",\"type\":\"string\"},{\"name\":\"bestByDate\",\"type\":\"string\"},{\"name\":\"fechaCreacion\",\"type\":\"string\"},{\"name\":\"usuarioCreacion\",\"type\":\"string\"},{\"name\":\"fechaEdicion\",\"type\":\"string\"},{\"name\":\"usuarioEdicion\",\"type\":\"string\"}],\"name\":\"Andreani.Wap.Events.Record.DetalleDeLote\",\"type\":\"record\"}"
}

func (r DetalleDeLote) SchemaName() string {
	return "Andreani.Wap.Events.Record.DetalleDeLote"
}

func (_ DetalleDeLote) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DetalleDeLote) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DetalleDeLote) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DetalleDeLote) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DetalleDeLote) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DetalleDeLote) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DetalleDeLote) SetString(v string)   { panic("Unsupported operation") }
func (_ DetalleDeLote) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DetalleDeLote) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Propietario}

		return w

	case 1:
		w := types.String{Target: &r.Articulo}

		return w

	case 2:
		w := types.String{Target: &r.Paquete}

		return w

	case 3:
		w := types.String{Target: &r.LoteCaja}

		return w

	case 4:
		w := types.String{Target: &r.LoteSecundario}

		return w

	case 5:
		w := types.String{Target: &r.LoteSap}

		return w

	case 6:
		w := types.String{Target: &r.FechaFabricacion}

		return w

	case 7:
		w := types.String{Target: &r.FechaVencimiento}

		return w

	case 8:
		w := types.String{Target: &r.Trazable}

		return w

	case 9:
		w := types.String{Target: &r.Estado}

		return w

	case 10:
		w := types.String{Target: &r.Procedencia}

		return w

	case 11:
		w := types.String{Target: &r.CampoLibre1}

		return w

	case 12:
		w := types.String{Target: &r.CampoLibre2}

		return w

	case 13:
		w := types.String{Target: &r.CampoLibre3}

		return w

	case 14:
		w := types.String{Target: &r.CampoLibre4}

		return w

	case 15:
		w := types.String{Target: &r.CampoLibre5}

		return w

	case 16:
		w := types.String{Target: &r.LoteExternoCliente}

		return w

	case 17:
		w := types.String{Target: &r.DeliverByDate}

		return w

	case 18:
		w := types.String{Target: &r.BestByDate}

		return w

	case 19:
		w := types.String{Target: &r.FechaCreacion}

		return w

	case 20:
		w := types.String{Target: &r.UsuarioCreacion}

		return w

	case 21:
		w := types.String{Target: &r.FechaEdicion}

		return w

	case 22:
		w := types.String{Target: &r.UsuarioEdicion}

		return w

	}
	panic("Unknown field index")
}

func (r *DetalleDeLote) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *DetalleDeLote) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ DetalleDeLote) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DetalleDeLote) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DetalleDeLote) HintSize(int)                     { panic("Unsupported operation") }
func (_ DetalleDeLote) Finalize()                        {}

func (_ DetalleDeLote) AvroCRC64Fingerprint() []byte {
	return []byte(DetalleDeLoteAvroCRC64Fingerprint)
}

func (r DetalleDeLote) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["articulo"], err = json.Marshal(r.Articulo)
	if err != nil {
		return nil, err
	}
	output["paquete"], err = json.Marshal(r.Paquete)
	if err != nil {
		return nil, err
	}
	output["loteCaja"], err = json.Marshal(r.LoteCaja)
	if err != nil {
		return nil, err
	}
	output["loteSecundario"], err = json.Marshal(r.LoteSecundario)
	if err != nil {
		return nil, err
	}
	output["loteSap"], err = json.Marshal(r.LoteSap)
	if err != nil {
		return nil, err
	}
	output["fechaFabricacion"], err = json.Marshal(r.FechaFabricacion)
	if err != nil {
		return nil, err
	}
	output["fechaVencimiento"], err = json.Marshal(r.FechaVencimiento)
	if err != nil {
		return nil, err
	}
	output["trazable"], err = json.Marshal(r.Trazable)
	if err != nil {
		return nil, err
	}
	output["estado"], err = json.Marshal(r.Estado)
	if err != nil {
		return nil, err
	}
	output["procedencia"], err = json.Marshal(r.Procedencia)
	if err != nil {
		return nil, err
	}
	output["campoLibre1"], err = json.Marshal(r.CampoLibre1)
	if err != nil {
		return nil, err
	}
	output["campoLibre2"], err = json.Marshal(r.CampoLibre2)
	if err != nil {
		return nil, err
	}
	output["campoLibre3"], err = json.Marshal(r.CampoLibre3)
	if err != nil {
		return nil, err
	}
	output["campoLibre4"], err = json.Marshal(r.CampoLibre4)
	if err != nil {
		return nil, err
	}
	output["campoLibre5"], err = json.Marshal(r.CampoLibre5)
	if err != nil {
		return nil, err
	}
	output["loteExternoCliente"], err = json.Marshal(r.LoteExternoCliente)
	if err != nil {
		return nil, err
	}
	output["deliverByDate"], err = json.Marshal(r.DeliverByDate)
	if err != nil {
		return nil, err
	}
	output["bestByDate"], err = json.Marshal(r.BestByDate)
	if err != nil {
		return nil, err
	}
	output["fechaCreacion"], err = json.Marshal(r.FechaCreacion)
	if err != nil {
		return nil, err
	}
	output["usuarioCreacion"], err = json.Marshal(r.UsuarioCreacion)
	if err != nil {
		return nil, err
	}
	output["fechaEdicion"], err = json.Marshal(r.FechaEdicion)
	if err != nil {
		return nil, err
	}
	output["usuarioEdicion"], err = json.Marshal(r.UsuarioEdicion)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DetalleDeLote) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for propietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["articulo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Articulo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for articulo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["paquete"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Paquete); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for paquete")
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteCaja"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteCaja); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for loteCaja")
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteSecundario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteSecundario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for loteSecundario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteSap"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteSap); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for loteSap")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaFabricacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaFabricacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fechaFabricacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaVencimiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaVencimiento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fechaVencimiento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["trazable"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Trazable); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for trazable")
	}
	val = func() json.RawMessage {
		if v, ok := fields["estado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for estado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["procedencia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Procedencia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for procedencia")
	}
	val = func() json.RawMessage {
		if v, ok := fields["campoLibre1"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CampoLibre1); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for campoLibre1")
	}
	val = func() json.RawMessage {
		if v, ok := fields["campoLibre2"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CampoLibre2); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for campoLibre2")
	}
	val = func() json.RawMessage {
		if v, ok := fields["campoLibre3"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CampoLibre3); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for campoLibre3")
	}
	val = func() json.RawMessage {
		if v, ok := fields["campoLibre4"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CampoLibre4); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for campoLibre4")
	}
	val = func() json.RawMessage {
		if v, ok := fields["campoLibre5"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CampoLibre5); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for campoLibre5")
	}
	val = func() json.RawMessage {
		if v, ok := fields["loteExternoCliente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteExternoCliente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for loteExternoCliente")
	}
	val = func() json.RawMessage {
		if v, ok := fields["deliverByDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DeliverByDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for deliverByDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["bestByDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BestByDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for bestByDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaCreacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaCreacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fechaCreacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["usuarioCreacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UsuarioCreacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for usuarioCreacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaEdicion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaEdicion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fechaEdicion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["usuarioEdicion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UsuarioEdicion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for usuarioEdicion")
	}
	return nil
}
