// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     OrdenDeCompra.avsc
 */
package WapEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ListaDeDetalleDeOrdenDeCompra struct {
	DetalleDeOrdenDeCompra []DetalleDeOrdenDeCompra `json:"detalleDeOrdenDeCompra"`
}

const ListaDeDetalleDeOrdenDeCompraAvroCRC64Fingerprint = "e\xeb\x14\b w<l"

func NewListaDeDetalleDeOrdenDeCompra() ListaDeDetalleDeOrdenDeCompra {
	r := ListaDeDetalleDeOrdenDeCompra{}
	r.DetalleDeOrdenDeCompra = make([]DetalleDeOrdenDeCompra, 0)

	return r
}

func DeserializeListaDeDetalleDeOrdenDeCompra(r io.Reader) (ListaDeDetalleDeOrdenDeCompra, error) {
	t := NewListaDeDetalleDeOrdenDeCompra()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeListaDeDetalleDeOrdenDeCompraFromSchema(r io.Reader, schema string) (ListaDeDetalleDeOrdenDeCompra, error) {
	t := NewListaDeDetalleDeOrdenDeCompra()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeListaDeDetalleDeOrdenDeCompra(r ListaDeDetalleDeOrdenDeCompra, w io.Writer) error {
	var err error
	err = writeArrayDetalleDeOrdenDeCompra(r.DetalleDeOrdenDeCompra, w)
	if err != nil {
		return err
	}
	return err
}

func (r ListaDeDetalleDeOrdenDeCompra) Serialize(w io.Writer) error {
	return writeListaDeDetalleDeOrdenDeCompra(r, w)
}

func (r ListaDeDetalleDeOrdenDeCompra) Schema() string {
	return "{\"fields\":[{\"name\":\"detalleDeOrdenDeCompra\",\"type\":{\"items\":{\"fields\":[{\"name\":\"numeroDeLineaDeCliente\",\"type\":\"string\"},{\"name\":\"ordenDeCompraDeCliente\",\"type\":\"string\"},{\"default\":null,\"name\":\"notasDeLinea\",\"type\":[\"null\",\"string\"]},{\"name\":\"numeroDeLinea\",\"type\":\"string\"},{\"name\":\"cantidadPedida\",\"type\":\"double\"},{\"name\":\"articulo\",\"type\":{\"fields\":[{\"name\":\"codigo\",\"type\":\"string\"},{\"name\":\"propietario\",\"type\":\"string\"},{\"default\":null,\"name\":\"lote\",\"type\":[\"null\",{\"fields\":[{\"name\":\"codigo\",\"type\":\"string\"},{\"default\":null,\"name\":\"loteDeFabricante\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"loteSecundario\",\"type\":[\"null\",\"string\"]},{\"name\":\"fechaDeVencimiento\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"default\":null,\"name\":\"otrosDatos\",\"type\":[\"null\",{\"fields\":[{\"name\":\"metadatos\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"name\":\"meta\",\"type\":\"string\"},{\"name\":\"contenido\",\"type\":\"string\"}],\"name\":\"Metadato\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"ListaDePropiedades\",\"type\":\"record\"}]}],\"name\":\"LoteArticulo\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"otrosDatos\",\"type\":[\"null\",\"Andreani.Wap.Events.Record.ListaDePropiedades\"]}],\"name\":\"Articulo\",\"type\":\"record\"}},{\"default\":null,\"name\":\"valorDeclarado\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"UOM\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"camposLibres\",\"type\":[\"null\",\"Andreani.Wap.Events.Record.ListaDePropiedades\"]},{\"default\":null,\"name\":\"fechaOrdenDeCompra\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"tipoMaterial\",\"type\":[\"null\",\"string\"]}],\"name\":\"DetalleDeOrdenDeCompra\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Andreani.Wap.Events.Record.ListaDeDetalleDeOrdenDeCompra\",\"type\":\"record\"}"
}

func (r ListaDeDetalleDeOrdenDeCompra) SchemaName() string {
	return "Andreani.Wap.Events.Record.ListaDeDetalleDeOrdenDeCompra"
}

func (_ ListaDeDetalleDeOrdenDeCompra) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ListaDeDetalleDeOrdenDeCompra) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ListaDeDetalleDeOrdenDeCompra) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ListaDeDetalleDeOrdenDeCompra) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ListaDeDetalleDeOrdenDeCompra) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ListaDeDetalleDeOrdenDeCompra) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ListaDeDetalleDeOrdenDeCompra) SetString(v string)   { panic("Unsupported operation") }
func (_ ListaDeDetalleDeOrdenDeCompra) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ListaDeDetalleDeOrdenDeCompra) Get(i int) types.Field {
	switch i {
	case 0:
		r.DetalleDeOrdenDeCompra = make([]DetalleDeOrdenDeCompra, 0)

		w := ArrayDetalleDeOrdenDeCompraWrapper{Target: &r.DetalleDeOrdenDeCompra}

		return w

	}
	panic("Unknown field index")
}

func (r *ListaDeDetalleDeOrdenDeCompra) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ListaDeDetalleDeOrdenDeCompra) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ ListaDeDetalleDeOrdenDeCompra) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ ListaDeDetalleDeOrdenDeCompra) AppendArray() types.Field { panic("Unsupported operation") }
func (_ ListaDeDetalleDeOrdenDeCompra) HintSize(int)             { panic("Unsupported operation") }
func (_ ListaDeDetalleDeOrdenDeCompra) Finalize()                {}

func (_ ListaDeDetalleDeOrdenDeCompra) AvroCRC64Fingerprint() []byte {
	return []byte(ListaDeDetalleDeOrdenDeCompraAvroCRC64Fingerprint)
}

func (r ListaDeDetalleDeOrdenDeCompra) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["detalleDeOrdenDeCompra"], err = json.Marshal(r.DetalleDeOrdenDeCompra)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ListaDeDetalleDeOrdenDeCompra) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["detalleDeOrdenDeCompra"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DetalleDeOrdenDeCompra); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for detalleDeOrdenDeCompra")
	}
	return nil
}
