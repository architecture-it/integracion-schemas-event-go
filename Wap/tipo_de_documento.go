// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TipoDeDocumento.avsc
 */
package WapEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TipoDeDocumento int32

const (
	TipoDeDocumentoUndefined TipoDeDocumento = 0
	TipoDeDocumentoDNI       TipoDeDocumento = 1
	TipoDeDocumentoCUIT      TipoDeDocumento = 2
	TipoDeDocumentoCUIL      TipoDeDocumento = 3
)

func (e TipoDeDocumento) String() string {
	switch e {
	case TipoDeDocumentoUndefined:
		return "undefined"
	case TipoDeDocumentoDNI:
		return "DNI"
	case TipoDeDocumentoCUIT:
		return "CUIT"
	case TipoDeDocumentoCUIL:
		return "CUIL"
	}
	return "unknown"
}

func writeTipoDeDocumento(r TipoDeDocumento, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewTipoDeDocumentoValue(raw string) (r TipoDeDocumento, err error) {
	switch raw {
	case "undefined":
		return TipoDeDocumentoUndefined, nil
	case "DNI":
		return TipoDeDocumentoDNI, nil
	case "CUIT":
		return TipoDeDocumentoCUIT, nil
	case "CUIL":
		return TipoDeDocumentoCUIL, nil
	}

	return -1, fmt.Errorf("invalid value for TipoDeDocumento: '%s'", raw)

}

func (b TipoDeDocumento) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *TipoDeDocumento) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewTipoDeDocumentoValue(stringVal)
	*b = val
	return err
}

type TipoDeDocumentoWrapper struct {
	Target *TipoDeDocumento
}

func (b TipoDeDocumentoWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b TipoDeDocumentoWrapper) SetInt(v int32) {
	*(b.Target) = TipoDeDocumento(v)
}

func (b TipoDeDocumentoWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b TipoDeDocumentoWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b TipoDeDocumentoWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b TipoDeDocumentoWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b TipoDeDocumentoWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b TipoDeDocumentoWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b TipoDeDocumentoWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b TipoDeDocumentoWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b TipoDeDocumentoWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b TipoDeDocumentoWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b TipoDeDocumentoWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b TipoDeDocumentoWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b TipoDeDocumentoWrapper) Finalize() {}
