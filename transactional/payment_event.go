// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     PaymentEvent.avsc
 */
package transactionalEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type PaymentEvent struct {
	Reference string `json:"Reference"`

	PaymentDate string `json:"PaymentDate"`

	Status string `json:"Status"`

	ServiceName string `json:"ServiceName"`

	PaymentGatewayName string `json:"PaymentGatewayName"`

	ExpectedAmount string `json:"ExpectedAmount"`

	ReceivedAmount string `json:"ReceivedAmount"`
}

const PaymentEventAvroCRC64Fingerprint = "\xc7\x1c\xda\xfa\xb1)\xd8\xe6"

func NewPaymentEvent() PaymentEvent {
	r := PaymentEvent{}
	return r
}

func DeserializePaymentEvent(r io.Reader) (PaymentEvent, error) {
	t := NewPaymentEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePaymentEventFromSchema(r io.Reader, schema string) (PaymentEvent, error) {
	t := NewPaymentEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePaymentEvent(r PaymentEvent, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Reference, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.PaymentDate, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Status, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ServiceName, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.PaymentGatewayName, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ExpectedAmount, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ReceivedAmount, w)
	if err != nil {
		return err
	}
	return err
}

func (r PaymentEvent) Serialize(w io.Writer) error {
	return writePaymentEvent(r, w)
}

func (r PaymentEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"Reference\",\"type\":\"string\"},{\"name\":\"PaymentDate\",\"type\":\"string\"},{\"name\":\"Status\",\"type\":\"string\"},{\"name\":\"ServiceName\",\"type\":\"string\"},{\"name\":\"PaymentGatewayName\",\"type\":\"string\"},{\"name\":\"ExpectedAmount\",\"type\":\"string\"},{\"name\":\"ReceivedAmount\",\"type\":\"string\"}],\"name\":\"Andreani.Transactional.Payments.Events.Record.PaymentEvent\",\"type\":\"record\"}"
}

func (r PaymentEvent) SchemaName() string {
	return "Andreani.Transactional.Payments.Events.Record.PaymentEvent"
}

func (_ PaymentEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ PaymentEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ PaymentEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ PaymentEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ PaymentEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ PaymentEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ PaymentEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ PaymentEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *PaymentEvent) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Reference}

		return w

	case 1:
		w := types.String{Target: &r.PaymentDate}

		return w

	case 2:
		w := types.String{Target: &r.Status}

		return w

	case 3:
		w := types.String{Target: &r.ServiceName}

		return w

	case 4:
		w := types.String{Target: &r.PaymentGatewayName}

		return w

	case 5:
		w := types.String{Target: &r.ExpectedAmount}

		return w

	case 6:
		w := types.String{Target: &r.ReceivedAmount}

		return w

	}
	panic("Unknown field index")
}

func (r *PaymentEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *PaymentEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ PaymentEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ PaymentEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ PaymentEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ PaymentEvent) Finalize()                        {}

func (_ PaymentEvent) AvroCRC64Fingerprint() []byte {
	return []byte(PaymentEventAvroCRC64Fingerprint)
}

func (r PaymentEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Reference"], err = json.Marshal(r.Reference)
	if err != nil {
		return nil, err
	}
	output["PaymentDate"], err = json.Marshal(r.PaymentDate)
	if err != nil {
		return nil, err
	}
	output["Status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	output["ServiceName"], err = json.Marshal(r.ServiceName)
	if err != nil {
		return nil, err
	}
	output["PaymentGatewayName"], err = json.Marshal(r.PaymentGatewayName)
	if err != nil {
		return nil, err
	}
	output["ExpectedAmount"], err = json.Marshal(r.ExpectedAmount)
	if err != nil {
		return nil, err
	}
	output["ReceivedAmount"], err = json.Marshal(r.ReceivedAmount)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *PaymentEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Reference"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Reference); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Reference")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PaymentDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PaymentDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PaymentDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Status")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ServiceName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ServiceName); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ServiceName")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PaymentGatewayName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PaymentGatewayName); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PaymentGatewayName")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ExpectedAmount"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ExpectedAmount); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ExpectedAmount")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ReceivedAmount"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ReceivedAmount); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ReceivedAmount")
	}
	return nil
}
