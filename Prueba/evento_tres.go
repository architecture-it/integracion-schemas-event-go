// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EventoTres.avsc
 */
package PruebaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EventoTres struct {
	IdTransaccion string `json:"idTransaccion"`

	Lineas *UnionNullLineas `json:"Lineas"`
}

const EventoTresAvroCRC64Fingerprint = "\x8b\x8c\xdbu\x1d;kV"

func NewEventoTres() EventoTres {
	r := EventoTres{}
	r.Lineas = nil
	return r
}

func DeserializeEventoTres(r io.Reader) (EventoTres, error) {
	t := NewEventoTres()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEventoTresFromSchema(r io.Reader, schema string) (EventoTres, error) {
	t := NewEventoTres()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEventoTres(r EventoTres, w io.Writer) error {
	var err error
	err = vm.WriteString(r.IdTransaccion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLineas(r.Lineas, w)
	if err != nil {
		return err
	}
	return err
}

func (r EventoTres) Serialize(w io.Writer) error {
	return writeEventoTres(r, w)
}

func (r EventoTres) Schema() string {
	return "{\"fields\":[{\"name\":\"idTransaccion\",\"type\":\"string\"},{\"default\":null,\"name\":\"Lineas\",\"type\":[\"null\",{\"fields\":[{\"name\":\"StructureId\",\"type\":\"int\"},{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"DateFrom\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"DateTo\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"Description\",\"type\":\"string\"},{\"default\":null,\"name\":\"ExternalId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"OtroObjeto\",\"type\":[\"null\",{\"fields\":[{\"name\":\"unNumeroDeTelefono\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]}],\"name\":\"Telefonos\",\"type\":\"record\"}]}],\"name\":\"Lineas\",\"namespace\":\"Andreani.Prueba.Events.Common\",\"type\":\"record\"}]}],\"name\":\"Andreani.Prueba.Events.Record.EventoTres\",\"type\":\"record\"}"
}

func (r EventoTres) SchemaName() string {
	return "Andreani.Prueba.Events.Record.EventoTres"
}

func (_ EventoTres) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EventoTres) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EventoTres) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EventoTres) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EventoTres) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EventoTres) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EventoTres) SetString(v string)   { panic("Unsupported operation") }
func (_ EventoTres) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EventoTres) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.IdTransaccion}

		return w

	case 1:
		r.Lineas = NewUnionNullLineas()

		return r.Lineas
	}
	panic("Unknown field index")
}

func (r *EventoTres) SetDefault(i int) {
	switch i {
	case 1:
		r.Lineas = nil
		return
	}
	panic("Unknown field index")
}

func (r *EventoTres) NullField(i int) {
	switch i {
	case 1:
		r.Lineas = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ EventoTres) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EventoTres) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EventoTres) HintSize(int)                     { panic("Unsupported operation") }
func (_ EventoTres) Finalize()                        {}

func (_ EventoTres) AvroCRC64Fingerprint() []byte {
	return []byte(EventoTresAvroCRC64Fingerprint)
}

func (r EventoTres) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["idTransaccion"], err = json.Marshal(r.IdTransaccion)
	if err != nil {
		return nil, err
	}
	output["Lineas"], err = json.Marshal(r.Lineas)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EventoTres) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["idTransaccion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdTransaccion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for idTransaccion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Lineas"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Lineas); err != nil {
			return err
		}
	} else {
		r.Lineas = NewUnionNullLineas()

		r.Lineas = nil
	}
	return nil
}
