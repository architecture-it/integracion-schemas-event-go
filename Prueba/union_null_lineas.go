// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EventoTres.avsc
 */
package PruebaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullLineasTypeEnum int

const (
	UnionNullLineasTypeEnumLineas UnionNullLineasTypeEnum = 1
)

type UnionNullLineas struct {
	Null      *types.NullVal
	Lineas    Lineas
	UnionType UnionNullLineasTypeEnum
}

func writeUnionNullLineas(r *UnionNullLineas, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullLineasTypeEnumLineas:
		return writeLineas(r.Lineas, w)
	}
	return fmt.Errorf("invalid value for *UnionNullLineas")
}

func NewUnionNullLineas() *UnionNullLineas {
	return &UnionNullLineas{}
}

func (r *UnionNullLineas) Serialize(w io.Writer) error {
	return writeUnionNullLineas(r, w)
}

func DeserializeUnionNullLineas(r io.Reader) (*UnionNullLineas, error) {
	t := NewUnionNullLineas()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullLineasFromSchema(r io.Reader, schema string) (*UnionNullLineas, error) {
	t := NewUnionNullLineas()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullLineas) Schema() string {
	return "[\"null\",{\"fields\":[{\"name\":\"StructureId\",\"type\":\"int\"},{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"DateFrom\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"DateTo\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"Description\",\"type\":\"string\"},{\"default\":null,\"name\":\"ExternalId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"OtroObjeto\",\"type\":[\"null\",{\"fields\":[{\"name\":\"unNumeroDeTelefono\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]}],\"name\":\"Telefonos\",\"type\":\"record\"}]}],\"name\":\"Lineas\",\"namespace\":\"Andreani.Prueba.Events.Common\",\"type\":\"record\"}]"
}

func (_ *UnionNullLineas) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullLineas) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullLineas) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullLineas) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullLineas) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullLineas) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullLineas) SetLong(v int64) {

	r.UnionType = (UnionNullLineasTypeEnum)(v)
}

func (r *UnionNullLineas) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.Lineas = NewLineas()
		return &types.Record{Target: (&r.Lineas)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullLineas) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionNullLineas) HintSize(i int)                   { panic("Unsupported operation") }
func (_ *UnionNullLineas) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionNullLineas) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullLineas) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionNullLineas) Finalize()                        {}

func (r *UnionNullLineas) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullLineasTypeEnumLineas:
		return json.Marshal(map[string]interface{}{"Andreani.Prueba.Events.Common.Lineas": r.Lineas})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullLineas")
}

func (r *UnionNullLineas) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["Andreani.Prueba.Events.Common.Lineas"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.Lineas)
	}
	return fmt.Errorf("invalid value for *UnionNullLineas")
}
