// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Telefonos.avsc
 */
package PruebaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Telefonos struct {
	UnNumeroDeTelefono *UnionNullArrayString `json:"unNumeroDeTelefono"`
}

const TelefonosAvroCRC64Fingerprint = "`N\xc9\x02\xab\xa8\x00\xc0"

func NewTelefonos() Telefonos {
	r := Telefonos{}
	return r
}

func DeserializeTelefonos(r io.Reader) (Telefonos, error) {
	t := NewTelefonos()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTelefonosFromSchema(r io.Reader, schema string) (Telefonos, error) {
	t := NewTelefonos()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTelefonos(r Telefonos, w io.Writer) error {
	var err error
	err = writeUnionNullArrayString(r.UnNumeroDeTelefono, w)
	if err != nil {
		return err
	}
	return err
}

func (r Telefonos) Serialize(w io.Writer) error {
	return writeTelefonos(r, w)
}

func (r Telefonos) Schema() string {
	return "{\"fields\":[{\"name\":\"unNumeroDeTelefono\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]}],\"name\":\"Andreani.Prueba.Events.Common.Telefonos\",\"type\":\"record\"}"
}

func (r Telefonos) SchemaName() string {
	return "Andreani.Prueba.Events.Common.Telefonos"
}

func (_ Telefonos) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Telefonos) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Telefonos) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Telefonos) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Telefonos) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Telefonos) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Telefonos) SetString(v string)   { panic("Unsupported operation") }
func (_ Telefonos) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Telefonos) Get(i int) types.Field {
	switch i {
	case 0:
		r.UnNumeroDeTelefono = NewUnionNullArrayString()

		return r.UnNumeroDeTelefono
	}
	panic("Unknown field index")
}

func (r *Telefonos) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Telefonos) NullField(i int) {
	switch i {
	case 0:
		r.UnNumeroDeTelefono = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Telefonos) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Telefonos) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Telefonos) HintSize(int)                     { panic("Unsupported operation") }
func (_ Telefonos) Finalize()                        {}

func (_ Telefonos) AvroCRC64Fingerprint() []byte {
	return []byte(TelefonosAvroCRC64Fingerprint)
}

func (r Telefonos) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["unNumeroDeTelefono"], err = json.Marshal(r.UnNumeroDeTelefono)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Telefonos) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["unNumeroDeTelefono"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UnNumeroDeTelefono); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for unNumeroDeTelefono")
	}
	return nil
}
