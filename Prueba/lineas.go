// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Lineas.avsc
 */
package PruebaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Lineas struct {
	StructureId int32 `json:"StructureId"`

	Id int32 `json:"Id"`

	DateFrom int64 `json:"DateFrom"`

	DateTo int64 `json:"DateTo"`

	Description string `json:"Description"`

	ExternalId *UnionNullString `json:"ExternalId"`

	OtroObjeto *UnionNullTelefonos `json:"OtroObjeto"`
}

const LineasAvroCRC64Fingerprint = "\x019\xe8m\x91\x95T\xb5"

func NewLineas() Lineas {
	r := Lineas{}
	r.ExternalId = nil
	r.OtroObjeto = nil
	return r
}

func DeserializeLineas(r io.Reader) (Lineas, error) {
	t := NewLineas()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeLineasFromSchema(r io.Reader, schema string) (Lineas, error) {
	t := NewLineas()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeLineas(r Lineas, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.StructureId, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.DateFrom, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.DateTo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Description, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ExternalId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullTelefonos(r.OtroObjeto, w)
	if err != nil {
		return err
	}
	return err
}

func (r Lineas) Serialize(w io.Writer) error {
	return writeLineas(r, w)
}

func (r Lineas) Schema() string {
	return "{\"fields\":[{\"name\":\"StructureId\",\"type\":\"int\"},{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"DateFrom\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"DateTo\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"Description\",\"type\":\"string\"},{\"default\":null,\"name\":\"ExternalId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"OtroObjeto\",\"type\":[\"null\",{\"fields\":[{\"name\":\"unNumeroDeTelefono\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]}],\"name\":\"Telefonos\",\"type\":\"record\"}]}],\"name\":\"Andreani.Prueba.Events.Common.Lineas\",\"type\":\"record\"}"
}

func (r Lineas) SchemaName() string {
	return "Andreani.Prueba.Events.Common.Lineas"
}

func (_ Lineas) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Lineas) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Lineas) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Lineas) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Lineas) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Lineas) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Lineas) SetString(v string)   { panic("Unsupported operation") }
func (_ Lineas) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Lineas) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.StructureId}

		return w

	case 1:
		w := types.Int{Target: &r.Id}

		return w

	case 2:
		w := types.Long{Target: &r.DateFrom}

		return w

	case 3:
		w := types.Long{Target: &r.DateTo}

		return w

	case 4:
		w := types.String{Target: &r.Description}

		return w

	case 5:
		r.ExternalId = NewUnionNullString()

		return r.ExternalId
	case 6:
		r.OtroObjeto = NewUnionNullTelefonos()

		return r.OtroObjeto
	}
	panic("Unknown field index")
}

func (r *Lineas) SetDefault(i int) {
	switch i {
	case 5:
		r.ExternalId = nil
		return
	case 6:
		r.OtroObjeto = nil
		return
	}
	panic("Unknown field index")
}

func (r *Lineas) NullField(i int) {
	switch i {
	case 5:
		r.ExternalId = nil
		return
	case 6:
		r.OtroObjeto = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Lineas) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Lineas) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Lineas) HintSize(int)                     { panic("Unsupported operation") }
func (_ Lineas) Finalize()                        {}

func (_ Lineas) AvroCRC64Fingerprint() []byte {
	return []byte(LineasAvroCRC64Fingerprint)
}

func (r Lineas) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["StructureId"], err = json.Marshal(r.StructureId)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["DateFrom"], err = json.Marshal(r.DateFrom)
	if err != nil {
		return nil, err
	}
	output["DateTo"], err = json.Marshal(r.DateTo)
	if err != nil {
		return nil, err
	}
	output["Description"], err = json.Marshal(r.Description)
	if err != nil {
		return nil, err
	}
	output["ExternalId"], err = json.Marshal(r.ExternalId)
	if err != nil {
		return nil, err
	}
	output["OtroObjeto"], err = json.Marshal(r.OtroObjeto)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Lineas) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["StructureId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StructureId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for StructureId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DateFrom"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DateFrom); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DateFrom")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DateTo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DateTo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DateTo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Description"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Description); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Description")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ExternalId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ExternalId); err != nil {
			return err
		}
	} else {
		r.ExternalId = NewUnionNullString()

		r.ExternalId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["OtroObjeto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OtroObjeto); err != nil {
			return err
		}
	} else {
		r.OtroObjeto = NewUnionNullTelefonos()

		r.OtroObjeto = nil
	}
	return nil
}
