// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ListInterfaceCECOS.avsc
 */
package CECOSInterfacesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type InterfaceCECOSData struct {
	Value string `json:"Value"`

	TranslatedValue string `json:"TranslatedValue"`

	Description string `json:"Description"`

	EnabledFlag string `json:"EnabledFlag"`

	ValueSetCode string `json:"ValueSetCode"`
}

const InterfaceCECOSDataAvroCRC64Fingerprint = "\xe7\x9e\xf4;!\xa4E\x86"

func NewInterfaceCECOSData() InterfaceCECOSData {
	r := InterfaceCECOSData{}
	return r
}

func DeserializeInterfaceCECOSData(r io.Reader) (InterfaceCECOSData, error) {
	t := NewInterfaceCECOSData()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeInterfaceCECOSDataFromSchema(r io.Reader, schema string) (InterfaceCECOSData, error) {
	t := NewInterfaceCECOSData()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeInterfaceCECOSData(r InterfaceCECOSData, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Value, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.TranslatedValue, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Description, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.EnabledFlag, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ValueSetCode, w)
	if err != nil {
		return err
	}
	return err
}

func (r InterfaceCECOSData) Serialize(w io.Writer) error {
	return writeInterfaceCECOSData(r, w)
}

func (r InterfaceCECOSData) Schema() string {
	return "{\"fields\":[{\"name\":\"Value\",\"type\":\"string\"},{\"name\":\"TranslatedValue\",\"type\":\"string\"},{\"name\":\"Description\",\"type\":\"string\"},{\"name\":\"EnabledFlag\",\"type\":\"string\"},{\"name\":\"ValueSetCode\",\"type\":\"string\"}],\"name\":\"Andreani.CECOSInterfaces.Events.Record.InterfaceCECOSData\",\"type\":\"record\"}"
}

func (r InterfaceCECOSData) SchemaName() string {
	return "Andreani.CECOSInterfaces.Events.Record.InterfaceCECOSData"
}

func (_ InterfaceCECOSData) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ InterfaceCECOSData) SetInt(v int32)       { panic("Unsupported operation") }
func (_ InterfaceCECOSData) SetLong(v int64)      { panic("Unsupported operation") }
func (_ InterfaceCECOSData) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ InterfaceCECOSData) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ InterfaceCECOSData) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ InterfaceCECOSData) SetString(v string)   { panic("Unsupported operation") }
func (_ InterfaceCECOSData) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *InterfaceCECOSData) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Value}

		return w

	case 1:
		w := types.String{Target: &r.TranslatedValue}

		return w

	case 2:
		w := types.String{Target: &r.Description}

		return w

	case 3:
		w := types.String{Target: &r.EnabledFlag}

		return w

	case 4:
		w := types.String{Target: &r.ValueSetCode}

		return w

	}
	panic("Unknown field index")
}

func (r *InterfaceCECOSData) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *InterfaceCECOSData) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ InterfaceCECOSData) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ InterfaceCECOSData) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ InterfaceCECOSData) HintSize(int)                     { panic("Unsupported operation") }
func (_ InterfaceCECOSData) Finalize()                        {}

func (_ InterfaceCECOSData) AvroCRC64Fingerprint() []byte {
	return []byte(InterfaceCECOSDataAvroCRC64Fingerprint)
}

func (r InterfaceCECOSData) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Value"], err = json.Marshal(r.Value)
	if err != nil {
		return nil, err
	}
	output["TranslatedValue"], err = json.Marshal(r.TranslatedValue)
	if err != nil {
		return nil, err
	}
	output["Description"], err = json.Marshal(r.Description)
	if err != nil {
		return nil, err
	}
	output["EnabledFlag"], err = json.Marshal(r.EnabledFlag)
	if err != nil {
		return nil, err
	}
	output["ValueSetCode"], err = json.Marshal(r.ValueSetCode)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *InterfaceCECOSData) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Value"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Value); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Value")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TranslatedValue"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TranslatedValue); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TranslatedValue")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Description"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Description); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Description")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EnabledFlag"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EnabledFlag); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EnabledFlag")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValueSetCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValueSetCode); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ValueSetCode")
	}
	return nil
}
