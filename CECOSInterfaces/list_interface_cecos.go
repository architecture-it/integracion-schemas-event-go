// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ListInterfaceCECOS.avsc
 */
package CECOSInterfacesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ListInterfaceCECOS struct {
	Interfaces []InterfaceCECOSData `json:"interfaces"`
}

const ListInterfaceCECOSAvroCRC64Fingerprint = "S\x05\xb2\xa9\x10Ó©\xab"

func NewListInterfaceCECOS() ListInterfaceCECOS {
	r := ListInterfaceCECOS{}
	r.Interfaces = make([]InterfaceCECOSData, 0)

	return r
}

func DeserializeListInterfaceCECOS(r io.Reader) (ListInterfaceCECOS, error) {
	t := NewListInterfaceCECOS()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeListInterfaceCECOSFromSchema(r io.Reader, schema string) (ListInterfaceCECOS, error) {
	t := NewListInterfaceCECOS()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeListInterfaceCECOS(r ListInterfaceCECOS, w io.Writer) error {
	var err error
	err = writeArrayInterfaceCECOSData(r.Interfaces, w)
	if err != nil {
		return err
	}
	return err
}

func (r ListInterfaceCECOS) Serialize(w io.Writer) error {
	return writeListInterfaceCECOS(r, w)
}

func (r ListInterfaceCECOS) Schema() string {
	return "{\"fields\":[{\"name\":\"interfaces\",\"type\":{\"items\":{\"fields\":[{\"name\":\"Value\",\"type\":\"string\"},{\"name\":\"TranslatedValue\",\"type\":\"string\"},{\"name\":\"Description\",\"type\":\"string\"},{\"name\":\"EnabledFlag\",\"type\":\"string\"},{\"name\":\"ValueSetCode\",\"type\":\"string\"}],\"name\":\"InterfaceCECOSData\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Andreani.CECOSInterfaces.Events.Record.ListInterfaceCECOS\",\"type\":\"record\"}"
}

func (r ListInterfaceCECOS) SchemaName() string {
	return "Andreani.CECOSInterfaces.Events.Record.ListInterfaceCECOS"
}

func (_ ListInterfaceCECOS) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ListInterfaceCECOS) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ListInterfaceCECOS) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ListInterfaceCECOS) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ListInterfaceCECOS) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ListInterfaceCECOS) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ListInterfaceCECOS) SetString(v string)   { panic("Unsupported operation") }
func (_ ListInterfaceCECOS) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ListInterfaceCECOS) Get(i int) types.Field {
	switch i {
	case 0:
		r.Interfaces = make([]InterfaceCECOSData, 0)

		w := ArrayInterfaceCECOSDataWrapper{Target: &r.Interfaces}

		return w

	}
	panic("Unknown field index")
}

func (r *ListInterfaceCECOS) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ListInterfaceCECOS) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ ListInterfaceCECOS) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ListInterfaceCECOS) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ListInterfaceCECOS) HintSize(int)                     { panic("Unsupported operation") }
func (_ ListInterfaceCECOS) Finalize()                        {}

func (_ ListInterfaceCECOS) AvroCRC64Fingerprint() []byte {
	return []byte(ListInterfaceCECOSAvroCRC64Fingerprint)
}

func (r ListInterfaceCECOS) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["interfaces"], err = json.Marshal(r.Interfaces)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ListInterfaceCECOS) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["interfaces"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Interfaces); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for interfaces")
	}
	return nil
}
