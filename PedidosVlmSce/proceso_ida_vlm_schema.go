// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ProcesoIdaVLMSchema.avsc
 */
package PedidosVlmSceEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ProcesoIdaVLMSchema struct {
	Cabecera Cabecera `json:"Cabecera"`

	PedidoDeVLM PedidoDeVLM `json:"PedidoDeVLM"`
}

const ProcesoIdaVLMSchemaAvroCRC64Fingerprint = "5\x17\xd2\x02\x13\x8f\xe0\x89"

func NewProcesoIdaVLMSchema() ProcesoIdaVLMSchema {
	r := ProcesoIdaVLMSchema{}
	r.Cabecera = NewCabecera()

	r.PedidoDeVLM = NewPedidoDeVLM()

	return r
}

func DeserializeProcesoIdaVLMSchema(r io.Reader) (ProcesoIdaVLMSchema, error) {
	t := NewProcesoIdaVLMSchema()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeProcesoIdaVLMSchemaFromSchema(r io.Reader, schema string) (ProcesoIdaVLMSchema, error) {
	t := NewProcesoIdaVLMSchema()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeProcesoIdaVLMSchema(r ProcesoIdaVLMSchema, w io.Writer) error {
	var err error
	err = writeCabecera(r.Cabecera, w)
	if err != nil {
		return err
	}
	err = writePedidoDeVLM(r.PedidoDeVLM, w)
	if err != nil {
		return err
	}
	return err
}

func (r ProcesoIdaVLMSchema) Serialize(w io.Writer) error {
	return writeProcesoIdaVLMSchema(r, w)
}

func (r ProcesoIdaVLMSchema) Schema() string {
	return "{\"fields\":[{\"name\":\"Cabecera\",\"type\":{\"fields\":[{\"name\":\"timestamp\",\"type\":\"string\"},{\"name\":\"remitente\",\"type\":\"string\"},{\"name\":\"destinatario\",\"type\":\"string\"},{\"name\":\"topic\",\"type\":\"string\"}],\"name\":\"Cabecera\",\"namespace\":\"Andreani.PedidosVlmSce.Events.ProcesoIda\",\"type\":\"record\"}},{\"name\":\"PedidoDeVLM\",\"type\":{\"fields\":[{\"name\":\"idPedido\",\"type\":\"string\"},{\"name\":\"descripcion\",\"type\":\"string\"},{\"name\":\"tipoOperacion\",\"type\":\"string\"},{\"name\":\"tipoEjecucion\",\"type\":\"string\"},{\"name\":\"prioridad\",\"type\":\"int\"},{\"name\":\"cliente\",\"type\":\"string\"},{\"name\":\"almacenDeOrigen\",\"type\":\"string\"},{\"name\":\"tipoPedido\",\"type\":\"string\"},{\"name\":\"detallesDePedido\",\"type\":{\"items\":{\"fields\":[{\"name\":\"articulo\",\"type\":{\"fields\":[{\"name\":\"codigo\",\"type\":\"string\"},{\"name\":\"propietario\",\"type\":\"string\"},{\"name\":\"lote\",\"type\":{\"fields\":[{\"name\":\"codigo\",\"type\":\"string\"},{\"name\":\"fechadeVencimiento\",\"type\":\"string\"}],\"name\":\"Lote\",\"type\":\"record\"}}],\"name\":\"Articulo\",\"type\":\"record\"}},{\"name\":\"unidades\",\"type\":\"int\"},{\"name\":\"categoriaDeUbicacionDeOrigen\",\"type\":\"string\"},{\"name\":\"idDeTarea\",\"type\":\"string\"},{\"name\":\"almacenDeOrigen\",\"type\":\"string\"},{\"name\":\"idPedido\",\"type\":\"string\"}],\"name\":\"DetallesDePedido\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"PedidoDeVLM\",\"namespace\":\"Andreani.PedidosVlmSce.Events.ProcesoIda\",\"type\":\"record\"}}],\"name\":\"Andreani.PedidosVlmSce.Events.Record.ProcesoIdaVLMSchema\",\"type\":\"record\"}"
}

func (r ProcesoIdaVLMSchema) SchemaName() string {
	return "Andreani.PedidosVlmSce.Events.Record.ProcesoIdaVLMSchema"
}

func (_ ProcesoIdaVLMSchema) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ProcesoIdaVLMSchema) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ProcesoIdaVLMSchema) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ProcesoIdaVLMSchema) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ProcesoIdaVLMSchema) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ProcesoIdaVLMSchema) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ProcesoIdaVLMSchema) SetString(v string)   { panic("Unsupported operation") }
func (_ ProcesoIdaVLMSchema) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ProcesoIdaVLMSchema) Get(i int) types.Field {
	switch i {
	case 0:
		r.Cabecera = NewCabecera()

		w := types.Record{Target: &r.Cabecera}

		return w

	case 1:
		r.PedidoDeVLM = NewPedidoDeVLM()

		w := types.Record{Target: &r.PedidoDeVLM}

		return w

	}
	panic("Unknown field index")
}

func (r *ProcesoIdaVLMSchema) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ProcesoIdaVLMSchema) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ ProcesoIdaVLMSchema) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ProcesoIdaVLMSchema) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ProcesoIdaVLMSchema) HintSize(int)                     { panic("Unsupported operation") }
func (_ ProcesoIdaVLMSchema) Finalize()                        {}

func (_ ProcesoIdaVLMSchema) AvroCRC64Fingerprint() []byte {
	return []byte(ProcesoIdaVLMSchemaAvroCRC64Fingerprint)
}

func (r ProcesoIdaVLMSchema) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Cabecera"], err = json.Marshal(r.Cabecera)
	if err != nil {
		return nil, err
	}
	output["PedidoDeVLM"], err = json.Marshal(r.PedidoDeVLM)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ProcesoIdaVLMSchema) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Cabecera"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cabecera); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Cabecera")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PedidoDeVLM"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PedidoDeVLM); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PedidoDeVLM")
	}
	return nil
}
