// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ProcesoVueltaVLMSchema.avsc
 */
package PedidosVlmSceEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type NovedadDePedidoDeVLMSolicitada struct {
	Timestamp string `json:"timestamp"`

	Remitente string `json:"remitente"`

	Destinatario string `json:"destinatario"`

	NumeroDeOrden string `json:"numeroDeOrden"`

	Vencimiento string `json:"vencimiento"`

	NovedadDePedidoDeVLM NovedadDePedidoDeVLM `json:"novedadDePedidoDeVLM"`
}

const NovedadDePedidoDeVLMSolicitadaAvroCRC64Fingerprint = "\x96\xf2\x01\xd9\x18a\x9f+"

func NewNovedadDePedidoDeVLMSolicitada() NovedadDePedidoDeVLMSolicitada {
	r := NovedadDePedidoDeVLMSolicitada{}
	r.NovedadDePedidoDeVLM = NewNovedadDePedidoDeVLM()

	return r
}

func DeserializeNovedadDePedidoDeVLMSolicitada(r io.Reader) (NovedadDePedidoDeVLMSolicitada, error) {
	t := NewNovedadDePedidoDeVLMSolicitada()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeNovedadDePedidoDeVLMSolicitadaFromSchema(r io.Reader, schema string) (NovedadDePedidoDeVLMSolicitada, error) {
	t := NewNovedadDePedidoDeVLMSolicitada()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeNovedadDePedidoDeVLMSolicitada(r NovedadDePedidoDeVLMSolicitada, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Timestamp, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Remitente, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Destinatario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NumeroDeOrden, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Vencimiento, w)
	if err != nil {
		return err
	}
	err = writeNovedadDePedidoDeVLM(r.NovedadDePedidoDeVLM, w)
	if err != nil {
		return err
	}
	return err
}

func (r NovedadDePedidoDeVLMSolicitada) Serialize(w io.Writer) error {
	return writeNovedadDePedidoDeVLMSolicitada(r, w)
}

func (r NovedadDePedidoDeVLMSolicitada) Schema() string {
	return "{\"fields\":[{\"name\":\"timestamp\",\"type\":\"string\"},{\"name\":\"remitente\",\"type\":\"string\"},{\"name\":\"destinatario\",\"type\":\"string\"},{\"name\":\"numeroDeOrden\",\"type\":\"string\"},{\"name\":\"vencimiento\",\"type\":\"string\"},{\"name\":\"novedadDePedidoDeVLM\",\"type\":{\"fields\":[{\"name\":\"idTarea\",\"type\":\"string\"},{\"name\":\"almacen\",\"type\":\"string\"},{\"name\":\"numeroContenedorInterno\",\"type\":\"string\"},{\"name\":\"identificadorDeCaja\",\"type\":\"string\"},{\"name\":\"unidades\",\"type\":\"int\"},{\"name\":\"esTareaNueva\",\"type\":\"boolean\"},{\"default\":null,\"name\":\"series\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]}],\"name\":\"NovedadDePedidoDeVLM\",\"type\":\"record\"}}],\"name\":\"Andreani.PedidosVlmSce.Events.ProcesoVuelta.NovedadDePedidoDeVLMSolicitada\",\"type\":\"record\"}"
}

func (r NovedadDePedidoDeVLMSolicitada) SchemaName() string {
	return "Andreani.PedidosVlmSce.Events.ProcesoVuelta.NovedadDePedidoDeVLMSolicitada"
}

func (_ NovedadDePedidoDeVLMSolicitada) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ NovedadDePedidoDeVLMSolicitada) SetInt(v int32)       { panic("Unsupported operation") }
func (_ NovedadDePedidoDeVLMSolicitada) SetLong(v int64)      { panic("Unsupported operation") }
func (_ NovedadDePedidoDeVLMSolicitada) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ NovedadDePedidoDeVLMSolicitada) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ NovedadDePedidoDeVLMSolicitada) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ NovedadDePedidoDeVLMSolicitada) SetString(v string)   { panic("Unsupported operation") }
func (_ NovedadDePedidoDeVLMSolicitada) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *NovedadDePedidoDeVLMSolicitada) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Timestamp}

		return w

	case 1:
		w := types.String{Target: &r.Remitente}

		return w

	case 2:
		w := types.String{Target: &r.Destinatario}

		return w

	case 3:
		w := types.String{Target: &r.NumeroDeOrden}

		return w

	case 4:
		w := types.String{Target: &r.Vencimiento}

		return w

	case 5:
		r.NovedadDePedidoDeVLM = NewNovedadDePedidoDeVLM()

		w := types.Record{Target: &r.NovedadDePedidoDeVLM}

		return w

	}
	panic("Unknown field index")
}

func (r *NovedadDePedidoDeVLMSolicitada) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *NovedadDePedidoDeVLMSolicitada) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ NovedadDePedidoDeVLMSolicitada) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ NovedadDePedidoDeVLMSolicitada) AppendArray() types.Field { panic("Unsupported operation") }
func (_ NovedadDePedidoDeVLMSolicitada) HintSize(int)             { panic("Unsupported operation") }
func (_ NovedadDePedidoDeVLMSolicitada) Finalize()                {}

func (_ NovedadDePedidoDeVLMSolicitada) AvroCRC64Fingerprint() []byte {
	return []byte(NovedadDePedidoDeVLMSolicitadaAvroCRC64Fingerprint)
}

func (r NovedadDePedidoDeVLMSolicitada) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["timestamp"], err = json.Marshal(r.Timestamp)
	if err != nil {
		return nil, err
	}
	output["remitente"], err = json.Marshal(r.Remitente)
	if err != nil {
		return nil, err
	}
	output["destinatario"], err = json.Marshal(r.Destinatario)
	if err != nil {
		return nil, err
	}
	output["numeroDeOrden"], err = json.Marshal(r.NumeroDeOrden)
	if err != nil {
		return nil, err
	}
	output["vencimiento"], err = json.Marshal(r.Vencimiento)
	if err != nil {
		return nil, err
	}
	output["novedadDePedidoDeVLM"], err = json.Marshal(r.NovedadDePedidoDeVLM)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *NovedadDePedidoDeVLMSolicitada) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["timestamp"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Timestamp); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for timestamp")
	}
	val = func() json.RawMessage {
		if v, ok := fields["remitente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Remitente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for remitente")
	}
	val = func() json.RawMessage {
		if v, ok := fields["destinatario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Destinatario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for destinatario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numeroDeOrden"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeOrden); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroDeOrden")
	}
	val = func() json.RawMessage {
		if v, ok := fields["vencimiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Vencimiento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for vencimiento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["novedadDePedidoDeVLM"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NovedadDePedidoDeVLM); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for novedadDePedidoDeVLM")
	}
	return nil
}
