// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ProcesoIdaVLMSchema.avsc
 */
package PedidosVlmSceEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DetallesDePedido struct {
	Articulo Articulo `json:"articulo"`

	Unidades int32 `json:"unidades"`

	CategoriaDeUbicacionDeOrigen string `json:"categoriaDeUbicacionDeOrigen"`

	IdDeTarea string `json:"idDeTarea"`

	AlmacenDeOrigen string `json:"almacenDeOrigen"`

	IdPedido string `json:"idPedido"`
}

const DetallesDePedidoAvroCRC64Fingerprint = "V\x86\xa2lvË„\xef"

func NewDetallesDePedido() DetallesDePedido {
	r := DetallesDePedido{}
	r.Articulo = NewArticulo()

	return r
}

func DeserializeDetallesDePedido(r io.Reader) (DetallesDePedido, error) {
	t := NewDetallesDePedido()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDetallesDePedidoFromSchema(r io.Reader, schema string) (DetallesDePedido, error) {
	t := NewDetallesDePedido()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDetallesDePedido(r DetallesDePedido, w io.Writer) error {
	var err error
	err = writeArticulo(r.Articulo, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Unidades, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CategoriaDeUbicacionDeOrigen, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.IdDeTarea, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.AlmacenDeOrigen, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.IdPedido, w)
	if err != nil {
		return err
	}
	return err
}

func (r DetallesDePedido) Serialize(w io.Writer) error {
	return writeDetallesDePedido(r, w)
}

func (r DetallesDePedido) Schema() string {
	return "{\"fields\":[{\"name\":\"articulo\",\"type\":{\"fields\":[{\"name\":\"codigo\",\"type\":\"string\"},{\"name\":\"propietario\",\"type\":\"string\"},{\"name\":\"lote\",\"type\":{\"fields\":[{\"name\":\"codigo\",\"type\":\"string\"},{\"name\":\"fechadeVencimiento\",\"type\":\"string\"}],\"name\":\"Lote\",\"type\":\"record\"}}],\"name\":\"Articulo\",\"type\":\"record\"}},{\"name\":\"unidades\",\"type\":\"int\"},{\"name\":\"categoriaDeUbicacionDeOrigen\",\"type\":\"string\"},{\"name\":\"idDeTarea\",\"type\":\"string\"},{\"name\":\"almacenDeOrigen\",\"type\":\"string\"},{\"name\":\"idPedido\",\"type\":\"string\"}],\"name\":\"Andreani.PedidosVLM.Events.ProcesoIda.DetallesDePedido\",\"type\":\"record\"}"
}

func (r DetallesDePedido) SchemaName() string {
	return "Andreani.PedidosVLM.Events.ProcesoIda.DetallesDePedido"
}

func (_ DetallesDePedido) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DetallesDePedido) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DetallesDePedido) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DetallesDePedido) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DetallesDePedido) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DetallesDePedido) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DetallesDePedido) SetString(v string)   { panic("Unsupported operation") }
func (_ DetallesDePedido) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DetallesDePedido) Get(i int) types.Field {
	switch i {
	case 0:
		r.Articulo = NewArticulo()

		w := types.Record{Target: &r.Articulo}

		return w

	case 1:
		w := types.Int{Target: &r.Unidades}

		return w

	case 2:
		w := types.String{Target: &r.CategoriaDeUbicacionDeOrigen}

		return w

	case 3:
		w := types.String{Target: &r.IdDeTarea}

		return w

	case 4:
		w := types.String{Target: &r.AlmacenDeOrigen}

		return w

	case 5:
		w := types.String{Target: &r.IdPedido}

		return w

	}
	panic("Unknown field index")
}

func (r *DetallesDePedido) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *DetallesDePedido) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ DetallesDePedido) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DetallesDePedido) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DetallesDePedido) HintSize(int)                     { panic("Unsupported operation") }
func (_ DetallesDePedido) Finalize()                        {}

func (_ DetallesDePedido) AvroCRC64Fingerprint() []byte {
	return []byte(DetallesDePedidoAvroCRC64Fingerprint)
}

func (r DetallesDePedido) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["articulo"], err = json.Marshal(r.Articulo)
	if err != nil {
		return nil, err
	}
	output["unidades"], err = json.Marshal(r.Unidades)
	if err != nil {
		return nil, err
	}
	output["categoriaDeUbicacionDeOrigen"], err = json.Marshal(r.CategoriaDeUbicacionDeOrigen)
	if err != nil {
		return nil, err
	}
	output["idDeTarea"], err = json.Marshal(r.IdDeTarea)
	if err != nil {
		return nil, err
	}
	output["almacenDeOrigen"], err = json.Marshal(r.AlmacenDeOrigen)
	if err != nil {
		return nil, err
	}
	output["idPedido"], err = json.Marshal(r.IdPedido)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DetallesDePedido) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["articulo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Articulo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for articulo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["unidades"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Unidades); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for unidades")
	}
	val = func() json.RawMessage {
		if v, ok := fields["categoriaDeUbicacionDeOrigen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CategoriaDeUbicacionDeOrigen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for categoriaDeUbicacionDeOrigen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["idDeTarea"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdDeTarea); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for idDeTarea")
	}
	val = func() json.RawMessage {
		if v, ok := fields["almacenDeOrigen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AlmacenDeOrigen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for almacenDeOrigen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["idPedido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdPedido); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for idPedido")
	}
	return nil
}
