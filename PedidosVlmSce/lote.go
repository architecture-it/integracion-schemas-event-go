// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ProcesoIdaVLMSchema.avsc
 */
package PedidosVlmSceEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Lote struct {
	Codigo string `json:"codigo"`

	FechadeVencimiento string `json:"fechadeVencimiento"`
}

const LoteAvroCRC64Fingerprint = "\xa7{2\xcf\xc9\xeb\x83\n"

func NewLote() Lote {
	r := Lote{}
	return r
}

func DeserializeLote(r io.Reader) (Lote, error) {
	t := NewLote()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeLoteFromSchema(r io.Reader, schema string) (Lote, error) {
	t := NewLote()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeLote(r Lote, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Codigo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.FechadeVencimiento, w)
	if err != nil {
		return err
	}
	return err
}

func (r Lote) Serialize(w io.Writer) error {
	return writeLote(r, w)
}

func (r Lote) Schema() string {
	return "{\"fields\":[{\"name\":\"codigo\",\"type\":\"string\"},{\"name\":\"fechadeVencimiento\",\"type\":\"string\"}],\"name\":\"Andreani.PedidosVLM.Events.ProcesoIda.Lote\",\"type\":\"record\"}"
}

func (r Lote) SchemaName() string {
	return "Andreani.PedidosVLM.Events.ProcesoIda.Lote"
}

func (_ Lote) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Lote) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Lote) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Lote) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Lote) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Lote) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Lote) SetString(v string)   { panic("Unsupported operation") }
func (_ Lote) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Lote) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Codigo}

		return w

	case 1:
		w := types.String{Target: &r.FechadeVencimiento}

		return w

	}
	panic("Unknown field index")
}

func (r *Lote) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Lote) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Lote) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Lote) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Lote) HintSize(int)                     { panic("Unsupported operation") }
func (_ Lote) Finalize()                        {}

func (_ Lote) AvroCRC64Fingerprint() []byte {
	return []byte(LoteAvroCRC64Fingerprint)
}

func (r Lote) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["codigo"], err = json.Marshal(r.Codigo)
	if err != nil {
		return nil, err
	}
	output["fechadeVencimiento"], err = json.Marshal(r.FechadeVencimiento)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Lote) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["codigo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Codigo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for codigo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechadeVencimiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechadeVencimiento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fechadeVencimiento")
	}
	return nil
}
