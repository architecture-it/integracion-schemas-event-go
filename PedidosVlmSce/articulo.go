// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ProcesoIdaVLMSchema.avsc
 */
package PedidosVlmSceEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Articulo struct {
	Codigo string `json:"codigo"`

	Propietario string `json:"propietario"`

	Lote Lote `json:"lote"`
}

const ArticuloAvroCRC64Fingerprint = "\x0f\xb5\x18\xa1 -\x93M"

func NewArticulo() Articulo {
	r := Articulo{}
	r.Lote = NewLote()

	return r
}

func DeserializeArticulo(r io.Reader) (Articulo, error) {
	t := NewArticulo()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeArticuloFromSchema(r io.Reader, schema string) (Articulo, error) {
	t := NewArticulo()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeArticulo(r Articulo, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Codigo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Propietario, w)
	if err != nil {
		return err
	}
	err = writeLote(r.Lote, w)
	if err != nil {
		return err
	}
	return err
}

func (r Articulo) Serialize(w io.Writer) error {
	return writeArticulo(r, w)
}

func (r Articulo) Schema() string {
	return "{\"fields\":[{\"name\":\"codigo\",\"type\":\"string\"},{\"name\":\"propietario\",\"type\":\"string\"},{\"name\":\"lote\",\"type\":{\"fields\":[{\"name\":\"codigo\",\"type\":\"string\"},{\"name\":\"fechadeVencimiento\",\"type\":\"string\"}],\"name\":\"Lote\",\"type\":\"record\"}}],\"name\":\"Andreani.PedidosVLM.Events.ProcesoIda.Articulo\",\"type\":\"record\"}"
}

func (r Articulo) SchemaName() string {
	return "Andreani.PedidosVLM.Events.ProcesoIda.Articulo"
}

func (_ Articulo) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Articulo) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Articulo) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Articulo) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Articulo) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Articulo) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Articulo) SetString(v string)   { panic("Unsupported operation") }
func (_ Articulo) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Articulo) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Codigo}

		return w

	case 1:
		w := types.String{Target: &r.Propietario}

		return w

	case 2:
		r.Lote = NewLote()

		w := types.Record{Target: &r.Lote}

		return w

	}
	panic("Unknown field index")
}

func (r *Articulo) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Articulo) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Articulo) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Articulo) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Articulo) HintSize(int)                     { panic("Unsupported operation") }
func (_ Articulo) Finalize()                        {}

func (_ Articulo) AvroCRC64Fingerprint() []byte {
	return []byte(ArticuloAvroCRC64Fingerprint)
}

func (r Articulo) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["codigo"], err = json.Marshal(r.Codigo)
	if err != nil {
		return nil, err
	}
	output["propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["lote"], err = json.Marshal(r.Lote)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Articulo) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["codigo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Codigo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for codigo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for propietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["lote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Lote); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for lote")
	}
	return nil
}
