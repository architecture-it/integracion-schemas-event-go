// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Email.avsc
 */
package CartaDocumentoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Email struct {
	Destinatario string `json:"Destinatario"`

	NombreDestinatario string `json:"NombreDestinatario"`

	Estado string `json:"Estado"`

	MotivoRechazo *UnionNullString `json:"MotivoRechazo"`
}

const EmailAvroCRC64Fingerprint = "\x94æ¿¯&!\xeb\f"

func NewEmail() Email {
	r := Email{}
	r.MotivoRechazo = nil
	return r
}

func DeserializeEmail(r io.Reader) (Email, error) {
	t := NewEmail()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEmailFromSchema(r io.Reader, schema string) (Email, error) {
	t := NewEmail()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEmail(r Email, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Destinatario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NombreDestinatario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Estado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MotivoRechazo, w)
	if err != nil {
		return err
	}
	return err
}

func (r Email) Serialize(w io.Writer) error {
	return writeEmail(r, w)
}

func (r Email) Schema() string {
	return "{\"fields\":[{\"name\":\"Destinatario\",\"type\":\"string\"},{\"name\":\"NombreDestinatario\",\"type\":\"string\"},{\"name\":\"Estado\",\"type\":\"string\"},{\"default\":null,\"name\":\"MotivoRechazo\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.CartaDocumento.Events.Record.Email\",\"type\":\"record\"}"
}

func (r Email) SchemaName() string {
	return "Andreani.CartaDocumento.Events.Record.Email"
}

func (_ Email) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Email) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Email) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Email) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Email) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Email) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Email) SetString(v string)   { panic("Unsupported operation") }
func (_ Email) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Email) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Destinatario}

		return w

	case 1:
		w := types.String{Target: &r.NombreDestinatario}

		return w

	case 2:
		w := types.String{Target: &r.Estado}

		return w

	case 3:
		r.MotivoRechazo = NewUnionNullString()

		return r.MotivoRechazo
	}
	panic("Unknown field index")
}

func (r *Email) SetDefault(i int) {
	switch i {
	case 3:
		r.MotivoRechazo = nil
		return
	}
	panic("Unknown field index")
}

func (r *Email) NullField(i int) {
	switch i {
	case 3:
		r.MotivoRechazo = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Email) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Email) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Email) HintSize(int)                     { panic("Unsupported operation") }
func (_ Email) Finalize()                        {}

func (_ Email) AvroCRC64Fingerprint() []byte {
	return []byte(EmailAvroCRC64Fingerprint)
}

func (r Email) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Destinatario"], err = json.Marshal(r.Destinatario)
	if err != nil {
		return nil, err
	}
	output["NombreDestinatario"], err = json.Marshal(r.NombreDestinatario)
	if err != nil {
		return nil, err
	}
	output["Estado"], err = json.Marshal(r.Estado)
	if err != nil {
		return nil, err
	}
	output["MotivoRechazo"], err = json.Marshal(r.MotivoRechazo)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Email) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Destinatario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Destinatario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Destinatario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NombreDestinatario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NombreDestinatario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NombreDestinatario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Estado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Estado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MotivoRechazo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MotivoRechazo); err != nil {
			return err
		}
	} else {
		r.MotivoRechazo = NewUnionNullString()

		r.MotivoRechazo = nil
	}
	return nil
}
