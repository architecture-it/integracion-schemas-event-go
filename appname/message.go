// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Message.avsc
 */
package appnameEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Message struct {
	Subject *UnionNullString `json:"Subject"`

	Body *UnionNullString `json:"Body"`

	From *UnionNullString `json:"From"`

	To *UnionNullString `json:"To"`
}

const MessageAvroCRC64Fingerprint = "\x0e\x8c \x8cw\xfa^\x18"

func NewMessage() Message {
	r := Message{}
	r.Subject = nil
	r.Body = nil
	r.From = nil
	r.To = nil
	return r
}

func DeserializeMessage(r io.Reader) (Message, error) {
	t := NewMessage()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeMessageFromSchema(r io.Reader, schema string) (Message, error) {
	t := NewMessage()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeMessage(r Message, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Subject, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Body, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.From, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.To, w)
	if err != nil {
		return err
	}
	return err
}

func (r Message) Serialize(w io.Writer) error {
	return writeMessage(r, w)
}

func (r Message) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Subject\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Body\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"From\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"To\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.Messages.Events.Record.Message\",\"type\":\"record\"}"
}

func (r Message) SchemaName() string {
	return "Andreani.Messages.Events.Record.Message"
}

func (_ Message) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Message) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Message) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Message) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Message) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Message) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Message) SetString(v string)   { panic("Unsupported operation") }
func (_ Message) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Message) Get(i int) types.Field {
	switch i {
	case 0:
		r.Subject = NewUnionNullString()

		return r.Subject
	case 1:
		r.Body = NewUnionNullString()

		return r.Body
	case 2:
		r.From = NewUnionNullString()

		return r.From
	case 3:
		r.To = NewUnionNullString()

		return r.To
	}
	panic("Unknown field index")
}

func (r *Message) SetDefault(i int) {
	switch i {
	case 0:
		r.Subject = nil
		return
	case 1:
		r.Body = nil
		return
	case 2:
		r.From = nil
		return
	case 3:
		r.To = nil
		return
	}
	panic("Unknown field index")
}

func (r *Message) NullField(i int) {
	switch i {
	case 0:
		r.Subject = nil
		return
	case 1:
		r.Body = nil
		return
	case 2:
		r.From = nil
		return
	case 3:
		r.To = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Message) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Message) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Message) HintSize(int)                     { panic("Unsupported operation") }
func (_ Message) Finalize()                        {}

func (_ Message) AvroCRC64Fingerprint() []byte {
	return []byte(MessageAvroCRC64Fingerprint)
}

func (r Message) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Subject"], err = json.Marshal(r.Subject)
	if err != nil {
		return nil, err
	}
	output["Body"], err = json.Marshal(r.Body)
	if err != nil {
		return nil, err
	}
	output["From"], err = json.Marshal(r.From)
	if err != nil {
		return nil, err
	}
	output["To"], err = json.Marshal(r.To)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Message) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Subject"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Subject); err != nil {
			return err
		}
	} else {
		r.Subject = NewUnionNullString()

		r.Subject = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Body"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Body); err != nil {
			return err
		}
	} else {
		r.Body = NewUnionNullString()

		r.Body = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["From"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.From); err != nil {
			return err
		}
	} else {
		r.From = NewUnionNullString()

		r.From = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["To"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.To); err != nil {
			return err
		}
	} else {
		r.To = NewUnionNullString()

		r.To = nil
	}
	return nil
}
