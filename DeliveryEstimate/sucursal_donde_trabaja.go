// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Transportista.avsc
 */
package DeliveryEstimateEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SucursalDondeTrabaja struct {
	CodigoAlertran *UnionNullString `json:"codigoAlertran"`

	CodigoIntegra *UnionNullString `json:"codigoIntegra"`

	Id *UnionNullString `json:"id"`

	Nombre *UnionNullString `json:"nombre"`
}

const SucursalDondeTrabajaAvroCRC64Fingerprint = "`\x95\xa1\xa3\xebl#\xb8"

func NewSucursalDondeTrabaja() SucursalDondeTrabaja {
	r := SucursalDondeTrabaja{}
	r.CodigoAlertran = nil
	r.CodigoIntegra = nil
	r.Id = nil
	r.Nombre = nil
	return r
}

func DeserializeSucursalDondeTrabaja(r io.Reader) (SucursalDondeTrabaja, error) {
	t := NewSucursalDondeTrabaja()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSucursalDondeTrabajaFromSchema(r io.Reader, schema string) (SucursalDondeTrabaja, error) {
	t := NewSucursalDondeTrabaja()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSucursalDondeTrabaja(r SucursalDondeTrabaja, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.CodigoAlertran, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoIntegra, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Nombre, w)
	if err != nil {
		return err
	}
	return err
}

func (r SucursalDondeTrabaja) Serialize(w io.Writer) error {
	return writeSucursalDondeTrabaja(r, w)
}

func (r SucursalDondeTrabaja) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"codigoAlertran\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"codigoIntegra\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"nombre\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.DeliveryEstimate.Events.Records.SucursalDondeTrabaja\",\"type\":\"record\"}"
}

func (r SucursalDondeTrabaja) SchemaName() string {
	return "Andreani.DeliveryEstimate.Events.Records.SucursalDondeTrabaja"
}

func (_ SucursalDondeTrabaja) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ SucursalDondeTrabaja) SetInt(v int32)       { panic("Unsupported operation") }
func (_ SucursalDondeTrabaja) SetLong(v int64)      { panic("Unsupported operation") }
func (_ SucursalDondeTrabaja) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ SucursalDondeTrabaja) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ SucursalDondeTrabaja) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ SucursalDondeTrabaja) SetString(v string)   { panic("Unsupported operation") }
func (_ SucursalDondeTrabaja) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SucursalDondeTrabaja) Get(i int) types.Field {
	switch i {
	case 0:
		r.CodigoAlertran = NewUnionNullString()

		return r.CodigoAlertran
	case 1:
		r.CodigoIntegra = NewUnionNullString()

		return r.CodigoIntegra
	case 2:
		r.Id = NewUnionNullString()

		return r.Id
	case 3:
		r.Nombre = NewUnionNullString()

		return r.Nombre
	}
	panic("Unknown field index")
}

func (r *SucursalDondeTrabaja) SetDefault(i int) {
	switch i {
	case 0:
		r.CodigoAlertran = nil
		return
	case 1:
		r.CodigoIntegra = nil
		return
	case 2:
		r.Id = nil
		return
	case 3:
		r.Nombre = nil
		return
	}
	panic("Unknown field index")
}

func (r *SucursalDondeTrabaja) NullField(i int) {
	switch i {
	case 0:
		r.CodigoAlertran = nil
		return
	case 1:
		r.CodigoIntegra = nil
		return
	case 2:
		r.Id = nil
		return
	case 3:
		r.Nombre = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ SucursalDondeTrabaja) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ SucursalDondeTrabaja) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ SucursalDondeTrabaja) HintSize(int)                     { panic("Unsupported operation") }
func (_ SucursalDondeTrabaja) Finalize()                        {}

func (_ SucursalDondeTrabaja) AvroCRC64Fingerprint() []byte {
	return []byte(SucursalDondeTrabajaAvroCRC64Fingerprint)
}

func (r SucursalDondeTrabaja) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["codigoAlertran"], err = json.Marshal(r.CodigoAlertran)
	if err != nil {
		return nil, err
	}
	output["codigoIntegra"], err = json.Marshal(r.CodigoIntegra)
	if err != nil {
		return nil, err
	}
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["nombre"], err = json.Marshal(r.Nombre)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *SucursalDondeTrabaja) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["codigoAlertran"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoAlertran); err != nil {
			return err
		}
	} else {
		r.CodigoAlertran = NewUnionNullString()

		r.CodigoAlertran = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoIntegra"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoIntegra); err != nil {
			return err
		}
	} else {
		r.CodigoIntegra = NewUnionNullString()

		r.CodigoIntegra = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		r.Id = NewUnionNullString()

		r.Id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["nombre"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nombre); err != nil {
			return err
		}
	} else {
		r.Nombre = NewUnionNullString()

		r.Nombre = nil
	}
	return nil
}
