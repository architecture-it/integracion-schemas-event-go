// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ERA.avsc
 */
package DeliveryEstimateEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CalculoEra struct {
	OrdenDeEnvioEnHR *UnionNullInt `json:"ordenDeEnvioEnHR"`

	NumeroHojaDeRuta *UnionNullString `json:"numeroHojaDeRuta"`

	Geocoordenadas *UnionNullString `json:"geocoordenadas"`

	RecorridoEnSegundos *UnionNullDouble `json:"recorridoEnSegundos"`

	RecorridoEnMetros *UnionNullDouble `json:"recorridoEnMetros"`

	DemoraEnDomicilioEnMinutos *UnionNullInt `json:"demoraEnDomicilioEnMinutos"`

	DemoraSalidaSucursalEnMinutos *UnionNullInt `json:"demoraSalidaSucursalEnMinutos"`

	EraAnterior *UnionNullLong `json:"eraAnterior"`

	FechaCreacionHojaDeRuta *UnionNullLong `json:"fechaCreacionHojaDeRuta"`
}

const CalculoEraAvroCRC64Fingerprint = "\xe3\x7f\x8d\xc1\xf5\xd4\xcan"

func NewCalculoEra() CalculoEra {
	r := CalculoEra{}
	r.OrdenDeEnvioEnHR = nil
	r.NumeroHojaDeRuta = nil
	r.Geocoordenadas = nil
	r.RecorridoEnSegundos = nil
	r.RecorridoEnMetros = nil
	r.DemoraEnDomicilioEnMinutos = nil
	r.DemoraSalidaSucursalEnMinutos = nil
	r.EraAnterior = nil
	r.FechaCreacionHojaDeRuta = nil
	return r
}

func DeserializeCalculoEra(r io.Reader) (CalculoEra, error) {
	t := NewCalculoEra()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCalculoEraFromSchema(r io.Reader, schema string) (CalculoEra, error) {
	t := NewCalculoEra()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCalculoEra(r CalculoEra, w io.Writer) error {
	var err error
	err = writeUnionNullInt(r.OrdenDeEnvioEnHR, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NumeroHojaDeRuta, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Geocoordenadas, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.RecorridoEnSegundos, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.RecorridoEnMetros, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.DemoraEnDomicilioEnMinutos, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.DemoraSalidaSucursalEnMinutos, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.EraAnterior, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaCreacionHojaDeRuta, w)
	if err != nil {
		return err
	}
	return err
}

func (r CalculoEra) Serialize(w io.Writer) error {
	return writeCalculoEra(r, w)
}

func (r CalculoEra) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"ordenDeEnvioEnHR\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"numeroHojaDeRuta\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"geocoordenadas\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"recorridoEnSegundos\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"recorridoEnMetros\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"demoraEnDomicilioEnMinutos\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"demoraSalidaSucursalEnMinutos\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"eraAnterior\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"fechaCreacionHojaDeRuta\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]}],\"name\":\"Andreani.DeliveryEstimate.Events.Records.CalculoEra\",\"type\":\"record\"}"
}

func (r CalculoEra) SchemaName() string {
	return "Andreani.DeliveryEstimate.Events.Records.CalculoEra"
}

func (_ CalculoEra) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CalculoEra) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CalculoEra) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CalculoEra) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CalculoEra) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CalculoEra) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CalculoEra) SetString(v string)   { panic("Unsupported operation") }
func (_ CalculoEra) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CalculoEra) Get(i int) types.Field {
	switch i {
	case 0:
		r.OrdenDeEnvioEnHR = NewUnionNullInt()

		return r.OrdenDeEnvioEnHR
	case 1:
		r.NumeroHojaDeRuta = NewUnionNullString()

		return r.NumeroHojaDeRuta
	case 2:
		r.Geocoordenadas = NewUnionNullString()

		return r.Geocoordenadas
	case 3:
		r.RecorridoEnSegundos = NewUnionNullDouble()

		return r.RecorridoEnSegundos
	case 4:
		r.RecorridoEnMetros = NewUnionNullDouble()

		return r.RecorridoEnMetros
	case 5:
		r.DemoraEnDomicilioEnMinutos = NewUnionNullInt()

		return r.DemoraEnDomicilioEnMinutos
	case 6:
		r.DemoraSalidaSucursalEnMinutos = NewUnionNullInt()

		return r.DemoraSalidaSucursalEnMinutos
	case 7:
		r.EraAnterior = NewUnionNullLong()

		return r.EraAnterior
	case 8:
		r.FechaCreacionHojaDeRuta = NewUnionNullLong()

		return r.FechaCreacionHojaDeRuta
	}
	panic("Unknown field index")
}

func (r *CalculoEra) SetDefault(i int) {
	switch i {
	case 0:
		r.OrdenDeEnvioEnHR = nil
		return
	case 1:
		r.NumeroHojaDeRuta = nil
		return
	case 2:
		r.Geocoordenadas = nil
		return
	case 3:
		r.RecorridoEnSegundos = nil
		return
	case 4:
		r.RecorridoEnMetros = nil
		return
	case 5:
		r.DemoraEnDomicilioEnMinutos = nil
		return
	case 6:
		r.DemoraSalidaSucursalEnMinutos = nil
		return
	case 7:
		r.EraAnterior = nil
		return
	case 8:
		r.FechaCreacionHojaDeRuta = nil
		return
	}
	panic("Unknown field index")
}

func (r *CalculoEra) NullField(i int) {
	switch i {
	case 0:
		r.OrdenDeEnvioEnHR = nil
		return
	case 1:
		r.NumeroHojaDeRuta = nil
		return
	case 2:
		r.Geocoordenadas = nil
		return
	case 3:
		r.RecorridoEnSegundos = nil
		return
	case 4:
		r.RecorridoEnMetros = nil
		return
	case 5:
		r.DemoraEnDomicilioEnMinutos = nil
		return
	case 6:
		r.DemoraSalidaSucursalEnMinutos = nil
		return
	case 7:
		r.EraAnterior = nil
		return
	case 8:
		r.FechaCreacionHojaDeRuta = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ CalculoEra) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CalculoEra) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CalculoEra) HintSize(int)                     { panic("Unsupported operation") }
func (_ CalculoEra) Finalize()                        {}

func (_ CalculoEra) AvroCRC64Fingerprint() []byte {
	return []byte(CalculoEraAvroCRC64Fingerprint)
}

func (r CalculoEra) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["ordenDeEnvioEnHR"], err = json.Marshal(r.OrdenDeEnvioEnHR)
	if err != nil {
		return nil, err
	}
	output["numeroHojaDeRuta"], err = json.Marshal(r.NumeroHojaDeRuta)
	if err != nil {
		return nil, err
	}
	output["geocoordenadas"], err = json.Marshal(r.Geocoordenadas)
	if err != nil {
		return nil, err
	}
	output["recorridoEnSegundos"], err = json.Marshal(r.RecorridoEnSegundos)
	if err != nil {
		return nil, err
	}
	output["recorridoEnMetros"], err = json.Marshal(r.RecorridoEnMetros)
	if err != nil {
		return nil, err
	}
	output["demoraEnDomicilioEnMinutos"], err = json.Marshal(r.DemoraEnDomicilioEnMinutos)
	if err != nil {
		return nil, err
	}
	output["demoraSalidaSucursalEnMinutos"], err = json.Marshal(r.DemoraSalidaSucursalEnMinutos)
	if err != nil {
		return nil, err
	}
	output["eraAnterior"], err = json.Marshal(r.EraAnterior)
	if err != nil {
		return nil, err
	}
	output["fechaCreacionHojaDeRuta"], err = json.Marshal(r.FechaCreacionHojaDeRuta)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CalculoEra) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["ordenDeEnvioEnHR"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrdenDeEnvioEnHR); err != nil {
			return err
		}
	} else {
		r.OrdenDeEnvioEnHR = NewUnionNullInt()

		r.OrdenDeEnvioEnHR = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["numeroHojaDeRuta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroHojaDeRuta); err != nil {
			return err
		}
	} else {
		r.NumeroHojaDeRuta = NewUnionNullString()

		r.NumeroHojaDeRuta = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["geocoordenadas"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Geocoordenadas); err != nil {
			return err
		}
	} else {
		r.Geocoordenadas = NewUnionNullString()

		r.Geocoordenadas = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["recorridoEnSegundos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RecorridoEnSegundos); err != nil {
			return err
		}
	} else {
		r.RecorridoEnSegundos = NewUnionNullDouble()

		r.RecorridoEnSegundos = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["recorridoEnMetros"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RecorridoEnMetros); err != nil {
			return err
		}
	} else {
		r.RecorridoEnMetros = NewUnionNullDouble()

		r.RecorridoEnMetros = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["demoraEnDomicilioEnMinutos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DemoraEnDomicilioEnMinutos); err != nil {
			return err
		}
	} else {
		r.DemoraEnDomicilioEnMinutos = NewUnionNullInt()

		r.DemoraEnDomicilioEnMinutos = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["demoraSalidaSucursalEnMinutos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DemoraSalidaSucursalEnMinutos); err != nil {
			return err
		}
	} else {
		r.DemoraSalidaSucursalEnMinutos = NewUnionNullInt()

		r.DemoraSalidaSucursalEnMinutos = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["eraAnterior"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EraAnterior); err != nil {
			return err
		}
	} else {
		r.EraAnterior = NewUnionNullLong()

		r.EraAnterior = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaCreacionHojaDeRuta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaCreacionHojaDeRuta); err != nil {
			return err
		}
	} else {
		r.FechaCreacionHojaDeRuta = NewUnionNullLong()

		r.FechaCreacionHojaDeRuta = nil
	}
	return nil
}
