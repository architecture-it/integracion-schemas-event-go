// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     SucursalDistribucion.avsc
 */
package DeliveryEstimateEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SucursalDistribucion struct {
	Id *UnionNullInt `json:"id"`

	IdSucursal *UnionNullInt `json:"idSucursal"`

	Codigo *UnionNullString `json:"codigo"`

	Descripcion *UnionNullString `json:"descripcion"`

	Direccion *UnionNullString `json:"direccion"`

	HorarioAtencion *UnionNullString `json:"horarioAtencion"`

	CodigoPostal *UnionNullString `json:"codigoPostal"`
}

const SucursalDistribucionAvroCRC64Fingerprint = "\xc4Rn\rHz\x01\""

func NewSucursalDistribucion() SucursalDistribucion {
	r := SucursalDistribucion{}
	r.Id = nil
	r.IdSucursal = nil
	r.Codigo = nil
	r.Descripcion = nil
	r.Direccion = nil
	r.HorarioAtencion = nil
	r.CodigoPostal = nil
	return r
}

func DeserializeSucursalDistribucion(r io.Reader) (SucursalDistribucion, error) {
	t := NewSucursalDistribucion()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSucursalDistribucionFromSchema(r io.Reader, schema string) (SucursalDistribucion, error) {
	t := NewSucursalDistribucion()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSucursalDistribucion(r SucursalDistribucion, w io.Writer) error {
	var err error
	err = writeUnionNullInt(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.IdSucursal, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Codigo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Descripcion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Direccion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.HorarioAtencion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoPostal, w)
	if err != nil {
		return err
	}
	return err
}

func (r SucursalDistribucion) Serialize(w io.Writer) error {
	return writeSucursalDistribucion(r, w)
}

func (r SucursalDistribucion) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"id\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"idSucursal\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"codigo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"descripcion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"direccion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"horarioAtencion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"codigoPostal\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.DeliveryEstimate.Events.Records.SucursalDistribucion\",\"type\":\"record\"}"
}

func (r SucursalDistribucion) SchemaName() string {
	return "Andreani.DeliveryEstimate.Events.Records.SucursalDistribucion"
}

func (_ SucursalDistribucion) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ SucursalDistribucion) SetInt(v int32)       { panic("Unsupported operation") }
func (_ SucursalDistribucion) SetLong(v int64)      { panic("Unsupported operation") }
func (_ SucursalDistribucion) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ SucursalDistribucion) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ SucursalDistribucion) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ SucursalDistribucion) SetString(v string)   { panic("Unsupported operation") }
func (_ SucursalDistribucion) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SucursalDistribucion) Get(i int) types.Field {
	switch i {
	case 0:
		r.Id = NewUnionNullInt()

		return r.Id
	case 1:
		r.IdSucursal = NewUnionNullInt()

		return r.IdSucursal
	case 2:
		r.Codigo = NewUnionNullString()

		return r.Codigo
	case 3:
		r.Descripcion = NewUnionNullString()

		return r.Descripcion
	case 4:
		r.Direccion = NewUnionNullString()

		return r.Direccion
	case 5:
		r.HorarioAtencion = NewUnionNullString()

		return r.HorarioAtencion
	case 6:
		r.CodigoPostal = NewUnionNullString()

		return r.CodigoPostal
	}
	panic("Unknown field index")
}

func (r *SucursalDistribucion) SetDefault(i int) {
	switch i {
	case 0:
		r.Id = nil
		return
	case 1:
		r.IdSucursal = nil
		return
	case 2:
		r.Codigo = nil
		return
	case 3:
		r.Descripcion = nil
		return
	case 4:
		r.Direccion = nil
		return
	case 5:
		r.HorarioAtencion = nil
		return
	case 6:
		r.CodigoPostal = nil
		return
	}
	panic("Unknown field index")
}

func (r *SucursalDistribucion) NullField(i int) {
	switch i {
	case 0:
		r.Id = nil
		return
	case 1:
		r.IdSucursal = nil
		return
	case 2:
		r.Codigo = nil
		return
	case 3:
		r.Descripcion = nil
		return
	case 4:
		r.Direccion = nil
		return
	case 5:
		r.HorarioAtencion = nil
		return
	case 6:
		r.CodigoPostal = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ SucursalDistribucion) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ SucursalDistribucion) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ SucursalDistribucion) HintSize(int)                     { panic("Unsupported operation") }
func (_ SucursalDistribucion) Finalize()                        {}

func (_ SucursalDistribucion) AvroCRC64Fingerprint() []byte {
	return []byte(SucursalDistribucionAvroCRC64Fingerprint)
}

func (r SucursalDistribucion) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["idSucursal"], err = json.Marshal(r.IdSucursal)
	if err != nil {
		return nil, err
	}
	output["codigo"], err = json.Marshal(r.Codigo)
	if err != nil {
		return nil, err
	}
	output["descripcion"], err = json.Marshal(r.Descripcion)
	if err != nil {
		return nil, err
	}
	output["direccion"], err = json.Marshal(r.Direccion)
	if err != nil {
		return nil, err
	}
	output["horarioAtencion"], err = json.Marshal(r.HorarioAtencion)
	if err != nil {
		return nil, err
	}
	output["codigoPostal"], err = json.Marshal(r.CodigoPostal)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *SucursalDistribucion) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		r.Id = NewUnionNullInt()

		r.Id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["idSucursal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdSucursal); err != nil {
			return err
		}
	} else {
		r.IdSucursal = NewUnionNullInt()

		r.IdSucursal = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Codigo); err != nil {
			return err
		}
	} else {
		r.Codigo = NewUnionNullString()

		r.Codigo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["descripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Descripcion); err != nil {
			return err
		}
	} else {
		r.Descripcion = NewUnionNullString()

		r.Descripcion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["direccion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Direccion); err != nil {
			return err
		}
	} else {
		r.Direccion = NewUnionNullString()

		r.Direccion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["horarioAtencion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HorarioAtencion); err != nil {
			return err
		}
	} else {
		r.HorarioAtencion = NewUnionNullString()

		r.HorarioAtencion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoPostal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoPostal); err != nil {
			return err
		}
	} else {
		r.CodigoPostal = NewUnionNullString()

		r.CodigoPostal = nil
	}
	return nil
}
