// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Transportista.avsc
 */
package DeliveryEstimateEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Transportista struct {
	EsEventual bool `json:"EsEventual"`

	IdGla string `json:"IdGla"`

	IdGli string `json:"IdGli"`

	SucursalDondeTrabaja SucursalDondeTrabaja `json:"SucursalDondeTrabaja"`

	NumeroDeDocumento string `json:"NumeroDeDocumento"`

	NombreCompleto string `json:"NombreCompleto"`

	TipoDeDocumento int32 `json:"TipoDeDocumento"`

	CumplimientoSecuenciaHR float64 `json:"CumplimientoSecuenciaHR"`
}

const TransportistaAvroCRC64Fingerprint = "/\x96\t\x11\xf1H%I"

func NewTransportista() Transportista {
	r := Transportista{}
	r.SucursalDondeTrabaja = NewSucursalDondeTrabaja()

	return r
}

func DeserializeTransportista(r io.Reader) (Transportista, error) {
	t := NewTransportista()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTransportistaFromSchema(r io.Reader, schema string) (Transportista, error) {
	t := NewTransportista()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTransportista(r Transportista, w io.Writer) error {
	var err error
	err = vm.WriteBool(r.EsEventual, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.IdGla, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.IdGli, w)
	if err != nil {
		return err
	}
	err = writeSucursalDondeTrabaja(r.SucursalDondeTrabaja, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NumeroDeDocumento, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NombreCompleto, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.TipoDeDocumento, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.CumplimientoSecuenciaHR, w)
	if err != nil {
		return err
	}
	return err
}

func (r Transportista) Serialize(w io.Writer) error {
	return writeTransportista(r, w)
}

func (r Transportista) Schema() string {
	return "{\"fields\":[{\"name\":\"EsEventual\",\"type\":\"boolean\"},{\"name\":\"IdGla\",\"type\":\"string\"},{\"name\":\"IdGli\",\"type\":\"string\"},{\"name\":\"SucursalDondeTrabaja\",\"type\":{\"fields\":[{\"name\":\"CodigoAlertran\",\"type\":\"string\"},{\"name\":\"CodigoIntegra\",\"type\":\"string\"},{\"name\":\"Id\",\"type\":\"string\"},{\"name\":\"Nombre\",\"type\":\"string\"}],\"name\":\"SucursalDondeTrabaja\",\"type\":\"record\"}},{\"name\":\"NumeroDeDocumento\",\"type\":\"string\"},{\"name\":\"NombreCompleto\",\"type\":\"string\"},{\"name\":\"TipoDeDocumento\",\"type\":\"int\"},{\"name\":\"CumplimientoSecuenciaHR\",\"type\":\"double\"}],\"name\":\"Andreani.DeliveryEstimate.Events.Records.Transportista\",\"type\":\"record\"}"
}

func (r Transportista) SchemaName() string {
	return "Andreani.DeliveryEstimate.Events.Records.Transportista"
}

func (_ Transportista) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Transportista) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Transportista) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Transportista) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Transportista) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Transportista) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Transportista) SetString(v string)   { panic("Unsupported operation") }
func (_ Transportista) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Transportista) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Boolean{Target: &r.EsEventual}

		return w

	case 1:
		w := types.String{Target: &r.IdGla}

		return w

	case 2:
		w := types.String{Target: &r.IdGli}

		return w

	case 3:
		r.SucursalDondeTrabaja = NewSucursalDondeTrabaja()

		w := types.Record{Target: &r.SucursalDondeTrabaja}

		return w

	case 4:
		w := types.String{Target: &r.NumeroDeDocumento}

		return w

	case 5:
		w := types.String{Target: &r.NombreCompleto}

		return w

	case 6:
		w := types.Int{Target: &r.TipoDeDocumento}

		return w

	case 7:
		w := types.Double{Target: &r.CumplimientoSecuenciaHR}

		return w

	}
	panic("Unknown field index")
}

func (r *Transportista) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Transportista) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Transportista) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Transportista) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Transportista) HintSize(int)                     { panic("Unsupported operation") }
func (_ Transportista) Finalize()                        {}

func (_ Transportista) AvroCRC64Fingerprint() []byte {
	return []byte(TransportistaAvroCRC64Fingerprint)
}

func (r Transportista) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["EsEventual"], err = json.Marshal(r.EsEventual)
	if err != nil {
		return nil, err
	}
	output["IdGla"], err = json.Marshal(r.IdGla)
	if err != nil {
		return nil, err
	}
	output["IdGli"], err = json.Marshal(r.IdGli)
	if err != nil {
		return nil, err
	}
	output["SucursalDondeTrabaja"], err = json.Marshal(r.SucursalDondeTrabaja)
	if err != nil {
		return nil, err
	}
	output["NumeroDeDocumento"], err = json.Marshal(r.NumeroDeDocumento)
	if err != nil {
		return nil, err
	}
	output["NombreCompleto"], err = json.Marshal(r.NombreCompleto)
	if err != nil {
		return nil, err
	}
	output["TipoDeDocumento"], err = json.Marshal(r.TipoDeDocumento)
	if err != nil {
		return nil, err
	}
	output["CumplimientoSecuenciaHR"], err = json.Marshal(r.CumplimientoSecuenciaHR)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Transportista) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["EsEventual"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EsEventual); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EsEventual")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdGla"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdGla); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdGla")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdGli"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdGli); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdGli")
	}
	val = func() json.RawMessage {
		if v, ok := fields["SucursalDondeTrabaja"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SucursalDondeTrabaja); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for SucursalDondeTrabaja")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NumeroDeDocumento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeDocumento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NumeroDeDocumento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NombreCompleto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NombreCompleto); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NombreCompleto")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoDeDocumento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoDeDocumento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoDeDocumento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CumplimientoSecuenciaHR"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CumplimientoSecuenciaHR); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CumplimientoSecuenciaHR")
	}
	return nil
}
