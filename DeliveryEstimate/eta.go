// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ETA.avsc
 */
package DeliveryEstimateEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ETA struct {
	Eta *UnionNullLong `json:"eta"`

	CodigoDeEnvio *UnionNullString `json:"codigoDeEnvio"`

	CalculoEta CalculoEta `json:"calculoEta"`

	Transportista Transportista `json:"transportista"`

	SucursalDistribucion *UnionNullSucursalDistribucion `json:"sucursalDistribucion"`

	Cuando *UnionNullLong `json:"cuando"`

	Estimacion *UnionNullString `json:"estimacion"`

	EstimacionDescripcion *UnionNullString `json:"estimacionDescripcion"`
}

const ETAAvroCRC64Fingerprint = "\xe9T3\x8e\x13\xbc\\\xf7"

func NewETA() ETA {
	r := ETA{}
	r.Eta = nil
	r.CodigoDeEnvio = nil
	r.CalculoEta = NewCalculoEta()

	r.Transportista = NewTransportista()

	r.SucursalDistribucion = nil
	r.Cuando = nil
	r.Estimacion = nil
	r.EstimacionDescripcion = nil
	return r
}

func DeserializeETA(r io.Reader) (ETA, error) {
	t := NewETA()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeETAFromSchema(r io.Reader, schema string) (ETA, error) {
	t := NewETA()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeETA(r ETA, w io.Writer) error {
	var err error
	err = writeUnionNullLong(r.Eta, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoDeEnvio, w)
	if err != nil {
		return err
	}
	err = writeCalculoEta(r.CalculoEta, w)
	if err != nil {
		return err
	}
	err = writeTransportista(r.Transportista, w)
	if err != nil {
		return err
	}
	err = writeUnionNullSucursalDistribucion(r.SucursalDistribucion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.Cuando, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Estimacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EstimacionDescripcion, w)
	if err != nil {
		return err
	}
	return err
}

func (r ETA) Serialize(w io.Writer) error {
	return writeETA(r, w)
}

func (r ETA) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"eta\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"codigoDeEnvio\",\"type\":[\"null\",\"string\"]},{\"name\":\"calculoEta\",\"type\":{\"fields\":[{\"default\":null,\"name\":\"hojaDeRuta\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"fechaCreacionHojaDeRuta\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"posicion\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"bloque\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"fechaVisita\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]}],\"name\":\"CalculoEta\",\"type\":\"record\"}},{\"name\":\"transportista\",\"type\":{\"fields\":[{\"default\":null,\"name\":\"esEventual\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"idGla\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"idGli\",\"type\":[\"null\",\"string\"]},{\"name\":\"sucursalDondeTrabaja\",\"type\":{\"fields\":[{\"default\":null,\"name\":\"codigoAlertran\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"codigoIntegra\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"nombre\",\"type\":[\"null\",\"string\"]}],\"name\":\"SucursalDondeTrabaja\",\"type\":\"record\"}},{\"default\":null,\"name\":\"numeroDeDocumento\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"nombreCompleto\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"tipoDeDocumento\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"cumplimientoSecuenciaHR\",\"type\":[\"null\",\"double\"]}],\"name\":\"Transportista\",\"type\":\"record\"}},{\"default\":null,\"name\":\"sucursalDistribucion\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"id\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"idSucursal\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"codigo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"descripcion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"direccion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"horarioAtencion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"codigoPostal\",\"type\":[\"null\",\"string\"]}],\"name\":\"SucursalDistribucion\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"cuando\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"estimacion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"estimacionDescripcion\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.DeliveryEstimate.Events.Records.ETA\",\"type\":\"record\"}"
}

func (r ETA) SchemaName() string {
	return "Andreani.DeliveryEstimate.Events.Records.ETA"
}

func (_ ETA) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ETA) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ETA) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ETA) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ETA) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ETA) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ETA) SetString(v string)   { panic("Unsupported operation") }
func (_ ETA) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ETA) Get(i int) types.Field {
	switch i {
	case 0:
		r.Eta = NewUnionNullLong()

		return r.Eta
	case 1:
		r.CodigoDeEnvio = NewUnionNullString()

		return r.CodigoDeEnvio
	case 2:
		r.CalculoEta = NewCalculoEta()

		w := types.Record{Target: &r.CalculoEta}

		return w

	case 3:
		r.Transportista = NewTransportista()

		w := types.Record{Target: &r.Transportista}

		return w

	case 4:
		r.SucursalDistribucion = NewUnionNullSucursalDistribucion()

		return r.SucursalDistribucion
	case 5:
		r.Cuando = NewUnionNullLong()

		return r.Cuando
	case 6:
		r.Estimacion = NewUnionNullString()

		return r.Estimacion
	case 7:
		r.EstimacionDescripcion = NewUnionNullString()

		return r.EstimacionDescripcion
	}
	panic("Unknown field index")
}

func (r *ETA) SetDefault(i int) {
	switch i {
	case 0:
		r.Eta = nil
		return
	case 1:
		r.CodigoDeEnvio = nil
		return
	case 4:
		r.SucursalDistribucion = nil
		return
	case 5:
		r.Cuando = nil
		return
	case 6:
		r.Estimacion = nil
		return
	case 7:
		r.EstimacionDescripcion = nil
		return
	}
	panic("Unknown field index")
}

func (r *ETA) NullField(i int) {
	switch i {
	case 0:
		r.Eta = nil
		return
	case 1:
		r.CodigoDeEnvio = nil
		return
	case 4:
		r.SucursalDistribucion = nil
		return
	case 5:
		r.Cuando = nil
		return
	case 6:
		r.Estimacion = nil
		return
	case 7:
		r.EstimacionDescripcion = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ETA) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ETA) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ETA) HintSize(int)                     { panic("Unsupported operation") }
func (_ ETA) Finalize()                        {}

func (_ ETA) AvroCRC64Fingerprint() []byte {
	return []byte(ETAAvroCRC64Fingerprint)
}

func (r ETA) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["eta"], err = json.Marshal(r.Eta)
	if err != nil {
		return nil, err
	}
	output["codigoDeEnvio"], err = json.Marshal(r.CodigoDeEnvio)
	if err != nil {
		return nil, err
	}
	output["calculoEta"], err = json.Marshal(r.CalculoEta)
	if err != nil {
		return nil, err
	}
	output["transportista"], err = json.Marshal(r.Transportista)
	if err != nil {
		return nil, err
	}
	output["sucursalDistribucion"], err = json.Marshal(r.SucursalDistribucion)
	if err != nil {
		return nil, err
	}
	output["cuando"], err = json.Marshal(r.Cuando)
	if err != nil {
		return nil, err
	}
	output["estimacion"], err = json.Marshal(r.Estimacion)
	if err != nil {
		return nil, err
	}
	output["estimacionDescripcion"], err = json.Marshal(r.EstimacionDescripcion)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ETA) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["eta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Eta); err != nil {
			return err
		}
	} else {
		r.Eta = NewUnionNullLong()

		r.Eta = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoDeEnvio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoDeEnvio); err != nil {
			return err
		}
	} else {
		r.CodigoDeEnvio = NewUnionNullString()

		r.CodigoDeEnvio = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["calculoEta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CalculoEta); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for calculoEta")
	}
	val = func() json.RawMessage {
		if v, ok := fields["transportista"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Transportista); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for transportista")
	}
	val = func() json.RawMessage {
		if v, ok := fields["sucursalDistribucion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SucursalDistribucion); err != nil {
			return err
		}
	} else {
		r.SucursalDistribucion = NewUnionNullSucursalDistribucion()

		r.SucursalDistribucion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["cuando"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cuando); err != nil {
			return err
		}
	} else {
		r.Cuando = NewUnionNullLong()

		r.Cuando = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["estimacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estimacion); err != nil {
			return err
		}
	} else {
		r.Estimacion = NewUnionNullString()

		r.Estimacion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["estimacionDescripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EstimacionDescripcion); err != nil {
			return err
		}
	} else {
		r.EstimacionDescripcion = NewUnionNullString()

		r.EstimacionDescripcion = nil
	}
	return nil
}
