// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ETA.avsc
 */
package DeliveryEstimateEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ETA struct {
	EtaRangoInicio int64 `json:"etaRangoInicio"`

	EtaRangoFin int64 `json:"etaRangoFin"`

	Eta int64 `json:"eta"`

	NumeroEnvio string `json:"numeroEnvio"`

	CalculoEta CalculoEta `json:"calculoEta"`

	Transportista Transportista `json:"transportista"`

	Timestamp string `json:"Timestamp"`
}

const ETAAvroCRC64Fingerprint = "o\xf0p\x92]\rh\xc1"

func NewETA() ETA {
	r := ETA{}
	r.CalculoEta = NewCalculoEta()

	r.Transportista = NewTransportista()

	return r
}

func DeserializeETA(r io.Reader) (ETA, error) {
	t := NewETA()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeETAFromSchema(r io.Reader, schema string) (ETA, error) {
	t := NewETA()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeETA(r ETA, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.EtaRangoInicio, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.EtaRangoFin, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Eta, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NumeroEnvio, w)
	if err != nil {
		return err
	}
	err = writeCalculoEta(r.CalculoEta, w)
	if err != nil {
		return err
	}
	err = writeTransportista(r.Transportista, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Timestamp, w)
	if err != nil {
		return err
	}
	return err
}

func (r ETA) Serialize(w io.Writer) error {
	return writeETA(r, w)
}

func (r ETA) Schema() string {
	return "{\"fields\":[{\"name\":\"etaRangoInicio\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"etaRangoFin\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"eta\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"numeroEnvio\",\"type\":\"string\"},{\"name\":\"calculoEta\",\"type\":{\"fields\":[{\"name\":\"ordenDeEnvioEnHR\",\"type\":\"string\"},{\"name\":\"numeroHojaDeRuta\",\"type\":\"string\"},{\"name\":\"geocoordenadas\",\"type\":\"string\"},{\"name\":\"recorridoEnSegundos\",\"type\":\"int\"},{\"name\":\"recorridoEnMetros\",\"type\":\"int\"},{\"name\":\"demoraEnDomicilioEnMinutos\",\"type\":\"int\"},{\"name\":\"demoraSalidaSucursalEnMinutos\",\"type\":\"int\"},{\"name\":\"etaAnterior\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"CalculoEta\",\"type\":\"record\"}},{\"name\":\"transportista\",\"type\":{\"fields\":[{\"name\":\"esEventual\",\"type\":\"boolean\"},{\"name\":\"idGla\",\"type\":\"string\"},{\"name\":\"idGli\",\"type\":\"string\"},{\"name\":\"sucursalDondeTrabaja\",\"type\":{\"fields\":[{\"name\":\"codigoAlertran\",\"type\":\"string\"},{\"name\":\"codigoIntegra\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"nombre\",\"type\":\"string\"}],\"name\":\"SucursalDondeTrabaja\",\"type\":\"record\"}},{\"name\":\"numeroDeDocumento\",\"type\":\"string\"},{\"name\":\"nombreCompleto\",\"type\":\"string\"},{\"name\":\"tipoDeDocumento\",\"type\":\"int\"},{\"name\":\"cumplimientoSecuenciaHR\",\"type\":\"int\"}],\"name\":\"Transportista\",\"type\":\"record\"}},{\"name\":\"Timestamp\",\"type\":\"string\"}],\"name\":\"Andreani.DeliveryEstimate.Events.Records.ETA\",\"type\":\"record\"}"
}

func (r ETA) SchemaName() string {
	return "Andreani.DeliveryEstimate.Events.Records.ETA"
}

func (_ ETA) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ETA) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ETA) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ETA) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ETA) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ETA) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ETA) SetString(v string)   { panic("Unsupported operation") }
func (_ ETA) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ETA) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Long{Target: &r.EtaRangoInicio}

		return w

	case 1:
		w := types.Long{Target: &r.EtaRangoFin}

		return w

	case 2:
		w := types.Long{Target: &r.Eta}

		return w

	case 3:
		w := types.String{Target: &r.NumeroEnvio}

		return w

	case 4:
		r.CalculoEta = NewCalculoEta()

		w := types.Record{Target: &r.CalculoEta}

		return w

	case 5:
		r.Transportista = NewTransportista()

		w := types.Record{Target: &r.Transportista}

		return w

	case 6:
		w := types.String{Target: &r.Timestamp}

		return w

	}
	panic("Unknown field index")
}

func (r *ETA) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ETA) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ ETA) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ETA) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ETA) HintSize(int)                     { panic("Unsupported operation") }
func (_ ETA) Finalize()                        {}

func (_ ETA) AvroCRC64Fingerprint() []byte {
	return []byte(ETAAvroCRC64Fingerprint)
}

func (r ETA) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["etaRangoInicio"], err = json.Marshal(r.EtaRangoInicio)
	if err != nil {
		return nil, err
	}
	output["etaRangoFin"], err = json.Marshal(r.EtaRangoFin)
	if err != nil {
		return nil, err
	}
	output["eta"], err = json.Marshal(r.Eta)
	if err != nil {
		return nil, err
	}
	output["numeroEnvio"], err = json.Marshal(r.NumeroEnvio)
	if err != nil {
		return nil, err
	}
	output["calculoEta"], err = json.Marshal(r.CalculoEta)
	if err != nil {
		return nil, err
	}
	output["transportista"], err = json.Marshal(r.Transportista)
	if err != nil {
		return nil, err
	}
	output["Timestamp"], err = json.Marshal(r.Timestamp)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ETA) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["etaRangoInicio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EtaRangoInicio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for etaRangoInicio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["etaRangoFin"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EtaRangoFin); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for etaRangoFin")
	}
	val = func() json.RawMessage {
		if v, ok := fields["eta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Eta); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for eta")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numeroEnvio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroEnvio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroEnvio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["calculoEta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CalculoEta); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for calculoEta")
	}
	val = func() json.RawMessage {
		if v, ok := fields["transportista"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Transportista); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for transportista")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Timestamp"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Timestamp); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Timestamp")
	}
	return nil
}
