// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EstimatedTimeofArrival.avsc
 */
package DeliveryEstimateEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CalculoEta struct {
	HoraInicio int64 `json:"horaInicio"`

	HoraFin int64 `json:"horaFin"`

	Geocoordenadas string `json:"geocoordenadas"`

	TiempoRecorridoEnSegundos int32 `json:"tiempoRecorridoEnSegundos"`

	DistanciaRecorridaEnMetros int32 `json:"distanciaRecorridaEnMetros"`

	TiempoMuertoEnMinutos int32 `json:"tiempoMuertoEnMinutos"`

	TiempoSalidaEnMinutos int32 `json:"tiempoSalidaEnMinutos"`

	TiempoETAAnterior int64 `json:"tiempoETAAnterior"`
}

const CalculoEtaAvroCRC64Fingerprint = "\xba\xa5nx\xb0Õ’\xae"

func NewCalculoEta() CalculoEta {
	r := CalculoEta{}
	return r
}

func DeserializeCalculoEta(r io.Reader) (CalculoEta, error) {
	t := NewCalculoEta()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCalculoEtaFromSchema(r io.Reader, schema string) (CalculoEta, error) {
	t := NewCalculoEta()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCalculoEta(r CalculoEta, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.HoraInicio, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.HoraFin, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Geocoordenadas, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.TiempoRecorridoEnSegundos, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.DistanciaRecorridaEnMetros, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.TiempoMuertoEnMinutos, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.TiempoSalidaEnMinutos, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.TiempoETAAnterior, w)
	if err != nil {
		return err
	}
	return err
}

func (r CalculoEta) Serialize(w io.Writer) error {
	return writeCalculoEta(r, w)
}

func (r CalculoEta) Schema() string {
	return "{\"fields\":[{\"name\":\"horaInicio\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"horaFin\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"geocoordenadas\",\"type\":\"string\"},{\"name\":\"tiempoRecorridoEnSegundos\",\"type\":\"int\"},{\"name\":\"distanciaRecorridaEnMetros\",\"type\":\"int\"},{\"name\":\"tiempoMuertoEnMinutos\",\"type\":\"int\"},{\"name\":\"tiempoSalidaEnMinutos\",\"type\":\"int\"},{\"name\":\"tiempoETAAnterior\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"Andreani.DeliveryEstimate.Events.Records.CalculoEta\",\"type\":\"record\"}"
}

func (r CalculoEta) SchemaName() string {
	return "Andreani.DeliveryEstimate.Events.Records.CalculoEta"
}

func (_ CalculoEta) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CalculoEta) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CalculoEta) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CalculoEta) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CalculoEta) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CalculoEta) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CalculoEta) SetString(v string)   { panic("Unsupported operation") }
func (_ CalculoEta) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CalculoEta) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Long{Target: &r.HoraInicio}

		return w

	case 1:
		w := types.Long{Target: &r.HoraFin}

		return w

	case 2:
		w := types.String{Target: &r.Geocoordenadas}

		return w

	case 3:
		w := types.Int{Target: &r.TiempoRecorridoEnSegundos}

		return w

	case 4:
		w := types.Int{Target: &r.DistanciaRecorridaEnMetros}

		return w

	case 5:
		w := types.Int{Target: &r.TiempoMuertoEnMinutos}

		return w

	case 6:
		w := types.Int{Target: &r.TiempoSalidaEnMinutos}

		return w

	case 7:
		w := types.Long{Target: &r.TiempoETAAnterior}

		return w

	}
	panic("Unknown field index")
}

func (r *CalculoEta) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *CalculoEta) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ CalculoEta) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CalculoEta) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CalculoEta) HintSize(int)                     { panic("Unsupported operation") }
func (_ CalculoEta) Finalize()                        {}

func (_ CalculoEta) AvroCRC64Fingerprint() []byte {
	return []byte(CalculoEtaAvroCRC64Fingerprint)
}

func (r CalculoEta) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["horaInicio"], err = json.Marshal(r.HoraInicio)
	if err != nil {
		return nil, err
	}
	output["horaFin"], err = json.Marshal(r.HoraFin)
	if err != nil {
		return nil, err
	}
	output["geocoordenadas"], err = json.Marshal(r.Geocoordenadas)
	if err != nil {
		return nil, err
	}
	output["tiempoRecorridoEnSegundos"], err = json.Marshal(r.TiempoRecorridoEnSegundos)
	if err != nil {
		return nil, err
	}
	output["distanciaRecorridaEnMetros"], err = json.Marshal(r.DistanciaRecorridaEnMetros)
	if err != nil {
		return nil, err
	}
	output["tiempoMuertoEnMinutos"], err = json.Marshal(r.TiempoMuertoEnMinutos)
	if err != nil {
		return nil, err
	}
	output["tiempoSalidaEnMinutos"], err = json.Marshal(r.TiempoSalidaEnMinutos)
	if err != nil {
		return nil, err
	}
	output["tiempoETAAnterior"], err = json.Marshal(r.TiempoETAAnterior)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CalculoEta) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["horaInicio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HoraInicio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for horaInicio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["horaFin"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HoraFin); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for horaFin")
	}
	val = func() json.RawMessage {
		if v, ok := fields["geocoordenadas"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Geocoordenadas); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for geocoordenadas")
	}
	val = func() json.RawMessage {
		if v, ok := fields["tiempoRecorridoEnSegundos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TiempoRecorridoEnSegundos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for tiempoRecorridoEnSegundos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["distanciaRecorridaEnMetros"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DistanciaRecorridaEnMetros); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for distanciaRecorridaEnMetros")
	}
	val = func() json.RawMessage {
		if v, ok := fields["tiempoMuertoEnMinutos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TiempoMuertoEnMinutos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for tiempoMuertoEnMinutos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["tiempoSalidaEnMinutos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TiempoSalidaEnMinutos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for tiempoSalidaEnMinutos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["tiempoETAAnterior"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TiempoETAAnterior); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for tiempoETAAnterior")
	}
	return nil
}
