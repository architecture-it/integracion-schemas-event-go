// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ETA.avsc
 */
package DeliveryEstimateEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CalculoEta struct {
	HojaDeRuta *UnionNullString `json:"hojaDeRuta"`

	FechaCreacionHojaDeRuta *UnionNullLong `json:"fechaCreacionHojaDeRuta"`

	Posicion *UnionNullInt `json:"posicion"`

	Bloque *UnionNullInt `json:"bloque"`

	FechaVisita *UnionNullLong `json:"fechaVisita"`

	NumeroContenedor *UnionNullString `json:"numeroContenedor"`
}

const CalculoEtaAvroCRC64Fingerprint = "4\xef\x15\xa0\x92\xb1\xea\xb9"

func NewCalculoEta() CalculoEta {
	r := CalculoEta{}
	r.HojaDeRuta = nil
	r.FechaCreacionHojaDeRuta = nil
	r.Posicion = nil
	r.Bloque = nil
	r.FechaVisita = nil
	r.NumeroContenedor = nil
	return r
}

func DeserializeCalculoEta(r io.Reader) (CalculoEta, error) {
	t := NewCalculoEta()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCalculoEtaFromSchema(r io.Reader, schema string) (CalculoEta, error) {
	t := NewCalculoEta()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCalculoEta(r CalculoEta, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.HojaDeRuta, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaCreacionHojaDeRuta, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.Posicion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.Bloque, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaVisita, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NumeroContenedor, w)
	if err != nil {
		return err
	}
	return err
}

func (r CalculoEta) Serialize(w io.Writer) error {
	return writeCalculoEta(r, w)
}

func (r CalculoEta) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"hojaDeRuta\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"fechaCreacionHojaDeRuta\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"posicion\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"bloque\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"fechaVisita\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"numeroContenedor\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.DeliveryEstimate.Events.Records.CalculoEta\",\"type\":\"record\"}"
}

func (r CalculoEta) SchemaName() string {
	return "Andreani.DeliveryEstimate.Events.Records.CalculoEta"
}

func (_ CalculoEta) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CalculoEta) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CalculoEta) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CalculoEta) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CalculoEta) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CalculoEta) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CalculoEta) SetString(v string)   { panic("Unsupported operation") }
func (_ CalculoEta) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CalculoEta) Get(i int) types.Field {
	switch i {
	case 0:
		r.HojaDeRuta = NewUnionNullString()

		return r.HojaDeRuta
	case 1:
		r.FechaCreacionHojaDeRuta = NewUnionNullLong()

		return r.FechaCreacionHojaDeRuta
	case 2:
		r.Posicion = NewUnionNullInt()

		return r.Posicion
	case 3:
		r.Bloque = NewUnionNullInt()

		return r.Bloque
	case 4:
		r.FechaVisita = NewUnionNullLong()

		return r.FechaVisita
	case 5:
		r.NumeroContenedor = NewUnionNullString()

		return r.NumeroContenedor
	}
	panic("Unknown field index")
}

func (r *CalculoEta) SetDefault(i int) {
	switch i {
	case 0:
		r.HojaDeRuta = nil
		return
	case 1:
		r.FechaCreacionHojaDeRuta = nil
		return
	case 2:
		r.Posicion = nil
		return
	case 3:
		r.Bloque = nil
		return
	case 4:
		r.FechaVisita = nil
		return
	case 5:
		r.NumeroContenedor = nil
		return
	}
	panic("Unknown field index")
}

func (r *CalculoEta) NullField(i int) {
	switch i {
	case 0:
		r.HojaDeRuta = nil
		return
	case 1:
		r.FechaCreacionHojaDeRuta = nil
		return
	case 2:
		r.Posicion = nil
		return
	case 3:
		r.Bloque = nil
		return
	case 4:
		r.FechaVisita = nil
		return
	case 5:
		r.NumeroContenedor = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ CalculoEta) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CalculoEta) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CalculoEta) HintSize(int)                     { panic("Unsupported operation") }
func (_ CalculoEta) Finalize()                        {}

func (_ CalculoEta) AvroCRC64Fingerprint() []byte {
	return []byte(CalculoEtaAvroCRC64Fingerprint)
}

func (r CalculoEta) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["hojaDeRuta"], err = json.Marshal(r.HojaDeRuta)
	if err != nil {
		return nil, err
	}
	output["fechaCreacionHojaDeRuta"], err = json.Marshal(r.FechaCreacionHojaDeRuta)
	if err != nil {
		return nil, err
	}
	output["posicion"], err = json.Marshal(r.Posicion)
	if err != nil {
		return nil, err
	}
	output["bloque"], err = json.Marshal(r.Bloque)
	if err != nil {
		return nil, err
	}
	output["fechaVisita"], err = json.Marshal(r.FechaVisita)
	if err != nil {
		return nil, err
	}
	output["numeroContenedor"], err = json.Marshal(r.NumeroContenedor)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CalculoEta) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["hojaDeRuta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HojaDeRuta); err != nil {
			return err
		}
	} else {
		r.HojaDeRuta = NewUnionNullString()

		r.HojaDeRuta = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaCreacionHojaDeRuta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaCreacionHojaDeRuta); err != nil {
			return err
		}
	} else {
		r.FechaCreacionHojaDeRuta = NewUnionNullLong()

		r.FechaCreacionHojaDeRuta = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["posicion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Posicion); err != nil {
			return err
		}
	} else {
		r.Posicion = NewUnionNullInt()

		r.Posicion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["bloque"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Bloque); err != nil {
			return err
		}
	} else {
		r.Bloque = NewUnionNullInt()

		r.Bloque = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaVisita"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaVisita); err != nil {
			return err
		}
	} else {
		r.FechaVisita = NewUnionNullLong()

		r.FechaVisita = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["numeroContenedor"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroContenedor); err != nil {
			return err
		}
	} else {
		r.NumeroContenedor = NewUnionNullString()

		r.NumeroContenedor = nil
	}
	return nil
}
