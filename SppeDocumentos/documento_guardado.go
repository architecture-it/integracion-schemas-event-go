// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     DocumentoGuardado.avsc
 */
package SppeDocumentosEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DocumentoGuardado struct {
	Propietario string `json:"Propietario"`

	OrdenCliente string `json:"OrdenCliente"`

	NombreDocumento *UnionNullString `json:"NombreDocumento"`
}

const DocumentoGuardadoAvroCRC64Fingerprint = "\xba\x03:\xa78\xd8\xdc4"

func NewDocumentoGuardado() DocumentoGuardado {
	r := DocumentoGuardado{}
	return r
}

func DeserializeDocumentoGuardado(r io.Reader) (DocumentoGuardado, error) {
	t := NewDocumentoGuardado()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDocumentoGuardadoFromSchema(r io.Reader, schema string) (DocumentoGuardado, error) {
	t := NewDocumentoGuardado()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDocumentoGuardado(r DocumentoGuardado, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Propietario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OrdenCliente, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NombreDocumento, w)
	if err != nil {
		return err
	}
	return err
}

func (r DocumentoGuardado) Serialize(w io.Writer) error {
	return writeDocumentoGuardado(r, w)
}

func (r DocumentoGuardado) Schema() string {
	return "{\"fields\":[{\"name\":\"Propietario\",\"type\":\"string\"},{\"name\":\"OrdenCliente\",\"type\":\"string\"},{\"name\":\"NombreDocumento\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.SppeDocumentos.Events.Record.DocumentoGuardado\",\"type\":\"record\"}"
}

func (r DocumentoGuardado) SchemaName() string {
	return "Andreani.SppeDocumentos.Events.Record.DocumentoGuardado"
}

func (_ DocumentoGuardado) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DocumentoGuardado) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DocumentoGuardado) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DocumentoGuardado) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DocumentoGuardado) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DocumentoGuardado) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DocumentoGuardado) SetString(v string)   { panic("Unsupported operation") }
func (_ DocumentoGuardado) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DocumentoGuardado) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Propietario}

		return w

	case 1:
		w := types.String{Target: &r.OrdenCliente}

		return w

	case 2:
		r.NombreDocumento = NewUnionNullString()

		return r.NombreDocumento
	}
	panic("Unknown field index")
}

func (r *DocumentoGuardado) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *DocumentoGuardado) NullField(i int) {
	switch i {
	case 2:
		r.NombreDocumento = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ DocumentoGuardado) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DocumentoGuardado) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DocumentoGuardado) HintSize(int)                     { panic("Unsupported operation") }
func (_ DocumentoGuardado) Finalize()                        {}

func (_ DocumentoGuardado) AvroCRC64Fingerprint() []byte {
	return []byte(DocumentoGuardadoAvroCRC64Fingerprint)
}

func (r DocumentoGuardado) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["OrdenCliente"], err = json.Marshal(r.OrdenCliente)
	if err != nil {
		return nil, err
	}
	output["NombreDocumento"], err = json.Marshal(r.NombreDocumento)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DocumentoGuardado) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Propietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OrdenCliente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrdenCliente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OrdenCliente")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NombreDocumento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NombreDocumento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NombreDocumento")
	}
	return nil
}
