// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     OrdenDeEnvioSolicitada.avsc
 */
package AltaOrdenEnvioEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type FechaPactadaDeEntrega struct {
	Fecha *UnionNullString `json:"fecha"`

	HoraDesde *UnionNullString `json:"horaDesde"`

	HoraHasta *UnionNullString `json:"horaHasta"`
}

const FechaPactadaDeEntregaAvroCRC64Fingerprint = "{U\x00\xc0\x98\x11\xff#"

func NewFechaPactadaDeEntrega() FechaPactadaDeEntrega {
	r := FechaPactadaDeEntrega{}
	return r
}

func DeserializeFechaPactadaDeEntrega(r io.Reader) (FechaPactadaDeEntrega, error) {
	t := NewFechaPactadaDeEntrega()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeFechaPactadaDeEntregaFromSchema(r io.Reader, schema string) (FechaPactadaDeEntrega, error) {
	t := NewFechaPactadaDeEntrega()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeFechaPactadaDeEntrega(r FechaPactadaDeEntrega, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Fecha, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.HoraDesde, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.HoraHasta, w)
	if err != nil {
		return err
	}
	return err
}

func (r FechaPactadaDeEntrega) Serialize(w io.Writer) error {
	return writeFechaPactadaDeEntrega(r, w)
}

func (r FechaPactadaDeEntrega) Schema() string {
	return "{\"fields\":[{\"name\":\"fecha\",\"type\":[\"null\",\"string\"]},{\"name\":\"horaDesde\",\"type\":[\"null\",\"string\"]},{\"name\":\"horaHasta\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.AltaOrdenEnvio.Events.Common.FechaPactadaDeEntrega\",\"type\":\"record\"}"
}

func (r FechaPactadaDeEntrega) SchemaName() string {
	return "Andreani.AltaOrdenEnvio.Events.Common.FechaPactadaDeEntrega"
}

func (_ FechaPactadaDeEntrega) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ FechaPactadaDeEntrega) SetInt(v int32)       { panic("Unsupported operation") }
func (_ FechaPactadaDeEntrega) SetLong(v int64)      { panic("Unsupported operation") }
func (_ FechaPactadaDeEntrega) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ FechaPactadaDeEntrega) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ FechaPactadaDeEntrega) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ FechaPactadaDeEntrega) SetString(v string)   { panic("Unsupported operation") }
func (_ FechaPactadaDeEntrega) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *FechaPactadaDeEntrega) Get(i int) types.Field {
	switch i {
	case 0:
		r.Fecha = NewUnionNullString()

		return r.Fecha
	case 1:
		r.HoraDesde = NewUnionNullString()

		return r.HoraDesde
	case 2:
		r.HoraHasta = NewUnionNullString()

		return r.HoraHasta
	}
	panic("Unknown field index")
}

func (r *FechaPactadaDeEntrega) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *FechaPactadaDeEntrega) NullField(i int) {
	switch i {
	case 0:
		r.Fecha = nil
		return
	case 1:
		r.HoraDesde = nil
		return
	case 2:
		r.HoraHasta = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ FechaPactadaDeEntrega) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ FechaPactadaDeEntrega) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ FechaPactadaDeEntrega) HintSize(int)                     { panic("Unsupported operation") }
func (_ FechaPactadaDeEntrega) Finalize()                        {}

func (_ FechaPactadaDeEntrega) AvroCRC64Fingerprint() []byte {
	return []byte(FechaPactadaDeEntregaAvroCRC64Fingerprint)
}

func (r FechaPactadaDeEntrega) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["fecha"], err = json.Marshal(r.Fecha)
	if err != nil {
		return nil, err
	}
	output["horaDesde"], err = json.Marshal(r.HoraDesde)
	if err != nil {
		return nil, err
	}
	output["horaHasta"], err = json.Marshal(r.HoraHasta)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *FechaPactadaDeEntrega) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["fecha"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Fecha); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fecha")
	}
	val = func() json.RawMessage {
		if v, ok := fields["horaDesde"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HoraDesde); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for horaDesde")
	}
	val = func() json.RawMessage {
		if v, ok := fields["horaHasta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HoraHasta); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for horaHasta")
	}
	return nil
}
