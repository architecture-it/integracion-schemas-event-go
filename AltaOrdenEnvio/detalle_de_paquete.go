// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     OrdenDeEnvioSolicitada.avsc
 */
package AltaOrdenEnvioEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DetalleDePaquete struct {
	PesoEnKg *UnionNullDouble `json:"pesoEnKg"`

	AltoEnCm *UnionNullDouble `json:"altoEnCm"`

	AnchoEnCm *UnionNullDouble `json:"anchoEnCm"`

	LargoEnCm *UnionNullDouble `json:"largoEnCm"`

	Descripcion *UnionNullString `json:"descripcion"`

	ReferenciasDelCliente *UnionNullListaDePropiedades `json:"referenciasDelCliente"`

	VolumenEnCm3 *UnionNullDouble `json:"volumenEnCm3"`

	ValorDeclaradoSinImpuesto *UnionNullDouble `json:"valorDeclaradoSinImpuesto"`

	ValorDeclaradoConImpuesto *UnionNullDouble `json:"valorDeclaradoConImpuesto"`

	NumeroDeBulto *UnionNullInt `json:"numeroDeBulto"`

	ValorDeclarado *UnionNullDouble `json:"valorDeclarado"`

	EAN *UnionNullString `json:"EAN"`

	Componentes *UnionNullComponentes `json:"componentes"`
}

const DetalleDePaqueteAvroCRC64Fingerprint = "\x11\xb88Û­VN\xbb"

func NewDetalleDePaquete() DetalleDePaquete {
	r := DetalleDePaquete{}
	r.PesoEnKg = nil
	r.AltoEnCm = nil
	r.AnchoEnCm = nil
	r.LargoEnCm = nil
	r.Descripcion = nil
	r.ReferenciasDelCliente = nil
	r.VolumenEnCm3 = nil
	r.ValorDeclaradoSinImpuesto = nil
	r.ValorDeclaradoConImpuesto = nil
	r.NumeroDeBulto = nil
	r.ValorDeclarado = nil
	r.EAN = nil
	r.Componentes = nil
	return r
}

func DeserializeDetalleDePaquete(r io.Reader) (DetalleDePaquete, error) {
	t := NewDetalleDePaquete()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDetalleDePaqueteFromSchema(r io.Reader, schema string) (DetalleDePaquete, error) {
	t := NewDetalleDePaquete()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDetalleDePaquete(r DetalleDePaquete, w io.Writer) error {
	var err error
	err = writeUnionNullDouble(r.PesoEnKg, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.AltoEnCm, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.AnchoEnCm, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.LargoEnCm, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Descripcion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullListaDePropiedades(r.ReferenciasDelCliente, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.VolumenEnCm3, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.ValorDeclaradoSinImpuesto, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.ValorDeclaradoConImpuesto, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.NumeroDeBulto, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.ValorDeclarado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EAN, w)
	if err != nil {
		return err
	}
	err = writeUnionNullComponentes(r.Componentes, w)
	if err != nil {
		return err
	}
	return err
}

func (r DetalleDePaquete) Serialize(w io.Writer) error {
	return writeDetalleDePaquete(r, w)
}

func (r DetalleDePaquete) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"pesoEnKg\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"altoEnCm\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"anchoEnCm\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"largoEnCm\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"descripcion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"referenciasDelCliente\",\"type\":[\"null\",{\"fields\":[{\"name\":\"metadatos\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"name\":\"meta\",\"type\":\"string\"},{\"name\":\"contenido\",\"type\":\"string\"}],\"name\":\"Metadato\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"ListaDePropiedades\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"volumenEnCm3\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"valorDeclaradoSinImpuesto\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"valorDeclaradoConImpuesto\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"numeroDeBulto\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"valorDeclarado\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"EAN\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"componentes\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"numeroAgrupador\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"componentesHijos\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"default\":null,\"name\":\"numeroHijo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"referencias\",\"type\":[\"null\",\"Andreani.AltaOrdenEnvio.Events.Common.ListaDePropiedades\"]}],\"name\":\"ComponenteHijo\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"Componentes\",\"type\":\"record\"}]}],\"name\":\"Andreani.AltaOrdenEnvio.Events.Common.DetalleDePaquete\",\"type\":\"record\"}"
}

func (r DetalleDePaquete) SchemaName() string {
	return "Andreani.AltaOrdenEnvio.Events.Common.DetalleDePaquete"
}

func (_ DetalleDePaquete) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DetalleDePaquete) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DetalleDePaquete) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DetalleDePaquete) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DetalleDePaquete) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DetalleDePaquete) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DetalleDePaquete) SetString(v string)   { panic("Unsupported operation") }
func (_ DetalleDePaquete) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DetalleDePaquete) Get(i int) types.Field {
	switch i {
	case 0:
		r.PesoEnKg = NewUnionNullDouble()

		return r.PesoEnKg
	case 1:
		r.AltoEnCm = NewUnionNullDouble()

		return r.AltoEnCm
	case 2:
		r.AnchoEnCm = NewUnionNullDouble()

		return r.AnchoEnCm
	case 3:
		r.LargoEnCm = NewUnionNullDouble()

		return r.LargoEnCm
	case 4:
		r.Descripcion = NewUnionNullString()

		return r.Descripcion
	case 5:
		r.ReferenciasDelCliente = NewUnionNullListaDePropiedades()

		return r.ReferenciasDelCliente
	case 6:
		r.VolumenEnCm3 = NewUnionNullDouble()

		return r.VolumenEnCm3
	case 7:
		r.ValorDeclaradoSinImpuesto = NewUnionNullDouble()

		return r.ValorDeclaradoSinImpuesto
	case 8:
		r.ValorDeclaradoConImpuesto = NewUnionNullDouble()

		return r.ValorDeclaradoConImpuesto
	case 9:
		r.NumeroDeBulto = NewUnionNullInt()

		return r.NumeroDeBulto
	case 10:
		r.ValorDeclarado = NewUnionNullDouble()

		return r.ValorDeclarado
	case 11:
		r.EAN = NewUnionNullString()

		return r.EAN
	case 12:
		r.Componentes = NewUnionNullComponentes()

		return r.Componentes
	}
	panic("Unknown field index")
}

func (r *DetalleDePaquete) SetDefault(i int) {
	switch i {
	case 0:
		r.PesoEnKg = nil
		return
	case 1:
		r.AltoEnCm = nil
		return
	case 2:
		r.AnchoEnCm = nil
		return
	case 3:
		r.LargoEnCm = nil
		return
	case 4:
		r.Descripcion = nil
		return
	case 5:
		r.ReferenciasDelCliente = nil
		return
	case 6:
		r.VolumenEnCm3 = nil
		return
	case 7:
		r.ValorDeclaradoSinImpuesto = nil
		return
	case 8:
		r.ValorDeclaradoConImpuesto = nil
		return
	case 9:
		r.NumeroDeBulto = nil
		return
	case 10:
		r.ValorDeclarado = nil
		return
	case 11:
		r.EAN = nil
		return
	case 12:
		r.Componentes = nil
		return
	}
	panic("Unknown field index")
}

func (r *DetalleDePaquete) NullField(i int) {
	switch i {
	case 0:
		r.PesoEnKg = nil
		return
	case 1:
		r.AltoEnCm = nil
		return
	case 2:
		r.AnchoEnCm = nil
		return
	case 3:
		r.LargoEnCm = nil
		return
	case 4:
		r.Descripcion = nil
		return
	case 5:
		r.ReferenciasDelCliente = nil
		return
	case 6:
		r.VolumenEnCm3 = nil
		return
	case 7:
		r.ValorDeclaradoSinImpuesto = nil
		return
	case 8:
		r.ValorDeclaradoConImpuesto = nil
		return
	case 9:
		r.NumeroDeBulto = nil
		return
	case 10:
		r.ValorDeclarado = nil
		return
	case 11:
		r.EAN = nil
		return
	case 12:
		r.Componentes = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ DetalleDePaquete) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DetalleDePaquete) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DetalleDePaquete) HintSize(int)                     { panic("Unsupported operation") }
func (_ DetalleDePaquete) Finalize()                        {}

func (_ DetalleDePaquete) AvroCRC64Fingerprint() []byte {
	return []byte(DetalleDePaqueteAvroCRC64Fingerprint)
}

func (r DetalleDePaquete) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["pesoEnKg"], err = json.Marshal(r.PesoEnKg)
	if err != nil {
		return nil, err
	}
	output["altoEnCm"], err = json.Marshal(r.AltoEnCm)
	if err != nil {
		return nil, err
	}
	output["anchoEnCm"], err = json.Marshal(r.AnchoEnCm)
	if err != nil {
		return nil, err
	}
	output["largoEnCm"], err = json.Marshal(r.LargoEnCm)
	if err != nil {
		return nil, err
	}
	output["descripcion"], err = json.Marshal(r.Descripcion)
	if err != nil {
		return nil, err
	}
	output["referenciasDelCliente"], err = json.Marshal(r.ReferenciasDelCliente)
	if err != nil {
		return nil, err
	}
	output["volumenEnCm3"], err = json.Marshal(r.VolumenEnCm3)
	if err != nil {
		return nil, err
	}
	output["valorDeclaradoSinImpuesto"], err = json.Marshal(r.ValorDeclaradoSinImpuesto)
	if err != nil {
		return nil, err
	}
	output["valorDeclaradoConImpuesto"], err = json.Marshal(r.ValorDeclaradoConImpuesto)
	if err != nil {
		return nil, err
	}
	output["numeroDeBulto"], err = json.Marshal(r.NumeroDeBulto)
	if err != nil {
		return nil, err
	}
	output["valorDeclarado"], err = json.Marshal(r.ValorDeclarado)
	if err != nil {
		return nil, err
	}
	output["EAN"], err = json.Marshal(r.EAN)
	if err != nil {
		return nil, err
	}
	output["componentes"], err = json.Marshal(r.Componentes)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DetalleDePaquete) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["pesoEnKg"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoEnKg); err != nil {
			return err
		}
	} else {
		r.PesoEnKg = NewUnionNullDouble()

		r.PesoEnKg = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["altoEnCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AltoEnCm); err != nil {
			return err
		}
	} else {
		r.AltoEnCm = NewUnionNullDouble()

		r.AltoEnCm = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["anchoEnCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AnchoEnCm); err != nil {
			return err
		}
	} else {
		r.AnchoEnCm = NewUnionNullDouble()

		r.AnchoEnCm = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["largoEnCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LargoEnCm); err != nil {
			return err
		}
	} else {
		r.LargoEnCm = NewUnionNullDouble()

		r.LargoEnCm = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["descripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Descripcion); err != nil {
			return err
		}
	} else {
		r.Descripcion = NewUnionNullString()

		r.Descripcion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["referenciasDelCliente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ReferenciasDelCliente); err != nil {
			return err
		}
	} else {
		r.ReferenciasDelCliente = NewUnionNullListaDePropiedades()

		r.ReferenciasDelCliente = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["volumenEnCm3"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VolumenEnCm3); err != nil {
			return err
		}
	} else {
		r.VolumenEnCm3 = NewUnionNullDouble()

		r.VolumenEnCm3 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["valorDeclaradoSinImpuesto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValorDeclaradoSinImpuesto); err != nil {
			return err
		}
	} else {
		r.ValorDeclaradoSinImpuesto = NewUnionNullDouble()

		r.ValorDeclaradoSinImpuesto = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["valorDeclaradoConImpuesto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValorDeclaradoConImpuesto); err != nil {
			return err
		}
	} else {
		r.ValorDeclaradoConImpuesto = NewUnionNullDouble()

		r.ValorDeclaradoConImpuesto = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["numeroDeBulto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeBulto); err != nil {
			return err
		}
	} else {
		r.NumeroDeBulto = NewUnionNullInt()

		r.NumeroDeBulto = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["valorDeclarado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValorDeclarado); err != nil {
			return err
		}
	} else {
		r.ValorDeclarado = NewUnionNullDouble()

		r.ValorDeclarado = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EAN"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EAN); err != nil {
			return err
		}
	} else {
		r.EAN = NewUnionNullString()

		r.EAN = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["componentes"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Componentes); err != nil {
			return err
		}
	} else {
		r.Componentes = NewUnionNullComponentes()

		r.Componentes = nil
	}
	return nil
}
