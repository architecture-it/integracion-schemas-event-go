// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TransactionEvent.avsc
 */
package AltaOrdenEnvioEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SucursalResponse struct {
	ID *UnionNullString `json:"ID"`

	Nomenclatura *UnionNullString `json:"nomenclatura"`

	Descripcion *UnionNullString `json:"descripcion"`
}

const SucursalResponseAvroCRC64Fingerprint = "j\xbex\xca]\x84\xdc{"

func NewSucursalResponse() SucursalResponse {
	r := SucursalResponse{}
	r.ID = nil
	r.Nomenclatura = nil
	r.Descripcion = nil
	return r
}

func DeserializeSucursalResponse(r io.Reader) (SucursalResponse, error) {
	t := NewSucursalResponse()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSucursalResponseFromSchema(r io.Reader, schema string) (SucursalResponse, error) {
	t := NewSucursalResponse()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSucursalResponse(r SucursalResponse, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.ID, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Nomenclatura, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Descripcion, w)
	if err != nil {
		return err
	}
	return err
}

func (r SucursalResponse) Serialize(w io.Writer) error {
	return writeSucursalResponse(r, w)
}

func (r SucursalResponse) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"ID\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"nomenclatura\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"descripcion\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.AltaOrdenEnvio.Events.Common.SucursalResponse\",\"type\":\"record\"}"
}

func (r SucursalResponse) SchemaName() string {
	return "Andreani.AltaOrdenEnvio.Events.Common.SucursalResponse"
}

func (_ SucursalResponse) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ SucursalResponse) SetInt(v int32)       { panic("Unsupported operation") }
func (_ SucursalResponse) SetLong(v int64)      { panic("Unsupported operation") }
func (_ SucursalResponse) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ SucursalResponse) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ SucursalResponse) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ SucursalResponse) SetString(v string)   { panic("Unsupported operation") }
func (_ SucursalResponse) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SucursalResponse) Get(i int) types.Field {
	switch i {
	case 0:
		r.ID = NewUnionNullString()

		return r.ID
	case 1:
		r.Nomenclatura = NewUnionNullString()

		return r.Nomenclatura
	case 2:
		r.Descripcion = NewUnionNullString()

		return r.Descripcion
	}
	panic("Unknown field index")
}

func (r *SucursalResponse) SetDefault(i int) {
	switch i {
	case 0:
		r.ID = nil
		return
	case 1:
		r.Nomenclatura = nil
		return
	case 2:
		r.Descripcion = nil
		return
	}
	panic("Unknown field index")
}

func (r *SucursalResponse) NullField(i int) {
	switch i {
	case 0:
		r.ID = nil
		return
	case 1:
		r.Nomenclatura = nil
		return
	case 2:
		r.Descripcion = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ SucursalResponse) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ SucursalResponse) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ SucursalResponse) HintSize(int)                     { panic("Unsupported operation") }
func (_ SucursalResponse) Finalize()                        {}

func (_ SucursalResponse) AvroCRC64Fingerprint() []byte {
	return []byte(SucursalResponseAvroCRC64Fingerprint)
}

func (r SucursalResponse) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["ID"], err = json.Marshal(r.ID)
	if err != nil {
		return nil, err
	}
	output["nomenclatura"], err = json.Marshal(r.Nomenclatura)
	if err != nil {
		return nil, err
	}
	output["descripcion"], err = json.Marshal(r.Descripcion)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *SucursalResponse) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["ID"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ID); err != nil {
			return err
		}
	} else {
		r.ID = NewUnionNullString()

		r.ID = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["nomenclatura"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nomenclatura); err != nil {
			return err
		}
	} else {
		r.Nomenclatura = NewUnionNullString()

		r.Nomenclatura = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["descripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Descripcion); err != nil {
			return err
		}
	} else {
		r.Descripcion = NewUnionNullString()

		r.Descripcion = nil
	}
	return nil
}
