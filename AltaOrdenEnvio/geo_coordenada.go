// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TransactionEvent.avsc
 */
package AltaOrdenEnvioEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type GeoCoordenada struct {
	Latitud *UnionNullDouble `json:"latitud"`

	Longitud *UnionNullDouble `json:"longitud"`

	Elevacion *UnionNullDouble `json:"elevacion"`

	Poligono *UnionNullInt `json:"poligono"`
}

const GeoCoordenadaAvroCRC64Fingerprint = "\x8et<\xb1r\x06\x8a\xcf"

func NewGeoCoordenada() GeoCoordenada {
	r := GeoCoordenada{}
	r.Latitud = nil
	r.Longitud = nil
	r.Elevacion = nil
	r.Poligono = nil
	return r
}

func DeserializeGeoCoordenada(r io.Reader) (GeoCoordenada, error) {
	t := NewGeoCoordenada()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeGeoCoordenadaFromSchema(r io.Reader, schema string) (GeoCoordenada, error) {
	t := NewGeoCoordenada()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeGeoCoordenada(r GeoCoordenada, w io.Writer) error {
	var err error
	err = writeUnionNullDouble(r.Latitud, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.Longitud, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.Elevacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.Poligono, w)
	if err != nil {
		return err
	}
	return err
}

func (r GeoCoordenada) Serialize(w io.Writer) error {
	return writeGeoCoordenada(r, w)
}

func (r GeoCoordenada) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"latitud\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"longitud\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"elevacion\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"poligono\",\"type\":[\"null\",\"int\"]}],\"name\":\"Andreani.AltaOrdenEnvio.Events.Common.GeoCoordenada\",\"type\":\"record\"}"
}

func (r GeoCoordenada) SchemaName() string {
	return "Andreani.AltaOrdenEnvio.Events.Common.GeoCoordenada"
}

func (_ GeoCoordenada) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ GeoCoordenada) SetInt(v int32)       { panic("Unsupported operation") }
func (_ GeoCoordenada) SetLong(v int64)      { panic("Unsupported operation") }
func (_ GeoCoordenada) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ GeoCoordenada) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ GeoCoordenada) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ GeoCoordenada) SetString(v string)   { panic("Unsupported operation") }
func (_ GeoCoordenada) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *GeoCoordenada) Get(i int) types.Field {
	switch i {
	case 0:
		r.Latitud = NewUnionNullDouble()

		return r.Latitud
	case 1:
		r.Longitud = NewUnionNullDouble()

		return r.Longitud
	case 2:
		r.Elevacion = NewUnionNullDouble()

		return r.Elevacion
	case 3:
		r.Poligono = NewUnionNullInt()

		return r.Poligono
	}
	panic("Unknown field index")
}

func (r *GeoCoordenada) SetDefault(i int) {
	switch i {
	case 0:
		r.Latitud = nil
		return
	case 1:
		r.Longitud = nil
		return
	case 2:
		r.Elevacion = nil
		return
	case 3:
		r.Poligono = nil
		return
	}
	panic("Unknown field index")
}

func (r *GeoCoordenada) NullField(i int) {
	switch i {
	case 0:
		r.Latitud = nil
		return
	case 1:
		r.Longitud = nil
		return
	case 2:
		r.Elevacion = nil
		return
	case 3:
		r.Poligono = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ GeoCoordenada) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ GeoCoordenada) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ GeoCoordenada) HintSize(int)                     { panic("Unsupported operation") }
func (_ GeoCoordenada) Finalize()                        {}

func (_ GeoCoordenada) AvroCRC64Fingerprint() []byte {
	return []byte(GeoCoordenadaAvroCRC64Fingerprint)
}

func (r GeoCoordenada) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["latitud"], err = json.Marshal(r.Latitud)
	if err != nil {
		return nil, err
	}
	output["longitud"], err = json.Marshal(r.Longitud)
	if err != nil {
		return nil, err
	}
	output["elevacion"], err = json.Marshal(r.Elevacion)
	if err != nil {
		return nil, err
	}
	output["poligono"], err = json.Marshal(r.Poligono)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *GeoCoordenada) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["latitud"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Latitud); err != nil {
			return err
		}
	} else {
		r.Latitud = NewUnionNullDouble()

		r.Latitud = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["longitud"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Longitud); err != nil {
			return err
		}
	} else {
		r.Longitud = NewUnionNullDouble()

		r.Longitud = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["elevacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Elevacion); err != nil {
			return err
		}
	} else {
		r.Elevacion = NewUnionNullDouble()

		r.Elevacion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["poligono"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Poligono); err != nil {
			return err
		}
	} else {
		r.Poligono = NewUnionNullInt()

		r.Poligono = nil
	}
	return nil
}
