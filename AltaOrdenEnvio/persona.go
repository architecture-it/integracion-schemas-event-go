// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TransactionEvent.avsc
 */
package AltaOrdenEnvioEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Persona struct {
	NombreCompleto *UnionNullString `json:"nombreCompleto"`

	Email *UnionNullString `json:"email"`

	DocumentoTipo *UnionNullString `json:"documentoTipo"`

	DocumentoNumero *UnionNullString `json:"documentoNumero"`

	Telefonos *UnionNullListaDeTelefonos `json:"telefonos"`
}

const PersonaAvroCRC64Fingerprint = "AÎ‡\xe11j\x1bq"

func NewPersona() Persona {
	r := Persona{}
	r.NombreCompleto = nil
	r.Email = nil
	r.DocumentoTipo = nil
	r.DocumentoNumero = nil
	r.Telefonos = nil
	return r
}

func DeserializePersona(r io.Reader) (Persona, error) {
	t := NewPersona()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePersonaFromSchema(r io.Reader, schema string) (Persona, error) {
	t := NewPersona()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePersona(r Persona, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.NombreCompleto, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Email, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DocumentoTipo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DocumentoNumero, w)
	if err != nil {
		return err
	}
	err = writeUnionNullListaDeTelefonos(r.Telefonos, w)
	if err != nil {
		return err
	}
	return err
}

func (r Persona) Serialize(w io.Writer) error {
	return writePersona(r, w)
}

func (r Persona) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"nombreCompleto\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"email\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"documentoTipo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"documentoNumero\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"telefonos\",\"type\":[\"null\",{\"fields\":[{\"name\":\"listaDeTelefonos\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"name\":\"tipo\",\"type\":\"string\"},{\"name\":\"numero\",\"type\":\"string\"}],\"name\":\"Telefono\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"ListaDeTelefonos\",\"type\":\"record\"}]}],\"name\":\"Andreani.AltaOrdenEnvio.Events.Common.Persona\",\"type\":\"record\"}"
}

func (r Persona) SchemaName() string {
	return "Andreani.AltaOrdenEnvio.Events.Common.Persona"
}

func (_ Persona) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Persona) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Persona) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Persona) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Persona) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Persona) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Persona) SetString(v string)   { panic("Unsupported operation") }
func (_ Persona) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Persona) Get(i int) types.Field {
	switch i {
	case 0:
		r.NombreCompleto = NewUnionNullString()

		return r.NombreCompleto
	case 1:
		r.Email = NewUnionNullString()

		return r.Email
	case 2:
		r.DocumentoTipo = NewUnionNullString()

		return r.DocumentoTipo
	case 3:
		r.DocumentoNumero = NewUnionNullString()

		return r.DocumentoNumero
	case 4:
		r.Telefonos = NewUnionNullListaDeTelefonos()

		return r.Telefonos
	}
	panic("Unknown field index")
}

func (r *Persona) SetDefault(i int) {
	switch i {
	case 0:
		r.NombreCompleto = nil
		return
	case 1:
		r.Email = nil
		return
	case 2:
		r.DocumentoTipo = nil
		return
	case 3:
		r.DocumentoNumero = nil
		return
	case 4:
		r.Telefonos = nil
		return
	}
	panic("Unknown field index")
}

func (r *Persona) NullField(i int) {
	switch i {
	case 0:
		r.NombreCompleto = nil
		return
	case 1:
		r.Email = nil
		return
	case 2:
		r.DocumentoTipo = nil
		return
	case 3:
		r.DocumentoNumero = nil
		return
	case 4:
		r.Telefonos = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Persona) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Persona) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Persona) HintSize(int)                     { panic("Unsupported operation") }
func (_ Persona) Finalize()                        {}

func (_ Persona) AvroCRC64Fingerprint() []byte {
	return []byte(PersonaAvroCRC64Fingerprint)
}

func (r Persona) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["nombreCompleto"], err = json.Marshal(r.NombreCompleto)
	if err != nil {
		return nil, err
	}
	output["email"], err = json.Marshal(r.Email)
	if err != nil {
		return nil, err
	}
	output["documentoTipo"], err = json.Marshal(r.DocumentoTipo)
	if err != nil {
		return nil, err
	}
	output["documentoNumero"], err = json.Marshal(r.DocumentoNumero)
	if err != nil {
		return nil, err
	}
	output["telefonos"], err = json.Marshal(r.Telefonos)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Persona) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["nombreCompleto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NombreCompleto); err != nil {
			return err
		}
	} else {
		r.NombreCompleto = NewUnionNullString()

		r.NombreCompleto = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["email"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Email); err != nil {
			return err
		}
	} else {
		r.Email = NewUnionNullString()

		r.Email = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["documentoTipo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DocumentoTipo); err != nil {
			return err
		}
	} else {
		r.DocumentoTipo = NewUnionNullString()

		r.DocumentoTipo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["documentoNumero"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DocumentoNumero); err != nil {
			return err
		}
	} else {
		r.DocumentoNumero = NewUnionNullString()

		r.DocumentoNumero = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["telefonos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Telefonos); err != nil {
			return err
		}
	} else {
		r.Telefonos = NewUnionNullListaDeTelefonos()

		r.Telefonos = nil
	}
	return nil
}
