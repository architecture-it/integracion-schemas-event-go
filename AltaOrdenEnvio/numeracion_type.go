// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     NumeracionType.avsc
 */
package AltaOrdenEnvioEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type NumeracionType int32

const (
	NumeracionTypeB2B             NumeracionType = 0
	NumeracionTypeB2C             NumeracionType = 1
	NumeracionTypeAgrupadorBultos NumeracionType = 2
	NumeracionTypeDMS             NumeracionType = 3
)

func (e NumeracionType) String() string {
	switch e {
	case NumeracionTypeB2B:
		return "B2B"
	case NumeracionTypeB2C:
		return "B2C"
	case NumeracionTypeAgrupadorBultos:
		return "AgrupadorBultos"
	case NumeracionTypeDMS:
		return "DMS"
	}
	return "unknown"
}

func writeNumeracionType(r NumeracionType, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewNumeracionTypeValue(raw string) (r NumeracionType, err error) {
	switch raw {
	case "B2B":
		return NumeracionTypeB2B, nil
	case "B2C":
		return NumeracionTypeB2C, nil
	case "AgrupadorBultos":
		return NumeracionTypeAgrupadorBultos, nil
	case "DMS":
		return NumeracionTypeDMS, nil
	}

	return -1, fmt.Errorf("invalid value for NumeracionType: '%s'", raw)

}

func (b NumeracionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *NumeracionType) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewNumeracionTypeValue(stringVal)
	*b = val
	return err
}

type NumeracionTypeWrapper struct {
	Target *NumeracionType
}

func (b NumeracionTypeWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b NumeracionTypeWrapper) SetInt(v int32) {
	*(b.Target) = NumeracionType(v)
}

func (b NumeracionTypeWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b NumeracionTypeWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b NumeracionTypeWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b NumeracionTypeWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b NumeracionTypeWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b NumeracionTypeWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b NumeracionTypeWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b NumeracionTypeWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b NumeracionTypeWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b NumeracionTypeWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b NumeracionTypeWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b NumeracionTypeWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b NumeracionTypeWrapper) Finalize() {}
