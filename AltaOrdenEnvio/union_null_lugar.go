// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     LugarDeRetirOEntrega.avsc
 */
package AltaOrdenEnvioEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullLugarTypeEnum int

const (
	UnionNullLugarTypeEnumLugar UnionNullLugarTypeEnum = 1
)

type UnionNullLugar struct {
	Null      *types.NullVal
	Lugar     Lugar
	UnionType UnionNullLugarTypeEnum
}

func writeUnionNullLugar(r *UnionNullLugar, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullLugarTypeEnumLugar:
		return writeLugar(r.Lugar, w)
	}
	return fmt.Errorf("invalid value for *UnionNullLugar")
}

func NewUnionNullLugar() *UnionNullLugar {
	return &UnionNullLugar{}
}

func (r *UnionNullLugar) Serialize(w io.Writer) error {
	return writeUnionNullLugar(r, w)
}

func DeserializeUnionNullLugar(r io.Reader) (*UnionNullLugar, error) {
	t := NewUnionNullLugar()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullLugarFromSchema(r io.Reader, schema string) (*UnionNullLugar, error) {
	t := NewUnionNullLugar()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullLugar) Schema() string {
	return "[\"null\",{\"fields\":[{\"name\":\"postal\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"localidad\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"pais\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"codigoPostal\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"componentesDeDireccion\",\"type\":[\"null\",{\"fields\":[{\"name\":\"metadatos\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"name\":\"meta\",\"type\":\"string\"},{\"name\":\"contenido\",\"type\":\"string\"}],\"name\":\"Metadato\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"ListaDePropiedades\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"casillaDeCorreo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"calle\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"numero\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"piso\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"departamento\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"region\",\"type\":[\"null\",\"string\"]}],\"name\":\"DireccionPostal\",\"type\":\"record\"}]},{\"name\":\"sucursal\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"ID\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"nomenclatura\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"descripcion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"direccion\",\"type\":[\"null\",\"Andreani.AltaOrdenEnvio.Events.Common.DireccionPostal\"]},{\"default\":null,\"name\":\"datosAdicionales\",\"type\":[\"null\",\"Andreani.AltaOrdenEnvio.Events.Common.ListaDePropiedades\"]},{\"default\":null,\"name\":\"listaDeTelefonos\",\"type\":[\"null\",{\"fields\":[{\"name\":\"listaDeTelefonos\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"name\":\"tipo\",\"type\":\"string\"},{\"name\":\"numero\",\"type\":\"string\"}],\"name\":\"Telefono\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"ListaDeTelefonos\",\"type\":\"record\"}]}],\"name\":\"Sucursal\",\"type\":\"record\"}]},{\"name\":\"coordenadas\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"latitud\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"longitud\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"elevacion\",\"type\":[\"null\",\"double\"]}],\"name\":\"GeoCoordenada\",\"type\":\"record\"}]}],\"name\":\"Lugar\",\"type\":\"record\"}]"
}

func (_ *UnionNullLugar) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullLugar) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullLugar) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullLugar) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullLugar) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullLugar) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullLugar) SetLong(v int64) {

	r.UnionType = (UnionNullLugarTypeEnum)(v)
}

func (r *UnionNullLugar) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.Lugar = NewLugar()
		return &types.Record{Target: (&r.Lugar)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullLugar) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionNullLugar) HintSize(i int)                   { panic("Unsupported operation") }
func (_ *UnionNullLugar) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionNullLugar) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullLugar) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionNullLugar) Finalize()                        {}

func (r *UnionNullLugar) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullLugarTypeEnumLugar:
		return json.Marshal(map[string]interface{}{"Andreani.AltaOrdenEnvio.Events.Common.Lugar": r.Lugar})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullLugar")
}

func (r *UnionNullLugar) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["Andreani.AltaOrdenEnvio.Events.Common.Lugar"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.Lugar)
	}
	return fmt.Errorf("invalid value for *UnionNullLugar")
}
