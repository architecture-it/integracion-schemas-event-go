// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TransactionEvent.avsc
 */
package AltaOrdenEnvioEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayBultoResponseTypeEnum int

const (
	UnionNullArrayBultoResponseTypeEnumArrayBultoResponse UnionNullArrayBultoResponseTypeEnum = 1
)

type UnionNullArrayBultoResponse struct {
	Null               *types.NullVal
	ArrayBultoResponse []BultoResponse
	UnionType          UnionNullArrayBultoResponseTypeEnum
}

func writeUnionNullArrayBultoResponse(r *UnionNullArrayBultoResponse, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayBultoResponseTypeEnumArrayBultoResponse:
		return writeArrayBultoResponse(r.ArrayBultoResponse, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayBultoResponse")
}

func NewUnionNullArrayBultoResponse() *UnionNullArrayBultoResponse {
	return &UnionNullArrayBultoResponse{}
}

func (r *UnionNullArrayBultoResponse) Serialize(w io.Writer) error {
	return writeUnionNullArrayBultoResponse(r, w)
}

func DeserializeUnionNullArrayBultoResponse(r io.Reader) (*UnionNullArrayBultoResponse, error) {
	t := NewUnionNullArrayBultoResponse()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayBultoResponseFromSchema(r io.Reader, schema string) (*UnionNullArrayBultoResponse, error) {
	t := NewUnionNullArrayBultoResponse()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayBultoResponse) Schema() string {
	return "[\"null\",{\"items\":{\"fields\":[{\"name\":\"NumeroDeBulto\",\"type\":\"string\"},{\"name\":\"NumeroDeEnvio\",\"type\":\"string\"},{\"name\":\"Totalizador\",\"type\":\"string\"},{\"default\":null,\"name\":\"Linking\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"name\":\"meta\",\"type\":\"string\"},{\"name\":\"contenido\",\"type\":\"string\"}],\"name\":\"Metadato\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"BultoResponse\",\"type\":\"record\"},\"type\":\"array\"}]"
}

func (_ *UnionNullArrayBultoResponse) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullArrayBultoResponse) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullArrayBultoResponse) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullArrayBultoResponse) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullArrayBultoResponse) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullArrayBultoResponse) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullArrayBultoResponse) SetLong(v int64) {

	r.UnionType = (UnionNullArrayBultoResponseTypeEnum)(v)
}

func (r *UnionNullArrayBultoResponse) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayBultoResponse = make([]BultoResponse, 0)
		return &ArrayBultoResponseWrapper{Target: (&r.ArrayBultoResponse)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayBultoResponse) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullArrayBultoResponse) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullArrayBultoResponse) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullArrayBultoResponse) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayBultoResponse) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *UnionNullArrayBultoResponse) Finalize()                {}

func (r *UnionNullArrayBultoResponse) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayBultoResponseTypeEnumArrayBultoResponse:
		return json.Marshal(map[string]interface{}{"array": r.ArrayBultoResponse})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayBultoResponse")
}

func (r *UnionNullArrayBultoResponse) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayBultoResponse)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayBultoResponse")
}
