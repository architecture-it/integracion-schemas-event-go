// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TransactionEvent.avsc
 */
package AltaOrdenEnvioEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type BultoRequest struct {
	Kilos float64 `json:"Kilos"`

	LargoCm float64 `json:"LargoCm"`

	AltoCm float64 `json:"AltoCm"`

	AnchoCm float64 `json:"AnchoCm"`

	VolumenCm float64 `json:"VolumenCm"`

	ValorDeclaradoSinImpuestos float64 `json:"ValorDeclaradoSinImpuestos"`

	ValorDeclaradoConImpuestos float64 `json:"ValorDeclaradoConImpuestos"`

	ValorDeclarado float64 `json:"ValorDeclarado"`

	Descripcion *UnionNullString `json:"Descripcion"`

	EAN *UnionNullString `json:"EAN"`

	Componentes *UnionNullComponentes `json:"componentes"`

	Referencias *UnionNullArrayMetadato `json:"Referencias"`

	NumeroDeEnvio *UnionNullString `json:"NumeroDeEnvio"`
}

const BultoRequestAvroCRC64Fingerprint = "\f\xb7t\xba\xaa30\xbd"

func NewBultoRequest() BultoRequest {
	r := BultoRequest{}
	r.Descripcion = nil
	r.EAN = nil
	r.Componentes = nil
	r.Referencias = nil
	r.NumeroDeEnvio = nil
	return r
}

func DeserializeBultoRequest(r io.Reader) (BultoRequest, error) {
	t := NewBultoRequest()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeBultoRequestFromSchema(r io.Reader, schema string) (BultoRequest, error) {
	t := NewBultoRequest()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeBultoRequest(r BultoRequest, w io.Writer) error {
	var err error
	err = vm.WriteDouble(r.Kilos, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.LargoCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.AltoCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.AnchoCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.VolumenCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.ValorDeclaradoSinImpuestos, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.ValorDeclaradoConImpuestos, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.ValorDeclarado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Descripcion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EAN, w)
	if err != nil {
		return err
	}
	err = writeUnionNullComponentes(r.Componentes, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayMetadato(r.Referencias, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NumeroDeEnvio, w)
	if err != nil {
		return err
	}
	return err
}

func (r BultoRequest) Serialize(w io.Writer) error {
	return writeBultoRequest(r, w)
}

func (r BultoRequest) Schema() string {
	return "{\"fields\":[{\"name\":\"Kilos\",\"type\":\"double\"},{\"name\":\"LargoCm\",\"type\":\"double\"},{\"name\":\"AltoCm\",\"type\":\"double\"},{\"name\":\"AnchoCm\",\"type\":\"double\"},{\"name\":\"VolumenCm\",\"type\":\"double\"},{\"name\":\"ValorDeclaradoSinImpuestos\",\"type\":\"double\"},{\"name\":\"ValorDeclaradoConImpuestos\",\"type\":\"double\"},{\"name\":\"ValorDeclarado\",\"type\":\"double\"},{\"default\":null,\"name\":\"Descripcion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EAN\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"componentes\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"numeroAgrupador\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"componentesHijos\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"default\":null,\"name\":\"numeroHijo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"referencias\",\"type\":[\"null\",{\"fields\":[{\"name\":\"metadatos\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"name\":\"meta\",\"type\":\"string\"},{\"name\":\"contenido\",\"type\":\"string\"}],\"name\":\"Metadato\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"ListaDePropiedades\",\"type\":\"record\"}]}],\"name\":\"ComponenteHijo\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"Componentes\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Referencias\",\"type\":[\"null\",{\"items\":\"Andreani.AltaOrdenEnvio.Events.Common.Metadato\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"NumeroDeEnvio\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.AltaOrdenEnvio.Events.Common.BultoRequest\",\"type\":\"record\"}"
}

func (r BultoRequest) SchemaName() string {
	return "Andreani.AltaOrdenEnvio.Events.Common.BultoRequest"
}

func (_ BultoRequest) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ BultoRequest) SetInt(v int32)       { panic("Unsupported operation") }
func (_ BultoRequest) SetLong(v int64)      { panic("Unsupported operation") }
func (_ BultoRequest) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ BultoRequest) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ BultoRequest) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ BultoRequest) SetString(v string)   { panic("Unsupported operation") }
func (_ BultoRequest) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *BultoRequest) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Double{Target: &r.Kilos}

		return w

	case 1:
		w := types.Double{Target: &r.LargoCm}

		return w

	case 2:
		w := types.Double{Target: &r.AltoCm}

		return w

	case 3:
		w := types.Double{Target: &r.AnchoCm}

		return w

	case 4:
		w := types.Double{Target: &r.VolumenCm}

		return w

	case 5:
		w := types.Double{Target: &r.ValorDeclaradoSinImpuestos}

		return w

	case 6:
		w := types.Double{Target: &r.ValorDeclaradoConImpuestos}

		return w

	case 7:
		w := types.Double{Target: &r.ValorDeclarado}

		return w

	case 8:
		r.Descripcion = NewUnionNullString()

		return r.Descripcion
	case 9:
		r.EAN = NewUnionNullString()

		return r.EAN
	case 10:
		r.Componentes = NewUnionNullComponentes()

		return r.Componentes
	case 11:
		r.Referencias = NewUnionNullArrayMetadato()

		return r.Referencias
	case 12:
		r.NumeroDeEnvio = NewUnionNullString()

		return r.NumeroDeEnvio
	}
	panic("Unknown field index")
}

func (r *BultoRequest) SetDefault(i int) {
	switch i {
	case 8:
		r.Descripcion = nil
		return
	case 9:
		r.EAN = nil
		return
	case 10:
		r.Componentes = nil
		return
	case 11:
		r.Referencias = nil
		return
	case 12:
		r.NumeroDeEnvio = nil
		return
	}
	panic("Unknown field index")
}

func (r *BultoRequest) NullField(i int) {
	switch i {
	case 8:
		r.Descripcion = nil
		return
	case 9:
		r.EAN = nil
		return
	case 10:
		r.Componentes = nil
		return
	case 11:
		r.Referencias = nil
		return
	case 12:
		r.NumeroDeEnvio = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ BultoRequest) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ BultoRequest) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ BultoRequest) HintSize(int)                     { panic("Unsupported operation") }
func (_ BultoRequest) Finalize()                        {}

func (_ BultoRequest) AvroCRC64Fingerprint() []byte {
	return []byte(BultoRequestAvroCRC64Fingerprint)
}

func (r BultoRequest) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Kilos"], err = json.Marshal(r.Kilos)
	if err != nil {
		return nil, err
	}
	output["LargoCm"], err = json.Marshal(r.LargoCm)
	if err != nil {
		return nil, err
	}
	output["AltoCm"], err = json.Marshal(r.AltoCm)
	if err != nil {
		return nil, err
	}
	output["AnchoCm"], err = json.Marshal(r.AnchoCm)
	if err != nil {
		return nil, err
	}
	output["VolumenCm"], err = json.Marshal(r.VolumenCm)
	if err != nil {
		return nil, err
	}
	output["ValorDeclaradoSinImpuestos"], err = json.Marshal(r.ValorDeclaradoSinImpuestos)
	if err != nil {
		return nil, err
	}
	output["ValorDeclaradoConImpuestos"], err = json.Marshal(r.ValorDeclaradoConImpuestos)
	if err != nil {
		return nil, err
	}
	output["ValorDeclarado"], err = json.Marshal(r.ValorDeclarado)
	if err != nil {
		return nil, err
	}
	output["Descripcion"], err = json.Marshal(r.Descripcion)
	if err != nil {
		return nil, err
	}
	output["EAN"], err = json.Marshal(r.EAN)
	if err != nil {
		return nil, err
	}
	output["componentes"], err = json.Marshal(r.Componentes)
	if err != nil {
		return nil, err
	}
	output["Referencias"], err = json.Marshal(r.Referencias)
	if err != nil {
		return nil, err
	}
	output["NumeroDeEnvio"], err = json.Marshal(r.NumeroDeEnvio)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *BultoRequest) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Kilos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Kilos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Kilos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["LargoCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LargoCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for LargoCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AltoCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AltoCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AltoCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AnchoCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AnchoCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AnchoCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["VolumenCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VolumenCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for VolumenCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValorDeclaradoSinImpuestos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValorDeclaradoSinImpuestos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ValorDeclaradoSinImpuestos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValorDeclaradoConImpuestos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValorDeclaradoConImpuestos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ValorDeclaradoConImpuestos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValorDeclarado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValorDeclarado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ValorDeclarado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Descripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Descripcion); err != nil {
			return err
		}
	} else {
		r.Descripcion = NewUnionNullString()

		r.Descripcion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EAN"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EAN); err != nil {
			return err
		}
	} else {
		r.EAN = NewUnionNullString()

		r.EAN = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["componentes"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Componentes); err != nil {
			return err
		}
	} else {
		r.Componentes = NewUnionNullComponentes()

		r.Componentes = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Referencias"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Referencias); err != nil {
			return err
		}
	} else {
		r.Referencias = NewUnionNullArrayMetadato()

		r.Referencias = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NumeroDeEnvio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeEnvio); err != nil {
			return err
		}
	} else {
		r.NumeroDeEnvio = NewUnionNullString()

		r.NumeroDeEnvio = nil
	}
	return nil
}
