// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ImpresionEtiqueta.avsc
 */
package SppeImpresionEtiquetaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ImpresionEtiqueta struct {
	NumeroEnvioAndreani *UnionStringNull `json:"NumeroEnvioAndreani"`
}

const ImpresionEtiquetaAvroCRC64Fingerprint = ",_\xb3r\xfa-\xfe*"

func NewImpresionEtiqueta() ImpresionEtiqueta {
	r := ImpresionEtiqueta{}
	r.NumeroEnvioAndreani = NewUnionStringNull()

	return r
}

func DeserializeImpresionEtiqueta(r io.Reader) (ImpresionEtiqueta, error) {
	t := NewImpresionEtiqueta()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeImpresionEtiquetaFromSchema(r io.Reader, schema string) (ImpresionEtiqueta, error) {
	t := NewImpresionEtiqueta()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeImpresionEtiqueta(r ImpresionEtiqueta, w io.Writer) error {
	var err error
	err = writeUnionStringNull(r.NumeroEnvioAndreani, w)
	if err != nil {
		return err
	}
	return err
}

func (r ImpresionEtiqueta) Serialize(w io.Writer) error {
	return writeImpresionEtiqueta(r, w)
}

func (r ImpresionEtiqueta) Schema() string {
	return "{\"fields\":[{\"name\":\"NumeroEnvioAndreani\",\"type\":[\"string\",\"null\"]}],\"name\":\"Andreani.SppeImpresionEtiqueta.Events.Record.ImpresionEtiqueta\",\"type\":\"record\"}"
}

func (r ImpresionEtiqueta) SchemaName() string {
	return "Andreani.SppeImpresionEtiqueta.Events.Record.ImpresionEtiqueta"
}

func (_ ImpresionEtiqueta) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ImpresionEtiqueta) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ImpresionEtiqueta) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ImpresionEtiqueta) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ImpresionEtiqueta) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ImpresionEtiqueta) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ImpresionEtiqueta) SetString(v string)   { panic("Unsupported operation") }
func (_ ImpresionEtiqueta) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ImpresionEtiqueta) Get(i int) types.Field {
	switch i {
	case 0:
		r.NumeroEnvioAndreani = NewUnionStringNull()

		return r.NumeroEnvioAndreani
	}
	panic("Unknown field index")
}

func (r *ImpresionEtiqueta) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ImpresionEtiqueta) NullField(i int) {
	switch i {
	case 0:
		r.NumeroEnvioAndreani = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ImpresionEtiqueta) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ImpresionEtiqueta) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ImpresionEtiqueta) HintSize(int)                     { panic("Unsupported operation") }
func (_ ImpresionEtiqueta) Finalize()                        {}

func (_ ImpresionEtiqueta) AvroCRC64Fingerprint() []byte {
	return []byte(ImpresionEtiquetaAvroCRC64Fingerprint)
}

func (r ImpresionEtiqueta) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["NumeroEnvioAndreani"], err = json.Marshal(r.NumeroEnvioAndreani)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ImpresionEtiqueta) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["NumeroEnvioAndreani"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroEnvioAndreani); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NumeroEnvioAndreani")
	}
	return nil
}
