// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     PaymentEvent.avsc
 */
package TransactionalPaymentsEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type PaymentEvent struct {
	Reference *UnionNullString `json:"Reference"`

	PaymentDate *UnionNullString `json:"PaymentDate"`

	Status *UnionNullString `json:"Status"`

	ServiceName *UnionNullString `json:"ServiceName"`

	PaymentGatewayName *UnionNullString `json:"PaymentGatewayName"`

	ExpectedAmount *UnionNullString `json:"ExpectedAmount"`

	ReceivedAmount *UnionNullString `json:"ReceivedAmount"`

	ExternalId *UnionNullString `json:"ExternalId"`
}

const PaymentEventAvroCRC64Fingerprint = "\xacÙ‡\xdd\x0f\xd5\x0e\x9f"

func NewPaymentEvent() PaymentEvent {
	r := PaymentEvent{}
	r.Reference = nil
	r.PaymentDate = nil
	r.Status = nil
	r.ServiceName = nil
	r.PaymentGatewayName = nil
	r.ExpectedAmount = nil
	r.ReceivedAmount = nil
	r.ExternalId = nil
	return r
}

func DeserializePaymentEvent(r io.Reader) (PaymentEvent, error) {
	t := NewPaymentEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePaymentEventFromSchema(r io.Reader, schema string) (PaymentEvent, error) {
	t := NewPaymentEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePaymentEvent(r PaymentEvent, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Reference, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PaymentDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Status, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ServiceName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PaymentGatewayName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ExpectedAmount, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ReceivedAmount, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ExternalId, w)
	if err != nil {
		return err
	}
	return err
}

func (r PaymentEvent) Serialize(w io.Writer) error {
	return writePaymentEvent(r, w)
}

func (r PaymentEvent) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Reference\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PaymentDate\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Status\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ServiceName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PaymentGatewayName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ExpectedAmount\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ReceivedAmount\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ExternalId\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.TransactionalPayments.Events.Record.PaymentEvent\",\"type\":\"record\"}"
}

func (r PaymentEvent) SchemaName() string {
	return "Andreani.TransactionalPayments.Events.Record.PaymentEvent"
}

func (_ PaymentEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ PaymentEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ PaymentEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ PaymentEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ PaymentEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ PaymentEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ PaymentEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ PaymentEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *PaymentEvent) Get(i int) types.Field {
	switch i {
	case 0:
		r.Reference = NewUnionNullString()

		return r.Reference
	case 1:
		r.PaymentDate = NewUnionNullString()

		return r.PaymentDate
	case 2:
		r.Status = NewUnionNullString()

		return r.Status
	case 3:
		r.ServiceName = NewUnionNullString()

		return r.ServiceName
	case 4:
		r.PaymentGatewayName = NewUnionNullString()

		return r.PaymentGatewayName
	case 5:
		r.ExpectedAmount = NewUnionNullString()

		return r.ExpectedAmount
	case 6:
		r.ReceivedAmount = NewUnionNullString()

		return r.ReceivedAmount
	case 7:
		r.ExternalId = NewUnionNullString()

		return r.ExternalId
	}
	panic("Unknown field index")
}

func (r *PaymentEvent) SetDefault(i int) {
	switch i {
	case 0:
		r.Reference = nil
		return
	case 1:
		r.PaymentDate = nil
		return
	case 2:
		r.Status = nil
		return
	case 3:
		r.ServiceName = nil
		return
	case 4:
		r.PaymentGatewayName = nil
		return
	case 5:
		r.ExpectedAmount = nil
		return
	case 6:
		r.ReceivedAmount = nil
		return
	case 7:
		r.ExternalId = nil
		return
	}
	panic("Unknown field index")
}

func (r *PaymentEvent) NullField(i int) {
	switch i {
	case 0:
		r.Reference = nil
		return
	case 1:
		r.PaymentDate = nil
		return
	case 2:
		r.Status = nil
		return
	case 3:
		r.ServiceName = nil
		return
	case 4:
		r.PaymentGatewayName = nil
		return
	case 5:
		r.ExpectedAmount = nil
		return
	case 6:
		r.ReceivedAmount = nil
		return
	case 7:
		r.ExternalId = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ PaymentEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ PaymentEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ PaymentEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ PaymentEvent) Finalize()                        {}

func (_ PaymentEvent) AvroCRC64Fingerprint() []byte {
	return []byte(PaymentEventAvroCRC64Fingerprint)
}

func (r PaymentEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Reference"], err = json.Marshal(r.Reference)
	if err != nil {
		return nil, err
	}
	output["PaymentDate"], err = json.Marshal(r.PaymentDate)
	if err != nil {
		return nil, err
	}
	output["Status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	output["ServiceName"], err = json.Marshal(r.ServiceName)
	if err != nil {
		return nil, err
	}
	output["PaymentGatewayName"], err = json.Marshal(r.PaymentGatewayName)
	if err != nil {
		return nil, err
	}
	output["ExpectedAmount"], err = json.Marshal(r.ExpectedAmount)
	if err != nil {
		return nil, err
	}
	output["ReceivedAmount"], err = json.Marshal(r.ReceivedAmount)
	if err != nil {
		return nil, err
	}
	output["ExternalId"], err = json.Marshal(r.ExternalId)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *PaymentEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Reference"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Reference); err != nil {
			return err
		}
	} else {
		r.Reference = NewUnionNullString()

		r.Reference = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PaymentDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PaymentDate); err != nil {
			return err
		}
	} else {
		r.PaymentDate = NewUnionNullString()

		r.PaymentDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		r.Status = NewUnionNullString()

		r.Status = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ServiceName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ServiceName); err != nil {
			return err
		}
	} else {
		r.ServiceName = NewUnionNullString()

		r.ServiceName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PaymentGatewayName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PaymentGatewayName); err != nil {
			return err
		}
	} else {
		r.PaymentGatewayName = NewUnionNullString()

		r.PaymentGatewayName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ExpectedAmount"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ExpectedAmount); err != nil {
			return err
		}
	} else {
		r.ExpectedAmount = NewUnionNullString()

		r.ExpectedAmount = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ReceivedAmount"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ReceivedAmount); err != nil {
			return err
		}
	} else {
		r.ReceivedAmount = NewUnionNullString()

		r.ReceivedAmount = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ExternalId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ExternalId); err != nil {
			return err
		}
	} else {
		r.ExternalId = NewUnionNullString()

		r.ExternalId = nil
	}
	return nil
}
