// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ListInterface630.avsc
 */
package HCMInterface630Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ListInterface630 struct {
	Interfaces []Interface630Data `json:"interfaces"`
}

const ListInterface630AvroCRC64Fingerprint = "(sV\x87ƃҩ"

func NewListInterface630() ListInterface630 {
	r := ListInterface630{}
	r.Interfaces = make([]Interface630Data, 0)

	return r
}

func DeserializeListInterface630(r io.Reader) (ListInterface630, error) {
	t := NewListInterface630()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeListInterface630FromSchema(r io.Reader, schema string) (ListInterface630, error) {
	t := NewListInterface630()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeListInterface630(r ListInterface630, w io.Writer) error {
	var err error
	err = writeArrayInterface630Data(r.Interfaces, w)
	if err != nil {
		return err
	}
	return err
}

func (r ListInterface630) Serialize(w io.Writer) error {
	return writeListInterface630(r, w)
}

func (r ListInterface630) Schema() string {
	return "{\"fields\":[{\"name\":\"interfaces\",\"type\":{\"items\":{\"fields\":[{\"name\":\"TipoDeEstructura\",\"type\":\"string\"},{\"name\":\"Legajo\",\"type\":\"long\"},{\"name\":\"FechaDesde\",\"type\":\"string\"},{\"name\":\"Estructura\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FechaHasta\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TipoMotivo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Motivo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TipoDeIL\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NumeroDeIL\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NumeroDeExpediente\",\"type\":[\"null\",\"string\"]}],\"name\":\"Interface630Data\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Andreani.HCMInterface630.Events.Record.ListInterface630\",\"type\":\"record\"}"
}

func (r ListInterface630) SchemaName() string {
	return "Andreani.HCMInterface630.Events.Record.ListInterface630"
}

func (_ ListInterface630) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ListInterface630) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ListInterface630) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ListInterface630) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ListInterface630) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ListInterface630) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ListInterface630) SetString(v string)   { panic("Unsupported operation") }
func (_ ListInterface630) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ListInterface630) Get(i int) types.Field {
	switch i {
	case 0:
		r.Interfaces = make([]Interface630Data, 0)

		w := ArrayInterface630DataWrapper{Target: &r.Interfaces}

		return w

	}
	panic("Unknown field index")
}

func (r *ListInterface630) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ListInterface630) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ ListInterface630) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ListInterface630) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ListInterface630) HintSize(int)                     { panic("Unsupported operation") }
func (_ ListInterface630) Finalize()                        {}

func (_ ListInterface630) AvroCRC64Fingerprint() []byte {
	return []byte(ListInterface630AvroCRC64Fingerprint)
}

func (r ListInterface630) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["interfaces"], err = json.Marshal(r.Interfaces)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ListInterface630) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["interfaces"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Interfaces); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for interfaces")
	}
	return nil
}
