// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EnviosCotizarEvent.avsc
 */
package CorporativoBackendEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Envio struct {
	Id string `json:"Id"`

	NumeroContrato string `json:"NumeroContrato"`

	Cliente string `json:"Cliente"`

	CodigoPostalOrigenId string `json:"CodigoPostalOrigenId"`

	CodigoPostalDestino string `json:"CodigoPostalDestino"`

	Peso string `json:"Peso"`

	Volumen string `json:"Volumen"`

	ValorDeclarado string `json:"ValorDeclarado"`

	AltoCm string `json:"AltoCm"`

	AnchoCm string `json:"AnchoCm"`

	LargoCm string `json:"LargoCm"`

	TipoDeEnvioId string `json:"TipoDeEnvioId"`

	ItemId string `json:"ItemId"`

	PesoUnidad string `json:"PesoUnidad"`
}

const EnvioAvroCRC64Fingerprint = "\x90\xf9J\xaa\xce\xc52\xc7"

func NewEnvio() Envio {
	r := Envio{}
	return r
}

func DeserializeEnvio(r io.Reader) (Envio, error) {
	t := NewEnvio()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEnvioFromSchema(r io.Reader, schema string) (Envio, error) {
	t := NewEnvio()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEnvio(r Envio, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NumeroContrato, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Cliente, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodigoPostalOrigenId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodigoPostalDestino, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Peso, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Volumen, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ValorDeclarado, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.AltoCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.AnchoCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LargoCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.TipoDeEnvioId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ItemId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.PesoUnidad, w)
	if err != nil {
		return err
	}
	return err
}

func (r Envio) Serialize(w io.Writer) error {
	return writeEnvio(r, w)
}

func (r Envio) Schema() string {
	return "{\"fields\":[{\"name\":\"Id\",\"type\":\"string\"},{\"name\":\"NumeroContrato\",\"type\":\"string\"},{\"name\":\"Cliente\",\"type\":\"string\"},{\"name\":\"CodigoPostalOrigenId\",\"type\":\"string\"},{\"name\":\"CodigoPostalDestino\",\"type\":\"string\"},{\"name\":\"Peso\",\"type\":\"string\"},{\"name\":\"Volumen\",\"type\":\"string\"},{\"name\":\"ValorDeclarado\",\"type\":\"string\"},{\"name\":\"AltoCm\",\"type\":\"string\"},{\"name\":\"AnchoCm\",\"type\":\"string\"},{\"name\":\"LargoCm\",\"type\":\"string\"},{\"name\":\"TipoDeEnvioId\",\"type\":\"string\"},{\"name\":\"ItemId\",\"type\":\"string\"},{\"name\":\"PesoUnidad\",\"type\":\"string\"}],\"name\":\"Andreani.CorporativoBackend.Events.Common.Envio\",\"type\":\"record\"}"
}

func (r Envio) SchemaName() string {
	return "Andreani.CorporativoBackend.Events.Common.Envio"
}

func (_ Envio) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Envio) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Envio) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Envio) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Envio) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Envio) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Envio) SetString(v string)   { panic("Unsupported operation") }
func (_ Envio) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Envio) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.NumeroContrato}

		return w

	case 2:
		w := types.String{Target: &r.Cliente}

		return w

	case 3:
		w := types.String{Target: &r.CodigoPostalOrigenId}

		return w

	case 4:
		w := types.String{Target: &r.CodigoPostalDestino}

		return w

	case 5:
		w := types.String{Target: &r.Peso}

		return w

	case 6:
		w := types.String{Target: &r.Volumen}

		return w

	case 7:
		w := types.String{Target: &r.ValorDeclarado}

		return w

	case 8:
		w := types.String{Target: &r.AltoCm}

		return w

	case 9:
		w := types.String{Target: &r.AnchoCm}

		return w

	case 10:
		w := types.String{Target: &r.LargoCm}

		return w

	case 11:
		w := types.String{Target: &r.TipoDeEnvioId}

		return w

	case 12:
		w := types.String{Target: &r.ItemId}

		return w

	case 13:
		w := types.String{Target: &r.PesoUnidad}

		return w

	}
	panic("Unknown field index")
}

func (r *Envio) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Envio) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Envio) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Envio) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Envio) HintSize(int)                     { panic("Unsupported operation") }
func (_ Envio) Finalize()                        {}

func (_ Envio) AvroCRC64Fingerprint() []byte {
	return []byte(EnvioAvroCRC64Fingerprint)
}

func (r Envio) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["NumeroContrato"], err = json.Marshal(r.NumeroContrato)
	if err != nil {
		return nil, err
	}
	output["Cliente"], err = json.Marshal(r.Cliente)
	if err != nil {
		return nil, err
	}
	output["CodigoPostalOrigenId"], err = json.Marshal(r.CodigoPostalOrigenId)
	if err != nil {
		return nil, err
	}
	output["CodigoPostalDestino"], err = json.Marshal(r.CodigoPostalDestino)
	if err != nil {
		return nil, err
	}
	output["Peso"], err = json.Marshal(r.Peso)
	if err != nil {
		return nil, err
	}
	output["Volumen"], err = json.Marshal(r.Volumen)
	if err != nil {
		return nil, err
	}
	output["ValorDeclarado"], err = json.Marshal(r.ValorDeclarado)
	if err != nil {
		return nil, err
	}
	output["AltoCm"], err = json.Marshal(r.AltoCm)
	if err != nil {
		return nil, err
	}
	output["AnchoCm"], err = json.Marshal(r.AnchoCm)
	if err != nil {
		return nil, err
	}
	output["LargoCm"], err = json.Marshal(r.LargoCm)
	if err != nil {
		return nil, err
	}
	output["TipoDeEnvioId"], err = json.Marshal(r.TipoDeEnvioId)
	if err != nil {
		return nil, err
	}
	output["ItemId"], err = json.Marshal(r.ItemId)
	if err != nil {
		return nil, err
	}
	output["PesoUnidad"], err = json.Marshal(r.PesoUnidad)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Envio) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NumeroContrato"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroContrato); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NumeroContrato")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Cliente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cliente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Cliente")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoPostalOrigenId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoPostalOrigenId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoPostalOrigenId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoPostalDestino"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoPostalDestino); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoPostalDestino")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Peso"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Peso); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Peso")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Volumen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Volumen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Volumen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValorDeclarado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValorDeclarado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ValorDeclarado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AltoCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AltoCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AltoCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AnchoCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AnchoCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AnchoCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["LargoCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LargoCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for LargoCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoDeEnvioId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoDeEnvioId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoDeEnvioId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ItemId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ItemId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ItemId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PesoUnidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoUnidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PesoUnidad")
	}
	return nil
}
