// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ListHCMLocaciones.avsc
 */
package HCMLocacionesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type HCMLocacionesData struct {
	LocationCode string `json:"LocationCode"`

	LocationName string `json:"LocationName"`

	AdressLine1 string `json:"AdressLine1"`

	AdressLine2 string `json:"AdressLine2"`

	PostalCode string `json:"PostalCode"`

	Region3 string `json:"Region3"`

	EffectiveStartDate string `json:"EffectiveStartDate"`

	Country string `json:"Country"`

	ActiveStatus string `json:"ActiveStatus"`

	SetName string `json:"SetName"`
}

const HCMLocacionesDataAvroCRC64Fingerprint = "%Y,\xec\x99*\x82\x9f"

func NewHCMLocacionesData() HCMLocacionesData {
	r := HCMLocacionesData{}
	return r
}

func DeserializeHCMLocacionesData(r io.Reader) (HCMLocacionesData, error) {
	t := NewHCMLocacionesData()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeHCMLocacionesDataFromSchema(r io.Reader, schema string) (HCMLocacionesData, error) {
	t := NewHCMLocacionesData()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeHCMLocacionesData(r HCMLocacionesData, w io.Writer) error {
	var err error
	err = vm.WriteString(r.LocationCode, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LocationName, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.AdressLine1, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.AdressLine2, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.PostalCode, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Region3, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.EffectiveStartDate, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Country, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ActiveStatus, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.SetName, w)
	if err != nil {
		return err
	}
	return err
}

func (r HCMLocacionesData) Serialize(w io.Writer) error {
	return writeHCMLocacionesData(r, w)
}

func (r HCMLocacionesData) Schema() string {
	return "{\"fields\":[{\"name\":\"LocationCode\",\"type\":\"string\"},{\"name\":\"LocationName\",\"type\":\"string\"},{\"name\":\"AdressLine1\",\"type\":\"string\"},{\"name\":\"AdressLine2\",\"type\":\"string\"},{\"name\":\"PostalCode\",\"type\":\"string\"},{\"name\":\"Region3\",\"type\":\"string\"},{\"name\":\"EffectiveStartDate\",\"type\":\"string\"},{\"name\":\"Country\",\"type\":\"string\"},{\"name\":\"ActiveStatus\",\"type\":\"string\"},{\"name\":\"SetName\",\"type\":\"string\"}],\"name\":\"Andreani.HCMLocaciones.Events.Common.HCMLocacionesData\",\"type\":\"record\"}"
}

func (r HCMLocacionesData) SchemaName() string {
	return "Andreani.HCMLocaciones.Events.Common.HCMLocacionesData"
}

func (_ HCMLocacionesData) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ HCMLocacionesData) SetInt(v int32)       { panic("Unsupported operation") }
func (_ HCMLocacionesData) SetLong(v int64)      { panic("Unsupported operation") }
func (_ HCMLocacionesData) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ HCMLocacionesData) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ HCMLocacionesData) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ HCMLocacionesData) SetString(v string)   { panic("Unsupported operation") }
func (_ HCMLocacionesData) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *HCMLocacionesData) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.LocationCode}

		return w

	case 1:
		w := types.String{Target: &r.LocationName}

		return w

	case 2:
		w := types.String{Target: &r.AdressLine1}

		return w

	case 3:
		w := types.String{Target: &r.AdressLine2}

		return w

	case 4:
		w := types.String{Target: &r.PostalCode}

		return w

	case 5:
		w := types.String{Target: &r.Region3}

		return w

	case 6:
		w := types.String{Target: &r.EffectiveStartDate}

		return w

	case 7:
		w := types.String{Target: &r.Country}

		return w

	case 8:
		w := types.String{Target: &r.ActiveStatus}

		return w

	case 9:
		w := types.String{Target: &r.SetName}

		return w

	}
	panic("Unknown field index")
}

func (r *HCMLocacionesData) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *HCMLocacionesData) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ HCMLocacionesData) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ HCMLocacionesData) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ HCMLocacionesData) HintSize(int)                     { panic("Unsupported operation") }
func (_ HCMLocacionesData) Finalize()                        {}

func (_ HCMLocacionesData) AvroCRC64Fingerprint() []byte {
	return []byte(HCMLocacionesDataAvroCRC64Fingerprint)
}

func (r HCMLocacionesData) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["LocationCode"], err = json.Marshal(r.LocationCode)
	if err != nil {
		return nil, err
	}
	output["LocationName"], err = json.Marshal(r.LocationName)
	if err != nil {
		return nil, err
	}
	output["AdressLine1"], err = json.Marshal(r.AdressLine1)
	if err != nil {
		return nil, err
	}
	output["AdressLine2"], err = json.Marshal(r.AdressLine2)
	if err != nil {
		return nil, err
	}
	output["PostalCode"], err = json.Marshal(r.PostalCode)
	if err != nil {
		return nil, err
	}
	output["Region3"], err = json.Marshal(r.Region3)
	if err != nil {
		return nil, err
	}
	output["EffectiveStartDate"], err = json.Marshal(r.EffectiveStartDate)
	if err != nil {
		return nil, err
	}
	output["Country"], err = json.Marshal(r.Country)
	if err != nil {
		return nil, err
	}
	output["ActiveStatus"], err = json.Marshal(r.ActiveStatus)
	if err != nil {
		return nil, err
	}
	output["SetName"], err = json.Marshal(r.SetName)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *HCMLocacionesData) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["LocationCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LocationCode); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for LocationCode")
	}
	val = func() json.RawMessage {
		if v, ok := fields["LocationName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LocationName); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for LocationName")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AdressLine1"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AdressLine1); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AdressLine1")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AdressLine2"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AdressLine2); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AdressLine2")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PostalCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PostalCode); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PostalCode")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Region3"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Region3); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Region3")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EffectiveStartDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EffectiveStartDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EffectiveStartDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Country"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Country); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Country")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ActiveStatus"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ActiveStatus); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ActiveStatus")
	}
	val = func() json.RawMessage {
		if v, ok := fields["SetName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SetName); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for SetName")
	}
	return nil
}
