// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Cotizar.avsc
 */
package CotizarBackendEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Cotizar struct {
	Cliente *UnionNullString `json:"Cliente"`

	Contrato *UnionNullString `json:"Contrato"`

	SucursalOrigen *UnionNullString `json:"SucursalOrigen"`

	CodigoPostalDestino *UnionNullString `json:"CodigoPostalDestino"`

	Peso *UnionNullString `json:"Peso"`

	Volumen *UnionNullString `json:"Volumen"`

	ValorDeclarado *UnionNullString `json:"ValorDeclarado"`

	AltoCm *UnionNullString `json:"AltoCm"`

	AnchoCm *UnionNullString `json:"AnchoCm"`

	LargoCm *UnionNullString `json:"LargoCm"`

	ContratoId *UnionNullString `json:"ContratoId"`

	TipoDeEnvioId *UnionNullString `json:"TipoDeEnvioId"`
}

const CotizarAvroCRC64Fingerprint = "B'\xfa\xbbx\x98\x90\x80"

func NewCotizar() Cotizar {
	r := Cotizar{}
	r.Cliente = nil
	r.Contrato = nil
	r.SucursalOrigen = nil
	r.CodigoPostalDestino = nil
	r.Peso = nil
	r.Volumen = nil
	r.ValorDeclarado = nil
	r.AltoCm = nil
	r.AnchoCm = nil
	r.LargoCm = nil
	r.ContratoId = nil
	r.TipoDeEnvioId = nil
	return r
}

func DeserializeCotizar(r io.Reader) (Cotizar, error) {
	t := NewCotizar()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCotizarFromSchema(r io.Reader, schema string) (Cotizar, error) {
	t := NewCotizar()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCotizar(r Cotizar, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Cliente, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Contrato, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SucursalOrigen, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoPostalDestino, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Peso, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Volumen, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ValorDeclarado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.AltoCm, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.AnchoCm, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LargoCm, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ContratoId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoDeEnvioId, w)
	if err != nil {
		return err
	}
	return err
}

func (r Cotizar) Serialize(w io.Writer) error {
	return writeCotizar(r, w)
}

func (r Cotizar) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Cliente\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Contrato\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SucursalOrigen\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CodigoPostalDestino\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Peso\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Volumen\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ValorDeclarado\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"AltoCm\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"AnchoCm\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LargoCm\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ContratoId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TipoDeEnvioId\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.CotizarBackend.Events.Record.Cotizar\",\"type\":\"record\"}"
}

func (r Cotizar) SchemaName() string {
	return "Andreani.CotizarBackend.Events.Record.Cotizar"
}

func (_ Cotizar) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Cotizar) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Cotizar) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Cotizar) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Cotizar) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Cotizar) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Cotizar) SetString(v string)   { panic("Unsupported operation") }
func (_ Cotizar) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Cotizar) Get(i int) types.Field {
	switch i {
	case 0:
		r.Cliente = NewUnionNullString()

		return r.Cliente
	case 1:
		r.Contrato = NewUnionNullString()

		return r.Contrato
	case 2:
		r.SucursalOrigen = NewUnionNullString()

		return r.SucursalOrigen
	case 3:
		r.CodigoPostalDestino = NewUnionNullString()

		return r.CodigoPostalDestino
	case 4:
		r.Peso = NewUnionNullString()

		return r.Peso
	case 5:
		r.Volumen = NewUnionNullString()

		return r.Volumen
	case 6:
		r.ValorDeclarado = NewUnionNullString()

		return r.ValorDeclarado
	case 7:
		r.AltoCm = NewUnionNullString()

		return r.AltoCm
	case 8:
		r.AnchoCm = NewUnionNullString()

		return r.AnchoCm
	case 9:
		r.LargoCm = NewUnionNullString()

		return r.LargoCm
	case 10:
		r.ContratoId = NewUnionNullString()

		return r.ContratoId
	case 11:
		r.TipoDeEnvioId = NewUnionNullString()

		return r.TipoDeEnvioId
	}
	panic("Unknown field index")
}

func (r *Cotizar) SetDefault(i int) {
	switch i {
	case 0:
		r.Cliente = nil
		return
	case 1:
		r.Contrato = nil
		return
	case 2:
		r.SucursalOrigen = nil
		return
	case 3:
		r.CodigoPostalDestino = nil
		return
	case 4:
		r.Peso = nil
		return
	case 5:
		r.Volumen = nil
		return
	case 6:
		r.ValorDeclarado = nil
		return
	case 7:
		r.AltoCm = nil
		return
	case 8:
		r.AnchoCm = nil
		return
	case 9:
		r.LargoCm = nil
		return
	case 10:
		r.ContratoId = nil
		return
	case 11:
		r.TipoDeEnvioId = nil
		return
	}
	panic("Unknown field index")
}

func (r *Cotizar) NullField(i int) {
	switch i {
	case 0:
		r.Cliente = nil
		return
	case 1:
		r.Contrato = nil
		return
	case 2:
		r.SucursalOrigen = nil
		return
	case 3:
		r.CodigoPostalDestino = nil
		return
	case 4:
		r.Peso = nil
		return
	case 5:
		r.Volumen = nil
		return
	case 6:
		r.ValorDeclarado = nil
		return
	case 7:
		r.AltoCm = nil
		return
	case 8:
		r.AnchoCm = nil
		return
	case 9:
		r.LargoCm = nil
		return
	case 10:
		r.ContratoId = nil
		return
	case 11:
		r.TipoDeEnvioId = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Cotizar) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Cotizar) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Cotizar) HintSize(int)                     { panic("Unsupported operation") }
func (_ Cotizar) Finalize()                        {}

func (_ Cotizar) AvroCRC64Fingerprint() []byte {
	return []byte(CotizarAvroCRC64Fingerprint)
}

func (r Cotizar) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Cliente"], err = json.Marshal(r.Cliente)
	if err != nil {
		return nil, err
	}
	output["Contrato"], err = json.Marshal(r.Contrato)
	if err != nil {
		return nil, err
	}
	output["SucursalOrigen"], err = json.Marshal(r.SucursalOrigen)
	if err != nil {
		return nil, err
	}
	output["CodigoPostalDestino"], err = json.Marshal(r.CodigoPostalDestino)
	if err != nil {
		return nil, err
	}
	output["Peso"], err = json.Marshal(r.Peso)
	if err != nil {
		return nil, err
	}
	output["Volumen"], err = json.Marshal(r.Volumen)
	if err != nil {
		return nil, err
	}
	output["ValorDeclarado"], err = json.Marshal(r.ValorDeclarado)
	if err != nil {
		return nil, err
	}
	output["AltoCm"], err = json.Marshal(r.AltoCm)
	if err != nil {
		return nil, err
	}
	output["AnchoCm"], err = json.Marshal(r.AnchoCm)
	if err != nil {
		return nil, err
	}
	output["LargoCm"], err = json.Marshal(r.LargoCm)
	if err != nil {
		return nil, err
	}
	output["ContratoId"], err = json.Marshal(r.ContratoId)
	if err != nil {
		return nil, err
	}
	output["TipoDeEnvioId"], err = json.Marshal(r.TipoDeEnvioId)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Cotizar) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Cliente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cliente); err != nil {
			return err
		}
	} else {
		r.Cliente = NewUnionNullString()

		r.Cliente = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Contrato"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contrato); err != nil {
			return err
		}
	} else {
		r.Contrato = NewUnionNullString()

		r.Contrato = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SucursalOrigen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SucursalOrigen); err != nil {
			return err
		}
	} else {
		r.SucursalOrigen = NewUnionNullString()

		r.SucursalOrigen = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoPostalDestino"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoPostalDestino); err != nil {
			return err
		}
	} else {
		r.CodigoPostalDestino = NewUnionNullString()

		r.CodigoPostalDestino = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Peso"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Peso); err != nil {
			return err
		}
	} else {
		r.Peso = NewUnionNullString()

		r.Peso = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Volumen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Volumen); err != nil {
			return err
		}
	} else {
		r.Volumen = NewUnionNullString()

		r.Volumen = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValorDeclarado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValorDeclarado); err != nil {
			return err
		}
	} else {
		r.ValorDeclarado = NewUnionNullString()

		r.ValorDeclarado = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["AltoCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AltoCm); err != nil {
			return err
		}
	} else {
		r.AltoCm = NewUnionNullString()

		r.AltoCm = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["AnchoCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AnchoCm); err != nil {
			return err
		}
	} else {
		r.AnchoCm = NewUnionNullString()

		r.AnchoCm = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LargoCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LargoCm); err != nil {
			return err
		}
	} else {
		r.LargoCm = NewUnionNullString()

		r.LargoCm = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ContratoId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ContratoId); err != nil {
			return err
		}
	} else {
		r.ContratoId = NewUnionNullString()

		r.ContratoId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoDeEnvioId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoDeEnvioId); err != nil {
			return err
		}
	} else {
		r.TipoDeEnvioId = NewUnionNullString()

		r.TipoDeEnvioId = nil
	}
	return nil
}
