// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     SolicitudDeTraslado.avsc
 */
package WapAjusteTrasladoInternoDeMercaderiav2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Almacen struct {
	Destino string `json:"Destino"`

	Origen string `json:"Origen"`
}

const AlmacenAvroCRC64Fingerprint = "\xbbV\x14\x11\x8f\xf7\xfe\xa2"

func NewAlmacen() Almacen {
	r := Almacen{}
	return r
}

func DeserializeAlmacen(r io.Reader) (Almacen, error) {
	t := NewAlmacen()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAlmacenFromSchema(r io.Reader, schema string) (Almacen, error) {
	t := NewAlmacen()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAlmacen(r Almacen, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Destino, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Origen, w)
	if err != nil {
		return err
	}
	return err
}

func (r Almacen) Serialize(w io.Writer) error {
	return writeAlmacen(r, w)
}

func (r Almacen) Schema() string {
	return "{\"fields\":[{\"name\":\"Destino\",\"type\":\"string\"},{\"name\":\"Origen\",\"type\":\"string\"}],\"name\":\"Andreani.WapAjusteTrasladoInternoDeMercaderiaV2.Events.Record.Almacen\",\"type\":\"record\"}"
}

func (r Almacen) SchemaName() string {
	return "Andreani.WapAjusteTrasladoInternoDeMercaderiaV2.Events.Record.Almacen"
}

func (_ Almacen) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Almacen) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Almacen) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Almacen) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Almacen) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Almacen) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Almacen) SetString(v string)   { panic("Unsupported operation") }
func (_ Almacen) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Almacen) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Destino}

		return w

	case 1:
		w := types.String{Target: &r.Origen}

		return w

	}
	panic("Unknown field index")
}

func (r *Almacen) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Almacen) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Almacen) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Almacen) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Almacen) HintSize(int)                     { panic("Unsupported operation") }
func (_ Almacen) Finalize()                        {}

func (_ Almacen) AvroCRC64Fingerprint() []byte {
	return []byte(AlmacenAvroCRC64Fingerprint)
}

func (r Almacen) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Destino"], err = json.Marshal(r.Destino)
	if err != nil {
		return nil, err
	}
	output["Origen"], err = json.Marshal(r.Origen)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Almacen) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Destino"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Destino); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Destino")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Origen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Origen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Origen")
	}
	return nil
}
