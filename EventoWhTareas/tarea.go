// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Tarea.avsc
 */
package EventoWhTareasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Tarea struct {
	IDTarea string `json:"IDTarea"`

	OrdenWH *UnionNullString `json:"OrdenWH"`

	TipoDeTarea *UnionNullString `json:"TipoDeTarea"`

	CodigoTarea *UnionNullString `json:"CodigoTarea"`

	Propietario *UnionNullString `json:"Propietario"`

	SKU *UnionNullString `json:"SKU"`

	LoteInternoWH *UnionNullString `json:"LoteInternoWH"`

	CantidadTarea float32 `json:"CantidadTarea"`

	UbicacionInicial *UnionNullString `json:"UbicacionInicial"`

	IDInicial *UnionNullString `json:"IDInicial"`

	UbicacionFinal *UnionNullString `json:"UbicacionFinal"`

	IDFinal *UnionNullString `json:"IDFinal"`

	Estado *UnionNullString `json:"Estado"`

	Prioridad *UnionNullString `json:"Prioridad"`

	Usuario *UnionNullString `json:"Usuario"`

	FechaInicioTarea *UnionNullLong `json:"FechaInicioTarea"`

	FechaFinTarea *UnionNullLong `json:"FechaFinTarea"`

	LineaDeOrden *UnionNullString `json:"LineaDeOrden"`

	NumeroDeOleadaWH *UnionNullString `json:"NumeroDeOleadaWH"`

	FechaDeCreacion *UnionNullLong `json:"FechaDeCreacion"`

	UsuarioCreacion *UnionNullString `json:"UsuarioCreacion"`

	FechaEdicion *UnionNullLong `json:"FechaEdicion"`

	UsuarioEdicion *UnionNullString `json:"UsuarioEdicion"`

	PesoTara float32 `json:"PesoTara"`

	PesoNeto float32 `json:"PesoNeto"`

	PesoBruto float32 `json:"PesoBruto"`

	NumeroDeAsignacionWH *UnionNullString `json:"NumeroDeAsignacionWH"`

	TipoDeOrigen *UnionNullString `json:"TipoDeOrigen"`

	LoteSecundario *UnionNullString `json:"LoteSecundario"`

	FechaFabricacion *UnionNullLong `json:"FechaFabricacion"`

	FechaVencimiento *UnionNullLong `json:"FechaVencimiento"`

	ProductoTrazable *UnionNullString `json:"ProductoTrazable"`

	AlmacenConsumo *UnionNullString `json:"AlmacenConsumo"`

	EstadoLote *UnionNullString `json:"EstadoLote"`

	BloqueoUbicacion *UnionNullString `json:"BloqueoUbicacion"`

	VidaUtilLote *UnionNullString `json:"VidaUtilLote"`

	EntregaAntesDe *UnionNullLong `json:"EntregaAntesDe"`

	ConsumoAntesDe *UnionNullLong `json:"ConsumoAntesDe"`
}

const TareaAvroCRC64Fingerprint = "\xd87\xfa\x14H\x13\xb1\""

func NewTarea() Tarea {
	r := Tarea{}
	r.OrdenWH = nil
	r.CodigoTarea = nil
	r.IDInicial = nil
	r.FechaInicioTarea = nil
	r.FechaFinTarea = nil
	r.LineaDeOrden = nil
	r.NumeroDeOleadaWH = nil
	r.FechaDeCreacion = nil
	r.FechaEdicion = nil
	r.NumeroDeAsignacionWH = nil
	r.TipoDeOrigen = nil
	r.FechaFabricacion = nil
	r.FechaVencimiento = nil
	r.EntregaAntesDe = nil
	r.ConsumoAntesDe = nil
	return r
}

func DeserializeTarea(r io.Reader) (Tarea, error) {
	t := NewTarea()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTareaFromSchema(r io.Reader, schema string) (Tarea, error) {
	t := NewTarea()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTarea(r Tarea, w io.Writer) error {
	var err error
	err = vm.WriteString(r.IDTarea, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.OrdenWH, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoDeTarea, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoTarea, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Propietario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SKU, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LoteInternoWH, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.CantidadTarea, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.UbicacionInicial, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.IDInicial, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.UbicacionFinal, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.IDFinal, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Estado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Prioridad, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Usuario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaInicioTarea, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaFinTarea, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LineaDeOrden, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NumeroDeOleadaWH, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaDeCreacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.UsuarioCreacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaEdicion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.UsuarioEdicion, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PesoTara, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PesoNeto, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.PesoBruto, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NumeroDeAsignacionWH, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoDeOrigen, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LoteSecundario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaFabricacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaVencimiento, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ProductoTrazable, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.AlmacenConsumo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EstadoLote, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.BloqueoUbicacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.VidaUtilLote, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.EntregaAntesDe, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.ConsumoAntesDe, w)
	if err != nil {
		return err
	}
	return err
}

func (r Tarea) Serialize(w io.Writer) error {
	return writeTarea(r, w)
}

func (r Tarea) Schema() string {
	return "{\"fields\":[{\"name\":\"IDTarea\",\"type\":\"string\"},{\"default\":null,\"name\":\"OrdenWH\",\"type\":[\"null\",\"string\"]},{\"name\":\"TipoDeTarea\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CodigoTarea\",\"type\":[\"null\",\"string\"]},{\"name\":\"Propietario\",\"type\":[\"null\",\"string\"]},{\"name\":\"SKU\",\"type\":[\"null\",\"string\"]},{\"name\":\"LoteInternoWH\",\"type\":[\"null\",\"string\"]},{\"name\":\"CantidadTarea\",\"type\":\"float\"},{\"name\":\"UbicacionInicial\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"IDInicial\",\"type\":[\"null\",\"string\"]},{\"name\":\"UbicacionFinal\",\"type\":[\"null\",\"string\"]},{\"name\":\"IDFinal\",\"type\":[\"null\",\"string\"]},{\"name\":\"Estado\",\"type\":[\"null\",\"string\"]},{\"name\":\"Prioridad\",\"type\":[\"null\",\"string\"]},{\"name\":\"Usuario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FechaInicioTarea\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"FechaFinTarea\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"LineaDeOrden\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NumeroDeOleadaWH\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FechaDeCreacion\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"UsuarioCreacion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FechaEdicion\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"UsuarioEdicion\",\"type\":[\"null\",\"string\"]},{\"name\":\"PesoTara\",\"type\":\"float\"},{\"name\":\"PesoNeto\",\"type\":\"float\"},{\"name\":\"PesoBruto\",\"type\":\"float\"},{\"default\":null,\"name\":\"NumeroDeAsignacionWH\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TipoDeOrigen\",\"type\":[\"null\",\"string\"]},{\"name\":\"LoteSecundario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FechaFabricacion\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"FechaVencimiento\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"ProductoTrazable\",\"type\":[\"null\",\"string\"]},{\"name\":\"AlmacenConsumo\",\"type\":[\"null\",\"string\"]},{\"name\":\"EstadoLote\",\"type\":[\"null\",\"string\"]},{\"name\":\"BloqueoUbicacion\",\"type\":[\"null\",\"string\"]},{\"name\":\"VidaUtilLote\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EntregaAntesDe\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"ConsumoAntesDe\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]}],\"name\":\"Andreani.EventoWhTareas.Events.TareasEliminadasCommon.Tarea\",\"type\":\"record\"}"
}

func (r Tarea) SchemaName() string {
	return "Andreani.EventoWhTareas.Events.TareasEliminadasCommon.Tarea"
}

func (_ Tarea) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Tarea) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Tarea) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Tarea) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Tarea) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Tarea) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Tarea) SetString(v string)   { panic("Unsupported operation") }
func (_ Tarea) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Tarea) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.IDTarea}

		return w

	case 1:
		r.OrdenWH = NewUnionNullString()

		return r.OrdenWH
	case 2:
		r.TipoDeTarea = NewUnionNullString()

		return r.TipoDeTarea
	case 3:
		r.CodigoTarea = NewUnionNullString()

		return r.CodigoTarea
	case 4:
		r.Propietario = NewUnionNullString()

		return r.Propietario
	case 5:
		r.SKU = NewUnionNullString()

		return r.SKU
	case 6:
		r.LoteInternoWH = NewUnionNullString()

		return r.LoteInternoWH
	case 7:
		w := types.Float{Target: &r.CantidadTarea}

		return w

	case 8:
		r.UbicacionInicial = NewUnionNullString()

		return r.UbicacionInicial
	case 9:
		r.IDInicial = NewUnionNullString()

		return r.IDInicial
	case 10:
		r.UbicacionFinal = NewUnionNullString()

		return r.UbicacionFinal
	case 11:
		r.IDFinal = NewUnionNullString()

		return r.IDFinal
	case 12:
		r.Estado = NewUnionNullString()

		return r.Estado
	case 13:
		r.Prioridad = NewUnionNullString()

		return r.Prioridad
	case 14:
		r.Usuario = NewUnionNullString()

		return r.Usuario
	case 15:
		r.FechaInicioTarea = NewUnionNullLong()

		return r.FechaInicioTarea
	case 16:
		r.FechaFinTarea = NewUnionNullLong()

		return r.FechaFinTarea
	case 17:
		r.LineaDeOrden = NewUnionNullString()

		return r.LineaDeOrden
	case 18:
		r.NumeroDeOleadaWH = NewUnionNullString()

		return r.NumeroDeOleadaWH
	case 19:
		r.FechaDeCreacion = NewUnionNullLong()

		return r.FechaDeCreacion
	case 20:
		r.UsuarioCreacion = NewUnionNullString()

		return r.UsuarioCreacion
	case 21:
		r.FechaEdicion = NewUnionNullLong()

		return r.FechaEdicion
	case 22:
		r.UsuarioEdicion = NewUnionNullString()

		return r.UsuarioEdicion
	case 23:
		w := types.Float{Target: &r.PesoTara}

		return w

	case 24:
		w := types.Float{Target: &r.PesoNeto}

		return w

	case 25:
		w := types.Float{Target: &r.PesoBruto}

		return w

	case 26:
		r.NumeroDeAsignacionWH = NewUnionNullString()

		return r.NumeroDeAsignacionWH
	case 27:
		r.TipoDeOrigen = NewUnionNullString()

		return r.TipoDeOrigen
	case 28:
		r.LoteSecundario = NewUnionNullString()

		return r.LoteSecundario
	case 29:
		r.FechaFabricacion = NewUnionNullLong()

		return r.FechaFabricacion
	case 30:
		r.FechaVencimiento = NewUnionNullLong()

		return r.FechaVencimiento
	case 31:
		r.ProductoTrazable = NewUnionNullString()

		return r.ProductoTrazable
	case 32:
		r.AlmacenConsumo = NewUnionNullString()

		return r.AlmacenConsumo
	case 33:
		r.EstadoLote = NewUnionNullString()

		return r.EstadoLote
	case 34:
		r.BloqueoUbicacion = NewUnionNullString()

		return r.BloqueoUbicacion
	case 35:
		r.VidaUtilLote = NewUnionNullString()

		return r.VidaUtilLote
	case 36:
		r.EntregaAntesDe = NewUnionNullLong()

		return r.EntregaAntesDe
	case 37:
		r.ConsumoAntesDe = NewUnionNullLong()

		return r.ConsumoAntesDe
	}
	panic("Unknown field index")
}

func (r *Tarea) SetDefault(i int) {
	switch i {
	case 1:
		r.OrdenWH = nil
		return
	case 3:
		r.CodigoTarea = nil
		return
	case 9:
		r.IDInicial = nil
		return
	case 15:
		r.FechaInicioTarea = nil
		return
	case 16:
		r.FechaFinTarea = nil
		return
	case 17:
		r.LineaDeOrden = nil
		return
	case 18:
		r.NumeroDeOleadaWH = nil
		return
	case 19:
		r.FechaDeCreacion = nil
		return
	case 21:
		r.FechaEdicion = nil
		return
	case 26:
		r.NumeroDeAsignacionWH = nil
		return
	case 27:
		r.TipoDeOrigen = nil
		return
	case 29:
		r.FechaFabricacion = nil
		return
	case 30:
		r.FechaVencimiento = nil
		return
	case 36:
		r.EntregaAntesDe = nil
		return
	case 37:
		r.ConsumoAntesDe = nil
		return
	}
	panic("Unknown field index")
}

func (r *Tarea) NullField(i int) {
	switch i {
	case 1:
		r.OrdenWH = nil
		return
	case 2:
		r.TipoDeTarea = nil
		return
	case 3:
		r.CodigoTarea = nil
		return
	case 4:
		r.Propietario = nil
		return
	case 5:
		r.SKU = nil
		return
	case 6:
		r.LoteInternoWH = nil
		return
	case 8:
		r.UbicacionInicial = nil
		return
	case 9:
		r.IDInicial = nil
		return
	case 10:
		r.UbicacionFinal = nil
		return
	case 11:
		r.IDFinal = nil
		return
	case 12:
		r.Estado = nil
		return
	case 13:
		r.Prioridad = nil
		return
	case 14:
		r.Usuario = nil
		return
	case 15:
		r.FechaInicioTarea = nil
		return
	case 16:
		r.FechaFinTarea = nil
		return
	case 17:
		r.LineaDeOrden = nil
		return
	case 18:
		r.NumeroDeOleadaWH = nil
		return
	case 19:
		r.FechaDeCreacion = nil
		return
	case 20:
		r.UsuarioCreacion = nil
		return
	case 21:
		r.FechaEdicion = nil
		return
	case 22:
		r.UsuarioEdicion = nil
		return
	case 26:
		r.NumeroDeAsignacionWH = nil
		return
	case 27:
		r.TipoDeOrigen = nil
		return
	case 28:
		r.LoteSecundario = nil
		return
	case 29:
		r.FechaFabricacion = nil
		return
	case 30:
		r.FechaVencimiento = nil
		return
	case 31:
		r.ProductoTrazable = nil
		return
	case 32:
		r.AlmacenConsumo = nil
		return
	case 33:
		r.EstadoLote = nil
		return
	case 34:
		r.BloqueoUbicacion = nil
		return
	case 35:
		r.VidaUtilLote = nil
		return
	case 36:
		r.EntregaAntesDe = nil
		return
	case 37:
		r.ConsumoAntesDe = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Tarea) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Tarea) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Tarea) HintSize(int)                     { panic("Unsupported operation") }
func (_ Tarea) Finalize()                        {}

func (_ Tarea) AvroCRC64Fingerprint() []byte {
	return []byte(TareaAvroCRC64Fingerprint)
}

func (r Tarea) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["IDTarea"], err = json.Marshal(r.IDTarea)
	if err != nil {
		return nil, err
	}
	output["OrdenWH"], err = json.Marshal(r.OrdenWH)
	if err != nil {
		return nil, err
	}
	output["TipoDeTarea"], err = json.Marshal(r.TipoDeTarea)
	if err != nil {
		return nil, err
	}
	output["CodigoTarea"], err = json.Marshal(r.CodigoTarea)
	if err != nil {
		return nil, err
	}
	output["Propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["SKU"], err = json.Marshal(r.SKU)
	if err != nil {
		return nil, err
	}
	output["LoteInternoWH"], err = json.Marshal(r.LoteInternoWH)
	if err != nil {
		return nil, err
	}
	output["CantidadTarea"], err = json.Marshal(r.CantidadTarea)
	if err != nil {
		return nil, err
	}
	output["UbicacionInicial"], err = json.Marshal(r.UbicacionInicial)
	if err != nil {
		return nil, err
	}
	output["IDInicial"], err = json.Marshal(r.IDInicial)
	if err != nil {
		return nil, err
	}
	output["UbicacionFinal"], err = json.Marshal(r.UbicacionFinal)
	if err != nil {
		return nil, err
	}
	output["IDFinal"], err = json.Marshal(r.IDFinal)
	if err != nil {
		return nil, err
	}
	output["Estado"], err = json.Marshal(r.Estado)
	if err != nil {
		return nil, err
	}
	output["Prioridad"], err = json.Marshal(r.Prioridad)
	if err != nil {
		return nil, err
	}
	output["Usuario"], err = json.Marshal(r.Usuario)
	if err != nil {
		return nil, err
	}
	output["FechaInicioTarea"], err = json.Marshal(r.FechaInicioTarea)
	if err != nil {
		return nil, err
	}
	output["FechaFinTarea"], err = json.Marshal(r.FechaFinTarea)
	if err != nil {
		return nil, err
	}
	output["LineaDeOrden"], err = json.Marshal(r.LineaDeOrden)
	if err != nil {
		return nil, err
	}
	output["NumeroDeOleadaWH"], err = json.Marshal(r.NumeroDeOleadaWH)
	if err != nil {
		return nil, err
	}
	output["FechaDeCreacion"], err = json.Marshal(r.FechaDeCreacion)
	if err != nil {
		return nil, err
	}
	output["UsuarioCreacion"], err = json.Marshal(r.UsuarioCreacion)
	if err != nil {
		return nil, err
	}
	output["FechaEdicion"], err = json.Marshal(r.FechaEdicion)
	if err != nil {
		return nil, err
	}
	output["UsuarioEdicion"], err = json.Marshal(r.UsuarioEdicion)
	if err != nil {
		return nil, err
	}
	output["PesoTara"], err = json.Marshal(r.PesoTara)
	if err != nil {
		return nil, err
	}
	output["PesoNeto"], err = json.Marshal(r.PesoNeto)
	if err != nil {
		return nil, err
	}
	output["PesoBruto"], err = json.Marshal(r.PesoBruto)
	if err != nil {
		return nil, err
	}
	output["NumeroDeAsignacionWH"], err = json.Marshal(r.NumeroDeAsignacionWH)
	if err != nil {
		return nil, err
	}
	output["TipoDeOrigen"], err = json.Marshal(r.TipoDeOrigen)
	if err != nil {
		return nil, err
	}
	output["LoteSecundario"], err = json.Marshal(r.LoteSecundario)
	if err != nil {
		return nil, err
	}
	output["FechaFabricacion"], err = json.Marshal(r.FechaFabricacion)
	if err != nil {
		return nil, err
	}
	output["FechaVencimiento"], err = json.Marshal(r.FechaVencimiento)
	if err != nil {
		return nil, err
	}
	output["ProductoTrazable"], err = json.Marshal(r.ProductoTrazable)
	if err != nil {
		return nil, err
	}
	output["AlmacenConsumo"], err = json.Marshal(r.AlmacenConsumo)
	if err != nil {
		return nil, err
	}
	output["EstadoLote"], err = json.Marshal(r.EstadoLote)
	if err != nil {
		return nil, err
	}
	output["BloqueoUbicacion"], err = json.Marshal(r.BloqueoUbicacion)
	if err != nil {
		return nil, err
	}
	output["VidaUtilLote"], err = json.Marshal(r.VidaUtilLote)
	if err != nil {
		return nil, err
	}
	output["EntregaAntesDe"], err = json.Marshal(r.EntregaAntesDe)
	if err != nil {
		return nil, err
	}
	output["ConsumoAntesDe"], err = json.Marshal(r.ConsumoAntesDe)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Tarea) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["IDTarea"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IDTarea); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IDTarea")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OrdenWH"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrdenWH); err != nil {
			return err
		}
	} else {
		r.OrdenWH = NewUnionNullString()

		r.OrdenWH = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoDeTarea"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoDeTarea); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoDeTarea")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoTarea"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoTarea); err != nil {
			return err
		}
	} else {
		r.CodigoTarea = NewUnionNullString()

		r.CodigoTarea = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Propietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["SKU"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SKU); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for SKU")
	}
	val = func() json.RawMessage {
		if v, ok := fields["LoteInternoWH"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteInternoWH); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for LoteInternoWH")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CantidadTarea"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CantidadTarea); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CantidadTarea")
	}
	val = func() json.RawMessage {
		if v, ok := fields["UbicacionInicial"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UbicacionInicial); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for UbicacionInicial")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IDInicial"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IDInicial); err != nil {
			return err
		}
	} else {
		r.IDInicial = NewUnionNullString()

		r.IDInicial = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["UbicacionFinal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UbicacionFinal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for UbicacionFinal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IDFinal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IDFinal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IDFinal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Estado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Estado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Prioridad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Prioridad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Prioridad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Usuario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Usuario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Usuario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaInicioTarea"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaInicioTarea); err != nil {
			return err
		}
	} else {
		r.FechaInicioTarea = NewUnionNullLong()

		r.FechaInicioTarea = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaFinTarea"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaFinTarea); err != nil {
			return err
		}
	} else {
		r.FechaFinTarea = NewUnionNullLong()

		r.FechaFinTarea = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LineaDeOrden"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LineaDeOrden); err != nil {
			return err
		}
	} else {
		r.LineaDeOrden = NewUnionNullString()

		r.LineaDeOrden = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NumeroDeOleadaWH"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeOleadaWH); err != nil {
			return err
		}
	} else {
		r.NumeroDeOleadaWH = NewUnionNullString()

		r.NumeroDeOleadaWH = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaDeCreacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaDeCreacion); err != nil {
			return err
		}
	} else {
		r.FechaDeCreacion = NewUnionNullLong()

		r.FechaDeCreacion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["UsuarioCreacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UsuarioCreacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for UsuarioCreacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaEdicion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaEdicion); err != nil {
			return err
		}
	} else {
		r.FechaEdicion = NewUnionNullLong()

		r.FechaEdicion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["UsuarioEdicion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UsuarioEdicion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for UsuarioEdicion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PesoTara"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoTara); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PesoTara")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PesoNeto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoNeto); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PesoNeto")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PesoBruto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoBruto); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PesoBruto")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NumeroDeAsignacionWH"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeAsignacionWH); err != nil {
			return err
		}
	} else {
		r.NumeroDeAsignacionWH = NewUnionNullString()

		r.NumeroDeAsignacionWH = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoDeOrigen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoDeOrigen); err != nil {
			return err
		}
	} else {
		r.TipoDeOrigen = NewUnionNullString()

		r.TipoDeOrigen = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LoteSecundario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteSecundario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for LoteSecundario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaFabricacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaFabricacion); err != nil {
			return err
		}
	} else {
		r.FechaFabricacion = NewUnionNullLong()

		r.FechaFabricacion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaVencimiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaVencimiento); err != nil {
			return err
		}
	} else {
		r.FechaVencimiento = NewUnionNullLong()

		r.FechaVencimiento = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ProductoTrazable"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ProductoTrazable); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ProductoTrazable")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AlmacenConsumo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AlmacenConsumo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AlmacenConsumo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EstadoLote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EstadoLote); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EstadoLote")
	}
	val = func() json.RawMessage {
		if v, ok := fields["BloqueoUbicacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BloqueoUbicacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for BloqueoUbicacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["VidaUtilLote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VidaUtilLote); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for VidaUtilLote")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EntregaAntesDe"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EntregaAntesDe); err != nil {
			return err
		}
	} else {
		r.EntregaAntesDe = NewUnionNullLong()

		r.EntregaAntesDe = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ConsumoAntesDe"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ConsumoAntesDe); err != nil {
			return err
		}
	} else {
		r.ConsumoAntesDe = NewUnionNullLong()

		r.ConsumoAntesDe = nil
	}
	return nil
}
