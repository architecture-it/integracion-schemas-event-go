// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     DetallePreenvio.avsc
 */
package CalidadCertificadaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Bulto struct {
	Kilos float32 `json:"Kilos"`

	LargoCm float32 `json:"LargoCm"`

	AltoCm float32 `json:"AltoCm"`

	AnchoCm float32 `json:"AnchoCm"`

	VolumenCm float32 `json:"VolumenCm"`

	ValorDeclaradoConImpuestos float32 `json:"ValorDeclaradoConImpuestos"`

	ValorDeclaradoSinImpuestos float32 `json:"ValorDeclaradoSinImpuestos"`

	MontoValorSeguro *UnionNullFloat `json:"MontoValorSeguro"`

	MontoGestionCobranza *UnionNullFloat `json:"MontoGestionCobranza"`

	Referencias []Referencia `json:"Referencias"`
}

const BultoAvroCRC64Fingerprint = "\xfe\x86axO7\x80v"

func NewBulto() Bulto {
	r := Bulto{}
	r.MontoGestionCobranza = nil
	r.Referencias = make([]Referencia, 0)

	return r
}

func DeserializeBulto(r io.Reader) (Bulto, error) {
	t := NewBulto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeBultoFromSchema(r io.Reader, schema string) (Bulto, error) {
	t := NewBulto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeBulto(r Bulto, w io.Writer) error {
	var err error
	err = vm.WriteFloat(r.Kilos, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.LargoCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.AltoCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.AnchoCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.VolumenCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.ValorDeclaradoConImpuestos, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.ValorDeclaradoSinImpuestos, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.MontoValorSeguro, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.MontoGestionCobranza, w)
	if err != nil {
		return err
	}
	err = writeArrayReferencia(r.Referencias, w)
	if err != nil {
		return err
	}
	return err
}

func (r Bulto) Serialize(w io.Writer) error {
	return writeBulto(r, w)
}

func (r Bulto) Schema() string {
	return "{\"fields\":[{\"name\":\"Kilos\",\"type\":\"float\"},{\"name\":\"LargoCm\",\"type\":\"float\"},{\"name\":\"AltoCm\",\"type\":\"float\"},{\"name\":\"AnchoCm\",\"type\":\"float\"},{\"name\":\"VolumenCm\",\"type\":\"float\"},{\"name\":\"ValorDeclaradoConImpuestos\",\"type\":\"float\"},{\"name\":\"ValorDeclaradoSinImpuestos\",\"type\":\"float\"},{\"name\":\"MontoValorSeguro\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"MontoGestionCobranza\",\"type\":[\"null\",\"float\"]},{\"name\":\"Referencias\",\"type\":{\"items\":{\"fields\":[{\"name\":\"Meta\",\"type\":\"string\"},{\"name\":\"Contenido\",\"type\":\"string\"}],\"name\":\"Referencia\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Andreani.CalidadCertificada.Events.Record.Bulto\",\"type\":\"record\"}"
}

func (r Bulto) SchemaName() string {
	return "Andreani.CalidadCertificada.Events.Record.Bulto"
}

func (_ Bulto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Bulto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Bulto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Bulto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Bulto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Bulto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Bulto) SetString(v string)   { panic("Unsupported operation") }
func (_ Bulto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Bulto) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Float{Target: &r.Kilos}

		return w

	case 1:
		w := types.Float{Target: &r.LargoCm}

		return w

	case 2:
		w := types.Float{Target: &r.AltoCm}

		return w

	case 3:
		w := types.Float{Target: &r.AnchoCm}

		return w

	case 4:
		w := types.Float{Target: &r.VolumenCm}

		return w

	case 5:
		w := types.Float{Target: &r.ValorDeclaradoConImpuestos}

		return w

	case 6:
		w := types.Float{Target: &r.ValorDeclaradoSinImpuestos}

		return w

	case 7:
		r.MontoValorSeguro = NewUnionNullFloat()

		return r.MontoValorSeguro
	case 8:
		r.MontoGestionCobranza = NewUnionNullFloat()

		return r.MontoGestionCobranza
	case 9:
		r.Referencias = make([]Referencia, 0)

		w := ArrayReferenciaWrapper{Target: &r.Referencias}

		return w

	}
	panic("Unknown field index")
}

func (r *Bulto) SetDefault(i int) {
	switch i {
	case 8:
		r.MontoGestionCobranza = nil
		return
	}
	panic("Unknown field index")
}

func (r *Bulto) NullField(i int) {
	switch i {
	case 7:
		r.MontoValorSeguro = nil
		return
	case 8:
		r.MontoGestionCobranza = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Bulto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Bulto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Bulto) HintSize(int)                     { panic("Unsupported operation") }
func (_ Bulto) Finalize()                        {}

func (_ Bulto) AvroCRC64Fingerprint() []byte {
	return []byte(BultoAvroCRC64Fingerprint)
}

func (r Bulto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Kilos"], err = json.Marshal(r.Kilos)
	if err != nil {
		return nil, err
	}
	output["LargoCm"], err = json.Marshal(r.LargoCm)
	if err != nil {
		return nil, err
	}
	output["AltoCm"], err = json.Marshal(r.AltoCm)
	if err != nil {
		return nil, err
	}
	output["AnchoCm"], err = json.Marshal(r.AnchoCm)
	if err != nil {
		return nil, err
	}
	output["VolumenCm"], err = json.Marshal(r.VolumenCm)
	if err != nil {
		return nil, err
	}
	output["ValorDeclaradoConImpuestos"], err = json.Marshal(r.ValorDeclaradoConImpuestos)
	if err != nil {
		return nil, err
	}
	output["ValorDeclaradoSinImpuestos"], err = json.Marshal(r.ValorDeclaradoSinImpuestos)
	if err != nil {
		return nil, err
	}
	output["MontoValorSeguro"], err = json.Marshal(r.MontoValorSeguro)
	if err != nil {
		return nil, err
	}
	output["MontoGestionCobranza"], err = json.Marshal(r.MontoGestionCobranza)
	if err != nil {
		return nil, err
	}
	output["Referencias"], err = json.Marshal(r.Referencias)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Bulto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Kilos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Kilos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Kilos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["LargoCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LargoCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for LargoCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AltoCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AltoCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AltoCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AnchoCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AnchoCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AnchoCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["VolumenCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VolumenCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for VolumenCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValorDeclaradoConImpuestos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValorDeclaradoConImpuestos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ValorDeclaradoConImpuestos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValorDeclaradoSinImpuestos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValorDeclaradoSinImpuestos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ValorDeclaradoSinImpuestos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MontoValorSeguro"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MontoValorSeguro); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for MontoValorSeguro")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MontoGestionCobranza"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MontoGestionCobranza); err != nil {
			return err
		}
	} else {
		r.MontoGestionCobranza = NewUnionNullFloat()

		r.MontoGestionCobranza = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Referencias"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Referencias); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Referencias")
	}
	return nil
}
