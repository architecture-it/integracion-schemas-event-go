// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Data.avsc
 */
package ContenedorDigitalEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Data struct {
	Interno string `json:"Interno"`

	RazonSocial string `json:"RazonSocial"`

	IdDatosBultos string `json:"IdDatosBultos"`

	Impresora string `json:"Impresora"`
}

const DataAvroCRC64Fingerprint = "H\xe1a\x90\xa6\x14\x7f\xef"

func NewData() Data {
	r := Data{}
	return r
}

func DeserializeData(r io.Reader) (Data, error) {
	t := NewData()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDataFromSchema(r io.Reader, schema string) (Data, error) {
	t := NewData()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeData(r Data, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Interno, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.RazonSocial, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.IdDatosBultos, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Impresora, w)
	if err != nil {
		return err
	}
	return err
}

func (r Data) Serialize(w io.Writer) error {
	return writeData(r, w)
}

func (r Data) Schema() string {
	return "{\"fields\":[{\"name\":\"Interno\",\"type\":\"string\"},{\"name\":\"RazonSocial\",\"type\":\"string\"},{\"name\":\"IdDatosBultos\",\"type\":\"string\"},{\"name\":\"Impresora\",\"type\":\"string\"}],\"name\":\"Andreani.ContenedorDigital.Events.Record.Data\",\"type\":\"record\"}"
}

func (r Data) SchemaName() string {
	return "Andreani.ContenedorDigital.Events.Record.Data"
}

func (_ Data) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Data) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Data) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Data) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Data) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Data) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Data) SetString(v string)   { panic("Unsupported operation") }
func (_ Data) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Data) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Interno}

		return w

	case 1:
		w := types.String{Target: &r.RazonSocial}

		return w

	case 2:
		w := types.String{Target: &r.IdDatosBultos}

		return w

	case 3:
		w := types.String{Target: &r.Impresora}

		return w

	}
	panic("Unknown field index")
}

func (r *Data) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Data) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Data) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Data) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Data) HintSize(int)                     { panic("Unsupported operation") }
func (_ Data) Finalize()                        {}

func (_ Data) AvroCRC64Fingerprint() []byte {
	return []byte(DataAvroCRC64Fingerprint)
}

func (r Data) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Interno"], err = json.Marshal(r.Interno)
	if err != nil {
		return nil, err
	}
	output["RazonSocial"], err = json.Marshal(r.RazonSocial)
	if err != nil {
		return nil, err
	}
	output["IdDatosBultos"], err = json.Marshal(r.IdDatosBultos)
	if err != nil {
		return nil, err
	}
	output["Impresora"], err = json.Marshal(r.Impresora)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Data) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Interno"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Interno); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Interno")
	}
	val = func() json.RawMessage {
		if v, ok := fields["RazonSocial"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RazonSocial); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for RazonSocial")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IdDatosBultos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdDatosBultos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdDatosBultos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Impresora"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Impresora); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Impresora")
	}
	return nil
}
