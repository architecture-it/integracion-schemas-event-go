// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Telefono.avsc
 */
package ApiPedidosAlmacenesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Telefono struct {
	Tipo *UnionNullString `json:"Tipo"`

	Numero string `json:"Numero"`
}

const TelefonoAvroCRC64Fingerprint = "/y\x17/\xb0\u007f\x9e\x18"

func NewTelefono() Telefono {
	r := Telefono{}
	return r
}

func DeserializeTelefono(r io.Reader) (Telefono, error) {
	t := NewTelefono()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTelefonoFromSchema(r io.Reader, schema string) (Telefono, error) {
	t := NewTelefono()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTelefono(r Telefono, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Tipo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Numero, w)
	if err != nil {
		return err
	}
	return err
}

func (r Telefono) Serialize(w io.Writer) error {
	return writeTelefono(r, w)
}

func (r Telefono) Schema() string {
	return "{\"fields\":[{\"name\":\"Tipo\",\"type\":[\"null\",\"string\"]},{\"name\":\"Numero\",\"type\":\"string\"}],\"name\":\"Andreani.WapAltaDePedidoSolicitada.Events.Record.Telefono\",\"type\":\"record\"}"
}

func (r Telefono) SchemaName() string {
	return "Andreani.WapAltaDePedidoSolicitada.Events.Record.Telefono"
}

func (_ Telefono) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Telefono) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Telefono) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Telefono) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Telefono) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Telefono) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Telefono) SetString(v string)   { panic("Unsupported operation") }
func (_ Telefono) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Telefono) Get(i int) types.Field {
	switch i {
	case 0:
		r.Tipo = NewUnionNullString()

		return r.Tipo
	case 1:
		w := types.String{Target: &r.Numero}

		return w

	}
	panic("Unknown field index")
}

func (r *Telefono) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Telefono) NullField(i int) {
	switch i {
	case 0:
		r.Tipo = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Telefono) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Telefono) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Telefono) HintSize(int)                     { panic("Unsupported operation") }
func (_ Telefono) Finalize()                        {}

func (_ Telefono) AvroCRC64Fingerprint() []byte {
	return []byte(TelefonoAvroCRC64Fingerprint)
}

func (r Telefono) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Tipo"], err = json.Marshal(r.Tipo)
	if err != nil {
		return nil, err
	}
	output["Numero"], err = json.Marshal(r.Numero)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Telefono) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Tipo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Tipo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Tipo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Numero"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Numero); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Numero")
	}
	return nil
}
