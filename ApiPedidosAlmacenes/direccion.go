// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     PedidoDeAlmacenSCE.avsc
 */
package ApiPedidosAlmacenesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Direccion struct {
	AbreviaturaProvincia *UnionNullString `json:"AbreviaturaProvincia"`

	Calle *UnionNullString `json:"Calle"`

	CodigoDeDireccion *UnionNullString `json:"CodigoDeDireccion"`

	CodigoCiudad *UnionNullString `json:"CodigoCiudad"`

	CodigoPostal *UnionNullString `json:"CodigoPostal"`

	CombreProvincia *UnionNullString `json:"CombreProvincia"`

	Numero *UnionNullString `json:"Numero"`

	Telefono *UnionNullString `json:"telefono"`

	CodigoISOProvincia *UnionNullString `json:"CodigoISOProvincia"`

	CodigoISOPais *UnionNullString `json:"CodigoISOPais"`

	Localidad *UnionNullString `json:"Localidad"`

	ComponentesDeDireccion *UnionNullListaDePropiedades `json:"ComponentesDeDireccion"`
}

const DireccionAvroCRC64Fingerprint = "\xe0\x98P\xd7%Y\xcc\x15"

func NewDireccion() Direccion {
	r := Direccion{}
	return r
}

func DeserializeDireccion(r io.Reader) (Direccion, error) {
	t := NewDireccion()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDireccionFromSchema(r io.Reader, schema string) (Direccion, error) {
	t := NewDireccion()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDireccion(r Direccion, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.AbreviaturaProvincia, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Calle, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoDeDireccion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoCiudad, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoPostal, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CombreProvincia, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Numero, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Telefono, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoISOProvincia, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoISOPais, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Localidad, w)
	if err != nil {
		return err
	}
	err = writeUnionNullListaDePropiedades(r.ComponentesDeDireccion, w)
	if err != nil {
		return err
	}
	return err
}

func (r Direccion) Serialize(w io.Writer) error {
	return writeDireccion(r, w)
}

func (r Direccion) Schema() string {
	return "{\"fields\":[{\"name\":\"AbreviaturaProvincia\",\"type\":[\"null\",\"string\"]},{\"name\":\"Calle\",\"type\":[\"null\",\"string\"]},{\"name\":\"CodigoDeDireccion\",\"type\":[\"null\",\"string\"]},{\"name\":\"CodigoCiudad\",\"type\":[\"null\",\"string\"]},{\"name\":\"CodigoPostal\",\"type\":[\"null\",\"string\"]},{\"name\":\"CombreProvincia\",\"type\":[\"null\",\"string\"]},{\"name\":\"Numero\",\"type\":[\"null\",\"string\"]},{\"name\":\"telefono\",\"type\":[\"null\",\"string\"]},{\"name\":\"CodigoISOProvincia\",\"type\":[\"null\",\"string\"]},{\"name\":\"CodigoISOPais\",\"type\":[\"null\",\"string\"]},{\"name\":\"Localidad\",\"type\":[\"null\",\"string\"]},{\"name\":\"ComponentesDeDireccion\",\"type\":[\"null\",{\"fields\":[{\"name\":\"metadatos\",\"type\":{\"items\":{\"fields\":[{\"name\":\"Meta\",\"type\":\"string\"},{\"name\":\"Contenido\",\"type\":\"string\"}],\"name\":\"Metadato\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"ListaDePropiedades\",\"type\":\"record\"}]}],\"name\":\"Andreani.WapAltaDePedidoSolicitada.Events.Record.Direccion\",\"type\":\"record\"}"
}

func (r Direccion) SchemaName() string {
	return "Andreani.WapAltaDePedidoSolicitada.Events.Record.Direccion"
}

func (_ Direccion) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Direccion) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Direccion) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Direccion) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Direccion) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Direccion) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Direccion) SetString(v string)   { panic("Unsupported operation") }
func (_ Direccion) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Direccion) Get(i int) types.Field {
	switch i {
	case 0:
		r.AbreviaturaProvincia = NewUnionNullString()

		return r.AbreviaturaProvincia
	case 1:
		r.Calle = NewUnionNullString()

		return r.Calle
	case 2:
		r.CodigoDeDireccion = NewUnionNullString()

		return r.CodigoDeDireccion
	case 3:
		r.CodigoCiudad = NewUnionNullString()

		return r.CodigoCiudad
	case 4:
		r.CodigoPostal = NewUnionNullString()

		return r.CodigoPostal
	case 5:
		r.CombreProvincia = NewUnionNullString()

		return r.CombreProvincia
	case 6:
		r.Numero = NewUnionNullString()

		return r.Numero
	case 7:
		r.Telefono = NewUnionNullString()

		return r.Telefono
	case 8:
		r.CodigoISOProvincia = NewUnionNullString()

		return r.CodigoISOProvincia
	case 9:
		r.CodigoISOPais = NewUnionNullString()

		return r.CodigoISOPais
	case 10:
		r.Localidad = NewUnionNullString()

		return r.Localidad
	case 11:
		r.ComponentesDeDireccion = NewUnionNullListaDePropiedades()

		return r.ComponentesDeDireccion
	}
	panic("Unknown field index")
}

func (r *Direccion) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Direccion) NullField(i int) {
	switch i {
	case 0:
		r.AbreviaturaProvincia = nil
		return
	case 1:
		r.Calle = nil
		return
	case 2:
		r.CodigoDeDireccion = nil
		return
	case 3:
		r.CodigoCiudad = nil
		return
	case 4:
		r.CodigoPostal = nil
		return
	case 5:
		r.CombreProvincia = nil
		return
	case 6:
		r.Numero = nil
		return
	case 7:
		r.Telefono = nil
		return
	case 8:
		r.CodigoISOProvincia = nil
		return
	case 9:
		r.CodigoISOPais = nil
		return
	case 10:
		r.Localidad = nil
		return
	case 11:
		r.ComponentesDeDireccion = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Direccion) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Direccion) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Direccion) HintSize(int)                     { panic("Unsupported operation") }
func (_ Direccion) Finalize()                        {}

func (_ Direccion) AvroCRC64Fingerprint() []byte {
	return []byte(DireccionAvroCRC64Fingerprint)
}

func (r Direccion) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["AbreviaturaProvincia"], err = json.Marshal(r.AbreviaturaProvincia)
	if err != nil {
		return nil, err
	}
	output["Calle"], err = json.Marshal(r.Calle)
	if err != nil {
		return nil, err
	}
	output["CodigoDeDireccion"], err = json.Marshal(r.CodigoDeDireccion)
	if err != nil {
		return nil, err
	}
	output["CodigoCiudad"], err = json.Marshal(r.CodigoCiudad)
	if err != nil {
		return nil, err
	}
	output["CodigoPostal"], err = json.Marshal(r.CodigoPostal)
	if err != nil {
		return nil, err
	}
	output["CombreProvincia"], err = json.Marshal(r.CombreProvincia)
	if err != nil {
		return nil, err
	}
	output["Numero"], err = json.Marshal(r.Numero)
	if err != nil {
		return nil, err
	}
	output["telefono"], err = json.Marshal(r.Telefono)
	if err != nil {
		return nil, err
	}
	output["CodigoISOProvincia"], err = json.Marshal(r.CodigoISOProvincia)
	if err != nil {
		return nil, err
	}
	output["CodigoISOPais"], err = json.Marshal(r.CodigoISOPais)
	if err != nil {
		return nil, err
	}
	output["Localidad"], err = json.Marshal(r.Localidad)
	if err != nil {
		return nil, err
	}
	output["ComponentesDeDireccion"], err = json.Marshal(r.ComponentesDeDireccion)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Direccion) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["AbreviaturaProvincia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AbreviaturaProvincia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AbreviaturaProvincia")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Calle"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Calle); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Calle")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoDeDireccion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoDeDireccion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoDeDireccion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoCiudad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoCiudad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoCiudad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoPostal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoPostal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoPostal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CombreProvincia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CombreProvincia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CombreProvincia")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Numero"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Numero); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Numero")
	}
	val = func() json.RawMessage {
		if v, ok := fields["telefono"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Telefono); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for telefono")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoISOProvincia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoISOProvincia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoISOProvincia")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoISOPais"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoISOPais); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoISOPais")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Localidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Localidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Localidad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ComponentesDeDireccion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ComponentesDeDireccion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ComponentesDeDireccion")
	}
	return nil
}
