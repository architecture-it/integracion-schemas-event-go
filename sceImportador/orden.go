// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     orden.avsc
 */
package sceImportadorEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Orden struct {
	Storerkey string `json:"storerkey"`

	Externorderkey string `json:"externorderkey"`

	Type int32 `json:"type"`

	Buyerpo string `json:"buyerpo"`

	Caddress1 string `json:"caddress1"`

	Caddress2 string `json:"caddress2"`

	Caddress3 string `json:"caddress3"`

	Caddress4 string `json:"caddress4"`

	Caddress6 string `json:"caddress6"`

	Ccity string `json:"ccity"`

	Ccompany string `json:"ccompany"`

	Ccontact1 string `json:"ccontact1"`

	Cemail1 string `json:"cemail1"`

	Cphone1 *UnionNullString `json:"cphone1"`

	Cstate string `json:"cstate"`

	Czip string `json:"czip"`

	Consigneekey string `json:"consigneekey"`

	Detalle []OrdenDetalle `json:"detalle"`
}

const OrdenAvroCRC64Fingerprint = "\xb6\x06xg\x92S,["

func NewOrden() Orden {
	r := Orden{}
	r.Cphone1 = nil
	r.Detalle = make([]OrdenDetalle, 0)

	return r
}

func DeserializeOrden(r io.Reader) (Orden, error) {
	t := NewOrden()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeOrdenFromSchema(r io.Reader, schema string) (Orden, error) {
	t := NewOrden()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeOrden(r Orden, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Storerkey, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Externorderkey, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Type, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Buyerpo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Caddress1, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Caddress2, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Caddress3, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Caddress4, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Caddress6, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Ccity, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Ccompany, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Ccontact1, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Cemail1, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Cphone1, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Cstate, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Czip, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Consigneekey, w)
	if err != nil {
		return err
	}
	err = writeArrayOrdenDetalle(r.Detalle, w)
	if err != nil {
		return err
	}
	return err
}

func (r Orden) Serialize(w io.Writer) error {
	return writeOrden(r, w)
}

func (r Orden) Schema() string {
	return "{\"fields\":[{\"name\":\"storerkey\",\"type\":\"string\"},{\"name\":\"externorderkey\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"int\"},{\"name\":\"buyerpo\",\"type\":\"string\"},{\"name\":\"caddress1\",\"type\":\"string\"},{\"name\":\"caddress2\",\"type\":\"string\"},{\"name\":\"caddress3\",\"type\":\"string\"},{\"name\":\"caddress4\",\"type\":\"string\"},{\"name\":\"caddress6\",\"type\":\"string\"},{\"name\":\"ccity\",\"type\":\"string\"},{\"name\":\"ccompany\",\"type\":\"string\"},{\"name\":\"ccontact1\",\"type\":\"string\"},{\"name\":\"cemail1\",\"type\":\"string\"},{\"default\":null,\"name\":\"cphone1\",\"type\":[\"null\",\"string\"]},{\"name\":\"cstate\",\"type\":\"string\"},{\"name\":\"czip\",\"type\":\"string\"},{\"name\":\"consigneekey\",\"type\":\"string\"},{\"name\":\"detalle\",\"type\":{\"items\":{\"fields\":[{\"name\":\"sku\",\"type\":\"string\"},{\"name\":\"storerkey\",\"type\":\"string\"},{\"name\":\"externorderkey\",\"type\":\"string\"},{\"name\":\"openqty\",\"type\":\"int\"}],\"name\":\"ordenDetalle\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Andreani.sce.Events.Record.orden\",\"type\":\"record\"}"
}

func (r Orden) SchemaName() string {
	return "Andreani.sce.Events.Record.orden"
}

func (_ Orden) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Orden) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Orden) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Orden) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Orden) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Orden) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Orden) SetString(v string)   { panic("Unsupported operation") }
func (_ Orden) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Orden) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Storerkey}

		return w

	case 1:
		w := types.String{Target: &r.Externorderkey}

		return w

	case 2:
		w := types.Int{Target: &r.Type}

		return w

	case 3:
		w := types.String{Target: &r.Buyerpo}

		return w

	case 4:
		w := types.String{Target: &r.Caddress1}

		return w

	case 5:
		w := types.String{Target: &r.Caddress2}

		return w

	case 6:
		w := types.String{Target: &r.Caddress3}

		return w

	case 7:
		w := types.String{Target: &r.Caddress4}

		return w

	case 8:
		w := types.String{Target: &r.Caddress6}

		return w

	case 9:
		w := types.String{Target: &r.Ccity}

		return w

	case 10:
		w := types.String{Target: &r.Ccompany}

		return w

	case 11:
		w := types.String{Target: &r.Ccontact1}

		return w

	case 12:
		w := types.String{Target: &r.Cemail1}

		return w

	case 13:
		r.Cphone1 = NewUnionNullString()

		return r.Cphone1
	case 14:
		w := types.String{Target: &r.Cstate}

		return w

	case 15:
		w := types.String{Target: &r.Czip}

		return w

	case 16:
		w := types.String{Target: &r.Consigneekey}

		return w

	case 17:
		r.Detalle = make([]OrdenDetalle, 0)

		w := ArrayOrdenDetalleWrapper{Target: &r.Detalle}

		return w

	}
	panic("Unknown field index")
}

func (r *Orden) SetDefault(i int) {
	switch i {
	case 13:
		r.Cphone1 = nil
		return
	}
	panic("Unknown field index")
}

func (r *Orden) NullField(i int) {
	switch i {
	case 13:
		r.Cphone1 = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Orden) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Orden) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Orden) HintSize(int)                     { panic("Unsupported operation") }
func (_ Orden) Finalize()                        {}

func (_ Orden) AvroCRC64Fingerprint() []byte {
	return []byte(OrdenAvroCRC64Fingerprint)
}

func (r Orden) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["storerkey"], err = json.Marshal(r.Storerkey)
	if err != nil {
		return nil, err
	}
	output["externorderkey"], err = json.Marshal(r.Externorderkey)
	if err != nil {
		return nil, err
	}
	output["type"], err = json.Marshal(r.Type)
	if err != nil {
		return nil, err
	}
	output["buyerpo"], err = json.Marshal(r.Buyerpo)
	if err != nil {
		return nil, err
	}
	output["caddress1"], err = json.Marshal(r.Caddress1)
	if err != nil {
		return nil, err
	}
	output["caddress2"], err = json.Marshal(r.Caddress2)
	if err != nil {
		return nil, err
	}
	output["caddress3"], err = json.Marshal(r.Caddress3)
	if err != nil {
		return nil, err
	}
	output["caddress4"], err = json.Marshal(r.Caddress4)
	if err != nil {
		return nil, err
	}
	output["caddress6"], err = json.Marshal(r.Caddress6)
	if err != nil {
		return nil, err
	}
	output["ccity"], err = json.Marshal(r.Ccity)
	if err != nil {
		return nil, err
	}
	output["ccompany"], err = json.Marshal(r.Ccompany)
	if err != nil {
		return nil, err
	}
	output["ccontact1"], err = json.Marshal(r.Ccontact1)
	if err != nil {
		return nil, err
	}
	output["cemail1"], err = json.Marshal(r.Cemail1)
	if err != nil {
		return nil, err
	}
	output["cphone1"], err = json.Marshal(r.Cphone1)
	if err != nil {
		return nil, err
	}
	output["cstate"], err = json.Marshal(r.Cstate)
	if err != nil {
		return nil, err
	}
	output["czip"], err = json.Marshal(r.Czip)
	if err != nil {
		return nil, err
	}
	output["consigneekey"], err = json.Marshal(r.Consigneekey)
	if err != nil {
		return nil, err
	}
	output["detalle"], err = json.Marshal(r.Detalle)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Orden) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["storerkey"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Storerkey); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for storerkey")
	}
	val = func() json.RawMessage {
		if v, ok := fields["externorderkey"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Externorderkey); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for externorderkey")
	}
	val = func() json.RawMessage {
		if v, ok := fields["type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Type); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for type")
	}
	val = func() json.RawMessage {
		if v, ok := fields["buyerpo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Buyerpo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for buyerpo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["caddress1"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Caddress1); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for caddress1")
	}
	val = func() json.RawMessage {
		if v, ok := fields["caddress2"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Caddress2); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for caddress2")
	}
	val = func() json.RawMessage {
		if v, ok := fields["caddress3"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Caddress3); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for caddress3")
	}
	val = func() json.RawMessage {
		if v, ok := fields["caddress4"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Caddress4); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for caddress4")
	}
	val = func() json.RawMessage {
		if v, ok := fields["caddress6"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Caddress6); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for caddress6")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ccity"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ccity); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ccity")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ccompany"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ccompany); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ccompany")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ccontact1"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ccontact1); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ccontact1")
	}
	val = func() json.RawMessage {
		if v, ok := fields["cemail1"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cemail1); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for cemail1")
	}
	val = func() json.RawMessage {
		if v, ok := fields["cphone1"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cphone1); err != nil {
			return err
		}
	} else {
		r.Cphone1 = NewUnionNullString()

		r.Cphone1 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["cstate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cstate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for cstate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["czip"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Czip); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for czip")
	}
	val = func() json.RawMessage {
		if v, ok := fields["consigneekey"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Consigneekey); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for consigneekey")
	}
	val = func() json.RawMessage {
		if v, ok := fields["detalle"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Detalle); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for detalle")
	}
	return nil
}
