// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ordenDetalle.avsc
 */
package sceImportadorEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type OrdenDetalle struct {
	Sku string `json:"sku"`

	Storerkey string `json:"storerkey"`

	Externorderkey string `json:"externorderkey"`

	Openqty int32 `json:"openqty"`
}

const OrdenDetalleAvroCRC64Fingerprint = "\xf6\xdc9\xedx\xbf\xbau"

func NewOrdenDetalle() OrdenDetalle {
	r := OrdenDetalle{}
	return r
}

func DeserializeOrdenDetalle(r io.Reader) (OrdenDetalle, error) {
	t := NewOrdenDetalle()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeOrdenDetalleFromSchema(r io.Reader, schema string) (OrdenDetalle, error) {
	t := NewOrdenDetalle()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeOrdenDetalle(r OrdenDetalle, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Sku, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Storerkey, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Externorderkey, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Openqty, w)
	if err != nil {
		return err
	}
	return err
}

func (r OrdenDetalle) Serialize(w io.Writer) error {
	return writeOrdenDetalle(r, w)
}

func (r OrdenDetalle) Schema() string {
	return "{\"fields\":[{\"name\":\"sku\",\"type\":\"string\"},{\"name\":\"storerkey\",\"type\":\"string\"},{\"name\":\"externorderkey\",\"type\":\"string\"},{\"name\":\"openqty\",\"type\":\"int\"}],\"name\":\"Andreani.sce.Events.Record.ordenDetalle\",\"type\":\"record\"}"
}

func (r OrdenDetalle) SchemaName() string {
	return "Andreani.sce.Events.Record.ordenDetalle"
}

func (_ OrdenDetalle) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ OrdenDetalle) SetInt(v int32)       { panic("Unsupported operation") }
func (_ OrdenDetalle) SetLong(v int64)      { panic("Unsupported operation") }
func (_ OrdenDetalle) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ OrdenDetalle) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ OrdenDetalle) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ OrdenDetalle) SetString(v string)   { panic("Unsupported operation") }
func (_ OrdenDetalle) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *OrdenDetalle) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Sku}

		return w

	case 1:
		w := types.String{Target: &r.Storerkey}

		return w

	case 2:
		w := types.String{Target: &r.Externorderkey}

		return w

	case 3:
		w := types.Int{Target: &r.Openqty}

		return w

	}
	panic("Unknown field index")
}

func (r *OrdenDetalle) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *OrdenDetalle) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ OrdenDetalle) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ OrdenDetalle) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ OrdenDetalle) HintSize(int)                     { panic("Unsupported operation") }
func (_ OrdenDetalle) Finalize()                        {}

func (_ OrdenDetalle) AvroCRC64Fingerprint() []byte {
	return []byte(OrdenDetalleAvroCRC64Fingerprint)
}

func (r OrdenDetalle) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["sku"], err = json.Marshal(r.Sku)
	if err != nil {
		return nil, err
	}
	output["storerkey"], err = json.Marshal(r.Storerkey)
	if err != nil {
		return nil, err
	}
	output["externorderkey"], err = json.Marshal(r.Externorderkey)
	if err != nil {
		return nil, err
	}
	output["openqty"], err = json.Marshal(r.Openqty)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *OrdenDetalle) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["sku"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sku); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for sku")
	}
	val = func() json.RawMessage {
		if v, ok := fields["storerkey"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Storerkey); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for storerkey")
	}
	val = func() json.RawMessage {
		if v, ok := fields["externorderkey"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Externorderkey); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for externorderkey")
	}
	val = func() json.RawMessage {
		if v, ok := fields["openqty"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Openqty); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for openqty")
	}
	return nil
}
