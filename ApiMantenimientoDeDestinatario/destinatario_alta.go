// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     MantenimientoDeDestinatarioSolicitado.avsc
 */
package ApiMantenimientoDeDestinatarioEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DestinatarioAlta struct {
	Propietario string `json:"propietario"`

	Tipo string `json:"tipo"`

	Direccion string `json:"direccion"`

	Ciudad string `json:"ciudad"`

	Compania string `json:"compania"`

	Pais string `json:"pais"`

	Descripcion string `json:"descripcion"`

	Lugar string `json:"lugar"`

	Telefono string `json:"telefono"`

	Provincia string `json:"provincia"`

	IdentificadorFiscal string `json:"identificadorFiscal"`

	CodigoPostal string `json:"codigoPostal"`

	Cuit string `json:"cuit"`

	Ramo string `json:"ramo"`

	Gln string `json:"gln"`

	Agente string `json:"agente"`
}

const DestinatarioAltaAvroCRC64Fingerprint = "\bH\f\x02q\xc6\xd5q"

func NewDestinatarioAlta() DestinatarioAlta {
	r := DestinatarioAlta{}
	return r
}

func DeserializeDestinatarioAlta(r io.Reader) (DestinatarioAlta, error) {
	t := NewDestinatarioAlta()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDestinatarioAltaFromSchema(r io.Reader, schema string) (DestinatarioAlta, error) {
	t := NewDestinatarioAlta()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDestinatarioAlta(r DestinatarioAlta, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Propietario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Tipo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Direccion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Ciudad, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Compania, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Pais, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Descripcion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Lugar, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Telefono, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Provincia, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.IdentificadorFiscal, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodigoPostal, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Cuit, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Ramo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Gln, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Agente, w)
	if err != nil {
		return err
	}
	return err
}

func (r DestinatarioAlta) Serialize(w io.Writer) error {
	return writeDestinatarioAlta(r, w)
}

func (r DestinatarioAlta) Schema() string {
	return "{\"fields\":[{\"name\":\"propietario\",\"type\":\"string\"},{\"name\":\"tipo\",\"type\":\"string\"},{\"name\":\"direccion\",\"type\":\"string\"},{\"name\":\"ciudad\",\"type\":\"string\"},{\"name\":\"compania\",\"type\":\"string\"},{\"name\":\"pais\",\"type\":\"string\"},{\"name\":\"descripcion\",\"type\":\"string\"},{\"name\":\"lugar\",\"type\":\"string\"},{\"name\":\"telefono\",\"type\":\"string\"},{\"name\":\"provincia\",\"type\":\"string\"},{\"name\":\"identificadorFiscal\",\"type\":\"string\"},{\"name\":\"codigoPostal\",\"type\":\"string\"},{\"name\":\"cuit\",\"type\":\"string\"},{\"name\":\"ramo\",\"type\":\"string\"},{\"name\":\"gln\",\"type\":\"string\"},{\"name\":\"agente\",\"type\":\"string\"}],\"name\":\"Andreani.ApiMantenimientoDeDestinatario.Events.Record.DestinatarioAlta\",\"type\":\"record\"}"
}

func (r DestinatarioAlta) SchemaName() string {
	return "Andreani.ApiMantenimientoDeDestinatario.Events.Record.DestinatarioAlta"
}

func (_ DestinatarioAlta) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DestinatarioAlta) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DestinatarioAlta) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DestinatarioAlta) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DestinatarioAlta) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DestinatarioAlta) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DestinatarioAlta) SetString(v string)   { panic("Unsupported operation") }
func (_ DestinatarioAlta) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DestinatarioAlta) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Propietario}

		return w

	case 1:
		w := types.String{Target: &r.Tipo}

		return w

	case 2:
		w := types.String{Target: &r.Direccion}

		return w

	case 3:
		w := types.String{Target: &r.Ciudad}

		return w

	case 4:
		w := types.String{Target: &r.Compania}

		return w

	case 5:
		w := types.String{Target: &r.Pais}

		return w

	case 6:
		w := types.String{Target: &r.Descripcion}

		return w

	case 7:
		w := types.String{Target: &r.Lugar}

		return w

	case 8:
		w := types.String{Target: &r.Telefono}

		return w

	case 9:
		w := types.String{Target: &r.Provincia}

		return w

	case 10:
		w := types.String{Target: &r.IdentificadorFiscal}

		return w

	case 11:
		w := types.String{Target: &r.CodigoPostal}

		return w

	case 12:
		w := types.String{Target: &r.Cuit}

		return w

	case 13:
		w := types.String{Target: &r.Ramo}

		return w

	case 14:
		w := types.String{Target: &r.Gln}

		return w

	case 15:
		w := types.String{Target: &r.Agente}

		return w

	}
	panic("Unknown field index")
}

func (r *DestinatarioAlta) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *DestinatarioAlta) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ DestinatarioAlta) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DestinatarioAlta) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DestinatarioAlta) HintSize(int)                     { panic("Unsupported operation") }
func (_ DestinatarioAlta) Finalize()                        {}

func (_ DestinatarioAlta) AvroCRC64Fingerprint() []byte {
	return []byte(DestinatarioAltaAvroCRC64Fingerprint)
}

func (r DestinatarioAlta) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["tipo"], err = json.Marshal(r.Tipo)
	if err != nil {
		return nil, err
	}
	output["direccion"], err = json.Marshal(r.Direccion)
	if err != nil {
		return nil, err
	}
	output["ciudad"], err = json.Marshal(r.Ciudad)
	if err != nil {
		return nil, err
	}
	output["compania"], err = json.Marshal(r.Compania)
	if err != nil {
		return nil, err
	}
	output["pais"], err = json.Marshal(r.Pais)
	if err != nil {
		return nil, err
	}
	output["descripcion"], err = json.Marshal(r.Descripcion)
	if err != nil {
		return nil, err
	}
	output["lugar"], err = json.Marshal(r.Lugar)
	if err != nil {
		return nil, err
	}
	output["telefono"], err = json.Marshal(r.Telefono)
	if err != nil {
		return nil, err
	}
	output["provincia"], err = json.Marshal(r.Provincia)
	if err != nil {
		return nil, err
	}
	output["identificadorFiscal"], err = json.Marshal(r.IdentificadorFiscal)
	if err != nil {
		return nil, err
	}
	output["codigoPostal"], err = json.Marshal(r.CodigoPostal)
	if err != nil {
		return nil, err
	}
	output["cuit"], err = json.Marshal(r.Cuit)
	if err != nil {
		return nil, err
	}
	output["ramo"], err = json.Marshal(r.Ramo)
	if err != nil {
		return nil, err
	}
	output["gln"], err = json.Marshal(r.Gln)
	if err != nil {
		return nil, err
	}
	output["agente"], err = json.Marshal(r.Agente)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DestinatarioAlta) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for propietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["tipo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Tipo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for tipo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["direccion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Direccion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for direccion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ciudad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ciudad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ciudad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["compania"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Compania); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for compania")
	}
	val = func() json.RawMessage {
		if v, ok := fields["pais"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Pais); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for pais")
	}
	val = func() json.RawMessage {
		if v, ok := fields["descripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Descripcion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for descripcion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["lugar"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Lugar); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for lugar")
	}
	val = func() json.RawMessage {
		if v, ok := fields["telefono"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Telefono); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for telefono")
	}
	val = func() json.RawMessage {
		if v, ok := fields["provincia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Provincia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for provincia")
	}
	val = func() json.RawMessage {
		if v, ok := fields["identificadorFiscal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdentificadorFiscal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for identificadorFiscal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoPostal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoPostal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for codigoPostal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["cuit"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cuit); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for cuit")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ramo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ramo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ramo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["gln"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Gln); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for gln")
	}
	val = func() json.RawMessage {
		if v, ok := fields["agente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Agente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for agente")
	}
	return nil
}
