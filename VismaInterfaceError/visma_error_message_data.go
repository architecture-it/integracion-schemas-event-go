// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     VismaErrorMessageData.avsc
 */
package VismaInterfaceErrorEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type VismaErrorMessageData struct {
	EmployeeId *UnionNullString `json:"EmployeeId"`

	ErrorMessage *UnionNullString `json:"ErrorMessage"`

	RowCsv *UnionNullString `json:"RowCsv"`
}

const VismaErrorMessageDataAvroCRC64Fingerprint = "+k|\x1eYq3\x1f"

func NewVismaErrorMessageData() VismaErrorMessageData {
	r := VismaErrorMessageData{}
	r.EmployeeId = nil
	r.ErrorMessage = nil
	r.RowCsv = nil
	return r
}

func DeserializeVismaErrorMessageData(r io.Reader) (VismaErrorMessageData, error) {
	t := NewVismaErrorMessageData()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeVismaErrorMessageDataFromSchema(r io.Reader, schema string) (VismaErrorMessageData, error) {
	t := NewVismaErrorMessageData()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeVismaErrorMessageData(r VismaErrorMessageData, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.EmployeeId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ErrorMessage, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.RowCsv, w)
	if err != nil {
		return err
	}
	return err
}

func (r VismaErrorMessageData) Serialize(w io.Writer) error {
	return writeVismaErrorMessageData(r, w)
}

func (r VismaErrorMessageData) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"EmployeeId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ErrorMessage\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"RowCsv\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.VismaInterfaceError.Events.Record.VismaErrorMessageData\",\"type\":\"record\"}"
}

func (r VismaErrorMessageData) SchemaName() string {
	return "Andreani.VismaInterfaceError.Events.Record.VismaErrorMessageData"
}

func (_ VismaErrorMessageData) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ VismaErrorMessageData) SetInt(v int32)       { panic("Unsupported operation") }
func (_ VismaErrorMessageData) SetLong(v int64)      { panic("Unsupported operation") }
func (_ VismaErrorMessageData) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ VismaErrorMessageData) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ VismaErrorMessageData) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ VismaErrorMessageData) SetString(v string)   { panic("Unsupported operation") }
func (_ VismaErrorMessageData) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *VismaErrorMessageData) Get(i int) types.Field {
	switch i {
	case 0:
		r.EmployeeId = NewUnionNullString()

		return r.EmployeeId
	case 1:
		r.ErrorMessage = NewUnionNullString()

		return r.ErrorMessage
	case 2:
		r.RowCsv = NewUnionNullString()

		return r.RowCsv
	}
	panic("Unknown field index")
}

func (r *VismaErrorMessageData) SetDefault(i int) {
	switch i {
	case 0:
		r.EmployeeId = nil
		return
	case 1:
		r.ErrorMessage = nil
		return
	case 2:
		r.RowCsv = nil
		return
	}
	panic("Unknown field index")
}

func (r *VismaErrorMessageData) NullField(i int) {
	switch i {
	case 0:
		r.EmployeeId = nil
		return
	case 1:
		r.ErrorMessage = nil
		return
	case 2:
		r.RowCsv = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ VismaErrorMessageData) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ VismaErrorMessageData) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ VismaErrorMessageData) HintSize(int)                     { panic("Unsupported operation") }
func (_ VismaErrorMessageData) Finalize()                        {}

func (_ VismaErrorMessageData) AvroCRC64Fingerprint() []byte {
	return []byte(VismaErrorMessageDataAvroCRC64Fingerprint)
}

func (r VismaErrorMessageData) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["EmployeeId"], err = json.Marshal(r.EmployeeId)
	if err != nil {
		return nil, err
	}
	output["ErrorMessage"], err = json.Marshal(r.ErrorMessage)
	if err != nil {
		return nil, err
	}
	output["RowCsv"], err = json.Marshal(r.RowCsv)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *VismaErrorMessageData) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["EmployeeId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EmployeeId); err != nil {
			return err
		}
	} else {
		r.EmployeeId = NewUnionNullString()

		r.EmployeeId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ErrorMessage"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ErrorMessage); err != nil {
			return err
		}
	} else {
		r.ErrorMessage = NewUnionNullString()

		r.ErrorMessage = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["RowCsv"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RowCsv); err != nil {
			return err
		}
	} else {
		r.RowCsv = NewUnionNullString()

		r.RowCsv = nil
	}
	return nil
}
