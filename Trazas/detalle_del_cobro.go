// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     GestionCobranza.avsc
 */
package TrazasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DetalleDelCobro struct {
	FormaDeCobro FormaDeCobro `json:"formaDeCobro"`

	Importe float64 `json:"importe"`
}

const DetalleDelCobroAvroCRC64Fingerprint = "^\xf92='8b\xf0"

func NewDetalleDelCobro() DetalleDelCobro {
	r := DetalleDelCobro{}
	return r
}

func DeserializeDetalleDelCobro(r io.Reader) (DetalleDelCobro, error) {
	t := NewDetalleDelCobro()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDetalleDelCobroFromSchema(r io.Reader, schema string) (DetalleDelCobro, error) {
	t := NewDetalleDelCobro()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDetalleDelCobro(r DetalleDelCobro, w io.Writer) error {
	var err error
	err = writeFormaDeCobro(r.FormaDeCobro, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.Importe, w)
	if err != nil {
		return err
	}
	return err
}

func (r DetalleDelCobro) Serialize(w io.Writer) error {
	return writeDetalleDelCobro(r, w)
}

func (r DetalleDelCobro) Schema() string {
	return "{\"fields\":[{\"name\":\"formaDeCobro\",\"type\":{\"name\":\"FormaDeCobro\",\"symbols\":[\"otro\",\"cheque\",\"retenciones\",\"boletaDeDeposito\",\"siniestroPerdido\",\"efectivo\"],\"type\":\"enum\"}},{\"name\":\"importe\",\"type\":\"double\"}],\"name\":\"Integracion.Esquemas.Referencias.DetalleDelCobro\",\"type\":\"record\"}"
}

func (r DetalleDelCobro) SchemaName() string {
	return "Integracion.Esquemas.Referencias.DetalleDelCobro"
}

func (_ DetalleDelCobro) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DetalleDelCobro) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DetalleDelCobro) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DetalleDelCobro) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DetalleDelCobro) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DetalleDelCobro) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DetalleDelCobro) SetString(v string)   { panic("Unsupported operation") }
func (_ DetalleDelCobro) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DetalleDelCobro) Get(i int) types.Field {
	switch i {
	case 0:
		w := FormaDeCobroWrapper{Target: &r.FormaDeCobro}

		return w

	case 1:
		w := types.Double{Target: &r.Importe}

		return w

	}
	panic("Unknown field index")
}

func (r *DetalleDelCobro) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *DetalleDelCobro) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ DetalleDelCobro) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DetalleDelCobro) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DetalleDelCobro) HintSize(int)                     { panic("Unsupported operation") }
func (_ DetalleDelCobro) Finalize()                        {}

func (_ DetalleDelCobro) AvroCRC64Fingerprint() []byte {
	return []byte(DetalleDelCobroAvroCRC64Fingerprint)
}

func (r DetalleDelCobro) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["formaDeCobro"], err = json.Marshal(r.FormaDeCobro)
	if err != nil {
		return nil, err
	}
	output["importe"], err = json.Marshal(r.Importe)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DetalleDelCobro) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["formaDeCobro"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FormaDeCobro); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for formaDeCobro")
	}
	val = func() json.RawMessage {
		if v, ok := fields["importe"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Importe); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for importe")
	}
	return nil
}
