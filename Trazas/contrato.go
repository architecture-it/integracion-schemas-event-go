// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TrazaAltaDeEnvio.avsc
 */
package TrazasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Contrato struct {
	CodigoDeContratoInterno string `json:"codigoDeContratoInterno"`

	CodigoDeContrato *UnionNullString `json:"codigoDeContrato"`

	Descripcion *UnionNullString `json:"descripcion"`

	EstaActivo bool `json:"estaActivo"`

	TipoDeServicio *UnionNullString `json:"tipoDeServicio"`

	CodigoDeDireccion *UnionNullString `json:"codigoDeDireccion"`

	CodigoDeClienteInterno string `json:"codigoDeClienteInterno"`

	VigenciaDesde *UnionNullString `json:"vigenciaDesde"`

	VigenciaHasta *UnionNullString `json:"vigenciaHasta"`
}

const ContratoAvroCRC64Fingerprint = "\x83\x1c\x93\xbe-\xd2l\x89"

func NewContrato() Contrato {
	r := Contrato{}
	r.CodigoDeContrato = nil
	r.Descripcion = nil
	r.TipoDeServicio = nil
	r.CodigoDeDireccion = nil
	r.VigenciaDesde = nil
	r.VigenciaHasta = nil
	return r
}

func DeserializeContrato(r io.Reader) (Contrato, error) {
	t := NewContrato()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeContratoFromSchema(r io.Reader, schema string) (Contrato, error) {
	t := NewContrato()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeContrato(r Contrato, w io.Writer) error {
	var err error
	err = vm.WriteString(r.CodigoDeContratoInterno, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoDeContrato, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Descripcion, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.EstaActivo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoDeServicio, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoDeDireccion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodigoDeClienteInterno, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.VigenciaDesde, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.VigenciaHasta, w)
	if err != nil {
		return err
	}
	return err
}

func (r Contrato) Serialize(w io.Writer) error {
	return writeContrato(r, w)
}

func (r Contrato) Schema() string {
	return "{\"fields\":[{\"name\":\"codigoDeContratoInterno\",\"type\":\"string\"},{\"default\":null,\"name\":\"codigoDeContrato\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"descripcion\",\"type\":[\"null\",\"string\"]},{\"name\":\"estaActivo\",\"type\":\"boolean\"},{\"default\":null,\"name\":\"tipoDeServicio\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"codigoDeDireccion\",\"type\":[\"null\",\"string\"]},{\"name\":\"codigoDeClienteInterno\",\"type\":\"string\"},{\"default\":null,\"name\":\"vigenciaDesde\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"vigenciaHasta\",\"type\":[\"null\",\"string\"]}],\"name\":\"Integracion.Esquemas.Referencias.Contrato\",\"type\":\"record\"}"
}

func (r Contrato) SchemaName() string {
	return "Integracion.Esquemas.Referencias.Contrato"
}

func (_ Contrato) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Contrato) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Contrato) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Contrato) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Contrato) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Contrato) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Contrato) SetString(v string)   { panic("Unsupported operation") }
func (_ Contrato) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Contrato) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.CodigoDeContratoInterno}

		return w

	case 1:
		r.CodigoDeContrato = NewUnionNullString()

		return r.CodigoDeContrato
	case 2:
		r.Descripcion = NewUnionNullString()

		return r.Descripcion
	case 3:
		w := types.Boolean{Target: &r.EstaActivo}

		return w

	case 4:
		r.TipoDeServicio = NewUnionNullString()

		return r.TipoDeServicio
	case 5:
		r.CodigoDeDireccion = NewUnionNullString()

		return r.CodigoDeDireccion
	case 6:
		w := types.String{Target: &r.CodigoDeClienteInterno}

		return w

	case 7:
		r.VigenciaDesde = NewUnionNullString()

		return r.VigenciaDesde
	case 8:
		r.VigenciaHasta = NewUnionNullString()

		return r.VigenciaHasta
	}
	panic("Unknown field index")
}

func (r *Contrato) SetDefault(i int) {
	switch i {
	case 1:
		r.CodigoDeContrato = nil
		return
	case 2:
		r.Descripcion = nil
		return
	case 4:
		r.TipoDeServicio = nil
		return
	case 5:
		r.CodigoDeDireccion = nil
		return
	case 7:
		r.VigenciaDesde = nil
		return
	case 8:
		r.VigenciaHasta = nil
		return
	}
	panic("Unknown field index")
}

func (r *Contrato) NullField(i int) {
	switch i {
	case 1:
		r.CodigoDeContrato = nil
		return
	case 2:
		r.Descripcion = nil
		return
	case 4:
		r.TipoDeServicio = nil
		return
	case 5:
		r.CodigoDeDireccion = nil
		return
	case 7:
		r.VigenciaDesde = nil
		return
	case 8:
		r.VigenciaHasta = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Contrato) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Contrato) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Contrato) HintSize(int)                     { panic("Unsupported operation") }
func (_ Contrato) Finalize()                        {}

func (_ Contrato) AvroCRC64Fingerprint() []byte {
	return []byte(ContratoAvroCRC64Fingerprint)
}

func (r Contrato) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["codigoDeContratoInterno"], err = json.Marshal(r.CodigoDeContratoInterno)
	if err != nil {
		return nil, err
	}
	output["codigoDeContrato"], err = json.Marshal(r.CodigoDeContrato)
	if err != nil {
		return nil, err
	}
	output["descripcion"], err = json.Marshal(r.Descripcion)
	if err != nil {
		return nil, err
	}
	output["estaActivo"], err = json.Marshal(r.EstaActivo)
	if err != nil {
		return nil, err
	}
	output["tipoDeServicio"], err = json.Marshal(r.TipoDeServicio)
	if err != nil {
		return nil, err
	}
	output["codigoDeDireccion"], err = json.Marshal(r.CodigoDeDireccion)
	if err != nil {
		return nil, err
	}
	output["codigoDeClienteInterno"], err = json.Marshal(r.CodigoDeClienteInterno)
	if err != nil {
		return nil, err
	}
	output["vigenciaDesde"], err = json.Marshal(r.VigenciaDesde)
	if err != nil {
		return nil, err
	}
	output["vigenciaHasta"], err = json.Marshal(r.VigenciaHasta)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Contrato) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["codigoDeContratoInterno"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoDeContratoInterno); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for codigoDeContratoInterno")
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoDeContrato"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoDeContrato); err != nil {
			return err
		}
	} else {
		r.CodigoDeContrato = NewUnionNullString()

		r.CodigoDeContrato = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["descripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Descripcion); err != nil {
			return err
		}
	} else {
		r.Descripcion = NewUnionNullString()

		r.Descripcion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["estaActivo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EstaActivo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for estaActivo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["tipoDeServicio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoDeServicio); err != nil {
			return err
		}
	} else {
		r.TipoDeServicio = NewUnionNullString()

		r.TipoDeServicio = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoDeDireccion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoDeDireccion); err != nil {
			return err
		}
	} else {
		r.CodigoDeDireccion = NewUnionNullString()

		r.CodigoDeDireccion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigoDeClienteInterno"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoDeClienteInterno); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for codigoDeClienteInterno")
	}
	val = func() json.RawMessage {
		if v, ok := fields["vigenciaDesde"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VigenciaDesde); err != nil {
			return err
		}
	} else {
		r.VigenciaDesde = NewUnionNullString()

		r.VigenciaDesde = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["vigenciaHasta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VigenciaHasta); err != nil {
			return err
		}
	} else {
		r.VigenciaHasta = NewUnionNullString()

		r.VigenciaHasta = nil
	}
	return nil
}
