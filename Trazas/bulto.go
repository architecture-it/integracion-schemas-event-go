// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Envio.avsc
 */
package TrazasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Bulto struct {
	NumeroDeBulto string `json:"numeroDeBulto"`

	Operador *UnionNullString `json:"operador"`

	Cuando int64 `json:"cuando"`
}

const BultoAvroCRC64Fingerprint = ".\xe7×ƒ>!\xba/"

func NewBulto() Bulto {
	r := Bulto{}
	r.Operador = nil
	return r
}

func DeserializeBulto(r io.Reader) (Bulto, error) {
	t := NewBulto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeBultoFromSchema(r io.Reader, schema string) (Bulto, error) {
	t := NewBulto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeBulto(r Bulto, w io.Writer) error {
	var err error
	err = vm.WriteString(r.NumeroDeBulto, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Operador, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Cuando, w)
	if err != nil {
		return err
	}
	return err
}

func (r Bulto) Serialize(w io.Writer) error {
	return writeBulto(r, w)
}

func (r Bulto) Schema() string {
	return "{\"fields\":[{\"name\":\"numeroDeBulto\",\"type\":\"string\"},{\"default\":null,\"name\":\"operador\",\"type\":[\"null\",\"string\"]},{\"name\":\"cuando\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"Integracion.Esquemas.Contenedor.Referencias.Bulto\",\"type\":\"record\"}"
}

func (r Bulto) SchemaName() string {
	return "Integracion.Esquemas.Contenedor.Referencias.Bulto"
}

func (_ Bulto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Bulto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Bulto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Bulto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Bulto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Bulto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Bulto) SetString(v string)   { panic("Unsupported operation") }
func (_ Bulto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Bulto) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.NumeroDeBulto}

		return w

	case 1:
		r.Operador = NewUnionNullString()

		return r.Operador
	case 2:
		w := types.Long{Target: &r.Cuando}

		return w

	}
	panic("Unknown field index")
}

func (r *Bulto) SetDefault(i int) {
	switch i {
	case 1:
		r.Operador = nil
		return
	}
	panic("Unknown field index")
}

func (r *Bulto) NullField(i int) {
	switch i {
	case 1:
		r.Operador = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Bulto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Bulto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Bulto) HintSize(int)                     { panic("Unsupported operation") }
func (_ Bulto) Finalize()                        {}

func (_ Bulto) AvroCRC64Fingerprint() []byte {
	return []byte(BultoAvroCRC64Fingerprint)
}

func (r Bulto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["numeroDeBulto"], err = json.Marshal(r.NumeroDeBulto)
	if err != nil {
		return nil, err
	}
	output["operador"], err = json.Marshal(r.Operador)
	if err != nil {
		return nil, err
	}
	output["cuando"], err = json.Marshal(r.Cuando)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Bulto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["numeroDeBulto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeBulto); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroDeBulto")
	}
	val = func() json.RawMessage {
		if v, ok := fields["operador"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Operador); err != nil {
			return err
		}
	} else {
		r.Operador = NewUnionNullString()

		r.Operador = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["cuando"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cuando); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for cuando")
	}
	return nil
}
