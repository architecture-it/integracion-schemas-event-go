// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EnvioAforado.avsc
 */
package TrazasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EnvioAforado struct {
	Traza Traza `json:"traza"`

	NumeroDeEnvio string `json:"numeroDeEnvio"`

	PesoEnGramos float64 `json:"pesoEnGramos"`

	VolumenEnCm3 float64 `json:"volumenEnCm3"`

	AltoEnCm float64 `json:"altoEnCm"`

	LargoEnCm float64 `json:"largoEnCm"`

	AnchoEnCm float64 `json:"anchoEnCm"`

	FechaProcesamiento string `json:"fechaProcesamiento"`
}

const EnvioAforadoAvroCRC64Fingerprint = "ï¶‚\xc5\x1c\xaf^["

func NewEnvioAforado() EnvioAforado {
	r := EnvioAforado{}
	r.Traza = NewTraza()

	return r
}

func DeserializeEnvioAforado(r io.Reader) (EnvioAforado, error) {
	t := NewEnvioAforado()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEnvioAforadoFromSchema(r io.Reader, schema string) (EnvioAforado, error) {
	t := NewEnvioAforado()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEnvioAforado(r EnvioAforado, w io.Writer) error {
	var err error
	err = writeTraza(r.Traza, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NumeroDeEnvio, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.PesoEnGramos, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.VolumenEnCm3, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.AltoEnCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.LargoEnCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.AnchoEnCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.FechaProcesamiento, w)
	if err != nil {
		return err
	}
	return err
}

func (r EnvioAforado) Serialize(w io.Writer) error {
	return writeEnvioAforado(r, w)
}

func (r EnvioAforado) Schema() string {
	return "{\"fields\":[{\"name\":\"traza\",\"type\":{\"fields\":[{\"name\":\"codigoDeEnvio\",\"type\":\"string\"},{\"default\":null,\"name\":\"nombre\",\"type\":[\"null\",\"string\"]},{\"name\":\"cuando\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"codigoDeContratoInterno\",\"type\":\"string\"},{\"default\":null,\"name\":\"estadoDelEnvio\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"cicloDelEnvio\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"operador\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"estadoDeLaRendicion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"comentario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"sucursalAsociadaAlEvento\",\"type\":[\"null\",{\"fields\":[{\"name\":\"codigo\",\"type\":\"string\"},{\"default\":null,\"name\":\"nombre\",\"type\":[\"null\",\"string\"]},{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"DatosSucursal\",\"namespace\":\"Integracion.Esquemas.Referencias\",\"type\":\"record\"}]}],\"name\":\"Traza\",\"namespace\":\"Integracion.Esquemas\",\"type\":\"record\"}},{\"name\":\"numeroDeEnvio\",\"type\":\"string\"},{\"name\":\"pesoEnGramos\",\"type\":\"double\"},{\"name\":\"volumenEnCm3\",\"type\":\"double\"},{\"name\":\"altoEnCm\",\"type\":\"double\"},{\"name\":\"largoEnCm\",\"type\":\"double\"},{\"name\":\"anchoEnCm\",\"type\":\"double\"},{\"name\":\"fechaProcesamiento\",\"type\":\"string\"}],\"name\":\"Integracion.Esquemas.Trazas.EnvioAforado\",\"type\":\"record\"}"
}

func (r EnvioAforado) SchemaName() string {
	return "Integracion.Esquemas.Trazas.EnvioAforado"
}

func (_ EnvioAforado) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EnvioAforado) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EnvioAforado) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EnvioAforado) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EnvioAforado) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EnvioAforado) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EnvioAforado) SetString(v string)   { panic("Unsupported operation") }
func (_ EnvioAforado) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EnvioAforado) Get(i int) types.Field {
	switch i {
	case 0:
		r.Traza = NewTraza()

		w := types.Record{Target: &r.Traza}

		return w

	case 1:
		w := types.String{Target: &r.NumeroDeEnvio}

		return w

	case 2:
		w := types.Double{Target: &r.PesoEnGramos}

		return w

	case 3:
		w := types.Double{Target: &r.VolumenEnCm3}

		return w

	case 4:
		w := types.Double{Target: &r.AltoEnCm}

		return w

	case 5:
		w := types.Double{Target: &r.LargoEnCm}

		return w

	case 6:
		w := types.Double{Target: &r.AnchoEnCm}

		return w

	case 7:
		w := types.String{Target: &r.FechaProcesamiento}

		return w

	}
	panic("Unknown field index")
}

func (r *EnvioAforado) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *EnvioAforado) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ EnvioAforado) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EnvioAforado) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EnvioAforado) HintSize(int)                     { panic("Unsupported operation") }
func (_ EnvioAforado) Finalize()                        {}

func (_ EnvioAforado) AvroCRC64Fingerprint() []byte {
	return []byte(EnvioAforadoAvroCRC64Fingerprint)
}

func (r EnvioAforado) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["traza"], err = json.Marshal(r.Traza)
	if err != nil {
		return nil, err
	}
	output["numeroDeEnvio"], err = json.Marshal(r.NumeroDeEnvio)
	if err != nil {
		return nil, err
	}
	output["pesoEnGramos"], err = json.Marshal(r.PesoEnGramos)
	if err != nil {
		return nil, err
	}
	output["volumenEnCm3"], err = json.Marshal(r.VolumenEnCm3)
	if err != nil {
		return nil, err
	}
	output["altoEnCm"], err = json.Marshal(r.AltoEnCm)
	if err != nil {
		return nil, err
	}
	output["largoEnCm"], err = json.Marshal(r.LargoEnCm)
	if err != nil {
		return nil, err
	}
	output["anchoEnCm"], err = json.Marshal(r.AnchoEnCm)
	if err != nil {
		return nil, err
	}
	output["fechaProcesamiento"], err = json.Marshal(r.FechaProcesamiento)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EnvioAforado) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["traza"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Traza); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for traza")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numeroDeEnvio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeEnvio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroDeEnvio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["pesoEnGramos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoEnGramos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for pesoEnGramos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["volumenEnCm3"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VolumenEnCm3); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for volumenEnCm3")
	}
	val = func() json.RawMessage {
		if v, ok := fields["altoEnCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AltoEnCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for altoEnCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["largoEnCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LargoEnCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for largoEnCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["anchoEnCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AnchoEnCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for anchoEnCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaProcesamiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaProcesamiento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fechaProcesamiento")
	}
	return nil
}
