// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     OrdenDeEnvioCreada.avsc
 */
package TrazasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayDetalleDePaqueteTypeEnum int

const (
	UnionNullArrayDetalleDePaqueteTypeEnumArrayDetalleDePaquete UnionNullArrayDetalleDePaqueteTypeEnum = 1
)

type UnionNullArrayDetalleDePaquete struct {
	Null                  *types.NullVal
	ArrayDetalleDePaquete []DetalleDePaquete
	UnionType             UnionNullArrayDetalleDePaqueteTypeEnum
}

func writeUnionNullArrayDetalleDePaquete(r *UnionNullArrayDetalleDePaquete, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayDetalleDePaqueteTypeEnumArrayDetalleDePaquete:
		return writeArrayDetalleDePaquete(r.ArrayDetalleDePaquete, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayDetalleDePaquete")
}

func NewUnionNullArrayDetalleDePaquete() *UnionNullArrayDetalleDePaquete {
	return &UnionNullArrayDetalleDePaquete{}
}

func (r *UnionNullArrayDetalleDePaquete) Serialize(w io.Writer) error {
	return writeUnionNullArrayDetalleDePaquete(r, w)
}

func DeserializeUnionNullArrayDetalleDePaquete(r io.Reader) (*UnionNullArrayDetalleDePaquete, error) {
	t := NewUnionNullArrayDetalleDePaquete()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayDetalleDePaqueteFromSchema(r io.Reader, schema string) (*UnionNullArrayDetalleDePaquete, error) {
	t := NewUnionNullArrayDetalleDePaquete()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayDetalleDePaquete) Schema() string {
	return "[\"null\",{\"items\":{\"fields\":[{\"default\":null,\"name\":\"pesoEnKg\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"altoEnCm\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"anchoEnCm\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"largoEnCm\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"descripcion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"referenciasDelCliente\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]},{\"default\":null,\"name\":\"volumenEnCm3\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"valorDeclaradoSinImpuesto\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"valorDeclaradoConImpuesto\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"numeroDeBulto\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"valorDeclarado\",\"type\":[\"null\",\"float\"]}],\"name\":\"DetalleDePaquete\",\"type\":\"record\"},\"type\":\"array\"}]"
}

func (_ *UnionNullArrayDetalleDePaquete) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullArrayDetalleDePaquete) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullArrayDetalleDePaquete) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullArrayDetalleDePaquete) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullArrayDetalleDePaquete) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullArrayDetalleDePaquete) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullArrayDetalleDePaquete) SetLong(v int64) {

	r.UnionType = (UnionNullArrayDetalleDePaqueteTypeEnum)(v)
}

func (r *UnionNullArrayDetalleDePaquete) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayDetalleDePaquete = make([]DetalleDePaquete, 0)
		return &ArrayDetalleDePaqueteWrapper{Target: (&r.ArrayDetalleDePaquete)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayDetalleDePaquete) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullArrayDetalleDePaquete) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullArrayDetalleDePaquete) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullArrayDetalleDePaquete) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayDetalleDePaquete) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *UnionNullArrayDetalleDePaquete) Finalize()                {}

func (r *UnionNullArrayDetalleDePaquete) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayDetalleDePaqueteTypeEnumArrayDetalleDePaquete:
		return json.Marshal(map[string]interface{}{"array": r.ArrayDetalleDePaquete})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayDetalleDePaquete")
}

func (r *UnionNullArrayDetalleDePaquete) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayDetalleDePaquete)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayDetalleDePaquete")
}
