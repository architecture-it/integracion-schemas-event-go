// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Pregunta.avsc
 */
package TrazasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Pregunta struct {
	Fecha string `json:"fecha"`

	Comentario string `json:"comentario"`

	IdNovedad string `json:"idNovedad"`

	NumeroDeOrden string `json:"numeroDeOrden"`

	PosiblesRespuestas string `json:"posiblesRespuestas"`

	EsParaCliente *UnionNullBool `json:"esParaCliente"`
}

const PreguntaAvroCRC64Fingerprint = "otœ∂\x8c?\x9f\x9b"

func NewPregunta() Pregunta {
	r := Pregunta{}
	return r
}

func DeserializePregunta(r io.Reader) (Pregunta, error) {
	t := NewPregunta()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePreguntaFromSchema(r io.Reader, schema string) (Pregunta, error) {
	t := NewPregunta()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePregunta(r Pregunta, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Fecha, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Comentario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.IdNovedad, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NumeroDeOrden, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.PosiblesRespuestas, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.EsParaCliente, w)
	if err != nil {
		return err
	}
	return err
}

func (r Pregunta) Serialize(w io.Writer) error {
	return writePregunta(r, w)
}

func (r Pregunta) Schema() string {
	return "{\"fields\":[{\"name\":\"fecha\",\"type\":\"string\"},{\"name\":\"comentario\",\"type\":\"string\"},{\"name\":\"idNovedad\",\"type\":\"string\"},{\"name\":\"numeroDeOrden\",\"type\":\"string\"},{\"name\":\"posiblesRespuestas\",\"type\":\"string\"},{\"name\":\"esParaCliente\",\"type\":[\"null\",\"boolean\"]}],\"name\":\"Integracion.Esquemas.Preguntas.Pregunta\",\"type\":\"record\"}"
}

func (r Pregunta) SchemaName() string {
	return "Integracion.Esquemas.Preguntas.Pregunta"
}

func (_ Pregunta) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Pregunta) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Pregunta) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Pregunta) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Pregunta) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Pregunta) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Pregunta) SetString(v string)   { panic("Unsupported operation") }
func (_ Pregunta) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Pregunta) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Fecha}

		return w

	case 1:
		w := types.String{Target: &r.Comentario}

		return w

	case 2:
		w := types.String{Target: &r.IdNovedad}

		return w

	case 3:
		w := types.String{Target: &r.NumeroDeOrden}

		return w

	case 4:
		w := types.String{Target: &r.PosiblesRespuestas}

		return w

	case 5:
		r.EsParaCliente = NewUnionNullBool()

		return r.EsParaCliente
	}
	panic("Unknown field index")
}

func (r *Pregunta) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Pregunta) NullField(i int) {
	switch i {
	case 5:
		r.EsParaCliente = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Pregunta) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Pregunta) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Pregunta) HintSize(int)                     { panic("Unsupported operation") }
func (_ Pregunta) Finalize()                        {}

func (_ Pregunta) AvroCRC64Fingerprint() []byte {
	return []byte(PreguntaAvroCRC64Fingerprint)
}

func (r Pregunta) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["fecha"], err = json.Marshal(r.Fecha)
	if err != nil {
		return nil, err
	}
	output["comentario"], err = json.Marshal(r.Comentario)
	if err != nil {
		return nil, err
	}
	output["idNovedad"], err = json.Marshal(r.IdNovedad)
	if err != nil {
		return nil, err
	}
	output["numeroDeOrden"], err = json.Marshal(r.NumeroDeOrden)
	if err != nil {
		return nil, err
	}
	output["posiblesRespuestas"], err = json.Marshal(r.PosiblesRespuestas)
	if err != nil {
		return nil, err
	}
	output["esParaCliente"], err = json.Marshal(r.EsParaCliente)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Pregunta) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["fecha"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Fecha); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fecha")
	}
	val = func() json.RawMessage {
		if v, ok := fields["comentario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Comentario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for comentario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["idNovedad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdNovedad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for idNovedad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["numeroDeOrden"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroDeOrden); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numeroDeOrden")
	}
	val = func() json.RawMessage {
		if v, ok := fields["posiblesRespuestas"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PosiblesRespuestas); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for posiblesRespuestas")
	}
	val = func() json.RawMessage {
		if v, ok := fields["esParaCliente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EsParaCliente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for esParaCliente")
	}
	return nil
}
