// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ContenedorModificado.avsc
 */
package TrazasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayDatosSucursalTypeEnum int

const (
	UnionNullArrayDatosSucursalTypeEnumArrayDatosSucursal UnionNullArrayDatosSucursalTypeEnum = 1
)

type UnionNullArrayDatosSucursal struct {
	Null               *types.NullVal
	ArrayDatosSucursal []DatosSucursal
	UnionType          UnionNullArrayDatosSucursalTypeEnum
}

func writeUnionNullArrayDatosSucursal(r *UnionNullArrayDatosSucursal, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayDatosSucursalTypeEnumArrayDatosSucursal:
		return writeArrayDatosSucursal(r.ArrayDatosSucursal, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayDatosSucursal")
}

func NewUnionNullArrayDatosSucursal() *UnionNullArrayDatosSucursal {
	return &UnionNullArrayDatosSucursal{}
}

func (r *UnionNullArrayDatosSucursal) Serialize(w io.Writer) error {
	return writeUnionNullArrayDatosSucursal(r, w)
}

func DeserializeUnionNullArrayDatosSucursal(r io.Reader) (*UnionNullArrayDatosSucursal, error) {
	t := NewUnionNullArrayDatosSucursal()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayDatosSucursalFromSchema(r io.Reader, schema string) (*UnionNullArrayDatosSucursal, error) {
	t := NewUnionNullArrayDatosSucursal()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayDatosSucursal) Schema() string {
	return "[\"null\",{\"items\":{\"fields\":[{\"name\":\"codigo\",\"type\":\"string\"},{\"default\":null,\"name\":\"nombre\",\"type\":[\"null\",\"string\"]},{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"DatosSucursal\",\"namespace\":\"Integracion.Esquemas.Referencias\",\"type\":\"record\"},\"type\":\"array\"}]"
}

func (_ *UnionNullArrayDatosSucursal) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullArrayDatosSucursal) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullArrayDatosSucursal) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullArrayDatosSucursal) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullArrayDatosSucursal) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullArrayDatosSucursal) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullArrayDatosSucursal) SetLong(v int64) {

	r.UnionType = (UnionNullArrayDatosSucursalTypeEnum)(v)
}

func (r *UnionNullArrayDatosSucursal) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayDatosSucursal = make([]DatosSucursal, 0)
		return &ArrayDatosSucursalWrapper{Target: (&r.ArrayDatosSucursal)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayDatosSucursal) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullArrayDatosSucursal) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullArrayDatosSucursal) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullArrayDatosSucursal) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayDatosSucursal) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *UnionNullArrayDatosSucursal) Finalize()                {}

func (r *UnionNullArrayDatosSucursal) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayDatosSucursalTypeEnumArrayDatosSucursal:
		return json.Marshal(map[string]interface{}{"array": r.ArrayDatosSucursal})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayDatosSucursal")
}

func (r *UnionNullArrayDatosSucursal) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayDatosSucursal)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayDatosSucursal")
}
