// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ContenedorModificado.avsc
 */
package TrazasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayDocumentoTypeEnum int

const (
	UnionNullArrayDocumentoTypeEnumArrayDocumento UnionNullArrayDocumentoTypeEnum = 1
)

type UnionNullArrayDocumento struct {
	Null           *types.NullVal
	ArrayDocumento []Documento
	UnionType      UnionNullArrayDocumentoTypeEnum
}

func writeUnionNullArrayDocumento(r *UnionNullArrayDocumento, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayDocumentoTypeEnumArrayDocumento:
		return writeArrayDocumento(r.ArrayDocumento, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayDocumento")
}

func NewUnionNullArrayDocumento() *UnionNullArrayDocumento {
	return &UnionNullArrayDocumento{}
}

func (r *UnionNullArrayDocumento) Serialize(w io.Writer) error {
	return writeUnionNullArrayDocumento(r, w)
}

func DeserializeUnionNullArrayDocumento(r io.Reader) (*UnionNullArrayDocumento, error) {
	t := NewUnionNullArrayDocumento()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayDocumentoFromSchema(r io.Reader, schema string) (*UnionNullArrayDocumento, error) {
	t := NewUnionNullArrayDocumento()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayDocumento) Schema() string {
	return "[\"null\",{\"items\":{\"fields\":[{\"name\":\"numeroDeReferencia\",\"type\":\"string\"}],\"name\":\"Documento\",\"namespace\":\"Integracion.Esquemas.Contenedor.Referencias\",\"type\":\"record\"},\"type\":\"array\"}]"
}

func (_ *UnionNullArrayDocumento) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullArrayDocumento) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullArrayDocumento) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullArrayDocumento) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullArrayDocumento) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullArrayDocumento) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullArrayDocumento) SetLong(v int64) {

	r.UnionType = (UnionNullArrayDocumentoTypeEnum)(v)
}

func (r *UnionNullArrayDocumento) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayDocumento = make([]Documento, 0)
		return &ArrayDocumentoWrapper{Target: (&r.ArrayDocumento)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayDocumento) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionNullArrayDocumento) HintSize(i int)                   { panic("Unsupported operation") }
func (_ *UnionNullArrayDocumento) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionNullArrayDocumento) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullArrayDocumento) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionNullArrayDocumento) Finalize()                        {}

func (r *UnionNullArrayDocumento) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayDocumentoTypeEnumArrayDocumento:
		return json.Marshal(map[string]interface{}{"array": r.ArrayDocumento})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayDocumento")
}

func (r *UnionNullArrayDocumento) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayDocumento)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayDocumento")
}
