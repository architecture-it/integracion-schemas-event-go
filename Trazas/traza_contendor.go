// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TrazaContendor.avsc
 */
package TrazasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TrazaContendor struct {
	Numero string `json:"numero"`

	Tipo string `json:"tipo"`

	Ciclo string `json:"ciclo"`

	Estado string `json:"estado"`

	Cuando int64 `json:"cuando"`

	Operador *UnionNullString `json:"operador"`

	Comentario *UnionNullString `json:"comentario"`

	SucursalAsociadaAlEvento *UnionNullDatosSucursal `json:"sucursalAsociadaAlEvento"`
}

const TrazaContendorAvroCRC64Fingerprint = "\xb8t\x88Qæ‰¢o"

func NewTrazaContendor() TrazaContendor {
	r := TrazaContendor{}
	r.Operador = nil
	r.Comentario = nil
	r.SucursalAsociadaAlEvento = nil
	return r
}

func DeserializeTrazaContendor(r io.Reader) (TrazaContendor, error) {
	t := NewTrazaContendor()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTrazaContendorFromSchema(r io.Reader, schema string) (TrazaContendor, error) {
	t := NewTrazaContendor()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTrazaContendor(r TrazaContendor, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Numero, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Tipo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Ciclo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Estado, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Cuando, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Operador, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Comentario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDatosSucursal(r.SucursalAsociadaAlEvento, w)
	if err != nil {
		return err
	}
	return err
}

func (r TrazaContendor) Serialize(w io.Writer) error {
	return writeTrazaContendor(r, w)
}

func (r TrazaContendor) Schema() string {
	return "{\"fields\":[{\"name\":\"numero\",\"type\":\"string\"},{\"name\":\"tipo\",\"type\":\"string\"},{\"name\":\"ciclo\",\"type\":\"string\"},{\"name\":\"estado\",\"type\":\"string\"},{\"name\":\"cuando\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"default\":null,\"name\":\"operador\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"comentario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"sucursalAsociadaAlEvento\",\"type\":[\"null\",{\"fields\":[{\"name\":\"codigo\",\"type\":\"string\"},{\"default\":null,\"name\":\"nombre\",\"type\":[\"null\",\"string\"]},{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"DatosSucursal\",\"namespace\":\"Integracion.Esquemas.Referencias\",\"type\":\"record\"}]}],\"name\":\"Integracion.Esquemas.Contenedor.Referencias.TrazaContendor\",\"type\":\"record\"}"
}

func (r TrazaContendor) SchemaName() string {
	return "Integracion.Esquemas.Contenedor.Referencias.TrazaContendor"
}

func (_ TrazaContendor) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TrazaContendor) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TrazaContendor) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TrazaContendor) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TrazaContendor) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TrazaContendor) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TrazaContendor) SetString(v string)   { panic("Unsupported operation") }
func (_ TrazaContendor) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TrazaContendor) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Numero}

		return w

	case 1:
		w := types.String{Target: &r.Tipo}

		return w

	case 2:
		w := types.String{Target: &r.Ciclo}

		return w

	case 3:
		w := types.String{Target: &r.Estado}

		return w

	case 4:
		w := types.Long{Target: &r.Cuando}

		return w

	case 5:
		r.Operador = NewUnionNullString()

		return r.Operador
	case 6:
		r.Comentario = NewUnionNullString()

		return r.Comentario
	case 7:
		r.SucursalAsociadaAlEvento = NewUnionNullDatosSucursal()

		return r.SucursalAsociadaAlEvento
	}
	panic("Unknown field index")
}

func (r *TrazaContendor) SetDefault(i int) {
	switch i {
	case 5:
		r.Operador = nil
		return
	case 6:
		r.Comentario = nil
		return
	case 7:
		r.SucursalAsociadaAlEvento = nil
		return
	}
	panic("Unknown field index")
}

func (r *TrazaContendor) NullField(i int) {
	switch i {
	case 5:
		r.Operador = nil
		return
	case 6:
		r.Comentario = nil
		return
	case 7:
		r.SucursalAsociadaAlEvento = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ TrazaContendor) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TrazaContendor) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TrazaContendor) HintSize(int)                     { panic("Unsupported operation") }
func (_ TrazaContendor) Finalize()                        {}

func (_ TrazaContendor) AvroCRC64Fingerprint() []byte {
	return []byte(TrazaContendorAvroCRC64Fingerprint)
}

func (r TrazaContendor) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["numero"], err = json.Marshal(r.Numero)
	if err != nil {
		return nil, err
	}
	output["tipo"], err = json.Marshal(r.Tipo)
	if err != nil {
		return nil, err
	}
	output["ciclo"], err = json.Marshal(r.Ciclo)
	if err != nil {
		return nil, err
	}
	output["estado"], err = json.Marshal(r.Estado)
	if err != nil {
		return nil, err
	}
	output["cuando"], err = json.Marshal(r.Cuando)
	if err != nil {
		return nil, err
	}
	output["operador"], err = json.Marshal(r.Operador)
	if err != nil {
		return nil, err
	}
	output["comentario"], err = json.Marshal(r.Comentario)
	if err != nil {
		return nil, err
	}
	output["sucursalAsociadaAlEvento"], err = json.Marshal(r.SucursalAsociadaAlEvento)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TrazaContendor) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["numero"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Numero); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for numero")
	}
	val = func() json.RawMessage {
		if v, ok := fields["tipo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Tipo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for tipo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ciclo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ciclo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ciclo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["estado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for estado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["cuando"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cuando); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for cuando")
	}
	val = func() json.RawMessage {
		if v, ok := fields["operador"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Operador); err != nil {
			return err
		}
	} else {
		r.Operador = NewUnionNullString()

		r.Operador = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["comentario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Comentario); err != nil {
			return err
		}
	} else {
		r.Comentario = NewUnionNullString()

		r.Comentario = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["sucursalAsociadaAlEvento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SucursalAsociadaAlEvento); err != nil {
			return err
		}
	} else {
		r.SucursalAsociadaAlEvento = NewUnionNullDatosSucursal()

		r.SucursalAsociadaAlEvento = nil
	}
	return nil
}
