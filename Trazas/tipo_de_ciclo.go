// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TipoDeCiclo.avsc
 */
package TrazasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TipoDeCiclo int32

const (
	TipoDeCicloNothing      TipoDeCiclo = 0
	TipoDeCicloDistribution TipoDeCiclo = 1
	TipoDeCicloResend       TipoDeCiclo = 2
	TipoDeCicloDrop         TipoDeCiclo = 3
	TipoDeCicloCustody      TipoDeCiclo = 4
)

func (e TipoDeCiclo) String() string {
	switch e {
	case TipoDeCicloNothing:
		return "Nothing"
	case TipoDeCicloDistribution:
		return "Distribution"
	case TipoDeCicloResend:
		return "Resend"
	case TipoDeCicloDrop:
		return "Drop"
	case TipoDeCicloCustody:
		return "Custody"
	}
	return "unknown"
}

func writeTipoDeCiclo(r TipoDeCiclo, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewTipoDeCicloValue(raw string) (r TipoDeCiclo, err error) {
	switch raw {
	case "Nothing":
		return TipoDeCicloNothing, nil
	case "Distribution":
		return TipoDeCicloDistribution, nil
	case "Resend":
		return TipoDeCicloResend, nil
	case "Drop":
		return TipoDeCicloDrop, nil
	case "Custody":
		return TipoDeCicloCustody, nil
	}

	return -1, fmt.Errorf("invalid value for TipoDeCiclo: '%s'", raw)

}

func (b TipoDeCiclo) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *TipoDeCiclo) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewTipoDeCicloValue(stringVal)
	*b = val
	return err
}

type TipoDeCicloWrapper struct {
	Target *TipoDeCiclo
}

func (b TipoDeCicloWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b TipoDeCicloWrapper) SetInt(v int32) {
	*(b.Target) = TipoDeCiclo(v)
}

func (b TipoDeCicloWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b TipoDeCicloWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b TipoDeCicloWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b TipoDeCicloWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b TipoDeCicloWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b TipoDeCicloWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b TipoDeCicloWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b TipoDeCicloWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b TipoDeCicloWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b TipoDeCicloWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b TipoDeCicloWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b TipoDeCicloWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b TipoDeCicloWrapper) Finalize() {}
