// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Visita.avsc
 */
package TrazasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type GeoReferencia struct {
	Latitud *UnionNullDouble `json:"latitud"`

	Longitud *UnionNullDouble `json:"longitud"`

	Altura *UnionNullDouble `json:"altura"`
}

const GeoReferenciaAvroCRC64Fingerprint = "\x05\x05\xec\\ÜŠrU"

func NewGeoReferencia() GeoReferencia {
	r := GeoReferencia{}
	r.Latitud = nil
	r.Longitud = nil
	r.Altura = nil
	return r
}

func DeserializeGeoReferencia(r io.Reader) (GeoReferencia, error) {
	t := NewGeoReferencia()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeGeoReferenciaFromSchema(r io.Reader, schema string) (GeoReferencia, error) {
	t := NewGeoReferencia()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeGeoReferencia(r GeoReferencia, w io.Writer) error {
	var err error
	err = writeUnionNullDouble(r.Latitud, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.Longitud, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.Altura, w)
	if err != nil {
		return err
	}
	return err
}

func (r GeoReferencia) Serialize(w io.Writer) error {
	return writeGeoReferencia(r, w)
}

func (r GeoReferencia) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"latitud\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"longitud\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"altura\",\"type\":[\"null\",\"double\"]}],\"name\":\"Integracion.Esquemas.Referencias.GeoReferencia\",\"type\":\"record\"}"
}

func (r GeoReferencia) SchemaName() string {
	return "Integracion.Esquemas.Referencias.GeoReferencia"
}

func (_ GeoReferencia) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ GeoReferencia) SetInt(v int32)       { panic("Unsupported operation") }
func (_ GeoReferencia) SetLong(v int64)      { panic("Unsupported operation") }
func (_ GeoReferencia) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ GeoReferencia) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ GeoReferencia) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ GeoReferencia) SetString(v string)   { panic("Unsupported operation") }
func (_ GeoReferencia) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *GeoReferencia) Get(i int) types.Field {
	switch i {
	case 0:
		r.Latitud = NewUnionNullDouble()

		return r.Latitud
	case 1:
		r.Longitud = NewUnionNullDouble()

		return r.Longitud
	case 2:
		r.Altura = NewUnionNullDouble()

		return r.Altura
	}
	panic("Unknown field index")
}

func (r *GeoReferencia) SetDefault(i int) {
	switch i {
	case 0:
		r.Latitud = nil
		return
	case 1:
		r.Longitud = nil
		return
	case 2:
		r.Altura = nil
		return
	}
	panic("Unknown field index")
}

func (r *GeoReferencia) NullField(i int) {
	switch i {
	case 0:
		r.Latitud = nil
		return
	case 1:
		r.Longitud = nil
		return
	case 2:
		r.Altura = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ GeoReferencia) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ GeoReferencia) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ GeoReferencia) HintSize(int)                     { panic("Unsupported operation") }
func (_ GeoReferencia) Finalize()                        {}

func (_ GeoReferencia) AvroCRC64Fingerprint() []byte {
	return []byte(GeoReferenciaAvroCRC64Fingerprint)
}

func (r GeoReferencia) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["latitud"], err = json.Marshal(r.Latitud)
	if err != nil {
		return nil, err
	}
	output["longitud"], err = json.Marshal(r.Longitud)
	if err != nil {
		return nil, err
	}
	output["altura"], err = json.Marshal(r.Altura)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *GeoReferencia) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["latitud"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Latitud); err != nil {
			return err
		}
	} else {
		r.Latitud = NewUnionNullDouble()

		r.Latitud = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["longitud"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Longitud); err != nil {
			return err
		}
	} else {
		r.Longitud = NewUnionNullDouble()

		r.Longitud = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["altura"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Altura); err != nil {
			return err
		}
	} else {
		r.Altura = NewUnionNullDouble()

		r.Altura = nil
	}
	return nil
}
