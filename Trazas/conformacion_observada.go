// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ConformacionObservada.avsc
 */
package TrazasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ConformacionObservada struct {
	Traza Traza `json:"traza"`
}

const ConformacionObservadaAvroCRC64Fingerprint = "f\xfc:\x86\x9c\xfa`2"

func NewConformacionObservada() ConformacionObservada {
	r := ConformacionObservada{}
	r.Traza = NewTraza()

	return r
}

func DeserializeConformacionObservada(r io.Reader) (ConformacionObservada, error) {
	t := NewConformacionObservada()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeConformacionObservadaFromSchema(r io.Reader, schema string) (ConformacionObservada, error) {
	t := NewConformacionObservada()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeConformacionObservada(r ConformacionObservada, w io.Writer) error {
	var err error
	err = writeTraza(r.Traza, w)
	if err != nil {
		return err
	}
	return err
}

func (r ConformacionObservada) Serialize(w io.Writer) error {
	return writeConformacionObservada(r, w)
}

func (r ConformacionObservada) Schema() string {
	return "{\"fields\":[{\"name\":\"traza\",\"type\":{\"fields\":[{\"name\":\"codigoDeEnvio\",\"type\":\"string\"},{\"default\":null,\"name\":\"nombre\",\"type\":[\"null\",\"string\"]},{\"name\":\"cuando\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"codigoDeContratoInterno\",\"type\":\"string\"},{\"default\":null,\"name\":\"codigoDeContrato\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"estadoDelEnvio\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"cicloDelEnvio\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"operador\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"estadoDeLaRendicion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"comentario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"sucursalAsociadaAlEvento\",\"type\":[\"null\",{\"fields\":[{\"name\":\"codigo\",\"type\":\"string\"},{\"default\":null,\"name\":\"nombre\",\"type\":[\"null\",\"string\"]},{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"DatosSucursal\",\"namespace\":\"Integracion.Esquemas.Referencias\",\"type\":\"record\"}]}],\"name\":\"Traza\",\"namespace\":\"Integracion.Esquemas\",\"type\":\"record\"}}],\"name\":\"Integracion.Esquemas.Trazas.ConformacionObservada\",\"type\":\"record\"}"
}

func (r ConformacionObservada) SchemaName() string {
	return "Integracion.Esquemas.Trazas.ConformacionObservada"
}

func (_ ConformacionObservada) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ConformacionObservada) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ConformacionObservada) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ConformacionObservada) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ConformacionObservada) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ConformacionObservada) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ConformacionObservada) SetString(v string)   { panic("Unsupported operation") }
func (_ ConformacionObservada) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ConformacionObservada) Get(i int) types.Field {
	switch i {
	case 0:
		r.Traza = NewTraza()

		w := types.Record{Target: &r.Traza}

		return w

	}
	panic("Unknown field index")
}

func (r *ConformacionObservada) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ConformacionObservada) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ ConformacionObservada) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ConformacionObservada) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ConformacionObservada) HintSize(int)                     { panic("Unsupported operation") }
func (_ ConformacionObservada) Finalize()                        {}

func (_ ConformacionObservada) AvroCRC64Fingerprint() []byte {
	return []byte(ConformacionObservadaAvroCRC64Fingerprint)
}

func (r ConformacionObservada) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["traza"], err = json.Marshal(r.Traza)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ConformacionObservada) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["traza"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Traza); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for traza")
	}
	return nil
}
