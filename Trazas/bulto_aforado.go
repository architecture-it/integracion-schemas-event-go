// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     BultoAforado.avsc
 */
package TrazasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type BultoAforado struct {
	Traza TrazaDeBulto `json:"traza"`

	PesoEnGramos float64 `json:"pesoEnGramos"`

	VolumenEnCm3 float64 `json:"volumenEnCm3"`

	AltoEnCm float64 `json:"altoEnCm"`

	LargoEnCm float64 `json:"largoEnCm"`

	AnchoEnCm float64 `json:"anchoEnCm"`

	FechaProcesamiento string `json:"fechaProcesamiento"`

	TipoDeAforo TipoDeAforo `json:"tipoDeAforo"`

	IdentificadorDeMaquina *UnionNullString `json:"identificadorDeMaquina"`
}

const BultoAforadoAvroCRC64Fingerprint = "_\x93\xb9\xcb\tk\xd2\x04"

func NewBultoAforado() BultoAforado {
	r := BultoAforado{}
	r.Traza = NewTrazaDeBulto()

	r.IdentificadorDeMaquina = nil
	return r
}

func DeserializeBultoAforado(r io.Reader) (BultoAforado, error) {
	t := NewBultoAforado()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeBultoAforadoFromSchema(r io.Reader, schema string) (BultoAforado, error) {
	t := NewBultoAforado()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeBultoAforado(r BultoAforado, w io.Writer) error {
	var err error
	err = writeTrazaDeBulto(r.Traza, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.PesoEnGramos, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.VolumenEnCm3, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.AltoEnCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.LargoEnCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.AnchoEnCm, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.FechaProcesamiento, w)
	if err != nil {
		return err
	}
	err = writeTipoDeAforo(r.TipoDeAforo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.IdentificadorDeMaquina, w)
	if err != nil {
		return err
	}
	return err
}

func (r BultoAforado) Serialize(w io.Writer) error {
	return writeBultoAforado(r, w)
}

func (r BultoAforado) Schema() string {
	return "{\"fields\":[{\"name\":\"traza\",\"type\":{\"fields\":[{\"name\":\"codigoDeEnvio\",\"type\":\"string\"},{\"name\":\"numeroDeBulto\",\"type\":\"string\"},{\"default\":null,\"name\":\"nombre\",\"type\":[\"null\",\"string\"]},{\"name\":\"cuando\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"codigoDeContratoInterno\",\"type\":\"string\"},{\"default\":null,\"name\":\"codigoDeContrato\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"estadoDelEnvio\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"cicloDelEnvio\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"operador\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"estadoDeLaRendicion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"comentario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"sucursalAsociadaAlEvento\",\"type\":[\"null\",{\"fields\":[{\"name\":\"codigo\",\"type\":\"string\"},{\"default\":null,\"name\":\"nombre\",\"type\":[\"null\",\"string\"]},{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"DatosSucursal\",\"namespace\":\"Integracion.Esquemas.Referencias\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"tipoDeBulto\",\"type\":[\"null\",{\"name\":\"TipoDeBulto\",\"symbols\":[\"Paquete\",\"Contenedor\"],\"type\":\"enum\"}]}],\"name\":\"TrazaDeBulto\",\"namespace\":\"Integracion.Esquemas.Bulto.Referencias\",\"type\":\"record\"}},{\"name\":\"pesoEnGramos\",\"type\":\"double\"},{\"name\":\"volumenEnCm3\",\"type\":\"double\"},{\"name\":\"altoEnCm\",\"type\":\"double\"},{\"name\":\"largoEnCm\",\"type\":\"double\"},{\"name\":\"anchoEnCm\",\"type\":\"double\"},{\"name\":\"fechaProcesamiento\",\"type\":\"string\"},{\"name\":\"tipoDeAforo\",\"type\":{\"name\":\"TipoDeAforo\",\"namespace\":\"Integracion.Esquemas.Bulto.Referencias\",\"symbols\":[\"AforoAutomatico\",\"AforoManual\"],\"type\":\"enum\"}},{\"default\":null,\"name\":\"identificadorDeMaquina\",\"type\":[\"null\",\"string\"]}],\"name\":\"Integracion.Esquemas.Bulto.Trazas.BultoAforado\",\"type\":\"record\"}"
}

func (r BultoAforado) SchemaName() string {
	return "Integracion.Esquemas.Bulto.Trazas.BultoAforado"
}

func (_ BultoAforado) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ BultoAforado) SetInt(v int32)       { panic("Unsupported operation") }
func (_ BultoAforado) SetLong(v int64)      { panic("Unsupported operation") }
func (_ BultoAforado) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ BultoAforado) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ BultoAforado) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ BultoAforado) SetString(v string)   { panic("Unsupported operation") }
func (_ BultoAforado) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *BultoAforado) Get(i int) types.Field {
	switch i {
	case 0:
		r.Traza = NewTrazaDeBulto()

		w := types.Record{Target: &r.Traza}

		return w

	case 1:
		w := types.Double{Target: &r.PesoEnGramos}

		return w

	case 2:
		w := types.Double{Target: &r.VolumenEnCm3}

		return w

	case 3:
		w := types.Double{Target: &r.AltoEnCm}

		return w

	case 4:
		w := types.Double{Target: &r.LargoEnCm}

		return w

	case 5:
		w := types.Double{Target: &r.AnchoEnCm}

		return w

	case 6:
		w := types.String{Target: &r.FechaProcesamiento}

		return w

	case 7:
		w := TipoDeAforoWrapper{Target: &r.TipoDeAforo}

		return w

	case 8:
		r.IdentificadorDeMaquina = NewUnionNullString()

		return r.IdentificadorDeMaquina
	}
	panic("Unknown field index")
}

func (r *BultoAforado) SetDefault(i int) {
	switch i {
	case 8:
		r.IdentificadorDeMaquina = nil
		return
	}
	panic("Unknown field index")
}

func (r *BultoAforado) NullField(i int) {
	switch i {
	case 8:
		r.IdentificadorDeMaquina = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ BultoAforado) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ BultoAforado) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ BultoAforado) HintSize(int)                     { panic("Unsupported operation") }
func (_ BultoAforado) Finalize()                        {}

func (_ BultoAforado) AvroCRC64Fingerprint() []byte {
	return []byte(BultoAforadoAvroCRC64Fingerprint)
}

func (r BultoAforado) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["traza"], err = json.Marshal(r.Traza)
	if err != nil {
		return nil, err
	}
	output["pesoEnGramos"], err = json.Marshal(r.PesoEnGramos)
	if err != nil {
		return nil, err
	}
	output["volumenEnCm3"], err = json.Marshal(r.VolumenEnCm3)
	if err != nil {
		return nil, err
	}
	output["altoEnCm"], err = json.Marshal(r.AltoEnCm)
	if err != nil {
		return nil, err
	}
	output["largoEnCm"], err = json.Marshal(r.LargoEnCm)
	if err != nil {
		return nil, err
	}
	output["anchoEnCm"], err = json.Marshal(r.AnchoEnCm)
	if err != nil {
		return nil, err
	}
	output["fechaProcesamiento"], err = json.Marshal(r.FechaProcesamiento)
	if err != nil {
		return nil, err
	}
	output["tipoDeAforo"], err = json.Marshal(r.TipoDeAforo)
	if err != nil {
		return nil, err
	}
	output["identificadorDeMaquina"], err = json.Marshal(r.IdentificadorDeMaquina)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *BultoAforado) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["traza"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Traza); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for traza")
	}
	val = func() json.RawMessage {
		if v, ok := fields["pesoEnGramos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoEnGramos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for pesoEnGramos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["volumenEnCm3"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VolumenEnCm3); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for volumenEnCm3")
	}
	val = func() json.RawMessage {
		if v, ok := fields["altoEnCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AltoEnCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for altoEnCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["largoEnCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LargoEnCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for largoEnCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["anchoEnCm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AnchoEnCm); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for anchoEnCm")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fechaProcesamiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaProcesamiento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fechaProcesamiento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["tipoDeAforo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoDeAforo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for tipoDeAforo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["identificadorDeMaquina"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdentificadorDeMaquina); err != nil {
			return err
		}
	} else {
		r.IdentificadorDeMaquina = NewUnionNullString()

		r.IdentificadorDeMaquina = nil
	}
	return nil
}
