// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     GestionCobranzaV2.avsc
 */
package TrazasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type FormaDeCobroV2 int32

const (
	FormaDeCobroV2ChequeDeTerceros                    FormaDeCobroV2 = 0
	FormaDeCobroV2BoletaDeDepositoEnCtaCliente        FormaDeCobroV2 = 1
	FormaDeCobroV2AjusteDeSaldo                       FormaDeCobroV2 = 2
	FormaDeCobroV2RetencionesImpositivas              FormaDeCobroV2 = 3
	FormaDeCobroV2ChequeNominativo                    FormaDeCobroV2 = 4
	FormaDeCobroV2DescuentoFinanciero                 FormaDeCobroV2 = 5
	FormaDeCobroV2NotaCredito                         FormaDeCobroV2 = 6
	FormaDeCobroV2Efectivo                            FormaDeCobroV2 = 7
	FormaDeCobroV2PlanillaRendicionExcCasa            FormaDeCobroV2 = 8
	FormaDeCobroV2AjusteImporteAnterior               FormaDeCobroV2 = 9
	FormaDeCobroV2NotaCreditoPami                     FormaDeCobroV2 = 10
	FormaDeCobroV2NotaCreditoAConfirmarDevolucion     FormaDeCobroV2 = 11
	FormaDeCobroV2EnviaDiferenciaEnProximaLiquidacion FormaDeCobroV2 = 12
	FormaDeCobroV2PagoEfectivoCobrado                 FormaDeCobroV2 = 13
	FormaDeCobroV2PagoEfectivoChequePropio            FormaDeCobroV2 = 14
	FormaDeCobroV2ComprobanteTransferenciaACliente    FormaDeCobroV2 = 15
	FormaDeCobroV2ImpuestoAlCheque                    FormaDeCobroV2 = 16
	FormaDeCobroV2SaldoAFavor                         FormaDeCobroV2 = 17
	FormaDeCobroV2AgregaPagoOtraFactura               FormaDeCobroV2 = 18
	FormaDeCobroV2EnviadoEnLiquidacionAnterior        FormaDeCobroV2 = 19
	FormaDeCobroV2CartaCompromisoExcCasa              FormaDeCobroV2 = 20
	FormaDeCobroV2VisaDebitoCredito                   FormaDeCobroV2 = 21
	FormaDeCobroV2AutorizacionAdjunta                 FormaDeCobroV2 = 22
	FormaDeCobroV2ReciboOficialAndreani               FormaDeCobroV2 = 23
	FormaDeCobroV2DescuentoNotaAdjunta                FormaDeCobroV2 = 24
	FormaDeCobroV2PagoFacilComprobante                FormaDeCobroV2 = 25
	FormaDeCobroV2ChequeElectronico                   FormaDeCobroV2 = 26
	FormaDeCobroV2MercadoPago                         FormaDeCobroV2 = 27
	FormaDeCobroV2AjustePorPendiente                  FormaDeCobroV2 = 28
	FormaDeCobroV2Cbu                                 FormaDeCobroV2 = 29
	FormaDeCobroV2CajaUnificadaExcCasa                FormaDeCobroV2 = 30
	FormaDeCobroV2NotaCreditoFarma                    FormaDeCobroV2 = 31
)

func (e FormaDeCobroV2) String() string {
	switch e {
	case FormaDeCobroV2ChequeDeTerceros:
		return "chequeDeTerceros"
	case FormaDeCobroV2BoletaDeDepositoEnCtaCliente:
		return "boletaDeDepositoEnCtaCliente"
	case FormaDeCobroV2AjusteDeSaldo:
		return "ajusteDeSaldo"
	case FormaDeCobroV2RetencionesImpositivas:
		return "retencionesImpositivas"
	case FormaDeCobroV2ChequeNominativo:
		return "chequeNominativo"
	case FormaDeCobroV2DescuentoFinanciero:
		return "descuentoFinanciero"
	case FormaDeCobroV2NotaCredito:
		return "notaCredito"
	case FormaDeCobroV2Efectivo:
		return "efectivo"
	case FormaDeCobroV2PlanillaRendicionExcCasa:
		return "planillaRendicionExcCasa"
	case FormaDeCobroV2AjusteImporteAnterior:
		return "ajusteImporteAnterior"
	case FormaDeCobroV2NotaCreditoPami:
		return "notaCreditoPami"
	case FormaDeCobroV2NotaCreditoAConfirmarDevolucion:
		return "notaCreditoAConfirmarDevolucion"
	case FormaDeCobroV2EnviaDiferenciaEnProximaLiquidacion:
		return "enviaDiferenciaEnProximaLiquidacion"
	case FormaDeCobroV2PagoEfectivoCobrado:
		return "pagoEfectivoCobrado"
	case FormaDeCobroV2PagoEfectivoChequePropio:
		return "pagoEfectivoChequePropio"
	case FormaDeCobroV2ComprobanteTransferenciaACliente:
		return "comprobanteTransferenciaACliente"
	case FormaDeCobroV2ImpuestoAlCheque:
		return "impuestoAlCheque"
	case FormaDeCobroV2SaldoAFavor:
		return "saldoAFavor"
	case FormaDeCobroV2AgregaPagoOtraFactura:
		return "agregaPagoOtraFactura"
	case FormaDeCobroV2EnviadoEnLiquidacionAnterior:
		return "enviadoEnLiquidacionAnterior"
	case FormaDeCobroV2CartaCompromisoExcCasa:
		return "cartaCompromisoExcCasa"
	case FormaDeCobroV2VisaDebitoCredito:
		return "visaDebitoCredito"
	case FormaDeCobroV2AutorizacionAdjunta:
		return "autorizacionAdjunta"
	case FormaDeCobroV2ReciboOficialAndreani:
		return "reciboOficialAndreani"
	case FormaDeCobroV2DescuentoNotaAdjunta:
		return "descuentoNotaAdjunta"
	case FormaDeCobroV2PagoFacilComprobante:
		return "pagoFacilComprobante"
	case FormaDeCobroV2ChequeElectronico:
		return "chequeElectronico"
	case FormaDeCobroV2MercadoPago:
		return "mercadoPago"
	case FormaDeCobroV2AjustePorPendiente:
		return "ajustePorPendiente"
	case FormaDeCobroV2Cbu:
		return "cbu"
	case FormaDeCobroV2CajaUnificadaExcCasa:
		return "cajaUnificadaExcCasa"
	case FormaDeCobroV2NotaCreditoFarma:
		return "notaCreditoFarma"
	}
	return "unknown"
}

func writeFormaDeCobroV2(r FormaDeCobroV2, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewFormaDeCobroV2Value(raw string) (r FormaDeCobroV2, err error) {
	switch raw {
	case "chequeDeTerceros":
		return FormaDeCobroV2ChequeDeTerceros, nil
	case "boletaDeDepositoEnCtaCliente":
		return FormaDeCobroV2BoletaDeDepositoEnCtaCliente, nil
	case "ajusteDeSaldo":
		return FormaDeCobroV2AjusteDeSaldo, nil
	case "retencionesImpositivas":
		return FormaDeCobroV2RetencionesImpositivas, nil
	case "chequeNominativo":
		return FormaDeCobroV2ChequeNominativo, nil
	case "descuentoFinanciero":
		return FormaDeCobroV2DescuentoFinanciero, nil
	case "notaCredito":
		return FormaDeCobroV2NotaCredito, nil
	case "efectivo":
		return FormaDeCobroV2Efectivo, nil
	case "planillaRendicionExcCasa":
		return FormaDeCobroV2PlanillaRendicionExcCasa, nil
	case "ajusteImporteAnterior":
		return FormaDeCobroV2AjusteImporteAnterior, nil
	case "notaCreditoPami":
		return FormaDeCobroV2NotaCreditoPami, nil
	case "notaCreditoAConfirmarDevolucion":
		return FormaDeCobroV2NotaCreditoAConfirmarDevolucion, nil
	case "enviaDiferenciaEnProximaLiquidacion":
		return FormaDeCobroV2EnviaDiferenciaEnProximaLiquidacion, nil
	case "pagoEfectivoCobrado":
		return FormaDeCobroV2PagoEfectivoCobrado, nil
	case "pagoEfectivoChequePropio":
		return FormaDeCobroV2PagoEfectivoChequePropio, nil
	case "comprobanteTransferenciaACliente":
		return FormaDeCobroV2ComprobanteTransferenciaACliente, nil
	case "impuestoAlCheque":
		return FormaDeCobroV2ImpuestoAlCheque, nil
	case "saldoAFavor":
		return FormaDeCobroV2SaldoAFavor, nil
	case "agregaPagoOtraFactura":
		return FormaDeCobroV2AgregaPagoOtraFactura, nil
	case "enviadoEnLiquidacionAnterior":
		return FormaDeCobroV2EnviadoEnLiquidacionAnterior, nil
	case "cartaCompromisoExcCasa":
		return FormaDeCobroV2CartaCompromisoExcCasa, nil
	case "visaDebitoCredito":
		return FormaDeCobroV2VisaDebitoCredito, nil
	case "autorizacionAdjunta":
		return FormaDeCobroV2AutorizacionAdjunta, nil
	case "reciboOficialAndreani":
		return FormaDeCobroV2ReciboOficialAndreani, nil
	case "descuentoNotaAdjunta":
		return FormaDeCobroV2DescuentoNotaAdjunta, nil
	case "pagoFacilComprobante":
		return FormaDeCobroV2PagoFacilComprobante, nil
	case "chequeElectronico":
		return FormaDeCobroV2ChequeElectronico, nil
	case "mercadoPago":
		return FormaDeCobroV2MercadoPago, nil
	case "ajustePorPendiente":
		return FormaDeCobroV2AjustePorPendiente, nil
	case "cbu":
		return FormaDeCobroV2Cbu, nil
	case "cajaUnificadaExcCasa":
		return FormaDeCobroV2CajaUnificadaExcCasa, nil
	case "notaCreditoFarma":
		return FormaDeCobroV2NotaCreditoFarma, nil
	}

	return -1, fmt.Errorf("invalid value for FormaDeCobroV2: '%s'", raw)

}

func (b FormaDeCobroV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *FormaDeCobroV2) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewFormaDeCobroV2Value(stringVal)
	*b = val
	return err
}

type FormaDeCobroV2Wrapper struct {
	Target *FormaDeCobroV2
}

func (b FormaDeCobroV2Wrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b FormaDeCobroV2Wrapper) SetInt(v int32) {
	*(b.Target) = FormaDeCobroV2(v)
}

func (b FormaDeCobroV2Wrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b FormaDeCobroV2Wrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b FormaDeCobroV2Wrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b FormaDeCobroV2Wrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b FormaDeCobroV2Wrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b FormaDeCobroV2Wrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b FormaDeCobroV2Wrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b FormaDeCobroV2Wrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b FormaDeCobroV2Wrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b FormaDeCobroV2Wrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b FormaDeCobroV2Wrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b FormaDeCobroV2Wrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b FormaDeCobroV2Wrapper) Finalize() {}
