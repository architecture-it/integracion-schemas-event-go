// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EnvioActualizado.avsc
 */
package TrazasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EnvioActualizado struct {
	Traza Traza `json:"traza"`

	ContenidoActualizado *UnionNullArrayActualizacionDeContenido `json:"contenidoActualizado"`
}

const EnvioActualizadoAvroCRC64Fingerprint = "\x8c6<\xc2\x14\xf6S,"

func NewEnvioActualizado() EnvioActualizado {
	r := EnvioActualizado{}
	r.Traza = NewTraza()

	r.ContenidoActualizado = nil
	return r
}

func DeserializeEnvioActualizado(r io.Reader) (EnvioActualizado, error) {
	t := NewEnvioActualizado()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEnvioActualizadoFromSchema(r io.Reader, schema string) (EnvioActualizado, error) {
	t := NewEnvioActualizado()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEnvioActualizado(r EnvioActualizado, w io.Writer) error {
	var err error
	err = writeTraza(r.Traza, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayActualizacionDeContenido(r.ContenidoActualizado, w)
	if err != nil {
		return err
	}
	return err
}

func (r EnvioActualizado) Serialize(w io.Writer) error {
	return writeEnvioActualizado(r, w)
}

func (r EnvioActualizado) Schema() string {
	return "{\"fields\":[{\"name\":\"traza\",\"type\":{\"fields\":[{\"name\":\"codigoDeEnvio\",\"type\":\"string\"},{\"default\":null,\"name\":\"nombre\",\"type\":[\"null\",\"string\"]},{\"name\":\"cuando\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"codigoDeContratoInterno\",\"type\":\"string\"},{\"default\":null,\"name\":\"codigoDeContrato\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"estadoDelEnvio\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"cicloDelEnvio\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"operador\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"estadoDeLaRendicion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"comentario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"sucursalAsociadaAlEvento\",\"type\":[\"null\",{\"fields\":[{\"name\":\"codigo\",\"type\":\"string\"},{\"default\":null,\"name\":\"nombre\",\"type\":[\"null\",\"string\"]},{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"DatosSucursal\",\"namespace\":\"Integracion.Esquemas.Referencias\",\"type\":\"record\"}]}],\"name\":\"Traza\",\"namespace\":\"Integracion.Esquemas\",\"type\":\"record\"}},{\"default\":null,\"name\":\"contenidoActualizado\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"name\":\"propiedad\",\"type\":\"string\"},{\"default\":null,\"name\":\"valor\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"valorPrevio\",\"type\":[\"null\",\"string\"]}],\"name\":\"ActualizacionDeContenido\",\"namespace\":\"Integracion.Esquemas.Referencias\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"Integracion.Esquemas.Trazas.EnvioActualizado\",\"type\":\"record\"}"
}

func (r EnvioActualizado) SchemaName() string {
	return "Integracion.Esquemas.Trazas.EnvioActualizado"
}

func (_ EnvioActualizado) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EnvioActualizado) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EnvioActualizado) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EnvioActualizado) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EnvioActualizado) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EnvioActualizado) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EnvioActualizado) SetString(v string)   { panic("Unsupported operation") }
func (_ EnvioActualizado) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EnvioActualizado) Get(i int) types.Field {
	switch i {
	case 0:
		r.Traza = NewTraza()

		w := types.Record{Target: &r.Traza}

		return w

	case 1:
		r.ContenidoActualizado = NewUnionNullArrayActualizacionDeContenido()

		return r.ContenidoActualizado
	}
	panic("Unknown field index")
}

func (r *EnvioActualizado) SetDefault(i int) {
	switch i {
	case 1:
		r.ContenidoActualizado = nil
		return
	}
	panic("Unknown field index")
}

func (r *EnvioActualizado) NullField(i int) {
	switch i {
	case 1:
		r.ContenidoActualizado = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ EnvioActualizado) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EnvioActualizado) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EnvioActualizado) HintSize(int)                     { panic("Unsupported operation") }
func (_ EnvioActualizado) Finalize()                        {}

func (_ EnvioActualizado) AvroCRC64Fingerprint() []byte {
	return []byte(EnvioActualizadoAvroCRC64Fingerprint)
}

func (r EnvioActualizado) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["traza"], err = json.Marshal(r.Traza)
	if err != nil {
		return nil, err
	}
	output["contenidoActualizado"], err = json.Marshal(r.ContenidoActualizado)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EnvioActualizado) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["traza"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Traza); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for traza")
	}
	val = func() json.RawMessage {
		if v, ok := fields["contenidoActualizado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ContenidoActualizado); err != nil {
			return err
		}
	} else {
		r.ContenidoActualizado = NewUnionNullArrayActualizacionDeContenido()

		r.ContenidoActualizado = nil
	}
	return nil
}
