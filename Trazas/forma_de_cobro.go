// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     GestionCobranza.avsc
 */
package TrazasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type FormaDeCobro int32

const (
	FormaDeCobroOtro             FormaDeCobro = 0
	FormaDeCobroCheque           FormaDeCobro = 1
	FormaDeCobroRetenciones      FormaDeCobro = 2
	FormaDeCobroBoletaDeDeposito FormaDeCobro = 3
	FormaDeCobroSiniestroPerdido FormaDeCobro = 4
	FormaDeCobroEfectivo         FormaDeCobro = 5
)

func (e FormaDeCobro) String() string {
	switch e {
	case FormaDeCobroOtro:
		return "otro"
	case FormaDeCobroCheque:
		return "cheque"
	case FormaDeCobroRetenciones:
		return "retenciones"
	case FormaDeCobroBoletaDeDeposito:
		return "boletaDeDeposito"
	case FormaDeCobroSiniestroPerdido:
		return "siniestroPerdido"
	case FormaDeCobroEfectivo:
		return "efectivo"
	}
	return "unknown"
}

func writeFormaDeCobro(r FormaDeCobro, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewFormaDeCobroValue(raw string) (r FormaDeCobro, err error) {
	switch raw {
	case "otro":
		return FormaDeCobroOtro, nil
	case "cheque":
		return FormaDeCobroCheque, nil
	case "retenciones":
		return FormaDeCobroRetenciones, nil
	case "boletaDeDeposito":
		return FormaDeCobroBoletaDeDeposito, nil
	case "siniestroPerdido":
		return FormaDeCobroSiniestroPerdido, nil
	case "efectivo":
		return FormaDeCobroEfectivo, nil
	}

	return -1, fmt.Errorf("invalid value for FormaDeCobro: '%s'", raw)

}

func (b FormaDeCobro) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *FormaDeCobro) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewFormaDeCobroValue(stringVal)
	*b = val
	return err
}

type FormaDeCobroWrapper struct {
	Target *FormaDeCobro
}

func (b FormaDeCobroWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b FormaDeCobroWrapper) SetInt(v int32) {
	*(b.Target) = FormaDeCobro(v)
}

func (b FormaDeCobroWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b FormaDeCobroWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b FormaDeCobroWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b FormaDeCobroWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b FormaDeCobroWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b FormaDeCobroWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b FormaDeCobroWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b FormaDeCobroWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b FormaDeCobroWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b FormaDeCobroWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b FormaDeCobroWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b FormaDeCobroWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b FormaDeCobroWrapper) Finalize() {}
