// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Reporte.avsc
 */
package CostosWarehouseEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Reporte struct {
	Almacen *UnionNullString `json:"Almacen"`

	Operacion *UnionNullString `json:"Operacion"`

	Cliente *UnionNullString `json:"Cliente"`

	Contrato *UnionNullString `json:"Contrato"`

	UnidadDeVenta *UnionNullString `json:"UnidadDeVenta"`

	MacroProceso *UnionNullString `json:"MacroProceso"`

	MicroProceso *UnionNullString `json:"MicroProceso"`

	Zona *UnionNullString `json:"Zona"`

	Cantidad *UnionNullInt `json:"Cantidad"`

	UnidadDeMedida *UnionNullString `json:"UnidadDeMedida"`

	Volumetria *UnionNullFloat `json:"Volumetria"`

	Peso *UnionNullFloat `json:"Peso"`

	UnidadFinales *UnionNullInt `json:"UnidadFinales"`

	CostoUnitario *UnionNullFloat `json:"CostoUnitario"`

	Opcional *UnionNullString `json:"opcional"`
}

const ReporteAvroCRC64Fingerprint = "\x15R\r\xe3\x13\x10\xad\xa9"

func NewReporte() Reporte {
	r := Reporte{}
	r.Opcional = nil
	return r
}

func DeserializeReporte(r io.Reader) (Reporte, error) {
	t := NewReporte()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeReporteFromSchema(r io.Reader, schema string) (Reporte, error) {
	t := NewReporte()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeReporte(r Reporte, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Almacen, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Operacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Cliente, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Contrato, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.UnidadDeVenta, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MacroProceso, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MicroProceso, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Zona, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.Cantidad, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.UnidadDeMedida, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.Volumetria, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.Peso, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.UnidadFinales, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.CostoUnitario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Opcional, w)
	if err != nil {
		return err
	}
	return err
}

func (r Reporte) Serialize(w io.Writer) error {
	return writeReporte(r, w)
}

func (r Reporte) Schema() string {
	return "{\"fields\":[{\"name\":\"Almacen\",\"type\":[\"null\",\"string\"]},{\"name\":\"Operacion\",\"type\":[\"null\",\"string\"]},{\"name\":\"Cliente\",\"type\":[\"null\",\"string\"]},{\"name\":\"Contrato\",\"type\":[\"null\",\"string\"]},{\"name\":\"UnidadDeVenta\",\"type\":[\"null\",\"string\"]},{\"name\":\"MacroProceso\",\"type\":[\"null\",\"string\"]},{\"name\":\"MicroProceso\",\"type\":[\"null\",\"string\"]},{\"name\":\"Zona\",\"type\":[\"null\",\"string\"]},{\"name\":\"Cantidad\",\"type\":[\"null\",\"int\"]},{\"name\":\"UnidadDeMedida\",\"type\":[\"null\",\"string\"]},{\"name\":\"Volumetria\",\"type\":[\"null\",\"float\"]},{\"name\":\"Peso\",\"type\":[\"null\",\"float\"]},{\"name\":\"UnidadFinales\",\"type\":[\"null\",\"int\"]},{\"name\":\"CostoUnitario\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"opcional\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.CostosWarehouse.Events.Common.Reporte\",\"type\":\"record\"}"
}

func (r Reporte) SchemaName() string {
	return "Andreani.CostosWarehouse.Events.Common.Reporte"
}

func (_ Reporte) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Reporte) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Reporte) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Reporte) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Reporte) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Reporte) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Reporte) SetString(v string)   { panic("Unsupported operation") }
func (_ Reporte) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Reporte) Get(i int) types.Field {
	switch i {
	case 0:
		r.Almacen = NewUnionNullString()

		return r.Almacen
	case 1:
		r.Operacion = NewUnionNullString()

		return r.Operacion
	case 2:
		r.Cliente = NewUnionNullString()

		return r.Cliente
	case 3:
		r.Contrato = NewUnionNullString()

		return r.Contrato
	case 4:
		r.UnidadDeVenta = NewUnionNullString()

		return r.UnidadDeVenta
	case 5:
		r.MacroProceso = NewUnionNullString()

		return r.MacroProceso
	case 6:
		r.MicroProceso = NewUnionNullString()

		return r.MicroProceso
	case 7:
		r.Zona = NewUnionNullString()

		return r.Zona
	case 8:
		r.Cantidad = NewUnionNullInt()

		return r.Cantidad
	case 9:
		r.UnidadDeMedida = NewUnionNullString()

		return r.UnidadDeMedida
	case 10:
		r.Volumetria = NewUnionNullFloat()

		return r.Volumetria
	case 11:
		r.Peso = NewUnionNullFloat()

		return r.Peso
	case 12:
		r.UnidadFinales = NewUnionNullInt()

		return r.UnidadFinales
	case 13:
		r.CostoUnitario = NewUnionNullFloat()

		return r.CostoUnitario
	case 14:
		r.Opcional = NewUnionNullString()

		return r.Opcional
	}
	panic("Unknown field index")
}

func (r *Reporte) SetDefault(i int) {
	switch i {
	case 14:
		r.Opcional = nil
		return
	}
	panic("Unknown field index")
}

func (r *Reporte) NullField(i int) {
	switch i {
	case 0:
		r.Almacen = nil
		return
	case 1:
		r.Operacion = nil
		return
	case 2:
		r.Cliente = nil
		return
	case 3:
		r.Contrato = nil
		return
	case 4:
		r.UnidadDeVenta = nil
		return
	case 5:
		r.MacroProceso = nil
		return
	case 6:
		r.MicroProceso = nil
		return
	case 7:
		r.Zona = nil
		return
	case 8:
		r.Cantidad = nil
		return
	case 9:
		r.UnidadDeMedida = nil
		return
	case 10:
		r.Volumetria = nil
		return
	case 11:
		r.Peso = nil
		return
	case 12:
		r.UnidadFinales = nil
		return
	case 13:
		r.CostoUnitario = nil
		return
	case 14:
		r.Opcional = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Reporte) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Reporte) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Reporte) HintSize(int)                     { panic("Unsupported operation") }
func (_ Reporte) Finalize()                        {}

func (_ Reporte) AvroCRC64Fingerprint() []byte {
	return []byte(ReporteAvroCRC64Fingerprint)
}

func (r Reporte) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Almacen"], err = json.Marshal(r.Almacen)
	if err != nil {
		return nil, err
	}
	output["Operacion"], err = json.Marshal(r.Operacion)
	if err != nil {
		return nil, err
	}
	output["Cliente"], err = json.Marshal(r.Cliente)
	if err != nil {
		return nil, err
	}
	output["Contrato"], err = json.Marshal(r.Contrato)
	if err != nil {
		return nil, err
	}
	output["UnidadDeVenta"], err = json.Marshal(r.UnidadDeVenta)
	if err != nil {
		return nil, err
	}
	output["MacroProceso"], err = json.Marshal(r.MacroProceso)
	if err != nil {
		return nil, err
	}
	output["MicroProceso"], err = json.Marshal(r.MicroProceso)
	if err != nil {
		return nil, err
	}
	output["Zona"], err = json.Marshal(r.Zona)
	if err != nil {
		return nil, err
	}
	output["Cantidad"], err = json.Marshal(r.Cantidad)
	if err != nil {
		return nil, err
	}
	output["UnidadDeMedida"], err = json.Marshal(r.UnidadDeMedida)
	if err != nil {
		return nil, err
	}
	output["Volumetria"], err = json.Marshal(r.Volumetria)
	if err != nil {
		return nil, err
	}
	output["Peso"], err = json.Marshal(r.Peso)
	if err != nil {
		return nil, err
	}
	output["UnidadFinales"], err = json.Marshal(r.UnidadFinales)
	if err != nil {
		return nil, err
	}
	output["CostoUnitario"], err = json.Marshal(r.CostoUnitario)
	if err != nil {
		return nil, err
	}
	output["opcional"], err = json.Marshal(r.Opcional)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Reporte) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Almacen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Almacen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Almacen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Operacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Operacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Operacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Cliente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cliente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Cliente")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Contrato"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contrato); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Contrato")
	}
	val = func() json.RawMessage {
		if v, ok := fields["UnidadDeVenta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UnidadDeVenta); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for UnidadDeVenta")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MacroProceso"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MacroProceso); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for MacroProceso")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MicroProceso"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MicroProceso); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for MicroProceso")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Zona"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Zona); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Zona")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Cantidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cantidad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Cantidad")
	}
	val = func() json.RawMessage {
		if v, ok := fields["UnidadDeMedida"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UnidadDeMedida); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for UnidadDeMedida")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Volumetria"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Volumetria); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Volumetria")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Peso"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Peso); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Peso")
	}
	val = func() json.RawMessage {
		if v, ok := fields["UnidadFinales"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UnidadFinales); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for UnidadFinales")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CostoUnitario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CostoUnitario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CostoUnitario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["opcional"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Opcional); err != nil {
			return err
		}
	} else {
		r.Opcional = NewUnionNullString()

		r.Opcional = nil
	}
	return nil
}
