// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EnvioListoParaAduana.avsc
 */
package globallpackEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EnvioListoParaAduana struct {
	NroEnvio string `json:"NroEnvio"`

	Guia string `json:"Guia"`
}

const EnvioListoParaAduanaAvroCRC64Fingerprint = "\x80É±s\a\x9b\xc8\xf7"

func NewEnvioListoParaAduana() EnvioListoParaAduana {
	r := EnvioListoParaAduana{}
	return r
}

func DeserializeEnvioListoParaAduana(r io.Reader) (EnvioListoParaAduana, error) {
	t := NewEnvioListoParaAduana()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEnvioListoParaAduanaFromSchema(r io.Reader, schema string) (EnvioListoParaAduana, error) {
	t := NewEnvioListoParaAduana()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEnvioListoParaAduana(r EnvioListoParaAduana, w io.Writer) error {
	var err error
	err = vm.WriteString(r.NroEnvio, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Guia, w)
	if err != nil {
		return err
	}
	return err
}

func (r EnvioListoParaAduana) Serialize(w io.Writer) error {
	return writeEnvioListoParaAduana(r, w)
}

func (r EnvioListoParaAduana) Schema() string {
	return "{\"fields\":[{\"name\":\"NroEnvio\",\"type\":\"string\"},{\"name\":\"Guia\",\"type\":\"string\"}],\"name\":\"Andreani.EnviosAGP.Events.Record.EnvioListoParaAduana\",\"type\":\"record\"}"
}

func (r EnvioListoParaAduana) SchemaName() string {
	return "Andreani.EnviosAGP.Events.Record.EnvioListoParaAduana"
}

func (_ EnvioListoParaAduana) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EnvioListoParaAduana) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EnvioListoParaAduana) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EnvioListoParaAduana) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EnvioListoParaAduana) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EnvioListoParaAduana) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EnvioListoParaAduana) SetString(v string)   { panic("Unsupported operation") }
func (_ EnvioListoParaAduana) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EnvioListoParaAduana) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.NroEnvio}

		return w

	case 1:
		w := types.String{Target: &r.Guia}

		return w

	}
	panic("Unknown field index")
}

func (r *EnvioListoParaAduana) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *EnvioListoParaAduana) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ EnvioListoParaAduana) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EnvioListoParaAduana) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EnvioListoParaAduana) HintSize(int)                     { panic("Unsupported operation") }
func (_ EnvioListoParaAduana) Finalize()                        {}

func (_ EnvioListoParaAduana) AvroCRC64Fingerprint() []byte {
	return []byte(EnvioListoParaAduanaAvroCRC64Fingerprint)
}

func (r EnvioListoParaAduana) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["NroEnvio"], err = json.Marshal(r.NroEnvio)
	if err != nil {
		return nil, err
	}
	output["Guia"], err = json.Marshal(r.Guia)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EnvioListoParaAduana) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["NroEnvio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NroEnvio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NroEnvio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Guia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Guia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Guia")
	}
	return nil
}
