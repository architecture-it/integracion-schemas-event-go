// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     GuiaMadreContingencia.avsc
 */
package GloballpackEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type GuiaMadreContingencia struct {
	MAWB *UnionNullString `json:"MAWB"`

	GuiaMadre *UnionNullString `json:"GuiaMadre"`

	Estado *UnionNullInt `json:"Estado"`

	GuiasHijasEsperadas *UnionNullInt `json:"GuiasHijasEsperadas"`

	BultosEsperados *UnionNullInt `json:"BultosEsperados"`

	PesoEsperado *UnionNullFloat `json:"PesoEsperado"`

	FOBEsperado *UnionNullFloat `json:"FOBEsperado"`

	FechaNotificacion int64 `json:"FechaNotificacion"`
}

const GuiaMadreContingenciaAvroCRC64Fingerprint = "\x8e+\xe8;2\xd4k\xdc"

func NewGuiaMadreContingencia() GuiaMadreContingencia {
	r := GuiaMadreContingencia{}
	r.MAWB = nil
	r.GuiaMadre = nil
	r.Estado = nil
	r.GuiasHijasEsperadas = nil
	r.BultosEsperados = nil
	r.PesoEsperado = nil
	r.FOBEsperado = nil
	return r
}

func DeserializeGuiaMadreContingencia(r io.Reader) (GuiaMadreContingencia, error) {
	t := NewGuiaMadreContingencia()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeGuiaMadreContingenciaFromSchema(r io.Reader, schema string) (GuiaMadreContingencia, error) {
	t := NewGuiaMadreContingencia()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeGuiaMadreContingencia(r GuiaMadreContingencia, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.MAWB, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.GuiaMadre, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.Estado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.GuiasHijasEsperadas, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.BultosEsperados, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.PesoEsperado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.FOBEsperado, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.FechaNotificacion, w)
	if err != nil {
		return err
	}
	return err
}

func (r GuiaMadreContingencia) Serialize(w io.Writer) error {
	return writeGuiaMadreContingencia(r, w)
}

func (r GuiaMadreContingencia) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"MAWB\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"GuiaMadre\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Estado\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"GuiasHijasEsperadas\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"BultosEsperados\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"PesoEsperado\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"FOBEsperado\",\"type\":[\"null\",\"float\"]},{\"name\":\"FechaNotificacion\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"Andreani.Globallpack.Events.Common.GuiaMadreContingencia\",\"type\":\"record\"}"
}

func (r GuiaMadreContingencia) SchemaName() string {
	return "Andreani.Globallpack.Events.Common.GuiaMadreContingencia"
}

func (_ GuiaMadreContingencia) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ GuiaMadreContingencia) SetInt(v int32)       { panic("Unsupported operation") }
func (_ GuiaMadreContingencia) SetLong(v int64)      { panic("Unsupported operation") }
func (_ GuiaMadreContingencia) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ GuiaMadreContingencia) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ GuiaMadreContingencia) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ GuiaMadreContingencia) SetString(v string)   { panic("Unsupported operation") }
func (_ GuiaMadreContingencia) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *GuiaMadreContingencia) Get(i int) types.Field {
	switch i {
	case 0:
		r.MAWB = NewUnionNullString()

		return r.MAWB
	case 1:
		r.GuiaMadre = NewUnionNullString()

		return r.GuiaMadre
	case 2:
		r.Estado = NewUnionNullInt()

		return r.Estado
	case 3:
		r.GuiasHijasEsperadas = NewUnionNullInt()

		return r.GuiasHijasEsperadas
	case 4:
		r.BultosEsperados = NewUnionNullInt()

		return r.BultosEsperados
	case 5:
		r.PesoEsperado = NewUnionNullFloat()

		return r.PesoEsperado
	case 6:
		r.FOBEsperado = NewUnionNullFloat()

		return r.FOBEsperado
	case 7:
		w := types.Long{Target: &r.FechaNotificacion}

		return w

	}
	panic("Unknown field index")
}

func (r *GuiaMadreContingencia) SetDefault(i int) {
	switch i {
	case 0:
		r.MAWB = nil
		return
	case 1:
		r.GuiaMadre = nil
		return
	case 2:
		r.Estado = nil
		return
	case 3:
		r.GuiasHijasEsperadas = nil
		return
	case 4:
		r.BultosEsperados = nil
		return
	case 5:
		r.PesoEsperado = nil
		return
	case 6:
		r.FOBEsperado = nil
		return
	}
	panic("Unknown field index")
}

func (r *GuiaMadreContingencia) NullField(i int) {
	switch i {
	case 0:
		r.MAWB = nil
		return
	case 1:
		r.GuiaMadre = nil
		return
	case 2:
		r.Estado = nil
		return
	case 3:
		r.GuiasHijasEsperadas = nil
		return
	case 4:
		r.BultosEsperados = nil
		return
	case 5:
		r.PesoEsperado = nil
		return
	case 6:
		r.FOBEsperado = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ GuiaMadreContingencia) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ GuiaMadreContingencia) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ GuiaMadreContingencia) HintSize(int)                     { panic("Unsupported operation") }
func (_ GuiaMadreContingencia) Finalize()                        {}

func (_ GuiaMadreContingencia) AvroCRC64Fingerprint() []byte {
	return []byte(GuiaMadreContingenciaAvroCRC64Fingerprint)
}

func (r GuiaMadreContingencia) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["MAWB"], err = json.Marshal(r.MAWB)
	if err != nil {
		return nil, err
	}
	output["GuiaMadre"], err = json.Marshal(r.GuiaMadre)
	if err != nil {
		return nil, err
	}
	output["Estado"], err = json.Marshal(r.Estado)
	if err != nil {
		return nil, err
	}
	output["GuiasHijasEsperadas"], err = json.Marshal(r.GuiasHijasEsperadas)
	if err != nil {
		return nil, err
	}
	output["BultosEsperados"], err = json.Marshal(r.BultosEsperados)
	if err != nil {
		return nil, err
	}
	output["PesoEsperado"], err = json.Marshal(r.PesoEsperado)
	if err != nil {
		return nil, err
	}
	output["FOBEsperado"], err = json.Marshal(r.FOBEsperado)
	if err != nil {
		return nil, err
	}
	output["FechaNotificacion"], err = json.Marshal(r.FechaNotificacion)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *GuiaMadreContingencia) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["MAWB"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MAWB); err != nil {
			return err
		}
	} else {
		r.MAWB = NewUnionNullString()

		r.MAWB = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["GuiaMadre"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.GuiaMadre); err != nil {
			return err
		}
	} else {
		r.GuiaMadre = NewUnionNullString()

		r.GuiaMadre = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Estado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estado); err != nil {
			return err
		}
	} else {
		r.Estado = NewUnionNullInt()

		r.Estado = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["GuiasHijasEsperadas"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.GuiasHijasEsperadas); err != nil {
			return err
		}
	} else {
		r.GuiasHijasEsperadas = NewUnionNullInt()

		r.GuiasHijasEsperadas = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["BultosEsperados"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BultosEsperados); err != nil {
			return err
		}
	} else {
		r.BultosEsperados = NewUnionNullInt()

		r.BultosEsperados = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PesoEsperado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoEsperado); err != nil {
			return err
		}
	} else {
		r.PesoEsperado = NewUnionNullFloat()

		r.PesoEsperado = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FOBEsperado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FOBEsperado); err != nil {
			return err
		}
	} else {
		r.FOBEsperado = NewUnionNullFloat()

		r.FOBEsperado = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaNotificacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaNotificacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FechaNotificacion")
	}
	return nil
}
