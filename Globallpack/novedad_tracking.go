// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     NovedadTracking.avsc
 */
package GloballpackEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type NovedadTracking struct {
	NroEnvio *UnionNullString `json:"NroEnvio"`

	NroEnvioGloballpack *UnionNullString `json:"NroEnvioGloballpack"`

	FechaTracking int64 `json:"FechaTracking"`

	FechaRecibido int64 `json:"FechaRecibido"`

	Estado string `json:"Estado"`

	Observacion *UnionNullString `json:"Observacion"`

	Guia *UnionNullString `json:"Guia"`

	GuiaHija *UnionNullString `json:"GuiaHija"`

	Motivo *UnionNullString `json:"Motivo"`

	SubMotivo *UnionNullString `json:"SubMotivo"`

	DireccionDestino *UnionNullString `json:"DireccionDestino"`

	Remitente *UnionNullString `json:"Remitente"`

	Destinatario *UnionNullString `json:"Destinatario"`

	Sucursal *UnionNullString `json:"Sucursal"`
}

const NovedadTrackingAvroCRC64Fingerprint = "^\xff\xfc\xffU\x93\x11r"

func NewNovedadTracking() NovedadTracking {
	r := NovedadTracking{}
	r.NroEnvio = nil
	r.NroEnvioGloballpack = nil
	r.Observacion = nil
	r.Guia = nil
	r.GuiaHija = nil
	r.Motivo = nil
	r.SubMotivo = nil
	r.DireccionDestino = nil
	r.Remitente = nil
	r.Destinatario = nil
	r.Sucursal = nil
	return r
}

func DeserializeNovedadTracking(r io.Reader) (NovedadTracking, error) {
	t := NewNovedadTracking()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeNovedadTrackingFromSchema(r io.Reader, schema string) (NovedadTracking, error) {
	t := NewNovedadTracking()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeNovedadTracking(r NovedadTracking, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.NroEnvio, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NroEnvioGloballpack, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.FechaTracking, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.FechaRecibido, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Estado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Observacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Guia, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.GuiaHija, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Motivo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SubMotivo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DireccionDestino, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Remitente, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Destinatario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Sucursal, w)
	if err != nil {
		return err
	}
	return err
}

func (r NovedadTracking) Serialize(w io.Writer) error {
	return writeNovedadTracking(r, w)
}

func (r NovedadTracking) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"NroEnvio\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NroEnvioGloballpack\",\"type\":[\"null\",\"string\"]},{\"name\":\"FechaTracking\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"FechaRecibido\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"Estado\",\"type\":\"string\"},{\"default\":null,\"name\":\"Observacion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Guia\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"GuiaHija\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Motivo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SubMotivo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"DireccionDestino\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Remitente\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Destinatario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Sucursal\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.Globallpack.Events.Common.NovedadTracking\",\"type\":\"record\"}"
}

func (r NovedadTracking) SchemaName() string {
	return "Andreani.Globallpack.Events.Common.NovedadTracking"
}

func (_ NovedadTracking) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ NovedadTracking) SetInt(v int32)       { panic("Unsupported operation") }
func (_ NovedadTracking) SetLong(v int64)      { panic("Unsupported operation") }
func (_ NovedadTracking) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ NovedadTracking) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ NovedadTracking) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ NovedadTracking) SetString(v string)   { panic("Unsupported operation") }
func (_ NovedadTracking) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *NovedadTracking) Get(i int) types.Field {
	switch i {
	case 0:
		r.NroEnvio = NewUnionNullString()

		return r.NroEnvio
	case 1:
		r.NroEnvioGloballpack = NewUnionNullString()

		return r.NroEnvioGloballpack
	case 2:
		w := types.Long{Target: &r.FechaTracking}

		return w

	case 3:
		w := types.Long{Target: &r.FechaRecibido}

		return w

	case 4:
		w := types.String{Target: &r.Estado}

		return w

	case 5:
		r.Observacion = NewUnionNullString()

		return r.Observacion
	case 6:
		r.Guia = NewUnionNullString()

		return r.Guia
	case 7:
		r.GuiaHija = NewUnionNullString()

		return r.GuiaHija
	case 8:
		r.Motivo = NewUnionNullString()

		return r.Motivo
	case 9:
		r.SubMotivo = NewUnionNullString()

		return r.SubMotivo
	case 10:
		r.DireccionDestino = NewUnionNullString()

		return r.DireccionDestino
	case 11:
		r.Remitente = NewUnionNullString()

		return r.Remitente
	case 12:
		r.Destinatario = NewUnionNullString()

		return r.Destinatario
	case 13:
		r.Sucursal = NewUnionNullString()

		return r.Sucursal
	}
	panic("Unknown field index")
}

func (r *NovedadTracking) SetDefault(i int) {
	switch i {
	case 0:
		r.NroEnvio = nil
		return
	case 1:
		r.NroEnvioGloballpack = nil
		return
	case 5:
		r.Observacion = nil
		return
	case 6:
		r.Guia = nil
		return
	case 7:
		r.GuiaHija = nil
		return
	case 8:
		r.Motivo = nil
		return
	case 9:
		r.SubMotivo = nil
		return
	case 10:
		r.DireccionDestino = nil
		return
	case 11:
		r.Remitente = nil
		return
	case 12:
		r.Destinatario = nil
		return
	case 13:
		r.Sucursal = nil
		return
	}
	panic("Unknown field index")
}

func (r *NovedadTracking) NullField(i int) {
	switch i {
	case 0:
		r.NroEnvio = nil
		return
	case 1:
		r.NroEnvioGloballpack = nil
		return
	case 5:
		r.Observacion = nil
		return
	case 6:
		r.Guia = nil
		return
	case 7:
		r.GuiaHija = nil
		return
	case 8:
		r.Motivo = nil
		return
	case 9:
		r.SubMotivo = nil
		return
	case 10:
		r.DireccionDestino = nil
		return
	case 11:
		r.Remitente = nil
		return
	case 12:
		r.Destinatario = nil
		return
	case 13:
		r.Sucursal = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ NovedadTracking) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ NovedadTracking) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ NovedadTracking) HintSize(int)                     { panic("Unsupported operation") }
func (_ NovedadTracking) Finalize()                        {}

func (_ NovedadTracking) AvroCRC64Fingerprint() []byte {
	return []byte(NovedadTrackingAvroCRC64Fingerprint)
}

func (r NovedadTracking) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["NroEnvio"], err = json.Marshal(r.NroEnvio)
	if err != nil {
		return nil, err
	}
	output["NroEnvioGloballpack"], err = json.Marshal(r.NroEnvioGloballpack)
	if err != nil {
		return nil, err
	}
	output["FechaTracking"], err = json.Marshal(r.FechaTracking)
	if err != nil {
		return nil, err
	}
	output["FechaRecibido"], err = json.Marshal(r.FechaRecibido)
	if err != nil {
		return nil, err
	}
	output["Estado"], err = json.Marshal(r.Estado)
	if err != nil {
		return nil, err
	}
	output["Observacion"], err = json.Marshal(r.Observacion)
	if err != nil {
		return nil, err
	}
	output["Guia"], err = json.Marshal(r.Guia)
	if err != nil {
		return nil, err
	}
	output["GuiaHija"], err = json.Marshal(r.GuiaHija)
	if err != nil {
		return nil, err
	}
	output["Motivo"], err = json.Marshal(r.Motivo)
	if err != nil {
		return nil, err
	}
	output["SubMotivo"], err = json.Marshal(r.SubMotivo)
	if err != nil {
		return nil, err
	}
	output["DireccionDestino"], err = json.Marshal(r.DireccionDestino)
	if err != nil {
		return nil, err
	}
	output["Remitente"], err = json.Marshal(r.Remitente)
	if err != nil {
		return nil, err
	}
	output["Destinatario"], err = json.Marshal(r.Destinatario)
	if err != nil {
		return nil, err
	}
	output["Sucursal"], err = json.Marshal(r.Sucursal)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *NovedadTracking) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["NroEnvio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NroEnvio); err != nil {
			return err
		}
	} else {
		r.NroEnvio = NewUnionNullString()

		r.NroEnvio = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NroEnvioGloballpack"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NroEnvioGloballpack); err != nil {
			return err
		}
	} else {
		r.NroEnvioGloballpack = NewUnionNullString()

		r.NroEnvioGloballpack = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaTracking"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaTracking); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FechaTracking")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaRecibido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaRecibido); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FechaRecibido")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Estado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Estado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Observacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Observacion); err != nil {
			return err
		}
	} else {
		r.Observacion = NewUnionNullString()

		r.Observacion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Guia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Guia); err != nil {
			return err
		}
	} else {
		r.Guia = NewUnionNullString()

		r.Guia = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["GuiaHija"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.GuiaHija); err != nil {
			return err
		}
	} else {
		r.GuiaHija = NewUnionNullString()

		r.GuiaHija = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Motivo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Motivo); err != nil {
			return err
		}
	} else {
		r.Motivo = NewUnionNullString()

		r.Motivo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SubMotivo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SubMotivo); err != nil {
			return err
		}
	} else {
		r.SubMotivo = NewUnionNullString()

		r.SubMotivo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["DireccionDestino"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DireccionDestino); err != nil {
			return err
		}
	} else {
		r.DireccionDestino = NewUnionNullString()

		r.DireccionDestino = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Remitente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Remitente); err != nil {
			return err
		}
	} else {
		r.Remitente = NewUnionNullString()

		r.Remitente = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Destinatario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Destinatario); err != nil {
			return err
		}
	} else {
		r.Destinatario = NewUnionNullString()

		r.Destinatario = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Sucursal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sucursal); err != nil {
			return err
		}
	} else {
		r.Sucursal = NewUnionNullString()

		r.Sucursal = nil
	}
	return nil
}
