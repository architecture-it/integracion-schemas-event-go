// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     NovedadInformada.avsc
 */
package GloballpackEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type NovedadInformada struct {
	Sistema string `json:"Sistema"`

	TipoSistema *UnionNullString `json:"TipoSistema"`

	Novedades []NovedadTracking `json:"Novedades"`
}

const NovedadInformadaAvroCRC64Fingerprint = "f\xd0\xef\x14g\xca\xf5\xa8"

func NewNovedadInformada() NovedadInformada {
	r := NovedadInformada{}
	r.TipoSistema = nil
	r.Novedades = make([]NovedadTracking, 0)

	return r
}

func DeserializeNovedadInformada(r io.Reader) (NovedadInformada, error) {
	t := NewNovedadInformada()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeNovedadInformadaFromSchema(r io.Reader, schema string) (NovedadInformada, error) {
	t := NewNovedadInformada()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeNovedadInformada(r NovedadInformada, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Sistema, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoSistema, w)
	if err != nil {
		return err
	}
	err = writeArrayNovedadTracking(r.Novedades, w)
	if err != nil {
		return err
	}
	return err
}

func (r NovedadInformada) Serialize(w io.Writer) error {
	return writeNovedadInformada(r, w)
}

func (r NovedadInformada) Schema() string {
	return "{\"fields\":[{\"name\":\"Sistema\",\"type\":\"string\"},{\"default\":null,\"name\":\"TipoSistema\",\"type\":[\"null\",\"string\"]},{\"name\":\"Novedades\",\"type\":{\"items\":{\"fields\":[{\"default\":null,\"name\":\"NroEnvio\",\"type\":[\"null\",\"string\"]},{\"name\":\"FechaTracking\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"FechaRecibido\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"Estado\",\"type\":\"string\"},{\"default\":null,\"name\":\"Observacion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Guia\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"GuiaHija\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Motivo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SubMotivo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"DireccionDestino\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Remitente\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Destinatario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Sucursal\",\"type\":[\"null\",\"string\"]}],\"name\":\"NovedadTracking\",\"namespace\":\"Andreani.Globallpack.Events.Common\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Andreani.Globallpack.Events.Record.NovedadInformada\",\"type\":\"record\"}"
}

func (r NovedadInformada) SchemaName() string {
	return "Andreani.Globallpack.Events.Record.NovedadInformada"
}

func (_ NovedadInformada) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ NovedadInformada) SetInt(v int32)       { panic("Unsupported operation") }
func (_ NovedadInformada) SetLong(v int64)      { panic("Unsupported operation") }
func (_ NovedadInformada) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ NovedadInformada) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ NovedadInformada) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ NovedadInformada) SetString(v string)   { panic("Unsupported operation") }
func (_ NovedadInformada) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *NovedadInformada) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Sistema}

		return w

	case 1:
		r.TipoSistema = NewUnionNullString()

		return r.TipoSistema
	case 2:
		r.Novedades = make([]NovedadTracking, 0)

		w := ArrayNovedadTrackingWrapper{Target: &r.Novedades}

		return w

	}
	panic("Unknown field index")
}

func (r *NovedadInformada) SetDefault(i int) {
	switch i {
	case 1:
		r.TipoSistema = nil
		return
	}
	panic("Unknown field index")
}

func (r *NovedadInformada) NullField(i int) {
	switch i {
	case 1:
		r.TipoSistema = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ NovedadInformada) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ NovedadInformada) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ NovedadInformada) HintSize(int)                     { panic("Unsupported operation") }
func (_ NovedadInformada) Finalize()                        {}

func (_ NovedadInformada) AvroCRC64Fingerprint() []byte {
	return []byte(NovedadInformadaAvroCRC64Fingerprint)
}

func (r NovedadInformada) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Sistema"], err = json.Marshal(r.Sistema)
	if err != nil {
		return nil, err
	}
	output["TipoSistema"], err = json.Marshal(r.TipoSistema)
	if err != nil {
		return nil, err
	}
	output["Novedades"], err = json.Marshal(r.Novedades)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *NovedadInformada) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Sistema"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sistema); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Sistema")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoSistema"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoSistema); err != nil {
			return err
		}
	} else {
		r.TipoSistema = NewUnionNullString()

		r.TipoSistema = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Novedades"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Novedades); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Novedades")
	}
	return nil
}
