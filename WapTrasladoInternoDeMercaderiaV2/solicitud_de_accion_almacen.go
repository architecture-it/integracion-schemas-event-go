// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     WapTrasladoInternoDeMercaderiaSolicitadaV2.avsc
 */
package WapTrasladoInternoDeMercaderiaV2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SolicitudDeAccionAlmacen struct {
	IdTransaccion string `json:"IdTransaccion"`

	ContratoDistribución string `json:"ContratoDistribución"`

	Almacen string `json:"Almacen"`

	Instancia string `json:"Instancia"`

	EventoDeNegocio EventoDeNegocio `json:"EventoDeNegocio"`
}

const SolicitudDeAccionAlmacenAvroCRC64Fingerprint = "\xda\xf8\xd1no\x17\xd2\xf1"

func NewSolicitudDeAccionAlmacen() SolicitudDeAccionAlmacen {
	r := SolicitudDeAccionAlmacen{}
	r.EventoDeNegocio = NewEventoDeNegocio()

	return r
}

func DeserializeSolicitudDeAccionAlmacen(r io.Reader) (SolicitudDeAccionAlmacen, error) {
	t := NewSolicitudDeAccionAlmacen()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSolicitudDeAccionAlmacenFromSchema(r io.Reader, schema string) (SolicitudDeAccionAlmacen, error) {
	t := NewSolicitudDeAccionAlmacen()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSolicitudDeAccionAlmacen(r SolicitudDeAccionAlmacen, w io.Writer) error {
	var err error
	err = vm.WriteString(r.IdTransaccion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ContratoDistribución, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Almacen, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Instancia, w)
	if err != nil {
		return err
	}
	err = writeEventoDeNegocio(r.EventoDeNegocio, w)
	if err != nil {
		return err
	}
	return err
}

func (r SolicitudDeAccionAlmacen) Serialize(w io.Writer) error {
	return writeSolicitudDeAccionAlmacen(r, w)
}

func (r SolicitudDeAccionAlmacen) Schema() string {
	return "{\"fields\":[{\"name\":\"IdTransaccion\",\"type\":\"string\"},{\"name\":\"ContratoDistribución\",\"type\":\"string\"},{\"name\":\"Almacen\",\"type\":\"string\"},{\"name\":\"Instancia\",\"type\":\"string\"},{\"name\":\"EventoDeNegocio\",\"type\":{\"fields\":[{\"name\":\"Timestamp\",\"type\":\"int\"},{\"name\":\"Remitente\",\"type\":\"string\"},{\"default\":null,\"name\":\"Destinatario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NumeroDeOrden\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Vencimiento\",\"type\":[\"null\",\"string\"]}],\"name\":\"EventoDeNegocio\",\"type\":\"record\"}}],\"name\":\"Andreani.WapTrasladoInternoDeMercaderiaV2.Events.Record.SolicitudDeAccionAlmacen\",\"type\":\"record\"}"
}

func (r SolicitudDeAccionAlmacen) SchemaName() string {
	return "Andreani.WapTrasladoInternoDeMercaderiaV2.Events.Record.SolicitudDeAccionAlmacen"
}

func (_ SolicitudDeAccionAlmacen) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ SolicitudDeAccionAlmacen) SetInt(v int32)       { panic("Unsupported operation") }
func (_ SolicitudDeAccionAlmacen) SetLong(v int64)      { panic("Unsupported operation") }
func (_ SolicitudDeAccionAlmacen) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ SolicitudDeAccionAlmacen) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ SolicitudDeAccionAlmacen) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ SolicitudDeAccionAlmacen) SetString(v string)   { panic("Unsupported operation") }
func (_ SolicitudDeAccionAlmacen) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SolicitudDeAccionAlmacen) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.IdTransaccion}

		return w

	case 1:
		w := types.String{Target: &r.ContratoDistribución}

		return w

	case 2:
		w := types.String{Target: &r.Almacen}

		return w

	case 3:
		w := types.String{Target: &r.Instancia}

		return w

	case 4:
		r.EventoDeNegocio = NewEventoDeNegocio()

		w := types.Record{Target: &r.EventoDeNegocio}

		return w

	}
	panic("Unknown field index")
}

func (r *SolicitudDeAccionAlmacen) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *SolicitudDeAccionAlmacen) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ SolicitudDeAccionAlmacen) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ SolicitudDeAccionAlmacen) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ SolicitudDeAccionAlmacen) HintSize(int)                     { panic("Unsupported operation") }
func (_ SolicitudDeAccionAlmacen) Finalize()                        {}

func (_ SolicitudDeAccionAlmacen) AvroCRC64Fingerprint() []byte {
	return []byte(SolicitudDeAccionAlmacenAvroCRC64Fingerprint)
}

func (r SolicitudDeAccionAlmacen) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["IdTransaccion"], err = json.Marshal(r.IdTransaccion)
	if err != nil {
		return nil, err
	}
	output["ContratoDistribución"], err = json.Marshal(r.ContratoDistribución)
	if err != nil {
		return nil, err
	}
	output["Almacen"], err = json.Marshal(r.Almacen)
	if err != nil {
		return nil, err
	}
	output["Instancia"], err = json.Marshal(r.Instancia)
	if err != nil {
		return nil, err
	}
	output["EventoDeNegocio"], err = json.Marshal(r.EventoDeNegocio)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *SolicitudDeAccionAlmacen) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["IdTransaccion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IdTransaccion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IdTransaccion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ContratoDistribución"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ContratoDistribución); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ContratoDistribución")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Almacen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Almacen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Almacen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Instancia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Instancia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Instancia")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EventoDeNegocio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EventoDeNegocio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EventoDeNegocio")
	}
	return nil
}
