// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     WapTrasladoInternoDeMercaderiaSolicitadaV2.avsc
 */
package WapTrasladoInternoDeMercaderiaV2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SolicitudDeTraslado struct {
	NumeroOrdenExterna string `json:"NumeroOrdenExterna"`

	TipoDeMovimiento string `json:"TipoDeMovimiento"`

	Motivo string `json:"Motivo"`

	Almacen Almacen `json:"Almacen"`

	Articulo Articulo `json:"Articulo"`

	Propietario Propietario `json:"Propietario"`

	Acondicionamiento Acondicionamiento `json:"Acondicionamiento"`
}

const SolicitudDeTrasladoAvroCRC64Fingerprint = "\x1a\x9f\xa3:Y%bx"

func NewSolicitudDeTraslado() SolicitudDeTraslado {
	r := SolicitudDeTraslado{}
	r.Almacen = NewAlmacen()

	r.Articulo = NewArticulo()

	r.Propietario = NewPropietario()

	r.Acondicionamiento = NewAcondicionamiento()

	return r
}

func DeserializeSolicitudDeTraslado(r io.Reader) (SolicitudDeTraslado, error) {
	t := NewSolicitudDeTraslado()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSolicitudDeTrasladoFromSchema(r io.Reader, schema string) (SolicitudDeTraslado, error) {
	t := NewSolicitudDeTraslado()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSolicitudDeTraslado(r SolicitudDeTraslado, w io.Writer) error {
	var err error
	err = vm.WriteString(r.NumeroOrdenExterna, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.TipoDeMovimiento, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Motivo, w)
	if err != nil {
		return err
	}
	err = writeAlmacen(r.Almacen, w)
	if err != nil {
		return err
	}
	err = writeArticulo(r.Articulo, w)
	if err != nil {
		return err
	}
	err = writePropietario(r.Propietario, w)
	if err != nil {
		return err
	}
	err = writeAcondicionamiento(r.Acondicionamiento, w)
	if err != nil {
		return err
	}
	return err
}

func (r SolicitudDeTraslado) Serialize(w io.Writer) error {
	return writeSolicitudDeTraslado(r, w)
}

func (r SolicitudDeTraslado) Schema() string {
	return "{\"fields\":[{\"name\":\"NumeroOrdenExterna\",\"type\":\"string\"},{\"name\":\"TipoDeMovimiento\",\"type\":\"string\"},{\"name\":\"Motivo\",\"type\":\"string\"},{\"name\":\"Almacen\",\"type\":{\"fields\":[{\"name\":\"Destino\",\"type\":\"string\"},{\"name\":\"Origen\",\"type\":\"string\"}],\"name\":\"Almacen\",\"type\":\"record\"}},{\"name\":\"Articulo\",\"type\":{\"fields\":[{\"name\":\"Cantidad\",\"type\":\"float\"},{\"name\":\"CodigoDestino\",\"type\":\"string\"},{\"name\":\"CodigoOrigen\",\"type\":\"string\"},{\"default\":null,\"name\":\"LoteDeFabricante\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LoteSecundario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LPN\",\"type\":[\"null\",\"string\"]}],\"name\":\"Articulo\",\"type\":\"record\"}},{\"name\":\"Propietario\",\"type\":{\"fields\":[{\"name\":\"Destino\",\"type\":\"string\"},{\"name\":\"Origen\",\"type\":\"string\"}],\"name\":\"Propietario\",\"type\":\"record\"}},{\"name\":\"Acondicionamiento\",\"type\":{\"fields\":[{\"default\":null,\"name\":\"CodigoDeAconding\",\"type\":[\"null\",\"string\"]}],\"name\":\"Acondicionamiento\",\"type\":\"record\"}}],\"name\":\"Andreani.WapTrasladoInternoDeMercaderiaV2.Events.Record.SolicitudDeTraslado\",\"type\":\"record\"}"
}

func (r SolicitudDeTraslado) SchemaName() string {
	return "Andreani.WapTrasladoInternoDeMercaderiaV2.Events.Record.SolicitudDeTraslado"
}

func (_ SolicitudDeTraslado) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ SolicitudDeTraslado) SetInt(v int32)       { panic("Unsupported operation") }
func (_ SolicitudDeTraslado) SetLong(v int64)      { panic("Unsupported operation") }
func (_ SolicitudDeTraslado) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ SolicitudDeTraslado) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ SolicitudDeTraslado) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ SolicitudDeTraslado) SetString(v string)   { panic("Unsupported operation") }
func (_ SolicitudDeTraslado) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SolicitudDeTraslado) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.NumeroOrdenExterna}

		return w

	case 1:
		w := types.String{Target: &r.TipoDeMovimiento}

		return w

	case 2:
		w := types.String{Target: &r.Motivo}

		return w

	case 3:
		r.Almacen = NewAlmacen()

		w := types.Record{Target: &r.Almacen}

		return w

	case 4:
		r.Articulo = NewArticulo()

		w := types.Record{Target: &r.Articulo}

		return w

	case 5:
		r.Propietario = NewPropietario()

		w := types.Record{Target: &r.Propietario}

		return w

	case 6:
		r.Acondicionamiento = NewAcondicionamiento()

		w := types.Record{Target: &r.Acondicionamiento}

		return w

	}
	panic("Unknown field index")
}

func (r *SolicitudDeTraslado) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *SolicitudDeTraslado) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ SolicitudDeTraslado) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ SolicitudDeTraslado) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ SolicitudDeTraslado) HintSize(int)                     { panic("Unsupported operation") }
func (_ SolicitudDeTraslado) Finalize()                        {}

func (_ SolicitudDeTraslado) AvroCRC64Fingerprint() []byte {
	return []byte(SolicitudDeTrasladoAvroCRC64Fingerprint)
}

func (r SolicitudDeTraslado) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["NumeroOrdenExterna"], err = json.Marshal(r.NumeroOrdenExterna)
	if err != nil {
		return nil, err
	}
	output["TipoDeMovimiento"], err = json.Marshal(r.TipoDeMovimiento)
	if err != nil {
		return nil, err
	}
	output["Motivo"], err = json.Marshal(r.Motivo)
	if err != nil {
		return nil, err
	}
	output["Almacen"], err = json.Marshal(r.Almacen)
	if err != nil {
		return nil, err
	}
	output["Articulo"], err = json.Marshal(r.Articulo)
	if err != nil {
		return nil, err
	}
	output["Propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["Acondicionamiento"], err = json.Marshal(r.Acondicionamiento)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *SolicitudDeTraslado) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["NumeroOrdenExterna"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroOrdenExterna); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NumeroOrdenExterna")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoDeMovimiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoDeMovimiento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoDeMovimiento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Motivo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Motivo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Motivo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Almacen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Almacen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Almacen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Articulo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Articulo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Articulo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Propietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Acondicionamiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Acondicionamiento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Acondicionamiento")
	}
	return nil
}
