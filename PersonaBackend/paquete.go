// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Paquete.avsc
 */
package PersonaBackendEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Paquete struct {
	Id string `json:"Id"`

	TipoId string `json:"TipoId"`

	Tipo string `json:"Tipo"`

	Alto string `json:"Alto"`

	Ancho string `json:"Ancho"`

	Largo string `json:"Largo"`

	Peso string `json:"Peso"`

	ValorDeclarado int32 `json:"ValorDeclarado"`
}

const PaqueteAvroCRC64Fingerprint = "\r\xe0u\xbdk9U["

func NewPaquete() Paquete {
	r := Paquete{}
	return r
}

func DeserializePaquete(r io.Reader) (Paquete, error) {
	t := NewPaquete()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePaqueteFromSchema(r io.Reader, schema string) (Paquete, error) {
	t := NewPaquete()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePaquete(r Paquete, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.TipoId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Tipo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Alto, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Ancho, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Largo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Peso, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.ValorDeclarado, w)
	if err != nil {
		return err
	}
	return err
}

func (r Paquete) Serialize(w io.Writer) error {
	return writePaquete(r, w)
}

func (r Paquete) Schema() string {
	return "{\"fields\":[{\"name\":\"Id\",\"type\":\"string\"},{\"name\":\"TipoId\",\"type\":\"string\"},{\"name\":\"Tipo\",\"type\":\"string\"},{\"name\":\"Alto\",\"type\":\"string\"},{\"name\":\"Ancho\",\"type\":\"string\"},{\"name\":\"Largo\",\"type\":\"string\"},{\"name\":\"Peso\",\"type\":\"string\"},{\"name\":\"ValorDeclarado\",\"type\":\"int\"}],\"name\":\"Andreani.PersonaBackend.Events.Common.Paquete\",\"type\":\"record\"}"
}

func (r Paquete) SchemaName() string {
	return "Andreani.PersonaBackend.Events.Common.Paquete"
}

func (_ Paquete) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Paquete) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Paquete) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Paquete) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Paquete) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Paquete) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Paquete) SetString(v string)   { panic("Unsupported operation") }
func (_ Paquete) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Paquete) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.TipoId}

		return w

	case 2:
		w := types.String{Target: &r.Tipo}

		return w

	case 3:
		w := types.String{Target: &r.Alto}

		return w

	case 4:
		w := types.String{Target: &r.Ancho}

		return w

	case 5:
		w := types.String{Target: &r.Largo}

		return w

	case 6:
		w := types.String{Target: &r.Peso}

		return w

	case 7:
		w := types.Int{Target: &r.ValorDeclarado}

		return w

	}
	panic("Unknown field index")
}

func (r *Paquete) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Paquete) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Paquete) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Paquete) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Paquete) HintSize(int)                     { panic("Unsupported operation") }
func (_ Paquete) Finalize()                        {}

func (_ Paquete) AvroCRC64Fingerprint() []byte {
	return []byte(PaqueteAvroCRC64Fingerprint)
}

func (r Paquete) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["TipoId"], err = json.Marshal(r.TipoId)
	if err != nil {
		return nil, err
	}
	output["Tipo"], err = json.Marshal(r.Tipo)
	if err != nil {
		return nil, err
	}
	output["Alto"], err = json.Marshal(r.Alto)
	if err != nil {
		return nil, err
	}
	output["Ancho"], err = json.Marshal(r.Ancho)
	if err != nil {
		return nil, err
	}
	output["Largo"], err = json.Marshal(r.Largo)
	if err != nil {
		return nil, err
	}
	output["Peso"], err = json.Marshal(r.Peso)
	if err != nil {
		return nil, err
	}
	output["ValorDeclarado"], err = json.Marshal(r.ValorDeclarado)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Paquete) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TipoId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Tipo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Tipo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Tipo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Alto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Alto); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Alto")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Ancho"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ancho); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Ancho")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Largo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Largo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Largo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Peso"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Peso); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Peso")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValorDeclarado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValorDeclarado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ValorDeclarado")
	}
	return nil
}
