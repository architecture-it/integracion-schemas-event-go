// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EnviosEvent.avsc
 */
package PersonaBackendEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Cliente struct {
	CodigoAndreani string `json:"CodigoAndreani"`

	Nombre string `json:"Nombre"`

	Logo string `json:"Logo"`
}

const ClienteAvroCRC64Fingerprint = "+=\xe7\xd6\x16\xdf\"\xdb"

func NewCliente() Cliente {
	r := Cliente{}
	return r
}

func DeserializeCliente(r io.Reader) (Cliente, error) {
	t := NewCliente()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeClienteFromSchema(r io.Reader, schema string) (Cliente, error) {
	t := NewCliente()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCliente(r Cliente, w io.Writer) error {
	var err error
	err = vm.WriteString(r.CodigoAndreani, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Nombre, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Logo, w)
	if err != nil {
		return err
	}
	return err
}

func (r Cliente) Serialize(w io.Writer) error {
	return writeCliente(r, w)
}

func (r Cliente) Schema() string {
	return "{\"fields\":[{\"name\":\"CodigoAndreani\",\"type\":\"string\"},{\"name\":\"Nombre\",\"type\":\"string\"},{\"name\":\"Logo\",\"type\":\"string\"}],\"name\":\"Andreani.PersonaBackend.Events.Common.Cliente\",\"type\":\"record\"}"
}

func (r Cliente) SchemaName() string {
	return "Andreani.PersonaBackend.Events.Common.Cliente"
}

func (_ Cliente) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Cliente) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Cliente) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Cliente) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Cliente) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Cliente) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Cliente) SetString(v string)   { panic("Unsupported operation") }
func (_ Cliente) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Cliente) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.CodigoAndreani}

		return w

	case 1:
		w := types.String{Target: &r.Nombre}

		return w

	case 2:
		w := types.String{Target: &r.Logo}

		return w

	}
	panic("Unknown field index")
}

func (r *Cliente) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Cliente) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Cliente) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Cliente) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Cliente) HintSize(int)                     { panic("Unsupported operation") }
func (_ Cliente) Finalize()                        {}

func (_ Cliente) AvroCRC64Fingerprint() []byte {
	return []byte(ClienteAvroCRC64Fingerprint)
}

func (r Cliente) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CodigoAndreani"], err = json.Marshal(r.CodigoAndreani)
	if err != nil {
		return nil, err
	}
	output["Nombre"], err = json.Marshal(r.Nombre)
	if err != nil {
		return nil, err
	}
	output["Logo"], err = json.Marshal(r.Logo)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Cliente) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CodigoAndreani"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoAndreani); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoAndreani")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Nombre"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nombre); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Nombre")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Logo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Logo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Logo")
	}
	return nil
}
