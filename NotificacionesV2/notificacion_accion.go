// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     NotificacionAccion.avsc
 */
package NotificacionesV2Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type NotificacionAccion struct {
	Tipo *UnionNullString `json:"tipo"`

	Instancia *UnionNullString `json:"instancia"`

	Almacen *UnionNullString `json:"almacen"`

	Propietario *UnionNullString `json:"propietario"`

	NroExterno *UnionNullString `json:"nroExterno"`

	Accion *UnionNullString `json:"accion"`

	Codigo *UnionNullString `json:"codigo"`

	Detalle *UnionNullString `json:"detalle"`
}

const NotificacionAccionAvroCRC64Fingerprint = "\xea\xdd“è\x8c\re\xda"

func NewNotificacionAccion() NotificacionAccion {
	r := NotificacionAccion{}
	r.Tipo = nil
	r.Instancia = nil
	r.Almacen = nil
	r.Propietario = nil
	r.NroExterno = nil
	r.Accion = nil
	r.Codigo = nil
	r.Detalle = nil
	return r
}

func DeserializeNotificacionAccion(r io.Reader) (NotificacionAccion, error) {
	t := NewNotificacionAccion()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeNotificacionAccionFromSchema(r io.Reader, schema string) (NotificacionAccion, error) {
	t := NewNotificacionAccion()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeNotificacionAccion(r NotificacionAccion, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Tipo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Instancia, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Almacen, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Propietario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NroExterno, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Accion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Codigo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Detalle, w)
	if err != nil {
		return err
	}
	return err
}

func (r NotificacionAccion) Serialize(w io.Writer) error {
	return writeNotificacionAccion(r, w)
}

func (r NotificacionAccion) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"tipo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"instancia\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"almacen\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"propietario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"nroExterno\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"accion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"codigo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"detalle\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.NotificacionesV2.Events.Record.NotificacionAccion\",\"type\":\"record\"}"
}

func (r NotificacionAccion) SchemaName() string {
	return "Andreani.NotificacionesV2.Events.Record.NotificacionAccion"
}

func (_ NotificacionAccion) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ NotificacionAccion) SetInt(v int32)       { panic("Unsupported operation") }
func (_ NotificacionAccion) SetLong(v int64)      { panic("Unsupported operation") }
func (_ NotificacionAccion) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ NotificacionAccion) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ NotificacionAccion) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ NotificacionAccion) SetString(v string)   { panic("Unsupported operation") }
func (_ NotificacionAccion) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *NotificacionAccion) Get(i int) types.Field {
	switch i {
	case 0:
		r.Tipo = NewUnionNullString()

		return r.Tipo
	case 1:
		r.Instancia = NewUnionNullString()

		return r.Instancia
	case 2:
		r.Almacen = NewUnionNullString()

		return r.Almacen
	case 3:
		r.Propietario = NewUnionNullString()

		return r.Propietario
	case 4:
		r.NroExterno = NewUnionNullString()

		return r.NroExterno
	case 5:
		r.Accion = NewUnionNullString()

		return r.Accion
	case 6:
		r.Codigo = NewUnionNullString()

		return r.Codigo
	case 7:
		r.Detalle = NewUnionNullString()

		return r.Detalle
	}
	panic("Unknown field index")
}

func (r *NotificacionAccion) SetDefault(i int) {
	switch i {
	case 0:
		r.Tipo = nil
		return
	case 1:
		r.Instancia = nil
		return
	case 2:
		r.Almacen = nil
		return
	case 3:
		r.Propietario = nil
		return
	case 4:
		r.NroExterno = nil
		return
	case 5:
		r.Accion = nil
		return
	case 6:
		r.Codigo = nil
		return
	case 7:
		r.Detalle = nil
		return
	}
	panic("Unknown field index")
}

func (r *NotificacionAccion) NullField(i int) {
	switch i {
	case 0:
		r.Tipo = nil
		return
	case 1:
		r.Instancia = nil
		return
	case 2:
		r.Almacen = nil
		return
	case 3:
		r.Propietario = nil
		return
	case 4:
		r.NroExterno = nil
		return
	case 5:
		r.Accion = nil
		return
	case 6:
		r.Codigo = nil
		return
	case 7:
		r.Detalle = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ NotificacionAccion) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ NotificacionAccion) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ NotificacionAccion) HintSize(int)                     { panic("Unsupported operation") }
func (_ NotificacionAccion) Finalize()                        {}

func (_ NotificacionAccion) AvroCRC64Fingerprint() []byte {
	return []byte(NotificacionAccionAvroCRC64Fingerprint)
}

func (r NotificacionAccion) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["tipo"], err = json.Marshal(r.Tipo)
	if err != nil {
		return nil, err
	}
	output["instancia"], err = json.Marshal(r.Instancia)
	if err != nil {
		return nil, err
	}
	output["almacen"], err = json.Marshal(r.Almacen)
	if err != nil {
		return nil, err
	}
	output["propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["nroExterno"], err = json.Marshal(r.NroExterno)
	if err != nil {
		return nil, err
	}
	output["accion"], err = json.Marshal(r.Accion)
	if err != nil {
		return nil, err
	}
	output["codigo"], err = json.Marshal(r.Codigo)
	if err != nil {
		return nil, err
	}
	output["detalle"], err = json.Marshal(r.Detalle)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *NotificacionAccion) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["tipo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Tipo); err != nil {
			return err
		}
	} else {
		r.Tipo = NewUnionNullString()

		r.Tipo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["instancia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Instancia); err != nil {
			return err
		}
	} else {
		r.Instancia = NewUnionNullString()

		r.Instancia = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["almacen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Almacen); err != nil {
			return err
		}
	} else {
		r.Almacen = NewUnionNullString()

		r.Almacen = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		r.Propietario = NewUnionNullString()

		r.Propietario = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["nroExterno"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NroExterno); err != nil {
			return err
		}
	} else {
		r.NroExterno = NewUnionNullString()

		r.NroExterno = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["accion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Accion); err != nil {
			return err
		}
	} else {
		r.Accion = NewUnionNullString()

		r.Accion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["codigo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Codigo); err != nil {
			return err
		}
	} else {
		r.Codigo = NewUnionNullString()

		r.Codigo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["detalle"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Detalle); err != nil {
			return err
		}
	} else {
		r.Detalle = NewUnionNullString()

		r.Detalle = nil
	}
	return nil
}
