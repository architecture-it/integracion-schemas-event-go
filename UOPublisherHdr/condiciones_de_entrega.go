// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     UOHdrCreada.avsc
 */
package UOPublisherHdrEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CondicionesDeEntrega struct {
	CondicionDeEntregaId string `json:"CondicionDeEntregaId"`

	Descripcion string `json:"Descripcion"`
}

const CondicionesDeEntregaAvroCRC64Fingerprint = "\x97\xcc:◊ù\x8c\x95X"

func NewCondicionesDeEntrega() CondicionesDeEntrega {
	r := CondicionesDeEntrega{}
	return r
}

func DeserializeCondicionesDeEntrega(r io.Reader) (CondicionesDeEntrega, error) {
	t := NewCondicionesDeEntrega()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCondicionesDeEntregaFromSchema(r io.Reader, schema string) (CondicionesDeEntrega, error) {
	t := NewCondicionesDeEntrega()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCondicionesDeEntrega(r CondicionesDeEntrega, w io.Writer) error {
	var err error
	err = vm.WriteString(r.CondicionDeEntregaId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Descripcion, w)
	if err != nil {
		return err
	}
	return err
}

func (r CondicionesDeEntrega) Serialize(w io.Writer) error {
	return writeCondicionesDeEntrega(r, w)
}

func (r CondicionesDeEntrega) Schema() string {
	return "{\"fields\":[{\"name\":\"CondicionDeEntregaId\",\"type\":\"string\"},{\"name\":\"Descripcion\",\"type\":\"string\"}],\"name\":\"Andreani.UOPublisherHdr.Events.Common.CondicionesDeEntrega\",\"type\":\"record\"}"
}

func (r CondicionesDeEntrega) SchemaName() string {
	return "Andreani.UOPublisherHdr.Events.Common.CondicionesDeEntrega"
}

func (_ CondicionesDeEntrega) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CondicionesDeEntrega) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CondicionesDeEntrega) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CondicionesDeEntrega) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CondicionesDeEntrega) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CondicionesDeEntrega) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CondicionesDeEntrega) SetString(v string)   { panic("Unsupported operation") }
func (_ CondicionesDeEntrega) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CondicionesDeEntrega) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.CondicionDeEntregaId}

		return w

	case 1:
		w := types.String{Target: &r.Descripcion}

		return w

	}
	panic("Unknown field index")
}

func (r *CondicionesDeEntrega) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *CondicionesDeEntrega) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ CondicionesDeEntrega) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CondicionesDeEntrega) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CondicionesDeEntrega) HintSize(int)                     { panic("Unsupported operation") }
func (_ CondicionesDeEntrega) Finalize()                        {}

func (_ CondicionesDeEntrega) AvroCRC64Fingerprint() []byte {
	return []byte(CondicionesDeEntregaAvroCRC64Fingerprint)
}

func (r CondicionesDeEntrega) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CondicionDeEntregaId"], err = json.Marshal(r.CondicionDeEntregaId)
	if err != nil {
		return nil, err
	}
	output["Descripcion"], err = json.Marshal(r.Descripcion)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CondicionesDeEntrega) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CondicionDeEntregaId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CondicionDeEntregaId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CondicionDeEntregaId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Descripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Descripcion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Descripcion")
	}
	return nil
}
