// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     UOHdrCreada.avsc
 */
package UOPublisherHdrEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type RetiroDeValor struct {
	Monto float64 `json:"Monto"`

	PagoExacto bool `json:"PagoExacto"`
}

const RetiroDeValorAvroCRC64Fingerprint = "\xf2.\xc3#X\x1e\\\xd0"

func NewRetiroDeValor() RetiroDeValor {
	r := RetiroDeValor{}
	return r
}

func DeserializeRetiroDeValor(r io.Reader) (RetiroDeValor, error) {
	t := NewRetiroDeValor()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeRetiroDeValorFromSchema(r io.Reader, schema string) (RetiroDeValor, error) {
	t := NewRetiroDeValor()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeRetiroDeValor(r RetiroDeValor, w io.Writer) error {
	var err error
	err = vm.WriteDouble(r.Monto, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.PagoExacto, w)
	if err != nil {
		return err
	}
	return err
}

func (r RetiroDeValor) Serialize(w io.Writer) error {
	return writeRetiroDeValor(r, w)
}

func (r RetiroDeValor) Schema() string {
	return "{\"fields\":[{\"name\":\"Monto\",\"type\":\"double\"},{\"name\":\"PagoExacto\",\"type\":\"boolean\"}],\"name\":\"Andreani.UOPublisherHdr.Events.Common.RetiroDeValor\",\"type\":\"record\"}"
}

func (r RetiroDeValor) SchemaName() string {
	return "Andreani.UOPublisherHdr.Events.Common.RetiroDeValor"
}

func (_ RetiroDeValor) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ RetiroDeValor) SetInt(v int32)       { panic("Unsupported operation") }
func (_ RetiroDeValor) SetLong(v int64)      { panic("Unsupported operation") }
func (_ RetiroDeValor) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ RetiroDeValor) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ RetiroDeValor) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ RetiroDeValor) SetString(v string)   { panic("Unsupported operation") }
func (_ RetiroDeValor) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *RetiroDeValor) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Double{Target: &r.Monto}

		return w

	case 1:
		w := types.Boolean{Target: &r.PagoExacto}

		return w

	}
	panic("Unknown field index")
}

func (r *RetiroDeValor) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *RetiroDeValor) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ RetiroDeValor) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ RetiroDeValor) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ RetiroDeValor) HintSize(int)                     { panic("Unsupported operation") }
func (_ RetiroDeValor) Finalize()                        {}

func (_ RetiroDeValor) AvroCRC64Fingerprint() []byte {
	return []byte(RetiroDeValorAvroCRC64Fingerprint)
}

func (r RetiroDeValor) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Monto"], err = json.Marshal(r.Monto)
	if err != nil {
		return nil, err
	}
	output["PagoExacto"], err = json.Marshal(r.PagoExacto)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *RetiroDeValor) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Monto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Monto); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Monto")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PagoExacto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PagoExacto); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PagoExacto")
	}
	return nil
}
