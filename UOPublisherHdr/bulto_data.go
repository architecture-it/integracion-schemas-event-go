// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     UOHdrCreada.avsc
 */
package UOPublisherHdrEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type BultoData struct {
	Numero int32 `json:"Numero"`

	Codigos []string `json:"Codigos"`
}

const BultoDataAvroCRC64Fingerprint = "\x95\xbb A\xec\xda@\xc6"

func NewBultoData() BultoData {
	r := BultoData{}
	r.Codigos = make([]string, 0)

	return r
}

func DeserializeBultoData(r io.Reader) (BultoData, error) {
	t := NewBultoData()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeBultoDataFromSchema(r io.Reader, schema string) (BultoData, error) {
	t := NewBultoData()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeBultoData(r BultoData, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Numero, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.Codigos, w)
	if err != nil {
		return err
	}
	return err
}

func (r BultoData) Serialize(w io.Writer) error {
	return writeBultoData(r, w)
}

func (r BultoData) Schema() string {
	return "{\"fields\":[{\"name\":\"Numero\",\"type\":\"int\"},{\"name\":\"Codigos\",\"type\":{\"items\":\"string\",\"type\":\"array\"}}],\"name\":\"Andreani.UOPublisherHdr.Events.Common.BultoData\",\"type\":\"record\"}"
}

func (r BultoData) SchemaName() string {
	return "Andreani.UOPublisherHdr.Events.Common.BultoData"
}

func (_ BultoData) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ BultoData) SetInt(v int32)       { panic("Unsupported operation") }
func (_ BultoData) SetLong(v int64)      { panic("Unsupported operation") }
func (_ BultoData) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ BultoData) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ BultoData) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ BultoData) SetString(v string)   { panic("Unsupported operation") }
func (_ BultoData) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *BultoData) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.Numero}

		return w

	case 1:
		r.Codigos = make([]string, 0)

		w := ArrayStringWrapper{Target: &r.Codigos}

		return w

	}
	panic("Unknown field index")
}

func (r *BultoData) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *BultoData) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ BultoData) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ BultoData) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ BultoData) HintSize(int)                     { panic("Unsupported operation") }
func (_ BultoData) Finalize()                        {}

func (_ BultoData) AvroCRC64Fingerprint() []byte {
	return []byte(BultoDataAvroCRC64Fingerprint)
}

func (r BultoData) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Numero"], err = json.Marshal(r.Numero)
	if err != nil {
		return nil, err
	}
	output["Codigos"], err = json.Marshal(r.Codigos)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *BultoData) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Numero"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Numero); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Numero")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Codigos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Codigos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Codigos")
	}
	return nil
}
