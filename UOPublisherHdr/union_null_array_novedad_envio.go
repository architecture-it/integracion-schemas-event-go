// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     UOHdrClosureDistribution.avsc
 */
package UOPublisherHdrEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayNovedadEnvioTypeEnum int

const (
	UnionNullArrayNovedadEnvioTypeEnumArrayNovedadEnvio UnionNullArrayNovedadEnvioTypeEnum = 1
)

type UnionNullArrayNovedadEnvio struct {
	Null              *types.NullVal
	ArrayNovedadEnvio []NovedadEnvio
	UnionType         UnionNullArrayNovedadEnvioTypeEnum
}

func writeUnionNullArrayNovedadEnvio(r *UnionNullArrayNovedadEnvio, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayNovedadEnvioTypeEnumArrayNovedadEnvio:
		return writeArrayNovedadEnvio(r.ArrayNovedadEnvio, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayNovedadEnvio")
}

func NewUnionNullArrayNovedadEnvio() *UnionNullArrayNovedadEnvio {
	return &UnionNullArrayNovedadEnvio{}
}

func (r *UnionNullArrayNovedadEnvio) Serialize(w io.Writer) error {
	return writeUnionNullArrayNovedadEnvio(r, w)
}

func DeserializeUnionNullArrayNovedadEnvio(r io.Reader) (*UnionNullArrayNovedadEnvio, error) {
	t := NewUnionNullArrayNovedadEnvio()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayNovedadEnvioFromSchema(r io.Reader, schema string) (*UnionNullArrayNovedadEnvio, error) {
	t := NewUnionNullArrayNovedadEnvio()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayNovedadEnvio) Schema() string {
	return "[\"null\",{\"items\":{\"fields\":[{\"name\":\"NumeroDeEnvio\",\"type\":\"string\"},{\"name\":\"Motivo\",\"type\":\"string\"},{\"name\":\"SubMotivo\",\"type\":\"string\"},{\"name\":\"Observaciones\",\"type\":\"string\"}],\"name\":\"NovedadEnvio\",\"namespace\":\"Andreani.UOPublisherHdr.Events.Common\",\"type\":\"record\"},\"type\":\"array\"}]"
}

func (_ *UnionNullArrayNovedadEnvio) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullArrayNovedadEnvio) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullArrayNovedadEnvio) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullArrayNovedadEnvio) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullArrayNovedadEnvio) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullArrayNovedadEnvio) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullArrayNovedadEnvio) SetLong(v int64) {

	r.UnionType = (UnionNullArrayNovedadEnvioTypeEnum)(v)
}

func (r *UnionNullArrayNovedadEnvio) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayNovedadEnvio = make([]NovedadEnvio, 0)
		return &ArrayNovedadEnvioWrapper{Target: (&r.ArrayNovedadEnvio)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayNovedadEnvio) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullArrayNovedadEnvio) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullArrayNovedadEnvio) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullArrayNovedadEnvio) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayNovedadEnvio) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *UnionNullArrayNovedadEnvio) Finalize()                {}

func (r *UnionNullArrayNovedadEnvio) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayNovedadEnvioTypeEnumArrayNovedadEnvio:
		return json.Marshal(map[string]interface{}{"array": r.ArrayNovedadEnvio})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayNovedadEnvio")
}

func (r *UnionNullArrayNovedadEnvio) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayNovedadEnvio)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayNovedadEnvio")
}
