// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     GestionEntregaReintento.avsc
 */
package AndiExternoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type GestionEntregaReintento struct {
	NroEnvio string `json:"NroEnvio"`

	DiasInactividad int32 `json:"DiasInactividad"`
}

const GestionEntregaReintentoAvroCRC64Fingerprint = "OD3\x7f\xef\xd2\x05d"

func NewGestionEntregaReintento() GestionEntregaReintento {
	r := GestionEntregaReintento{}
	return r
}

func DeserializeGestionEntregaReintento(r io.Reader) (GestionEntregaReintento, error) {
	t := NewGestionEntregaReintento()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeGestionEntregaReintentoFromSchema(r io.Reader, schema string) (GestionEntregaReintento, error) {
	t := NewGestionEntregaReintento()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeGestionEntregaReintento(r GestionEntregaReintento, w io.Writer) error {
	var err error
	err = vm.WriteString(r.NroEnvio, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.DiasInactividad, w)
	if err != nil {
		return err
	}
	return err
}

func (r GestionEntregaReintento) Serialize(w io.Writer) error {
	return writeGestionEntregaReintento(r, w)
}

func (r GestionEntregaReintento) Schema() string {
	return "{\"fields\":[{\"name\":\"NroEnvio\",\"type\":\"string\"},{\"name\":\"DiasInactividad\",\"type\":\"int\"}],\"name\":\"Andreani.AndiExterno.Events.Record.GestionEntregaReintento\",\"type\":\"record\"}"
}

func (r GestionEntregaReintento) SchemaName() string {
	return "Andreani.AndiExterno.Events.Record.GestionEntregaReintento"
}

func (_ GestionEntregaReintento) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ GestionEntregaReintento) SetInt(v int32)       { panic("Unsupported operation") }
func (_ GestionEntregaReintento) SetLong(v int64)      { panic("Unsupported operation") }
func (_ GestionEntregaReintento) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ GestionEntregaReintento) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ GestionEntregaReintento) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ GestionEntregaReintento) SetString(v string)   { panic("Unsupported operation") }
func (_ GestionEntregaReintento) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *GestionEntregaReintento) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.NroEnvio}

		return w

	case 1:
		w := types.Int{Target: &r.DiasInactividad}

		return w

	}
	panic("Unknown field index")
}

func (r *GestionEntregaReintento) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *GestionEntregaReintento) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ GestionEntregaReintento) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ GestionEntregaReintento) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ GestionEntregaReintento) HintSize(int)                     { panic("Unsupported operation") }
func (_ GestionEntregaReintento) Finalize()                        {}

func (_ GestionEntregaReintento) AvroCRC64Fingerprint() []byte {
	return []byte(GestionEntregaReintentoAvroCRC64Fingerprint)
}

func (r GestionEntregaReintento) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["NroEnvio"], err = json.Marshal(r.NroEnvio)
	if err != nil {
		return nil, err
	}
	output["DiasInactividad"], err = json.Marshal(r.DiasInactividad)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *GestionEntregaReintento) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["NroEnvio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NroEnvio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NroEnvio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DiasInactividad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DiasInactividad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DiasInactividad")
	}
	return nil
}
