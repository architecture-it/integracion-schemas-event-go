// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ImagenValida.avsc
 */
package EleccionesOcrScannerEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ImagenValida struct {
	Certificado string `json:"certificado"`

	Mesa string `json:"mesa"`

	Imagen string `json:"imagen"`

	Origen string `json:"origen"`

	EleccionId int32 `json:"eleccionId"`
}

const ImagenValidaAvroCRC64Fingerprint = "-\xf1e\x9f\x8d\xd2;\x82"

func NewImagenValida() ImagenValida {
	r := ImagenValida{}
	return r
}

func DeserializeImagenValida(r io.Reader) (ImagenValida, error) {
	t := NewImagenValida()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeImagenValidaFromSchema(r io.Reader, schema string) (ImagenValida, error) {
	t := NewImagenValida()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeImagenValida(r ImagenValida, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Certificado, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Mesa, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Imagen, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Origen, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.EleccionId, w)
	if err != nil {
		return err
	}
	return err
}

func (r ImagenValida) Serialize(w io.Writer) error {
	return writeImagenValida(r, w)
}

func (r ImagenValida) Schema() string {
	return "{\"fields\":[{\"name\":\"certificado\",\"type\":\"string\"},{\"name\":\"mesa\",\"type\":\"string\"},{\"name\":\"imagen\",\"type\":\"string\"},{\"name\":\"origen\",\"type\":\"string\"},{\"name\":\"eleccionId\",\"type\":\"int\"}],\"name\":\"Andreani.EleccionesOcrScanner.Events.Record.ImagenValida\",\"type\":\"record\"}"
}

func (r ImagenValida) SchemaName() string {
	return "Andreani.EleccionesOcrScanner.Events.Record.ImagenValida"
}

func (_ ImagenValida) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ImagenValida) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ImagenValida) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ImagenValida) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ImagenValida) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ImagenValida) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ImagenValida) SetString(v string)   { panic("Unsupported operation") }
func (_ ImagenValida) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ImagenValida) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Certificado}

		return w

	case 1:
		w := types.String{Target: &r.Mesa}

		return w

	case 2:
		w := types.String{Target: &r.Imagen}

		return w

	case 3:
		w := types.String{Target: &r.Origen}

		return w

	case 4:
		w := types.Int{Target: &r.EleccionId}

		return w

	}
	panic("Unknown field index")
}

func (r *ImagenValida) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ImagenValida) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ ImagenValida) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ImagenValida) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ImagenValida) HintSize(int)                     { panic("Unsupported operation") }
func (_ ImagenValida) Finalize()                        {}

func (_ ImagenValida) AvroCRC64Fingerprint() []byte {
	return []byte(ImagenValidaAvroCRC64Fingerprint)
}

func (r ImagenValida) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["certificado"], err = json.Marshal(r.Certificado)
	if err != nil {
		return nil, err
	}
	output["mesa"], err = json.Marshal(r.Mesa)
	if err != nil {
		return nil, err
	}
	output["imagen"], err = json.Marshal(r.Imagen)
	if err != nil {
		return nil, err
	}
	output["origen"], err = json.Marshal(r.Origen)
	if err != nil {
		return nil, err
	}
	output["eleccionId"], err = json.Marshal(r.EleccionId)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ImagenValida) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["certificado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Certificado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for certificado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["mesa"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Mesa); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for mesa")
	}
	val = func() json.RawMessage {
		if v, ok := fields["imagen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Imagen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for imagen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["origen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Origen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for origen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["eleccionId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EleccionId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for eleccionId")
	}
	return nil
}
