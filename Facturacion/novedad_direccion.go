// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     NovedadDireccion.avsc
 */
package FacturacionEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type NovedadDireccion struct {
	CodigoDeDireccion int64 `json:"CodigoDeDireccion"`

	Fecha int64 `json:"Fecha"`

	DomicilioReal DatosDomicilio `json:"DomicilioReal"`
}

const NovedadDireccionAvroCRC64Fingerprint = "ма\xaa\xd3\xc8\x14F/"

func NewNovedadDireccion() NovedadDireccion {
	r := NovedadDireccion{}
	r.DomicilioReal = NewDatosDomicilio()

	return r
}

func DeserializeNovedadDireccion(r io.Reader) (NovedadDireccion, error) {
	t := NewNovedadDireccion()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeNovedadDireccionFromSchema(r io.Reader, schema string) (NovedadDireccion, error) {
	t := NewNovedadDireccion()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeNovedadDireccion(r NovedadDireccion, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.CodigoDeDireccion, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Fecha, w)
	if err != nil {
		return err
	}
	err = writeDatosDomicilio(r.DomicilioReal, w)
	if err != nil {
		return err
	}
	return err
}

func (r NovedadDireccion) Serialize(w io.Writer) error {
	return writeNovedadDireccion(r, w)
}

func (r NovedadDireccion) Schema() string {
	return "{\"fields\":[{\"name\":\"CodigoDeDireccion\",\"type\":\"long\"},{\"name\":\"Fecha\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"DomicilioReal\",\"type\":{\"fields\":[{\"name\":\"AbreviaturaProvincia\",\"type\":\"string\"},{\"name\":\"Calle\",\"type\":\"string\"},{\"name\":\"CodigoCiudad\",\"type\":\"string\"},{\"name\":\"CodigoPostal\",\"type\":\"int\"},{\"name\":\"NombreProvincia\",\"type\":\"string\"},{\"name\":\"Numero\",\"type\":\"int\"}],\"name\":\"DatosDomicilio\",\"namespace\":\"Andreani.Facturacion.Events.Common\",\"type\":\"record\"}}],\"name\":\"Andreani.Facturacion.Events.Record.NovedadDireccion\",\"type\":\"record\"}"
}

func (r NovedadDireccion) SchemaName() string {
	return "Andreani.Facturacion.Events.Record.NovedadDireccion"
}

func (_ NovedadDireccion) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ NovedadDireccion) SetInt(v int32)       { panic("Unsupported operation") }
func (_ NovedadDireccion) SetLong(v int64)      { panic("Unsupported operation") }
func (_ NovedadDireccion) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ NovedadDireccion) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ NovedadDireccion) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ NovedadDireccion) SetString(v string)   { panic("Unsupported operation") }
func (_ NovedadDireccion) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *NovedadDireccion) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Long{Target: &r.CodigoDeDireccion}

		return w

	case 1:
		w := types.Long{Target: &r.Fecha}

		return w

	case 2:
		r.DomicilioReal = NewDatosDomicilio()

		w := types.Record{Target: &r.DomicilioReal}

		return w

	}
	panic("Unknown field index")
}

func (r *NovedadDireccion) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *NovedadDireccion) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ NovedadDireccion) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ NovedadDireccion) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ NovedadDireccion) HintSize(int)                     { panic("Unsupported operation") }
func (_ NovedadDireccion) Finalize()                        {}

func (_ NovedadDireccion) AvroCRC64Fingerprint() []byte {
	return []byte(NovedadDireccionAvroCRC64Fingerprint)
}

func (r NovedadDireccion) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CodigoDeDireccion"], err = json.Marshal(r.CodigoDeDireccion)
	if err != nil {
		return nil, err
	}
	output["Fecha"], err = json.Marshal(r.Fecha)
	if err != nil {
		return nil, err
	}
	output["DomicilioReal"], err = json.Marshal(r.DomicilioReal)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *NovedadDireccion) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CodigoDeDireccion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoDeDireccion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoDeDireccion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Fecha"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Fecha); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Fecha")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DomicilioReal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DomicilioReal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DomicilioReal")
	}
	return nil
}
