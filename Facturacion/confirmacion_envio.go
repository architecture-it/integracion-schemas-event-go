// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ConfirmacionEnvio.avsc
 */
package FacturacionEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ConfirmacionEnvio struct {
	Codigo string `json:"Codigo"`

	Mensaje *UnionNullString `json:"Mensaje"`
}

const ConfirmacionEnvioAvroCRC64Fingerprint = "\xc1\xdamNO\xda\xd4\xec"

func NewConfirmacionEnvio() ConfirmacionEnvio {
	r := ConfirmacionEnvio{}
	r.Mensaje = nil
	return r
}

func DeserializeConfirmacionEnvio(r io.Reader) (ConfirmacionEnvio, error) {
	t := NewConfirmacionEnvio()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeConfirmacionEnvioFromSchema(r io.Reader, schema string) (ConfirmacionEnvio, error) {
	t := NewConfirmacionEnvio()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeConfirmacionEnvio(r ConfirmacionEnvio, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Codigo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Mensaje, w)
	if err != nil {
		return err
	}
	return err
}

func (r ConfirmacionEnvio) Serialize(w io.Writer) error {
	return writeConfirmacionEnvio(r, w)
}

func (r ConfirmacionEnvio) Schema() string {
	return "{\"fields\":[{\"name\":\"Codigo\",\"type\":\"string\"},{\"default\":null,\"name\":\"Mensaje\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.Facturacion.Events.Record.ConfirmacionEnvio\",\"type\":\"record\"}"
}

func (r ConfirmacionEnvio) SchemaName() string {
	return "Andreani.Facturacion.Events.Record.ConfirmacionEnvio"
}

func (_ ConfirmacionEnvio) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ConfirmacionEnvio) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ConfirmacionEnvio) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ConfirmacionEnvio) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ConfirmacionEnvio) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ConfirmacionEnvio) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ConfirmacionEnvio) SetString(v string)   { panic("Unsupported operation") }
func (_ ConfirmacionEnvio) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ConfirmacionEnvio) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Codigo}

		return w

	case 1:
		r.Mensaje = NewUnionNullString()

		return r.Mensaje
	}
	panic("Unknown field index")
}

func (r *ConfirmacionEnvio) SetDefault(i int) {
	switch i {
	case 1:
		r.Mensaje = nil
		return
	}
	panic("Unknown field index")
}

func (r *ConfirmacionEnvio) NullField(i int) {
	switch i {
	case 1:
		r.Mensaje = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ConfirmacionEnvio) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ConfirmacionEnvio) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ConfirmacionEnvio) HintSize(int)                     { panic("Unsupported operation") }
func (_ ConfirmacionEnvio) Finalize()                        {}

func (_ ConfirmacionEnvio) AvroCRC64Fingerprint() []byte {
	return []byte(ConfirmacionEnvioAvroCRC64Fingerprint)
}

func (r ConfirmacionEnvio) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Codigo"], err = json.Marshal(r.Codigo)
	if err != nil {
		return nil, err
	}
	output["Mensaje"], err = json.Marshal(r.Mensaje)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ConfirmacionEnvio) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Codigo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Codigo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Codigo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Mensaje"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Mensaje); err != nil {
			return err
		}
	} else {
		r.Mensaje = NewUnionNullString()

		r.Mensaje = nil
	}
	return nil
}
