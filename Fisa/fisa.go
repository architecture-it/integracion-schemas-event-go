// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     FisaEvent.avsc
 */
package FisaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Fisa struct {
	HoraInicio int64 `json:"HoraInicio"`

	HoraFin int64 `json:"HoraFin"`

	Tipo string `json:"Tipo"`

	Estado string `json:"Estado"`

	Descripcion *UnionNullString `json:"Descripcion"`

	CantidadAProcesar *UnionNullInt `json:"CantidadAProcesar"`
}

const FisaAvroCRC64Fingerprint = "^Q\xf5|\xfe\xe1\xc9{"

func NewFisa() Fisa {
	r := Fisa{}
	r.Descripcion = nil
	r.CantidadAProcesar = nil
	return r
}

func DeserializeFisa(r io.Reader) (Fisa, error) {
	t := NewFisa()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeFisaFromSchema(r io.Reader, schema string) (Fisa, error) {
	t := NewFisa()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeFisa(r Fisa, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.HoraInicio, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.HoraFin, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Tipo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Estado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Descripcion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.CantidadAProcesar, w)
	if err != nil {
		return err
	}
	return err
}

func (r Fisa) Serialize(w io.Writer) error {
	return writeFisa(r, w)
}

func (r Fisa) Schema() string {
	return "{\"fields\":[{\"name\":\"HoraInicio\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"HoraFin\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"Tipo\",\"type\":\"string\"},{\"name\":\"Estado\",\"type\":\"string\"},{\"default\":null,\"name\":\"Descripcion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CantidadAProcesar\",\"type\":[\"null\",\"int\"]}],\"name\":\"Andreani.Fisa.Events.Common.Fisa\",\"type\":\"record\"}"
}

func (r Fisa) SchemaName() string {
	return "Andreani.Fisa.Events.Common.Fisa"
}

func (_ Fisa) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Fisa) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Fisa) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Fisa) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Fisa) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Fisa) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Fisa) SetString(v string)   { panic("Unsupported operation") }
func (_ Fisa) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Fisa) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Long{Target: &r.HoraInicio}

		return w

	case 1:
		w := types.Long{Target: &r.HoraFin}

		return w

	case 2:
		w := types.String{Target: &r.Tipo}

		return w

	case 3:
		w := types.String{Target: &r.Estado}

		return w

	case 4:
		r.Descripcion = NewUnionNullString()

		return r.Descripcion
	case 5:
		r.CantidadAProcesar = NewUnionNullInt()

		return r.CantidadAProcesar
	}
	panic("Unknown field index")
}

func (r *Fisa) SetDefault(i int) {
	switch i {
	case 4:
		r.Descripcion = nil
		return
	case 5:
		r.CantidadAProcesar = nil
		return
	}
	panic("Unknown field index")
}

func (r *Fisa) NullField(i int) {
	switch i {
	case 4:
		r.Descripcion = nil
		return
	case 5:
		r.CantidadAProcesar = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Fisa) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Fisa) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Fisa) HintSize(int)                     { panic("Unsupported operation") }
func (_ Fisa) Finalize()                        {}

func (_ Fisa) AvroCRC64Fingerprint() []byte {
	return []byte(FisaAvroCRC64Fingerprint)
}

func (r Fisa) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["HoraInicio"], err = json.Marshal(r.HoraInicio)
	if err != nil {
		return nil, err
	}
	output["HoraFin"], err = json.Marshal(r.HoraFin)
	if err != nil {
		return nil, err
	}
	output["Tipo"], err = json.Marshal(r.Tipo)
	if err != nil {
		return nil, err
	}
	output["Estado"], err = json.Marshal(r.Estado)
	if err != nil {
		return nil, err
	}
	output["Descripcion"], err = json.Marshal(r.Descripcion)
	if err != nil {
		return nil, err
	}
	output["CantidadAProcesar"], err = json.Marshal(r.CantidadAProcesar)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Fisa) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["HoraInicio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HoraInicio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for HoraInicio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["HoraFin"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HoraFin); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for HoraFin")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Tipo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Tipo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Tipo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Estado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Estado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Descripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Descripcion); err != nil {
			return err
		}
	} else {
		r.Descripcion = NewUnionNullString()

		r.Descripcion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CantidadAProcesar"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CantidadAProcesar); err != nil {
			return err
		}
	} else {
		r.CantidadAProcesar = NewUnionNullInt()

		r.CantidadAProcesar = nil
	}
	return nil
}
