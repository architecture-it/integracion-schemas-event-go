// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     FisaEvent.avsc
 */
package FisaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type FisaEvent struct {
	Event Fisa `json:"Event"`
}

const FisaEventAvroCRC64Fingerprint = "\xe47\xb7r'r\xaa\xb0"

func NewFisaEvent() FisaEvent {
	r := FisaEvent{}
	r.Event = NewFisa()

	return r
}

func DeserializeFisaEvent(r io.Reader) (FisaEvent, error) {
	t := NewFisaEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeFisaEventFromSchema(r io.Reader, schema string) (FisaEvent, error) {
	t := NewFisaEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeFisaEvent(r FisaEvent, w io.Writer) error {
	var err error
	err = writeFisa(r.Event, w)
	if err != nil {
		return err
	}
	return err
}

func (r FisaEvent) Serialize(w io.Writer) error {
	return writeFisaEvent(r, w)
}

func (r FisaEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"Event\",\"type\":{\"fields\":[{\"name\":\"HoraInicio\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"default\":null,\"name\":\"HoraFin\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"Tipo\",\"type\":\"string\"},{\"name\":\"Estado\",\"type\":\"string\"},{\"default\":null,\"name\":\"Descripcion\",\"type\":[\"null\",\"string\"]}],\"name\":\"Fisa\",\"namespace\":\"Andreani.Fisa.Events.Common\",\"type\":\"record\"}}],\"name\":\"Andreani.Fisa.Events.Record.FisaEvent\",\"type\":\"record\"}"
}

func (r FisaEvent) SchemaName() string {
	return "Andreani.Fisa.Events.Record.FisaEvent"
}

func (_ FisaEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ FisaEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ FisaEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ FisaEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ FisaEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ FisaEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ FisaEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ FisaEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *FisaEvent) Get(i int) types.Field {
	switch i {
	case 0:
		r.Event = NewFisa()

		w := types.Record{Target: &r.Event}

		return w

	}
	panic("Unknown field index")
}

func (r *FisaEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *FisaEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ FisaEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ FisaEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ FisaEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ FisaEvent) Finalize()                        {}

func (_ FisaEvent) AvroCRC64Fingerprint() []byte {
	return []byte(FisaEventAvroCRC64Fingerprint)
}

func (r FisaEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Event"], err = json.Marshal(r.Event)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *FisaEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Event"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Event); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Event")
	}
	return nil
}
