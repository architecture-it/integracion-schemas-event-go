// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Filtro.avsc
 */
package FisaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Filtro struct {
	FechaDesde *UnionNullLong `json:"FechaDesde"`

	FechaHasta *UnionNullLong `json:"FechaHasta"`

	Tipo string `json:"Tipo"`

	Estado string `json:"Estado"`

	Contrato *UnionNullString `json:"Contrato"`

	Descripcion *UnionNullString `json:"Descripcion"`

	Agrupador *UnionNullString `json:"Agrupador"`

	GUID string `json:"GUID"`
}

const FiltroAvroCRC64Fingerprint = "\xde\xc4\xcd~\xff\x99\x14e"

func NewFiltro() Filtro {
	r := Filtro{}
	r.FechaDesde = nil
	r.FechaHasta = nil
	r.Contrato = nil
	r.Descripcion = nil
	r.Agrupador = nil
	return r
}

func DeserializeFiltro(r io.Reader) (Filtro, error) {
	t := NewFiltro()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeFiltroFromSchema(r io.Reader, schema string) (Filtro, error) {
	t := NewFiltro()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeFiltro(r Filtro, w io.Writer) error {
	var err error
	err = writeUnionNullLong(r.FechaDesde, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaHasta, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Tipo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Estado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Contrato, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Descripcion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Agrupador, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.GUID, w)
	if err != nil {
		return err
	}
	return err
}

func (r Filtro) Serialize(w io.Writer) error {
	return writeFiltro(r, w)
}

func (r Filtro) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"FechaDesde\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"FechaHasta\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"Tipo\",\"type\":\"string\"},{\"name\":\"Estado\",\"type\":\"string\"},{\"default\":null,\"name\":\"Contrato\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Descripcion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Agrupador\",\"type\":[\"null\",\"string\"]},{\"name\":\"GUID\",\"type\":\"string\"}],\"name\":\"Andreani.Fisa.Events.Common.Filtro\",\"type\":\"record\"}"
}

func (r Filtro) SchemaName() string {
	return "Andreani.Fisa.Events.Common.Filtro"
}

func (_ Filtro) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Filtro) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Filtro) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Filtro) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Filtro) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Filtro) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Filtro) SetString(v string)   { panic("Unsupported operation") }
func (_ Filtro) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Filtro) Get(i int) types.Field {
	switch i {
	case 0:
		r.FechaDesde = NewUnionNullLong()

		return r.FechaDesde
	case 1:
		r.FechaHasta = NewUnionNullLong()

		return r.FechaHasta
	case 2:
		w := types.String{Target: &r.Tipo}

		return w

	case 3:
		w := types.String{Target: &r.Estado}

		return w

	case 4:
		r.Contrato = NewUnionNullString()

		return r.Contrato
	case 5:
		r.Descripcion = NewUnionNullString()

		return r.Descripcion
	case 6:
		r.Agrupador = NewUnionNullString()

		return r.Agrupador
	case 7:
		w := types.String{Target: &r.GUID}

		return w

	}
	panic("Unknown field index")
}

func (r *Filtro) SetDefault(i int) {
	switch i {
	case 0:
		r.FechaDesde = nil
		return
	case 1:
		r.FechaHasta = nil
		return
	case 4:
		r.Contrato = nil
		return
	case 5:
		r.Descripcion = nil
		return
	case 6:
		r.Agrupador = nil
		return
	}
	panic("Unknown field index")
}

func (r *Filtro) NullField(i int) {
	switch i {
	case 0:
		r.FechaDesde = nil
		return
	case 1:
		r.FechaHasta = nil
		return
	case 4:
		r.Contrato = nil
		return
	case 5:
		r.Descripcion = nil
		return
	case 6:
		r.Agrupador = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Filtro) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Filtro) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Filtro) HintSize(int)                     { panic("Unsupported operation") }
func (_ Filtro) Finalize()                        {}

func (_ Filtro) AvroCRC64Fingerprint() []byte {
	return []byte(FiltroAvroCRC64Fingerprint)
}

func (r Filtro) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["FechaDesde"], err = json.Marshal(r.FechaDesde)
	if err != nil {
		return nil, err
	}
	output["FechaHasta"], err = json.Marshal(r.FechaHasta)
	if err != nil {
		return nil, err
	}
	output["Tipo"], err = json.Marshal(r.Tipo)
	if err != nil {
		return nil, err
	}
	output["Estado"], err = json.Marshal(r.Estado)
	if err != nil {
		return nil, err
	}
	output["Contrato"], err = json.Marshal(r.Contrato)
	if err != nil {
		return nil, err
	}
	output["Descripcion"], err = json.Marshal(r.Descripcion)
	if err != nil {
		return nil, err
	}
	output["Agrupador"], err = json.Marshal(r.Agrupador)
	if err != nil {
		return nil, err
	}
	output["GUID"], err = json.Marshal(r.GUID)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Filtro) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["FechaDesde"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaDesde); err != nil {
			return err
		}
	} else {
		r.FechaDesde = NewUnionNullLong()

		r.FechaDesde = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaHasta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaHasta); err != nil {
			return err
		}
	} else {
		r.FechaHasta = NewUnionNullLong()

		r.FechaHasta = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Tipo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Tipo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Tipo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Estado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Estado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Contrato"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contrato); err != nil {
			return err
		}
	} else {
		r.Contrato = NewUnionNullString()

		r.Contrato = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Descripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Descripcion); err != nil {
			return err
		}
	} else {
		r.Descripcion = NewUnionNullString()

		r.Descripcion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Agrupador"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Agrupador); err != nil {
			return err
		}
	} else {
		r.Agrupador = NewUnionNullString()

		r.Agrupador = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["GUID"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.GUID); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for GUID")
	}
	return nil
}
