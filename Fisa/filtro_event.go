// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     FiltroEvent.avsc
 */
package FisaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type FiltroEvent struct {
	Event Filtro `json:"Event"`
}

const FiltroEventAvroCRC64Fingerprint = "z\x7fgj\xf2 \xd68"

func NewFiltroEvent() FiltroEvent {
	r := FiltroEvent{}
	r.Event = NewFiltro()

	return r
}

func DeserializeFiltroEvent(r io.Reader) (FiltroEvent, error) {
	t := NewFiltroEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeFiltroEventFromSchema(r io.Reader, schema string) (FiltroEvent, error) {
	t := NewFiltroEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeFiltroEvent(r FiltroEvent, w io.Writer) error {
	var err error
	err = writeFiltro(r.Event, w)
	if err != nil {
		return err
	}
	return err
}

func (r FiltroEvent) Serialize(w io.Writer) error {
	return writeFiltroEvent(r, w)
}

func (r FiltroEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"Event\",\"type\":{\"fields\":[{\"default\":null,\"name\":\"FechaDesde\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"FechaHasta\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"Tipo\",\"type\":\"string\"},{\"name\":\"Estado\",\"type\":\"string\"},{\"default\":null,\"name\":\"Contrato\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Descripcion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Agrupador\",\"type\":[\"null\",\"string\"]},{\"name\":\"GUID\",\"type\":\"string\"}],\"name\":\"Filtro\",\"namespace\":\"Andreani.Fisa.Filtro.Common\",\"type\":\"record\"}}],\"name\":\"Andreani.Fisa.Events.Record.FiltroEvent\",\"type\":\"record\"}"
}

func (r FiltroEvent) SchemaName() string {
	return "Andreani.Fisa.Events.Record.FiltroEvent"
}

func (_ FiltroEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ FiltroEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ FiltroEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ FiltroEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ FiltroEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ FiltroEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ FiltroEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ FiltroEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *FiltroEvent) Get(i int) types.Field {
	switch i {
	case 0:
		r.Event = NewFiltro()

		w := types.Record{Target: &r.Event}

		return w

	}
	panic("Unknown field index")
}

func (r *FiltroEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *FiltroEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ FiltroEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ FiltroEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ FiltroEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ FiltroEvent) Finalize()                        {}

func (_ FiltroEvent) AvroCRC64Fingerprint() []byte {
	return []byte(FiltroEventAvroCRC64Fingerprint)
}

func (r FiltroEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Event"], err = json.Marshal(r.Event)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *FiltroEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Event"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Event); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Event")
	}
	return nil
}
