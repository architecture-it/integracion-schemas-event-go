// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     MantenimientoDeLoteSolicitado.avsc
 */
package ApiMantenimientoDeLoteEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DetalleDeLote struct {
	Estado string `json:"Estado"`

	Origen string `json:"Origen"`

	Trazable bool `json:"Trazable"`

	Vencimiento string `json:"vencimiento"`

	Fabricacion string `json:"fabricacion"`

	Lote Lote `json:"lote"`
}

const DetalleDeLoteAvroCRC64Fingerprint = "\xe7\x85_5Æ‡\xa5\xf7"

func NewDetalleDeLote() DetalleDeLote {
	r := DetalleDeLote{}
	r.Lote = NewLote()

	return r
}

func DeserializeDetalleDeLote(r io.Reader) (DetalleDeLote, error) {
	t := NewDetalleDeLote()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDetalleDeLoteFromSchema(r io.Reader, schema string) (DetalleDeLote, error) {
	t := NewDetalleDeLote()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDetalleDeLote(r DetalleDeLote, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Estado, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Origen, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Trazable, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Vencimiento, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Fabricacion, w)
	if err != nil {
		return err
	}
	err = writeLote(r.Lote, w)
	if err != nil {
		return err
	}
	return err
}

func (r DetalleDeLote) Serialize(w io.Writer) error {
	return writeDetalleDeLote(r, w)
}

func (r DetalleDeLote) Schema() string {
	return "{\"fields\":[{\"name\":\"Estado\",\"type\":\"string\"},{\"name\":\"Origen\",\"type\":\"string\"},{\"name\":\"Trazable\",\"type\":\"boolean\"},{\"name\":\"vencimiento\",\"type\":\"string\"},{\"name\":\"fabricacion\",\"type\":\"string\"},{\"name\":\"lote\",\"type\":{\"fields\":[{\"name\":\"codigo\",\"type\":\"string\"},{\"name\":\"propietario\",\"type\":\"string\"},{\"name\":\"codigoProducto\",\"type\":\"string\"},{\"name\":\"loteDeFabricante\",\"type\":\"string\"}],\"name\":\"Lote\",\"type\":\"record\"}}],\"name\":\"Andreani.ApiMantenimientoDeLote.Events.Record.DetalleDeLote\",\"type\":\"record\"}"
}

func (r DetalleDeLote) SchemaName() string {
	return "Andreani.ApiMantenimientoDeLote.Events.Record.DetalleDeLote"
}

func (_ DetalleDeLote) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DetalleDeLote) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DetalleDeLote) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DetalleDeLote) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DetalleDeLote) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DetalleDeLote) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DetalleDeLote) SetString(v string)   { panic("Unsupported operation") }
func (_ DetalleDeLote) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DetalleDeLote) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Estado}

		return w

	case 1:
		w := types.String{Target: &r.Origen}

		return w

	case 2:
		w := types.Boolean{Target: &r.Trazable}

		return w

	case 3:
		w := types.String{Target: &r.Vencimiento}

		return w

	case 4:
		w := types.String{Target: &r.Fabricacion}

		return w

	case 5:
		r.Lote = NewLote()

		w := types.Record{Target: &r.Lote}

		return w

	}
	panic("Unknown field index")
}

func (r *DetalleDeLote) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *DetalleDeLote) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ DetalleDeLote) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DetalleDeLote) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DetalleDeLote) HintSize(int)                     { panic("Unsupported operation") }
func (_ DetalleDeLote) Finalize()                        {}

func (_ DetalleDeLote) AvroCRC64Fingerprint() []byte {
	return []byte(DetalleDeLoteAvroCRC64Fingerprint)
}

func (r DetalleDeLote) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Estado"], err = json.Marshal(r.Estado)
	if err != nil {
		return nil, err
	}
	output["Origen"], err = json.Marshal(r.Origen)
	if err != nil {
		return nil, err
	}
	output["Trazable"], err = json.Marshal(r.Trazable)
	if err != nil {
		return nil, err
	}
	output["vencimiento"], err = json.Marshal(r.Vencimiento)
	if err != nil {
		return nil, err
	}
	output["fabricacion"], err = json.Marshal(r.Fabricacion)
	if err != nil {
		return nil, err
	}
	output["lote"], err = json.Marshal(r.Lote)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DetalleDeLote) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Estado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Estado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Origen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Origen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Origen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Trazable"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Trazable); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Trazable")
	}
	val = func() json.RawMessage {
		if v, ok := fields["vencimiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Vencimiento); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for vencimiento")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fabricacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Fabricacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fabricacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["lote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Lote); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for lote")
	}
	return nil
}
