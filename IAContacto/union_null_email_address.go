// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Sender.avsc
 */
package IAContactoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullEmailAddressTypeEnum int

const (
	UnionNullEmailAddressTypeEnumEmailAddress UnionNullEmailAddressTypeEnum = 1
)

type UnionNullEmailAddress struct {
	Null         *types.NullVal
	EmailAddress EmailAddress
	UnionType    UnionNullEmailAddressTypeEnum
}

func writeUnionNullEmailAddress(r *UnionNullEmailAddress, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullEmailAddressTypeEnumEmailAddress:
		return writeEmailAddress(r.EmailAddress, w)
	}
	return fmt.Errorf("invalid value for *UnionNullEmailAddress")
}

func NewUnionNullEmailAddress() *UnionNullEmailAddress {
	return &UnionNullEmailAddress{}
}

func (r *UnionNullEmailAddress) Serialize(w io.Writer) error {
	return writeUnionNullEmailAddress(r, w)
}

func DeserializeUnionNullEmailAddress(r io.Reader) (*UnionNullEmailAddress, error) {
	t := NewUnionNullEmailAddress()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullEmailAddressFromSchema(r io.Reader, schema string) (*UnionNullEmailAddress, error) {
	t := NewUnionNullEmailAddress()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullEmailAddress) Schema() string {
	return "[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Address\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]}],\"name\":\"EmailAddress\",\"type\":\"record\"}]"
}

func (_ *UnionNullEmailAddress) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullEmailAddress) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullEmailAddress) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullEmailAddress) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullEmailAddress) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullEmailAddress) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullEmailAddress) SetLong(v int64) {

	r.UnionType = (UnionNullEmailAddressTypeEnum)(v)
}

func (r *UnionNullEmailAddress) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.EmailAddress = NewEmailAddress()
		return &types.Record{Target: (&r.EmailAddress)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullEmailAddress) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionNullEmailAddress) HintSize(i int)                   { panic("Unsupported operation") }
func (_ *UnionNullEmailAddress) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionNullEmailAddress) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullEmailAddress) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionNullEmailAddress) Finalize()                        {}

func (r *UnionNullEmailAddress) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullEmailAddressTypeEnumEmailAddress:
		return json.Marshal(map[string]interface{}{"Andreani.IAContacto.Events.Record.EmailAddress": r.EmailAddress})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullEmailAddress")
}

func (r *UnionNullEmailAddress) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["Andreani.IAContacto.Events.Record.EmailAddress"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.EmailAddress)
	}
	return fmt.Errorf("invalid value for *UnionNullEmailAddress")
}
