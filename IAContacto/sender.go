// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Sender.avsc
 */
package IAContactoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Sender struct {
	EmailAddress *UnionNullEmailAddress `json:"EmailAddress"`
}

const SenderAvroCRC64Fingerprint = "\x8a\xb0_d\x11dH\xc5"

func NewSender() Sender {
	r := Sender{}
	r.EmailAddress = nil
	return r
}

func DeserializeSender(r io.Reader) (Sender, error) {
	t := NewSender()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSenderFromSchema(r io.Reader, schema string) (Sender, error) {
	t := NewSender()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSender(r Sender, w io.Writer) error {
	var err error
	err = writeUnionNullEmailAddress(r.EmailAddress, w)
	if err != nil {
		return err
	}
	return err
}

func (r Sender) Serialize(w io.Writer) error {
	return writeSender(r, w)
}

func (r Sender) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"EmailAddress\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Address\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]}],\"name\":\"EmailAddress\",\"type\":\"record\"}]}],\"name\":\"Andreani.IAContacto.Events.Record.Sender\",\"type\":\"record\"}"
}

func (r Sender) SchemaName() string {
	return "Andreani.IAContacto.Events.Record.Sender"
}

func (_ Sender) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Sender) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Sender) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Sender) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Sender) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Sender) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Sender) SetString(v string)   { panic("Unsupported operation") }
func (_ Sender) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Sender) Get(i int) types.Field {
	switch i {
	case 0:
		r.EmailAddress = NewUnionNullEmailAddress()

		return r.EmailAddress
	}
	panic("Unknown field index")
}

func (r *Sender) SetDefault(i int) {
	switch i {
	case 0:
		r.EmailAddress = nil
		return
	}
	panic("Unknown field index")
}

func (r *Sender) NullField(i int) {
	switch i {
	case 0:
		r.EmailAddress = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Sender) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Sender) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Sender) HintSize(int)                     { panic("Unsupported operation") }
func (_ Sender) Finalize()                        {}

func (_ Sender) AvroCRC64Fingerprint() []byte {
	return []byte(SenderAvroCRC64Fingerprint)
}

func (r Sender) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["EmailAddress"], err = json.Marshal(r.EmailAddress)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Sender) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["EmailAddress"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EmailAddress); err != nil {
			return err
		}
	} else {
		r.EmailAddress = NewUnionNullEmailAddress()

		r.EmailAddress = nil
	}
	return nil
}
