// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Sender.avsc
 */
package IAContactoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EmailAddress struct {
	Address *UnionNullString `json:"address"`

	Name *UnionNullString `json:"name"`
}

const EmailAddressAvroCRC64Fingerprint = "+\xbe\xfe\x81h\x8b\x7f\xb2"

func NewEmailAddress() EmailAddress {
	r := EmailAddress{}
	r.Address = nil
	r.Name = nil
	return r
}

func DeserializeEmailAddress(r io.Reader) (EmailAddress, error) {
	t := NewEmailAddress()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEmailAddressFromSchema(r io.Reader, schema string) (EmailAddress, error) {
	t := NewEmailAddress()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEmailAddress(r EmailAddress, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Address, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Name, w)
	if err != nil {
		return err
	}
	return err
}

func (r EmailAddress) Serialize(w io.Writer) error {
	return writeEmailAddress(r, w)
}

func (r EmailAddress) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"address\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"name\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.IAContacto.Events.Record.EmailAddress\",\"type\":\"record\"}"
}

func (r EmailAddress) SchemaName() string {
	return "Andreani.IAContacto.Events.Record.EmailAddress"
}

func (_ EmailAddress) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EmailAddress) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EmailAddress) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EmailAddress) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EmailAddress) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EmailAddress) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EmailAddress) SetString(v string)   { panic("Unsupported operation") }
func (_ EmailAddress) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EmailAddress) Get(i int) types.Field {
	switch i {
	case 0:
		r.Address = NewUnionNullString()

		return r.Address
	case 1:
		r.Name = NewUnionNullString()

		return r.Name
	}
	panic("Unknown field index")
}

func (r *EmailAddress) SetDefault(i int) {
	switch i {
	case 0:
		r.Address = nil
		return
	case 1:
		r.Name = nil
		return
	}
	panic("Unknown field index")
}

func (r *EmailAddress) NullField(i int) {
	switch i {
	case 0:
		r.Address = nil
		return
	case 1:
		r.Name = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ EmailAddress) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EmailAddress) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EmailAddress) HintSize(int)                     { panic("Unsupported operation") }
func (_ EmailAddress) Finalize()                        {}

func (_ EmailAddress) AvroCRC64Fingerprint() []byte {
	return []byte(EmailAddressAvroCRC64Fingerprint)
}

func (r EmailAddress) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["address"], err = json.Marshal(r.Address)
	if err != nil {
		return nil, err
	}
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EmailAddress) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["address"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Address); err != nil {
			return err
		}
	} else {
		r.Address = NewUnionNullString()

		r.Address = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		r.Name = NewUnionNullString()

		r.Name = nil
	}
	return nil
}
