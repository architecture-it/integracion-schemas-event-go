// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EmailMessage.avsc
 */
package IAContactoEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Body struct {
	ContentType *UnionNullString `json:"contentType"`

	Content *UnionNullString `json:"content"`
}

const BodyAvroCRC64Fingerprint = "\x1d\x8a\xb0\xdb\x10\xe5\xc0\x1c"

func NewBody() Body {
	r := Body{}
	r.ContentType = nil
	r.Content = nil
	return r
}

func DeserializeBody(r io.Reader) (Body, error) {
	t := NewBody()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeBodyFromSchema(r io.Reader, schema string) (Body, error) {
	t := NewBody()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeBody(r Body, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.ContentType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Content, w)
	if err != nil {
		return err
	}
	return err
}

func (r Body) Serialize(w io.Writer) error {
	return writeBody(r, w)
}

func (r Body) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"contentType\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"content\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.IAContacto.Events.Record.Body\",\"type\":\"record\"}"
}

func (r Body) SchemaName() string {
	return "Andreani.IAContacto.Events.Record.Body"
}

func (_ Body) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Body) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Body) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Body) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Body) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Body) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Body) SetString(v string)   { panic("Unsupported operation") }
func (_ Body) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Body) Get(i int) types.Field {
	switch i {
	case 0:
		r.ContentType = NewUnionNullString()

		return r.ContentType
	case 1:
		r.Content = NewUnionNullString()

		return r.Content
	}
	panic("Unknown field index")
}

func (r *Body) SetDefault(i int) {
	switch i {
	case 0:
		r.ContentType = nil
		return
	case 1:
		r.Content = nil
		return
	}
	panic("Unknown field index")
}

func (r *Body) NullField(i int) {
	switch i {
	case 0:
		r.ContentType = nil
		return
	case 1:
		r.Content = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Body) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Body) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Body) HintSize(int)                     { panic("Unsupported operation") }
func (_ Body) Finalize()                        {}

func (_ Body) AvroCRC64Fingerprint() []byte {
	return []byte(BodyAvroCRC64Fingerprint)
}

func (r Body) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["contentType"], err = json.Marshal(r.ContentType)
	if err != nil {
		return nil, err
	}
	output["content"], err = json.Marshal(r.Content)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Body) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["contentType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ContentType); err != nil {
			return err
		}
	} else {
		r.ContentType = NewUnionNullString()

		r.ContentType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["content"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Content); err != nil {
			return err
		}
	} else {
		r.Content = NewUnionNullString()

		r.Content = nil
	}
	return nil
}
