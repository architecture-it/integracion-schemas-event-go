// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EventoWhPedidosEmpaquetado.avsc
 */
package EventoWhPedidosEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ContenedorRetornable struct {
	Tara float32 `json:"Tara"`

	CartonType string `json:"CartonType"`

	ContratoRetornable *UnionNullString `json:"ContratoRetornable"`
}

const ContenedorRetornableAvroCRC64Fingerprint = "\xca\x12\xddL\x82F'\xb9"

func NewContenedorRetornable() ContenedorRetornable {
	r := ContenedorRetornable{}
	return r
}

func DeserializeContenedorRetornable(r io.Reader) (ContenedorRetornable, error) {
	t := NewContenedorRetornable()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeContenedorRetornableFromSchema(r io.Reader, schema string) (ContenedorRetornable, error) {
	t := NewContenedorRetornable()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeContenedorRetornable(r ContenedorRetornable, w io.Writer) error {
	var err error
	err = vm.WriteFloat(r.Tara, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CartonType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ContratoRetornable, w)
	if err != nil {
		return err
	}
	return err
}

func (r ContenedorRetornable) Serialize(w io.Writer) error {
	return writeContenedorRetornable(r, w)
}

func (r ContenedorRetornable) Schema() string {
	return "{\"fields\":[{\"name\":\"Tara\",\"type\":\"float\"},{\"name\":\"CartonType\",\"type\":\"string\"},{\"name\":\"ContratoRetornable\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.EventoWhPedidos.Events.EmpaquetadoCommon.ContenedorRetornable\",\"type\":\"record\"}"
}

func (r ContenedorRetornable) SchemaName() string {
	return "Andreani.EventoWhPedidos.Events.EmpaquetadoCommon.ContenedorRetornable"
}

func (_ ContenedorRetornable) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ContenedorRetornable) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ContenedorRetornable) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ContenedorRetornable) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ContenedorRetornable) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ContenedorRetornable) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ContenedorRetornable) SetString(v string)   { panic("Unsupported operation") }
func (_ ContenedorRetornable) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ContenedorRetornable) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Float{Target: &r.Tara}

		return w

	case 1:
		w := types.String{Target: &r.CartonType}

		return w

	case 2:
		r.ContratoRetornable = NewUnionNullString()

		return r.ContratoRetornable
	}
	panic("Unknown field index")
}

func (r *ContenedorRetornable) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ContenedorRetornable) NullField(i int) {
	switch i {
	case 2:
		r.ContratoRetornable = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ContenedorRetornable) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ContenedorRetornable) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ContenedorRetornable) HintSize(int)                     { panic("Unsupported operation") }
func (_ ContenedorRetornable) Finalize()                        {}

func (_ ContenedorRetornable) AvroCRC64Fingerprint() []byte {
	return []byte(ContenedorRetornableAvroCRC64Fingerprint)
}

func (r ContenedorRetornable) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Tara"], err = json.Marshal(r.Tara)
	if err != nil {
		return nil, err
	}
	output["CartonType"], err = json.Marshal(r.CartonType)
	if err != nil {
		return nil, err
	}
	output["ContratoRetornable"], err = json.Marshal(r.ContratoRetornable)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ContenedorRetornable) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Tara"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Tara); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Tara")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CartonType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CartonType); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CartonType")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ContratoRetornable"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ContratoRetornable); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ContratoRetornable")
	}
	return nil
}
