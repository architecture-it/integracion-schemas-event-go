// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EventoWhSCEPedidosEmpaquetados.avsc
 */
package EventoWhPedidosEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DetalleBultos struct {
	OrdenWH string `json:"OrdenWH"`

	OrdenCliente string `json:"OrdenCliente"`

	Remito *UnionNullString `json:"Remito"`

	LineaPedidoWH string `json:"LineaPedidoWH"`

	Propietario string `json:"Propietario"`

	SKU string `json:"SKU"`

	CantidadEmbalada float32 `json:"CantidadEmbalada"`

	EtiquetaEmbalaje string `json:"EtiquetaEmbalaje"`

	TipoDeContenedor *UnionNullString `json:"TipoDeContenedor"`

	PaqueteLote string `json:"PaqueteLote"`

	LoteCajitaFabricante string `json:"LoteCajitaFabricante"`

	LoteSecundario string `json:"LoteSecundario"`

	FechaFabricacion *UnionNullLong `json:"FechaFabricacion"`

	FechaVencimiento *UnionNullLong `json:"FechaVencimiento"`

	ProductoTrazable string `json:"ProductoTrazable"`

	AlmacenConsumo string `json:"AlmacenConsumo"`

	EstadoLote string `json:"EstadoLote"`

	BloqueoUbicacion string `json:"BloqueoUbicacion"`

	VidaUtilLote string `json:"VidaUtilLote"`

	EntregaAntesDe string `json:"EntregaAntesDe"`

	ConsumoAntesDe string `json:"ConsumoAntesDe"`
}

const DetalleBultosAvroCRC64Fingerprint = "\xf0\x0e\xd2\xdcs\xd2s`"

func NewDetalleBultos() DetalleBultos {
	r := DetalleBultos{}
	r.Remito = nil
	r.TipoDeContenedor = nil
	r.FechaFabricacion = nil
	r.FechaVencimiento = nil
	return r
}

func DeserializeDetalleBultos(r io.Reader) (DetalleBultos, error) {
	t := NewDetalleBultos()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDetalleBultosFromSchema(r io.Reader, schema string) (DetalleBultos, error) {
	t := NewDetalleBultos()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDetalleBultos(r DetalleBultos, w io.Writer) error {
	var err error
	err = vm.WriteString(r.OrdenWH, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OrdenCliente, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Remito, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LineaPedidoWH, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Propietario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.SKU, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.CantidadEmbalada, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.EtiquetaEmbalaje, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TipoDeContenedor, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.PaqueteLote, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteCajitaFabricante, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoteSecundario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaFabricacion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaVencimiento, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ProductoTrazable, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.AlmacenConsumo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.EstadoLote, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.BloqueoUbicacion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.VidaUtilLote, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.EntregaAntesDe, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ConsumoAntesDe, w)
	if err != nil {
		return err
	}
	return err
}

func (r DetalleBultos) Serialize(w io.Writer) error {
	return writeDetalleBultos(r, w)
}

func (r DetalleBultos) Schema() string {
	return "{\"fields\":[{\"name\":\"OrdenWH\",\"type\":\"string\"},{\"name\":\"OrdenCliente\",\"type\":\"string\"},{\"default\":null,\"name\":\"Remito\",\"type\":[\"null\",\"string\"]},{\"name\":\"LineaPedidoWH\",\"type\":\"string\"},{\"name\":\"Propietario\",\"type\":\"string\"},{\"name\":\"SKU\",\"type\":\"string\"},{\"name\":\"CantidadEmbalada\",\"type\":\"float\"},{\"name\":\"EtiquetaEmbalaje\",\"type\":\"string\"},{\"default\":null,\"name\":\"TipoDeContenedor\",\"type\":[\"null\",\"string\"]},{\"name\":\"PaqueteLote\",\"type\":\"string\"},{\"name\":\"LoteCajitaFabricante\",\"type\":\"string\"},{\"name\":\"LoteSecundario\",\"type\":\"string\"},{\"default\":null,\"name\":\"FechaFabricacion\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"FechaVencimiento\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"ProductoTrazable\",\"type\":\"string\"},{\"name\":\"AlmacenConsumo\",\"type\":\"string\"},{\"name\":\"EstadoLote\",\"type\":\"string\"},{\"name\":\"BloqueoUbicacion\",\"type\":\"string\"},{\"name\":\"VidaUtilLote\",\"type\":\"string\"},{\"name\":\"EntregaAntesDe\",\"type\":\"string\"},{\"name\":\"ConsumoAntesDe\",\"type\":\"string\"}],\"name\":\"Andreani.EventoWhPedidos.Events.SCEPedidosEmpaquetadosCommon.DetalleBultos\",\"type\":\"record\"}"
}

func (r DetalleBultos) SchemaName() string {
	return "Andreani.EventoWhPedidos.Events.SCEPedidosEmpaquetadosCommon.DetalleBultos"
}

func (_ DetalleBultos) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DetalleBultos) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DetalleBultos) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DetalleBultos) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DetalleBultos) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DetalleBultos) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DetalleBultos) SetString(v string)   { panic("Unsupported operation") }
func (_ DetalleBultos) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DetalleBultos) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.OrdenWH}

		return w

	case 1:
		w := types.String{Target: &r.OrdenCliente}

		return w

	case 2:
		r.Remito = NewUnionNullString()

		return r.Remito
	case 3:
		w := types.String{Target: &r.LineaPedidoWH}

		return w

	case 4:
		w := types.String{Target: &r.Propietario}

		return w

	case 5:
		w := types.String{Target: &r.SKU}

		return w

	case 6:
		w := types.Float{Target: &r.CantidadEmbalada}

		return w

	case 7:
		w := types.String{Target: &r.EtiquetaEmbalaje}

		return w

	case 8:
		r.TipoDeContenedor = NewUnionNullString()

		return r.TipoDeContenedor
	case 9:
		w := types.String{Target: &r.PaqueteLote}

		return w

	case 10:
		w := types.String{Target: &r.LoteCajitaFabricante}

		return w

	case 11:
		w := types.String{Target: &r.LoteSecundario}

		return w

	case 12:
		r.FechaFabricacion = NewUnionNullLong()

		return r.FechaFabricacion
	case 13:
		r.FechaVencimiento = NewUnionNullLong()

		return r.FechaVencimiento
	case 14:
		w := types.String{Target: &r.ProductoTrazable}

		return w

	case 15:
		w := types.String{Target: &r.AlmacenConsumo}

		return w

	case 16:
		w := types.String{Target: &r.EstadoLote}

		return w

	case 17:
		w := types.String{Target: &r.BloqueoUbicacion}

		return w

	case 18:
		w := types.String{Target: &r.VidaUtilLote}

		return w

	case 19:
		w := types.String{Target: &r.EntregaAntesDe}

		return w

	case 20:
		w := types.String{Target: &r.ConsumoAntesDe}

		return w

	}
	panic("Unknown field index")
}

func (r *DetalleBultos) SetDefault(i int) {
	switch i {
	case 2:
		r.Remito = nil
		return
	case 8:
		r.TipoDeContenedor = nil
		return
	case 12:
		r.FechaFabricacion = nil
		return
	case 13:
		r.FechaVencimiento = nil
		return
	}
	panic("Unknown field index")
}

func (r *DetalleBultos) NullField(i int) {
	switch i {
	case 2:
		r.Remito = nil
		return
	case 8:
		r.TipoDeContenedor = nil
		return
	case 12:
		r.FechaFabricacion = nil
		return
	case 13:
		r.FechaVencimiento = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ DetalleBultos) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DetalleBultos) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DetalleBultos) HintSize(int)                     { panic("Unsupported operation") }
func (_ DetalleBultos) Finalize()                        {}

func (_ DetalleBultos) AvroCRC64Fingerprint() []byte {
	return []byte(DetalleBultosAvroCRC64Fingerprint)
}

func (r DetalleBultos) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["OrdenWH"], err = json.Marshal(r.OrdenWH)
	if err != nil {
		return nil, err
	}
	output["OrdenCliente"], err = json.Marshal(r.OrdenCliente)
	if err != nil {
		return nil, err
	}
	output["Remito"], err = json.Marshal(r.Remito)
	if err != nil {
		return nil, err
	}
	output["LineaPedidoWH"], err = json.Marshal(r.LineaPedidoWH)
	if err != nil {
		return nil, err
	}
	output["Propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["SKU"], err = json.Marshal(r.SKU)
	if err != nil {
		return nil, err
	}
	output["CantidadEmbalada"], err = json.Marshal(r.CantidadEmbalada)
	if err != nil {
		return nil, err
	}
	output["EtiquetaEmbalaje"], err = json.Marshal(r.EtiquetaEmbalaje)
	if err != nil {
		return nil, err
	}
	output["TipoDeContenedor"], err = json.Marshal(r.TipoDeContenedor)
	if err != nil {
		return nil, err
	}
	output["PaqueteLote"], err = json.Marshal(r.PaqueteLote)
	if err != nil {
		return nil, err
	}
	output["LoteCajitaFabricante"], err = json.Marshal(r.LoteCajitaFabricante)
	if err != nil {
		return nil, err
	}
	output["LoteSecundario"], err = json.Marshal(r.LoteSecundario)
	if err != nil {
		return nil, err
	}
	output["FechaFabricacion"], err = json.Marshal(r.FechaFabricacion)
	if err != nil {
		return nil, err
	}
	output["FechaVencimiento"], err = json.Marshal(r.FechaVencimiento)
	if err != nil {
		return nil, err
	}
	output["ProductoTrazable"], err = json.Marshal(r.ProductoTrazable)
	if err != nil {
		return nil, err
	}
	output["AlmacenConsumo"], err = json.Marshal(r.AlmacenConsumo)
	if err != nil {
		return nil, err
	}
	output["EstadoLote"], err = json.Marshal(r.EstadoLote)
	if err != nil {
		return nil, err
	}
	output["BloqueoUbicacion"], err = json.Marshal(r.BloqueoUbicacion)
	if err != nil {
		return nil, err
	}
	output["VidaUtilLote"], err = json.Marshal(r.VidaUtilLote)
	if err != nil {
		return nil, err
	}
	output["EntregaAntesDe"], err = json.Marshal(r.EntregaAntesDe)
	if err != nil {
		return nil, err
	}
	output["ConsumoAntesDe"], err = json.Marshal(r.ConsumoAntesDe)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DetalleBultos) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["OrdenWH"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrdenWH); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OrdenWH")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OrdenCliente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrdenCliente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OrdenCliente")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Remito"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Remito); err != nil {
			return err
		}
	} else {
		r.Remito = NewUnionNullString()

		r.Remito = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LineaPedidoWH"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LineaPedidoWH); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for LineaPedidoWH")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Propietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["SKU"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SKU); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for SKU")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CantidadEmbalada"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CantidadEmbalada); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CantidadEmbalada")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EtiquetaEmbalaje"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EtiquetaEmbalaje); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EtiquetaEmbalaje")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TipoDeContenedor"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TipoDeContenedor); err != nil {
			return err
		}
	} else {
		r.TipoDeContenedor = NewUnionNullString()

		r.TipoDeContenedor = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PaqueteLote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PaqueteLote); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PaqueteLote")
	}
	val = func() json.RawMessage {
		if v, ok := fields["LoteCajitaFabricante"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteCajitaFabricante); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for LoteCajitaFabricante")
	}
	val = func() json.RawMessage {
		if v, ok := fields["LoteSecundario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteSecundario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for LoteSecundario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaFabricacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaFabricacion); err != nil {
			return err
		}
	} else {
		r.FechaFabricacion = NewUnionNullLong()

		r.FechaFabricacion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaVencimiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaVencimiento); err != nil {
			return err
		}
	} else {
		r.FechaVencimiento = NewUnionNullLong()

		r.FechaVencimiento = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ProductoTrazable"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ProductoTrazable); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ProductoTrazable")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AlmacenConsumo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AlmacenConsumo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AlmacenConsumo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EstadoLote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EstadoLote); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EstadoLote")
	}
	val = func() json.RawMessage {
		if v, ok := fields["BloqueoUbicacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BloqueoUbicacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for BloqueoUbicacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["VidaUtilLote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VidaUtilLote); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for VidaUtilLote")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EntregaAntesDe"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EntregaAntesDe); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EntregaAntesDe")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ConsumoAntesDe"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ConsumoAntesDe); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ConsumoAntesDe")
	}
	return nil
}
