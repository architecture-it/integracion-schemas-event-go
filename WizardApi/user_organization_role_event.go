// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     UserOrganizationRoleEvent.avsc
 */
package WizardApiEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type UserOrganizationRoleEvent struct {
	Role RoleEvent `json:"Role"`

	User GithubUserEvent `json:"User"`
}

const UserOrganizationRoleEventAvroCRC64Fingerprint = "›ê\xb1\xba\x03\xaa~\xcb"

func NewUserOrganizationRoleEvent() UserOrganizationRoleEvent {
	r := UserOrganizationRoleEvent{}
	r.Role = NewRoleEvent()

	r.User = NewGithubUserEvent()

	return r
}

func DeserializeUserOrganizationRoleEvent(r io.Reader) (UserOrganizationRoleEvent, error) {
	t := NewUserOrganizationRoleEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeUserOrganizationRoleEventFromSchema(r io.Reader, schema string) (UserOrganizationRoleEvent, error) {
	t := NewUserOrganizationRoleEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeUserOrganizationRoleEvent(r UserOrganizationRoleEvent, w io.Writer) error {
	var err error
	err = writeRoleEvent(r.Role, w)
	if err != nil {
		return err
	}
	err = writeGithubUserEvent(r.User, w)
	if err != nil {
		return err
	}
	return err
}

func (r UserOrganizationRoleEvent) Serialize(w io.Writer) error {
	return writeUserOrganizationRoleEvent(r, w)
}

func (r UserOrganizationRoleEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"Role\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Description\",\"type\":\"string\"},{\"default\":null,\"name\":\"IsUserRole\",\"type\":[\"null\",\"boolean\"]}],\"name\":\"RoleEvent\",\"type\":\"record\"}},{\"name\":\"User\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"LoginName\",\"type\":\"string\"},{\"name\":\"UserName\",\"type\":\"string\"},{\"default\":null,\"name\":\"Email\",\"type\":[\"null\",\"string\"]}],\"name\":\"GithubUserEvent\",\"namespace\":\"Andreani.WizardApi.Events.Common\",\"type\":\"record\"}}],\"name\":\"Andreani.WizardApi.Events.Record.UserOrganizationRoleEvent\",\"type\":\"record\"}"
}

func (r UserOrganizationRoleEvent) SchemaName() string {
	return "Andreani.WizardApi.Events.Record.UserOrganizationRoleEvent"
}

func (_ UserOrganizationRoleEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ UserOrganizationRoleEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ UserOrganizationRoleEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ UserOrganizationRoleEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ UserOrganizationRoleEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ UserOrganizationRoleEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ UserOrganizationRoleEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ UserOrganizationRoleEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *UserOrganizationRoleEvent) Get(i int) types.Field {
	switch i {
	case 0:
		r.Role = NewRoleEvent()

		w := types.Record{Target: &r.Role}

		return w

	case 1:
		r.User = NewGithubUserEvent()

		w := types.Record{Target: &r.User}

		return w

	}
	panic("Unknown field index")
}

func (r *UserOrganizationRoleEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *UserOrganizationRoleEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ UserOrganizationRoleEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ UserOrganizationRoleEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ UserOrganizationRoleEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ UserOrganizationRoleEvent) Finalize()                        {}

func (_ UserOrganizationRoleEvent) AvroCRC64Fingerprint() []byte {
	return []byte(UserOrganizationRoleEventAvroCRC64Fingerprint)
}

func (r UserOrganizationRoleEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Role"], err = json.Marshal(r.Role)
	if err != nil {
		return nil, err
	}
	output["User"], err = json.Marshal(r.User)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *UserOrganizationRoleEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Role"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Role); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Role")
	}
	val = func() json.RawMessage {
		if v, ok := fields["User"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.User); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for User")
	}
	return nil
}
