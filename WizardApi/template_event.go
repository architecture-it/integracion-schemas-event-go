// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TemplateEvent.avsc
 */
package WizardApiEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TemplateEvent struct {
	Id int32 `json:"Id"`

	Name string `json:"Name"`

	Alias string `json:"Alias"`

	IsTemplate bool `json:"IsTemplate"`

	Active bool `json:"Active"`

	FrameworkVersion FrameworkVersionEvent `json:"FrameworkVersion"`

	Workflow WorkflowCiEvent `json:"Workflow"`
}

const TemplateEventAvroCRC64Fingerprint = "G\xc6\xc0_\xaeT4\x9f"

func NewTemplateEvent() TemplateEvent {
	r := TemplateEvent{}
	r.FrameworkVersion = NewFrameworkVersionEvent()

	r.Workflow = NewWorkflowCiEvent()

	return r
}

func DeserializeTemplateEvent(r io.Reader) (TemplateEvent, error) {
	t := NewTemplateEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTemplateEventFromSchema(r io.Reader, schema string) (TemplateEvent, error) {
	t := NewTemplateEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTemplateEvent(r TemplateEvent, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Alias, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.IsTemplate, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Active, w)
	if err != nil {
		return err
	}
	err = writeFrameworkVersionEvent(r.FrameworkVersion, w)
	if err != nil {
		return err
	}
	err = writeWorkflowCiEvent(r.Workflow, w)
	if err != nil {
		return err
	}
	return err
}

func (r TemplateEvent) Serialize(w io.Writer) error {
	return writeTemplateEvent(r, w)
}

func (r TemplateEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"Alias\",\"type\":\"string\"},{\"name\":\"IsTemplate\",\"type\":\"boolean\"},{\"name\":\"Active\",\"type\":\"boolean\"},{\"name\":\"FrameworkVersion\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Description\",\"type\":\"string\"},{\"name\":\"Latest\",\"type\":\"boolean\"},{\"name\":\"StatusVersion\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Description\",\"type\":\"string\"}],\"name\":\"StatusEvent\",\"namespace\":\"Andreani.WizardApi.Events.Common\",\"type\":\"record\"}},{\"name\":\"Framework\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"Active\",\"type\":\"boolean\"},{\"name\":\"Language\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Name\",\"type\":\"string\"}],\"name\":\"LanguageEvent\",\"type\":\"record\"}}],\"name\":\"FrameworkEvent\",\"type\":\"record\"}}],\"name\":\"FrameworkVersionEvent\",\"type\":\"record\"}},{\"name\":\"Workflow\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Description\",\"type\":\"string\"}],\"name\":\"WorkflowCiEvent\",\"type\":\"record\"}}],\"name\":\"Andreani.WizardApi.Events.Record.TemplateEvent\",\"type\":\"record\"}"
}

func (r TemplateEvent) SchemaName() string {
	return "Andreani.WizardApi.Events.Record.TemplateEvent"
}

func (_ TemplateEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TemplateEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TemplateEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TemplateEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TemplateEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TemplateEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TemplateEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ TemplateEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TemplateEvent) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.Name}

		return w

	case 2:
		w := types.String{Target: &r.Alias}

		return w

	case 3:
		w := types.Boolean{Target: &r.IsTemplate}

		return w

	case 4:
		w := types.Boolean{Target: &r.Active}

		return w

	case 5:
		r.FrameworkVersion = NewFrameworkVersionEvent()

		w := types.Record{Target: &r.FrameworkVersion}

		return w

	case 6:
		r.Workflow = NewWorkflowCiEvent()

		w := types.Record{Target: &r.Workflow}

		return w

	}
	panic("Unknown field index")
}

func (r *TemplateEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *TemplateEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ TemplateEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TemplateEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TemplateEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ TemplateEvent) Finalize()                        {}

func (_ TemplateEvent) AvroCRC64Fingerprint() []byte {
	return []byte(TemplateEventAvroCRC64Fingerprint)
}

func (r TemplateEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["Name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["Alias"], err = json.Marshal(r.Alias)
	if err != nil {
		return nil, err
	}
	output["IsTemplate"], err = json.Marshal(r.IsTemplate)
	if err != nil {
		return nil, err
	}
	output["Active"], err = json.Marshal(r.Active)
	if err != nil {
		return nil, err
	}
	output["FrameworkVersion"], err = json.Marshal(r.FrameworkVersion)
	if err != nil {
		return nil, err
	}
	output["Workflow"], err = json.Marshal(r.Workflow)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TemplateEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Alias"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Alias); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Alias")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IsTemplate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IsTemplate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IsTemplate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Active"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Active); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Active")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FrameworkVersion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FrameworkVersion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FrameworkVersion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Workflow"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Workflow); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Workflow")
	}
	return nil
}
