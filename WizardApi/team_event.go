// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TeamGroupTeamEvent.avsc
 */
package WizardApiEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TeamEvent struct {
	Id int64 `json:"Id"`

	Name string `json:"Name"`

	SlugName string `json:"SlugName"`

	Organization OrganizationEvent `json:"Organization"`

	Users []GithubUserEvent `json:"Users"`
}

const TeamEventAvroCRC64Fingerprint = "\xe2\x05%\xbaE\xe5\x99_"

func NewTeamEvent() TeamEvent {
	r := TeamEvent{}
	r.Organization = NewOrganizationEvent()

	r.Users = make([]GithubUserEvent, 0)

	r.Users = make([]GithubUserEvent, 0)

	return r
}

func DeserializeTeamEvent(r io.Reader) (TeamEvent, error) {
	t := NewTeamEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTeamEventFromSchema(r io.Reader, schema string) (TeamEvent, error) {
	t := NewTeamEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTeamEvent(r TeamEvent, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.SlugName, w)
	if err != nil {
		return err
	}
	err = writeOrganizationEvent(r.Organization, w)
	if err != nil {
		return err
	}
	err = writeArrayGithubUserEvent(r.Users, w)
	if err != nil {
		return err
	}
	return err
}

func (r TeamEvent) Serialize(w io.Writer) error {
	return writeTeamEvent(r, w)
}

func (r TeamEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"Id\",\"type\":\"long\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"SlugName\",\"type\":\"string\"},{\"name\":\"Organization\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"long\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"Freeze\",\"type\":\"boolean\"},{\"default\":null,\"name\":\"UserOrganizationRoles\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"name\":\"Role\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Description\",\"type\":\"string\"},{\"default\":null,\"name\":\"IsUserRole\",\"type\":[\"null\",\"boolean\"]}],\"name\":\"RoleEvent\",\"type\":\"record\"}},{\"name\":\"User\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"LoginName\",\"type\":\"string\"},{\"name\":\"UserName\",\"type\":\"string\"},{\"default\":null,\"name\":\"Email\",\"type\":[\"null\",\"string\"]}],\"name\":\"GithubUserEvent\",\"namespace\":\"Andreani.WizardApi.Events.Common\",\"type\":\"record\"}}],\"name\":\"UserOrganizationRoleEvent\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"OrganizationEvent\",\"type\":\"record\"}},{\"default\":[],\"name\":\"Users\",\"type\":{\"items\":\"Andreani.WizardApi.Events.Common.GithubUserEvent\",\"type\":\"array\"}}],\"name\":\"Andreani.WizardApi.Events.Record.TeamEvent\",\"type\":\"record\"}"
}

func (r TeamEvent) SchemaName() string {
	return "Andreani.WizardApi.Events.Record.TeamEvent"
}

func (_ TeamEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TeamEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TeamEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TeamEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TeamEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TeamEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TeamEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ TeamEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TeamEvent) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Long{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.Name}

		return w

	case 2:
		w := types.String{Target: &r.SlugName}

		return w

	case 3:
		r.Organization = NewOrganizationEvent()

		w := types.Record{Target: &r.Organization}

		return w

	case 4:
		r.Users = make([]GithubUserEvent, 0)

		w := ArrayGithubUserEventWrapper{Target: &r.Users}

		return w

	}
	panic("Unknown field index")
}

func (r *TeamEvent) SetDefault(i int) {
	switch i {
	case 4:
		r.Users = make([]GithubUserEvent, 0)

		return
	}
	panic("Unknown field index")
}

func (r *TeamEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ TeamEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TeamEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TeamEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ TeamEvent) Finalize()                        {}

func (_ TeamEvent) AvroCRC64Fingerprint() []byte {
	return []byte(TeamEventAvroCRC64Fingerprint)
}

func (r TeamEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["Name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["SlugName"], err = json.Marshal(r.SlugName)
	if err != nil {
		return nil, err
	}
	output["Organization"], err = json.Marshal(r.Organization)
	if err != nil {
		return nil, err
	}
	output["Users"], err = json.Marshal(r.Users)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TeamEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["SlugName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SlugName); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for SlugName")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Organization"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Organization); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Organization")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Users"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Users); err != nil {
			return err
		}
	} else {
		r.Users = make([]GithubUserEvent, 0)

		r.Users = make([]GithubUserEvent, 0)

	}
	return nil
}
