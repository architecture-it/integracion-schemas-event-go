// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TeamGroupTeamEvent.avsc
 */
package WizardApiEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayUserOrganizationRoleEventTypeEnum int

const (
	UnionNullArrayUserOrganizationRoleEventTypeEnumArrayUserOrganizationRoleEvent UnionNullArrayUserOrganizationRoleEventTypeEnum = 1
)

type UnionNullArrayUserOrganizationRoleEvent struct {
	Null                           *types.NullVal
	ArrayUserOrganizationRoleEvent []UserOrganizationRoleEvent
	UnionType                      UnionNullArrayUserOrganizationRoleEventTypeEnum
}

func writeUnionNullArrayUserOrganizationRoleEvent(r *UnionNullArrayUserOrganizationRoleEvent, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayUserOrganizationRoleEventTypeEnumArrayUserOrganizationRoleEvent:
		return writeArrayUserOrganizationRoleEvent(r.ArrayUserOrganizationRoleEvent, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayUserOrganizationRoleEvent")
}

func NewUnionNullArrayUserOrganizationRoleEvent() *UnionNullArrayUserOrganizationRoleEvent {
	return &UnionNullArrayUserOrganizationRoleEvent{}
}

func (r *UnionNullArrayUserOrganizationRoleEvent) Serialize(w io.Writer) error {
	return writeUnionNullArrayUserOrganizationRoleEvent(r, w)
}

func DeserializeUnionNullArrayUserOrganizationRoleEvent(r io.Reader) (*UnionNullArrayUserOrganizationRoleEvent, error) {
	t := NewUnionNullArrayUserOrganizationRoleEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayUserOrganizationRoleEventFromSchema(r io.Reader, schema string) (*UnionNullArrayUserOrganizationRoleEvent, error) {
	t := NewUnionNullArrayUserOrganizationRoleEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayUserOrganizationRoleEvent) Schema() string {
	return "[\"null\",{\"items\":{\"fields\":[{\"name\":\"Role\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Description\",\"type\":\"string\"},{\"default\":null,\"name\":\"IsUserRole\",\"type\":[\"null\",\"boolean\"]}],\"name\":\"RoleEvent\",\"type\":\"record\"}},{\"name\":\"User\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"LoginName\",\"type\":\"string\"},{\"name\":\"UserName\",\"type\":\"string\"},{\"default\":null,\"name\":\"Email\",\"type\":[\"null\",\"string\"]}],\"name\":\"GithubUserEvent\",\"namespace\":\"Andreani.WizardApi.Events.Common\",\"type\":\"record\"}}],\"name\":\"UserOrganizationRoleEvent\",\"type\":\"record\"},\"type\":\"array\"}]"
}

func (_ *UnionNullArrayUserOrganizationRoleEvent) SetBoolean(v bool)  { panic("Unsupported operation") }
func (_ *UnionNullArrayUserOrganizationRoleEvent) SetInt(v int32)     { panic("Unsupported operation") }
func (_ *UnionNullArrayUserOrganizationRoleEvent) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *UnionNullArrayUserOrganizationRoleEvent) SetDouble(v float64) {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUserOrganizationRoleEvent) SetBytes(v []byte)  { panic("Unsupported operation") }
func (_ *UnionNullArrayUserOrganizationRoleEvent) SetString(v string) { panic("Unsupported operation") }

func (r *UnionNullArrayUserOrganizationRoleEvent) SetLong(v int64) {

	r.UnionType = (UnionNullArrayUserOrganizationRoleEventTypeEnum)(v)
}

func (r *UnionNullArrayUserOrganizationRoleEvent) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayUserOrganizationRoleEvent = make([]UserOrganizationRoleEvent, 0)
		return &ArrayUserOrganizationRoleEventWrapper{Target: (&r.ArrayUserOrganizationRoleEvent)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayUserOrganizationRoleEvent) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullArrayUserOrganizationRoleEvent) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUserOrganizationRoleEvent) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullArrayUserOrganizationRoleEvent) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUserOrganizationRoleEvent) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUserOrganizationRoleEvent) Finalize() {}

func (r *UnionNullArrayUserOrganizationRoleEvent) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayUserOrganizationRoleEventTypeEnumArrayUserOrganizationRoleEvent:
		return json.Marshal(map[string]interface{}{"array": r.ArrayUserOrganizationRoleEvent})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayUserOrganizationRoleEvent")
}

func (r *UnionNullArrayUserOrganizationRoleEvent) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayUserOrganizationRoleEvent)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayUserOrganizationRoleEvent")
}
