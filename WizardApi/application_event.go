// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ApplicationEvent.avsc
 */
package WizardApiEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ApplicationEvent struct {
	Id int32 `json:"Id"`

	Name string `json:"Name"`

	Deleted bool `json:"Deleted"`

	IsMigration bool `json:"IsMigration"`

	Project Project `json:"Project"`

	PipelineVersion PipelineVersion `json:"PipelineVersion"`

	Repository Repository `json:"Repository"`

	Environments []Environment `json:"Environments"`
}

const ApplicationEventAvroCRC64Fingerprint = "\x00\xeb^\x7f\xc6]\xf9\x95"

func NewApplicationEvent() ApplicationEvent {
	r := ApplicationEvent{}
	r.Project = NewProject()

	r.PipelineVersion = NewPipelineVersion()

	r.Repository = NewRepository()

	r.Environments = make([]Environment, 0)

	return r
}

func DeserializeApplicationEvent(r io.Reader) (ApplicationEvent, error) {
	t := NewApplicationEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeApplicationEventFromSchema(r io.Reader, schema string) (ApplicationEvent, error) {
	t := NewApplicationEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeApplicationEvent(r ApplicationEvent, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Deleted, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.IsMigration, w)
	if err != nil {
		return err
	}
	err = writeProject(r.Project, w)
	if err != nil {
		return err
	}
	err = writePipelineVersion(r.PipelineVersion, w)
	if err != nil {
		return err
	}
	err = writeRepository(r.Repository, w)
	if err != nil {
		return err
	}
	err = writeArrayEnvironment(r.Environments, w)
	if err != nil {
		return err
	}
	return err
}

func (r ApplicationEvent) Serialize(w io.Writer) error {
	return writeApplicationEvent(r, w)
}

func (r ApplicationEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"Deleted\",\"type\":\"boolean\"},{\"name\":\"IsMigration\",\"type\":\"boolean\"},{\"name\":\"Project\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"Acronym\",\"type\":\"string\"},{\"name\":\"OwnerMail\",\"type\":\"string\"},{\"name\":\"Deleted\",\"type\":\"boolean\"}],\"name\":\"Project\",\"type\":\"record\"}},{\"name\":\"PipelineVersion\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Version\",\"type\":\"string\"},{\"name\":\"ReleaseNotes\",\"type\":\"string\"},{\"name\":\"Deleted\",\"type\":\"boolean\"},{\"name\":\"Latest\",\"type\":\"boolean\"},{\"name\":\"Pipeline\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"Description\",\"type\":\"string\"},{\"name\":\"RepositoryConfig\",\"type\":\"string\"},{\"name\":\"Deleted\",\"type\":\"boolean\"}],\"name\":\"Pipeline\",\"type\":\"record\"}}],\"name\":\"PipelineVersion\",\"type\":\"record\"}},{\"name\":\"Repository\",\"type\":{\"fields\":[{\"name\":\"RepositoryId\",\"type\":\"long\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"User\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"LoginName\",\"type\":\"string\"},{\"name\":\"UserName\",\"type\":\"string\"},{\"name\":\"Email\",\"type\":\"string\"}],\"name\":\"GithubUser\",\"namespace\":\"Andreani.WizardApi.Events.Common\",\"type\":\"record\"}},{\"name\":\"Organization\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"long\"},{\"name\":\"Name\",\"type\":\"string\"}],\"name\":\"Organization\",\"namespace\":\"Andreani.WizardApi.Events.Common\",\"type\":\"record\"}}],\"name\":\"Repository\",\"type\":\"record\"}},{\"name\":\"Environments\",\"type\":{\"items\":{\"fields\":[{\"name\":\"Id\",\"type\":\"long\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"HostName\",\"type\":\"string\"},{\"name\":\"IsProduction\",\"type\":\"boolean\"},{\"name\":\"Schedule\",\"type\":\"string\"},{\"name\":\"MatrixDeploy\",\"type\":\"string\"},{\"name\":\"Deleted\",\"type\":\"boolean\"},{\"name\":\"RepoEnvironmentName\",\"type\":\"string\"}],\"name\":\"Environment\",\"namespace\":\"Andreani.WizardApi.Events.Common\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Andreani.WizardApi.Events.Record.ApplicationEvent\",\"type\":\"record\"}"
}

func (r ApplicationEvent) SchemaName() string {
	return "Andreani.WizardApi.Events.Record.ApplicationEvent"
}

func (_ ApplicationEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ApplicationEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ApplicationEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ApplicationEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ApplicationEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ApplicationEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ApplicationEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ ApplicationEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ApplicationEvent) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.Name}

		return w

	case 2:
		w := types.Boolean{Target: &r.Deleted}

		return w

	case 3:
		w := types.Boolean{Target: &r.IsMigration}

		return w

	case 4:
		r.Project = NewProject()

		w := types.Record{Target: &r.Project}

		return w

	case 5:
		r.PipelineVersion = NewPipelineVersion()

		w := types.Record{Target: &r.PipelineVersion}

		return w

	case 6:
		r.Repository = NewRepository()

		w := types.Record{Target: &r.Repository}

		return w

	case 7:
		r.Environments = make([]Environment, 0)

		w := ArrayEnvironmentWrapper{Target: &r.Environments}

		return w

	}
	panic("Unknown field index")
}

func (r *ApplicationEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ApplicationEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ ApplicationEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ApplicationEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ApplicationEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ ApplicationEvent) Finalize()                        {}

func (_ ApplicationEvent) AvroCRC64Fingerprint() []byte {
	return []byte(ApplicationEventAvroCRC64Fingerprint)
}

func (r ApplicationEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["Name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["Deleted"], err = json.Marshal(r.Deleted)
	if err != nil {
		return nil, err
	}
	output["IsMigration"], err = json.Marshal(r.IsMigration)
	if err != nil {
		return nil, err
	}
	output["Project"], err = json.Marshal(r.Project)
	if err != nil {
		return nil, err
	}
	output["PipelineVersion"], err = json.Marshal(r.PipelineVersion)
	if err != nil {
		return nil, err
	}
	output["Repository"], err = json.Marshal(r.Repository)
	if err != nil {
		return nil, err
	}
	output["Environments"], err = json.Marshal(r.Environments)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ApplicationEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Deleted"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Deleted); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Deleted")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IsMigration"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IsMigration); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IsMigration")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Project"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Project); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Project")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PipelineVersion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PipelineVersion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PipelineVersion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Repository"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Repository); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Repository")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Environments"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Environments); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Environments")
	}
	return nil
}
