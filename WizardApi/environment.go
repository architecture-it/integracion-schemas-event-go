// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Environment.avsc
 */
package WizardApiEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Environment struct {
	Id int64 `json:"Id"`

	Name string `json:"Name"`

	HostName string `json:"HostName"`

	IsProduction bool `json:"IsProduction"`

	Schedule string `json:"Schedule"`

	MatrixDeploy string `json:"MatrixDeploy"`

	Deleted bool `json:"Deleted"`
}

const EnvironmentAvroCRC64Fingerprint = "\t?UF)&\x8aB"

func NewEnvironment() Environment {
	r := Environment{}
	return r
}

func DeserializeEnvironment(r io.Reader) (Environment, error) {
	t := NewEnvironment()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEnvironmentFromSchema(r io.Reader, schema string) (Environment, error) {
	t := NewEnvironment()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEnvironment(r Environment, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.HostName, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.IsProduction, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Schedule, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.MatrixDeploy, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Deleted, w)
	if err != nil {
		return err
	}
	return err
}

func (r Environment) Serialize(w io.Writer) error {
	return writeEnvironment(r, w)
}

func (r Environment) Schema() string {
	return "{\"fields\":[{\"name\":\"Id\",\"type\":\"long\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"HostName\",\"type\":\"string\"},{\"name\":\"IsProduction\",\"type\":\"boolean\"},{\"name\":\"Schedule\",\"type\":\"string\"},{\"name\":\"MatrixDeploy\",\"type\":\"string\"},{\"name\":\"Deleted\",\"type\":\"boolean\"}],\"name\":\"Andreani.WizardApi.Events.Common.Environment\",\"type\":\"record\"}"
}

func (r Environment) SchemaName() string {
	return "Andreani.WizardApi.Events.Common.Environment"
}

func (_ Environment) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Environment) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Environment) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Environment) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Environment) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Environment) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Environment) SetString(v string)   { panic("Unsupported operation") }
func (_ Environment) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Environment) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Long{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.Name}

		return w

	case 2:
		w := types.String{Target: &r.HostName}

		return w

	case 3:
		w := types.Boolean{Target: &r.IsProduction}

		return w

	case 4:
		w := types.String{Target: &r.Schedule}

		return w

	case 5:
		w := types.String{Target: &r.MatrixDeploy}

		return w

	case 6:
		w := types.Boolean{Target: &r.Deleted}

		return w

	}
	panic("Unknown field index")
}

func (r *Environment) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Environment) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Environment) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Environment) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Environment) HintSize(int)                     { panic("Unsupported operation") }
func (_ Environment) Finalize()                        {}

func (_ Environment) AvroCRC64Fingerprint() []byte {
	return []byte(EnvironmentAvroCRC64Fingerprint)
}

func (r Environment) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["Name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["HostName"], err = json.Marshal(r.HostName)
	if err != nil {
		return nil, err
	}
	output["IsProduction"], err = json.Marshal(r.IsProduction)
	if err != nil {
		return nil, err
	}
	output["Schedule"], err = json.Marshal(r.Schedule)
	if err != nil {
		return nil, err
	}
	output["MatrixDeploy"], err = json.Marshal(r.MatrixDeploy)
	if err != nil {
		return nil, err
	}
	output["Deleted"], err = json.Marshal(r.Deleted)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Environment) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["HostName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HostName); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for HostName")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IsProduction"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IsProduction); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IsProduction")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Schedule"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Schedule); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Schedule")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MatrixDeploy"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MatrixDeploy); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for MatrixDeploy")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Deleted"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Deleted); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Deleted")
	}
	return nil
}
