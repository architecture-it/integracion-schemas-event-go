// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ProjectEvent.avsc
 */
package WizardApiEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ProjectEvent struct {
	Id int32 `json:"Id"`

	Name string `json:"Name"`

	Acronym string `json:"Acronym"`

	Description string `json:"Description"`

	OwnerMail string `json:"OwnerMail"`

	OrganizationId int64 `json:"OrganizationId"`

	JsonData *UnionNullString `json:"JsonData"`

	AuditInfo AuditEvent `json:"AuditInfo"`
}

const ProjectEventAvroCRC64Fingerprint = "\xca\xff\xd0\x1c,,vy"

func NewProjectEvent() ProjectEvent {
	r := ProjectEvent{}
	r.JsonData = nil
	r.AuditInfo = NewAuditEvent()

	return r
}

func DeserializeProjectEvent(r io.Reader) (ProjectEvent, error) {
	t := NewProjectEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeProjectEventFromSchema(r io.Reader, schema string) (ProjectEvent, error) {
	t := NewProjectEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeProjectEvent(r ProjectEvent, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Acronym, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Description, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OwnerMail, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.OrganizationId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.JsonData, w)
	if err != nil {
		return err
	}
	err = writeAuditEvent(r.AuditInfo, w)
	if err != nil {
		return err
	}
	return err
}

func (r ProjectEvent) Serialize(w io.Writer) error {
	return writeProjectEvent(r, w)
}

func (r ProjectEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"Acronym\",\"type\":\"string\"},{\"name\":\"Description\",\"type\":\"string\"},{\"name\":\"OwnerMail\",\"type\":\"string\"},{\"name\":\"OrganizationId\",\"type\":\"long\"},{\"default\":null,\"name\":\"JsonData\",\"type\":[\"null\",\"string\"]},{\"name\":\"AuditInfo\",\"type\":{\"fields\":[{\"name\":\"CreateBy\",\"type\":\"string\"},{\"name\":\"CreateDate\",\"type\":{\"logicalType\":\"date\",\"type\":\"int\"}},{\"default\":null,\"name\":\"UpdateBy\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"UpdateDate\",\"type\":[\"null\",{\"logicalType\":\"date\",\"type\":\"int\"}]},{\"name\":\"Deleted\",\"type\":\"boolean\"},{\"default\":null,\"name\":\"DeletedBy\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"DeletedDate\",\"type\":[\"null\",{\"logicalType\":\"date\",\"type\":\"int\"}]}],\"name\":\"AuditEvent\",\"namespace\":\"Andreani.WizardApi.Events.Common\",\"type\":\"record\"}}],\"name\":\"Andreani.WizardApi.Events.Record.ProjectEvent\",\"type\":\"record\"}"
}

func (r ProjectEvent) SchemaName() string {
	return "Andreani.WizardApi.Events.Record.ProjectEvent"
}

func (_ ProjectEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ProjectEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ProjectEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ProjectEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ProjectEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ProjectEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ProjectEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ ProjectEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ProjectEvent) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.Name}

		return w

	case 2:
		w := types.String{Target: &r.Acronym}

		return w

	case 3:
		w := types.String{Target: &r.Description}

		return w

	case 4:
		w := types.String{Target: &r.OwnerMail}

		return w

	case 5:
		w := types.Long{Target: &r.OrganizationId}

		return w

	case 6:
		r.JsonData = NewUnionNullString()

		return r.JsonData
	case 7:
		r.AuditInfo = NewAuditEvent()

		w := types.Record{Target: &r.AuditInfo}

		return w

	}
	panic("Unknown field index")
}

func (r *ProjectEvent) SetDefault(i int) {
	switch i {
	case 6:
		r.JsonData = nil
		return
	}
	panic("Unknown field index")
}

func (r *ProjectEvent) NullField(i int) {
	switch i {
	case 6:
		r.JsonData = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ProjectEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ProjectEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ProjectEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ ProjectEvent) Finalize()                        {}

func (_ ProjectEvent) AvroCRC64Fingerprint() []byte {
	return []byte(ProjectEventAvroCRC64Fingerprint)
}

func (r ProjectEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["Name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["Acronym"], err = json.Marshal(r.Acronym)
	if err != nil {
		return nil, err
	}
	output["Description"], err = json.Marshal(r.Description)
	if err != nil {
		return nil, err
	}
	output["OwnerMail"], err = json.Marshal(r.OwnerMail)
	if err != nil {
		return nil, err
	}
	output["OrganizationId"], err = json.Marshal(r.OrganizationId)
	if err != nil {
		return nil, err
	}
	output["JsonData"], err = json.Marshal(r.JsonData)
	if err != nil {
		return nil, err
	}
	output["AuditInfo"], err = json.Marshal(r.AuditInfo)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ProjectEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Acronym"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Acronym); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Acronym")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Description"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Description); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Description")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OwnerMail"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OwnerMail); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OwnerMail")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OrganizationId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrganizationId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OrganizationId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["JsonData"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.JsonData); err != nil {
			return err
		}
	} else {
		r.JsonData = NewUnionNullString()

		r.JsonData = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["AuditInfo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AuditInfo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AuditInfo")
	}
	return nil
}
