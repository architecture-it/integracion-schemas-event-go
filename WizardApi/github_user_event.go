// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     UserOrganizationRoleEvent.avsc
 */
package WizardApiEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type GithubUserEvent struct {
	Id int32 `json:"Id"`

	LoginName string `json:"LoginName"`

	UserName string `json:"UserName"`

	Email *UnionNullString `json:"Email"`
}

const GithubUserEventAvroCRC64Fingerprint = "y.F\xad\xdb\xc6*\x17"

func NewGithubUserEvent() GithubUserEvent {
	r := GithubUserEvent{}
	r.Email = nil
	return r
}

func DeserializeGithubUserEvent(r io.Reader) (GithubUserEvent, error) {
	t := NewGithubUserEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeGithubUserEventFromSchema(r io.Reader, schema string) (GithubUserEvent, error) {
	t := NewGithubUserEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeGithubUserEvent(r GithubUserEvent, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoginName, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.UserName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Email, w)
	if err != nil {
		return err
	}
	return err
}

func (r GithubUserEvent) Serialize(w io.Writer) error {
	return writeGithubUserEvent(r, w)
}

func (r GithubUserEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"LoginName\",\"type\":\"string\"},{\"name\":\"UserName\",\"type\":\"string\"},{\"default\":null,\"name\":\"Email\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.WizardApi.Events.Common.GithubUserEvent\",\"type\":\"record\"}"
}

func (r GithubUserEvent) SchemaName() string {
	return "Andreani.WizardApi.Events.Common.GithubUserEvent"
}

func (_ GithubUserEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ GithubUserEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ GithubUserEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ GithubUserEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ GithubUserEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ GithubUserEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ GithubUserEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ GithubUserEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *GithubUserEvent) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.LoginName}

		return w

	case 2:
		w := types.String{Target: &r.UserName}

		return w

	case 3:
		r.Email = NewUnionNullString()

		return r.Email
	}
	panic("Unknown field index")
}

func (r *GithubUserEvent) SetDefault(i int) {
	switch i {
	case 3:
		r.Email = nil
		return
	}
	panic("Unknown field index")
}

func (r *GithubUserEvent) NullField(i int) {
	switch i {
	case 3:
		r.Email = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ GithubUserEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ GithubUserEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ GithubUserEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ GithubUserEvent) Finalize()                        {}

func (_ GithubUserEvent) AvroCRC64Fingerprint() []byte {
	return []byte(GithubUserEventAvroCRC64Fingerprint)
}

func (r GithubUserEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["LoginName"], err = json.Marshal(r.LoginName)
	if err != nil {
		return nil, err
	}
	output["UserName"], err = json.Marshal(r.UserName)
	if err != nil {
		return nil, err
	}
	output["Email"], err = json.Marshal(r.Email)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *GithubUserEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["LoginName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoginName); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for LoginName")
	}
	val = func() json.RawMessage {
		if v, ok := fields["UserName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UserName); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for UserName")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Email"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Email); err != nil {
			return err
		}
	} else {
		r.Email = NewUnionNullString()

		r.Email = nil
	}
	return nil
}
