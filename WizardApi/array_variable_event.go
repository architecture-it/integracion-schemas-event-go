// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     RepositoryEvent.avsc
 */
package WizardApiEvents

import (
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

func writeArrayVariableEvent(r []VariableEvent, w io.Writer) error {
	err := vm.WriteLong(int64(len(r)), w)
	if err != nil || len(r) == 0 {
		return err
	}
	for _, e := range r {
		err = writeVariableEvent(e, w)
		if err != nil {
			return err
		}
	}
	return vm.WriteLong(0, w)
}

type ArrayVariableEventWrapper struct {
	Target *[]VariableEvent
}

func (_ ArrayVariableEventWrapper) SetBoolean(v bool)                { panic("Unsupported operation") }
func (_ ArrayVariableEventWrapper) SetInt(v int32)                   { panic("Unsupported operation") }
func (_ ArrayVariableEventWrapper) SetLong(v int64)                  { panic("Unsupported operation") }
func (_ ArrayVariableEventWrapper) SetFloat(v float32)               { panic("Unsupported operation") }
func (_ ArrayVariableEventWrapper) SetDouble(v float64)              { panic("Unsupported operation") }
func (_ ArrayVariableEventWrapper) SetBytes(v []byte)                { panic("Unsupported operation") }
func (_ ArrayVariableEventWrapper) SetString(v string)               { panic("Unsupported operation") }
func (_ ArrayVariableEventWrapper) SetUnionElem(v int64)             { panic("Unsupported operation") }
func (_ ArrayVariableEventWrapper) Get(i int) types.Field            { panic("Unsupported operation") }
func (_ ArrayVariableEventWrapper) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ArrayVariableEventWrapper) Finalize()                        {}
func (_ ArrayVariableEventWrapper) SetDefault(i int)                 { panic("Unsupported operation") }
func (r ArrayVariableEventWrapper) HintSize(s int) {
	if len(*r.Target) == 0 {
		*r.Target = make([]VariableEvent, 0, s)
	}
}
func (r ArrayVariableEventWrapper) NullField(i int) {
	panic("Unsupported operation")
}

func (r ArrayVariableEventWrapper) AppendArray() types.Field {
	var v VariableEvent
	v = NewVariableEvent()

	*r.Target = append(*r.Target, v)
	return &types.Record{Target: &(*r.Target)[len(*r.Target)-1]}
}
