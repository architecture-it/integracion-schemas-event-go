// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     RepositoryEvent.avsc
 */
package WizardApiEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EnvironmentEvent struct {
	Id int64 `json:"Id"`

	Name string `json:"Name"`

	HostName string `json:"HostName"`

	IsProduction bool `json:"IsProduction"`

	Schedule string `json:"Schedule"`

	MatrixDeploy string `json:"MatrixDeploy"`

	EnvironmentVariables []EnvironmentVariableEvent `json:"EnvironmentVariables"`

	EnvironmentSecrets []EnvironmentSecretEvent `json:"EnvironmentSecrets"`

	ApprovalTeams []TeamEvent `json:"ApprovalTeams"`

	AuditInfo AuditEvent `json:"AuditInfo"`
}

const EnvironmentEventAvroCRC64Fingerprint = "\x98\xd9\xfbJcZÑ°"

func NewEnvironmentEvent() EnvironmentEvent {
	r := EnvironmentEvent{}
	r.EnvironmentVariables = make([]EnvironmentVariableEvent, 0)

	r.EnvironmentVariables = make([]EnvironmentVariableEvent, 0)

	r.EnvironmentSecrets = make([]EnvironmentSecretEvent, 0)

	r.EnvironmentSecrets = make([]EnvironmentSecretEvent, 0)

	r.ApprovalTeams = make([]TeamEvent, 0)

	r.ApprovalTeams = make([]TeamEvent, 0)

	r.AuditInfo = NewAuditEvent()

	return r
}

func DeserializeEnvironmentEvent(r io.Reader) (EnvironmentEvent, error) {
	t := NewEnvironmentEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEnvironmentEventFromSchema(r io.Reader, schema string) (EnvironmentEvent, error) {
	t := NewEnvironmentEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEnvironmentEvent(r EnvironmentEvent, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.HostName, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.IsProduction, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Schedule, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.MatrixDeploy, w)
	if err != nil {
		return err
	}
	err = writeArrayEnvironmentVariableEvent(r.EnvironmentVariables, w)
	if err != nil {
		return err
	}
	err = writeArrayEnvironmentSecretEvent(r.EnvironmentSecrets, w)
	if err != nil {
		return err
	}
	err = writeArrayTeamEvent(r.ApprovalTeams, w)
	if err != nil {
		return err
	}
	err = writeAuditEvent(r.AuditInfo, w)
	if err != nil {
		return err
	}
	return err
}

func (r EnvironmentEvent) Serialize(w io.Writer) error {
	return writeEnvironmentEvent(r, w)
}

func (r EnvironmentEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"Id\",\"type\":\"long\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"HostName\",\"type\":\"string\"},{\"name\":\"IsProduction\",\"type\":\"boolean\"},{\"name\":\"Schedule\",\"type\":\"string\"},{\"name\":\"MatrixDeploy\",\"type\":\"string\"},{\"default\":[],\"name\":\"EnvironmentVariables\",\"type\":{\"items\":{\"fields\":[{\"name\":\"Id\",\"type\":\"long\"},{\"name\":\"Key\",\"type\":\"string\"},{\"name\":\"Value\",\"type\":\"string\"},{\"name\":\"AuditInfo\",\"type\":{\"fields\":[{\"name\":\"CreateBy\",\"type\":\"string\"},{\"name\":\"CreateDate\",\"type\":{\"logicalType\":\"date\",\"type\":\"int\"}},{\"default\":null,\"name\":\"UpdateBy\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"UpdateDate\",\"type\":[\"null\",{\"logicalType\":\"date\",\"type\":\"int\"}]},{\"name\":\"Deleted\",\"type\":\"boolean\"},{\"default\":null,\"name\":\"DeletedBy\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"DeletedDate\",\"type\":[\"null\",{\"logicalType\":\"date\",\"type\":\"int\"}]}],\"name\":\"AuditEvent\",\"namespace\":\"Andreani.WizardApi.Events.Common\",\"type\":\"record\"}}],\"name\":\"EnvironmentVariableEvent\",\"type\":\"record\"},\"type\":\"array\"}},{\"default\":[],\"name\":\"EnvironmentSecrets\",\"type\":{\"items\":{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Key\",\"type\":\"string\"},{\"name\":\"AuditInfo\",\"type\":\"Andreani.WizardApi.Events.Common.AuditEvent\"}],\"name\":\"EnvironmentSecretEvent\",\"type\":\"record\"},\"type\":\"array\"}},{\"default\":[],\"name\":\"ApprovalTeams\",\"type\":{\"items\":{\"fields\":[{\"name\":\"Id\",\"type\":\"long\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"SlugName\",\"type\":\"string\"},{\"name\":\"Organization\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"long\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"Freeze\",\"type\":\"boolean\"},{\"name\":\"UserOrganizationRoles\",\"type\":{\"items\":{\"fields\":[{\"name\":\"Role\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Description\",\"type\":\"string\"},{\"default\":null,\"name\":\"IsUserRole\",\"type\":[\"null\",\"boolean\"]}],\"name\":\"RoleEvent\",\"type\":\"record\"}},{\"name\":\"User\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"LoginName\",\"type\":\"string\"},{\"name\":\"UserName\",\"type\":\"string\"},{\"default\":null,\"name\":\"Email\",\"type\":[\"null\",\"string\"]}],\"name\":\"GithubUserEvent\",\"namespace\":\"Andreani.WizardApi.Events.Common\",\"type\":\"record\"}}],\"name\":\"UserOrganizationRoleEvent\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"OrganizationEvent\",\"type\":\"record\"}},{\"default\":[],\"name\":\"Users\",\"type\":{\"items\":\"Andreani.WizardApi.Events.Common.GithubUserEvent\",\"type\":\"array\"}}],\"name\":\"TeamEvent\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"AuditInfo\",\"type\":\"Andreani.WizardApi.Events.Common.AuditEvent\"}],\"name\":\"Andreani.WizardApi.Events.Record.EnvironmentEvent\",\"type\":\"record\"}"
}

func (r EnvironmentEvent) SchemaName() string {
	return "Andreani.WizardApi.Events.Record.EnvironmentEvent"
}

func (_ EnvironmentEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EnvironmentEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EnvironmentEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EnvironmentEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EnvironmentEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EnvironmentEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EnvironmentEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ EnvironmentEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EnvironmentEvent) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Long{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.Name}

		return w

	case 2:
		w := types.String{Target: &r.HostName}

		return w

	case 3:
		w := types.Boolean{Target: &r.IsProduction}

		return w

	case 4:
		w := types.String{Target: &r.Schedule}

		return w

	case 5:
		w := types.String{Target: &r.MatrixDeploy}

		return w

	case 6:
		r.EnvironmentVariables = make([]EnvironmentVariableEvent, 0)

		w := ArrayEnvironmentVariableEventWrapper{Target: &r.EnvironmentVariables}

		return w

	case 7:
		r.EnvironmentSecrets = make([]EnvironmentSecretEvent, 0)

		w := ArrayEnvironmentSecretEventWrapper{Target: &r.EnvironmentSecrets}

		return w

	case 8:
		r.ApprovalTeams = make([]TeamEvent, 0)

		w := ArrayTeamEventWrapper{Target: &r.ApprovalTeams}

		return w

	case 9:
		r.AuditInfo = NewAuditEvent()

		w := types.Record{Target: &r.AuditInfo}

		return w

	}
	panic("Unknown field index")
}

func (r *EnvironmentEvent) SetDefault(i int) {
	switch i {
	case 6:
		r.EnvironmentVariables = make([]EnvironmentVariableEvent, 0)

		return
	case 7:
		r.EnvironmentSecrets = make([]EnvironmentSecretEvent, 0)

		return
	case 8:
		r.ApprovalTeams = make([]TeamEvent, 0)

		return
	}
	panic("Unknown field index")
}

func (r *EnvironmentEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ EnvironmentEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EnvironmentEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EnvironmentEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ EnvironmentEvent) Finalize()                        {}

func (_ EnvironmentEvent) AvroCRC64Fingerprint() []byte {
	return []byte(EnvironmentEventAvroCRC64Fingerprint)
}

func (r EnvironmentEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["Name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["HostName"], err = json.Marshal(r.HostName)
	if err != nil {
		return nil, err
	}
	output["IsProduction"], err = json.Marshal(r.IsProduction)
	if err != nil {
		return nil, err
	}
	output["Schedule"], err = json.Marshal(r.Schedule)
	if err != nil {
		return nil, err
	}
	output["MatrixDeploy"], err = json.Marshal(r.MatrixDeploy)
	if err != nil {
		return nil, err
	}
	output["EnvironmentVariables"], err = json.Marshal(r.EnvironmentVariables)
	if err != nil {
		return nil, err
	}
	output["EnvironmentSecrets"], err = json.Marshal(r.EnvironmentSecrets)
	if err != nil {
		return nil, err
	}
	output["ApprovalTeams"], err = json.Marshal(r.ApprovalTeams)
	if err != nil {
		return nil, err
	}
	output["AuditInfo"], err = json.Marshal(r.AuditInfo)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EnvironmentEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["HostName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HostName); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for HostName")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IsProduction"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IsProduction); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IsProduction")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Schedule"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Schedule); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Schedule")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MatrixDeploy"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MatrixDeploy); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for MatrixDeploy")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EnvironmentVariables"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EnvironmentVariables); err != nil {
			return err
		}
	} else {
		r.EnvironmentVariables = make([]EnvironmentVariableEvent, 0)

		r.EnvironmentVariables = make([]EnvironmentVariableEvent, 0)

	}
	val = func() json.RawMessage {
		if v, ok := fields["EnvironmentSecrets"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EnvironmentSecrets); err != nil {
			return err
		}
	} else {
		r.EnvironmentSecrets = make([]EnvironmentSecretEvent, 0)

		r.EnvironmentSecrets = make([]EnvironmentSecretEvent, 0)

	}
	val = func() json.RawMessage {
		if v, ok := fields["ApprovalTeams"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ApprovalTeams); err != nil {
			return err
		}
	} else {
		r.ApprovalTeams = make([]TeamEvent, 0)

		r.ApprovalTeams = make([]TeamEvent, 0)

	}
	val = func() json.RawMessage {
		if v, ok := fields["AuditInfo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AuditInfo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AuditInfo")
	}
	return nil
}
