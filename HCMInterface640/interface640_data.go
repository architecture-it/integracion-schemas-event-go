// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ListInterface640.avsc
 */
package HCMInterface640Events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Interface640Data struct {
	Legajo int64 `json:"Legajo"`

	CausaBaja string `json:"CausaBaja"`

	FechaAlta string `json:"FechaAlta"`

	FechaBaja string `json:"FechaBaja"`

	Estado string `json:"Estado"`

	AntigPSueldo string `json:"AntigPSueldo"`

	AntigPVacaciones string `json:"AntigPVacaciones"`

	AntigPIndemnizacion string `json:"AntigPIndemnizacion"`

	AntigPReal string `json:"AntigPReal"`

	FechaAltaReconocida string `json:"FechaAltaReconocida"`
}

const Interface640DataAvroCRC64Fingerprint = "1\xe5g\x19\x1a\x7fc\xc3"

func NewInterface640Data() Interface640Data {
	r := Interface640Data{}
	return r
}

func DeserializeInterface640Data(r io.Reader) (Interface640Data, error) {
	t := NewInterface640Data()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeInterface640DataFromSchema(r io.Reader, schema string) (Interface640Data, error) {
	t := NewInterface640Data()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeInterface640Data(r Interface640Data, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.Legajo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CausaBaja, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.FechaAlta, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.FechaBaja, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Estado, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.AntigPSueldo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.AntigPVacaciones, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.AntigPIndemnizacion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.AntigPReal, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.FechaAltaReconocida, w)
	if err != nil {
		return err
	}
	return err
}

func (r Interface640Data) Serialize(w io.Writer) error {
	return writeInterface640Data(r, w)
}

func (r Interface640Data) Schema() string {
	return "{\"fields\":[{\"name\":\"Legajo\",\"type\":\"long\"},{\"name\":\"CausaBaja\",\"type\":\"string\"},{\"name\":\"FechaAlta\",\"type\":\"string\"},{\"name\":\"FechaBaja\",\"type\":\"string\"},{\"name\":\"Estado\",\"type\":\"string\"},{\"name\":\"AntigPSueldo\",\"type\":\"string\"},{\"name\":\"AntigPVacaciones\",\"type\":\"string\"},{\"name\":\"AntigPIndemnizacion\",\"type\":\"string\"},{\"name\":\"AntigPReal\",\"type\":\"string\"},{\"name\":\"FechaAltaReconocida\",\"type\":\"string\"}],\"name\":\"Andreani.HCMInterface640.Events.Record.Interface640Data\",\"type\":\"record\"}"
}

func (r Interface640Data) SchemaName() string {
	return "Andreani.HCMInterface640.Events.Record.Interface640Data"
}

func (_ Interface640Data) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Interface640Data) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Interface640Data) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Interface640Data) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Interface640Data) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Interface640Data) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Interface640Data) SetString(v string)   { panic("Unsupported operation") }
func (_ Interface640Data) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Interface640Data) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Long{Target: &r.Legajo}

		return w

	case 1:
		w := types.String{Target: &r.CausaBaja}

		return w

	case 2:
		w := types.String{Target: &r.FechaAlta}

		return w

	case 3:
		w := types.String{Target: &r.FechaBaja}

		return w

	case 4:
		w := types.String{Target: &r.Estado}

		return w

	case 5:
		w := types.String{Target: &r.AntigPSueldo}

		return w

	case 6:
		w := types.String{Target: &r.AntigPVacaciones}

		return w

	case 7:
		w := types.String{Target: &r.AntigPIndemnizacion}

		return w

	case 8:
		w := types.String{Target: &r.AntigPReal}

		return w

	case 9:
		w := types.String{Target: &r.FechaAltaReconocida}

		return w

	}
	panic("Unknown field index")
}

func (r *Interface640Data) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Interface640Data) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Interface640Data) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Interface640Data) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Interface640Data) HintSize(int)                     { panic("Unsupported operation") }
func (_ Interface640Data) Finalize()                        {}

func (_ Interface640Data) AvroCRC64Fingerprint() []byte {
	return []byte(Interface640DataAvroCRC64Fingerprint)
}

func (r Interface640Data) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Legajo"], err = json.Marshal(r.Legajo)
	if err != nil {
		return nil, err
	}
	output["CausaBaja"], err = json.Marshal(r.CausaBaja)
	if err != nil {
		return nil, err
	}
	output["FechaAlta"], err = json.Marshal(r.FechaAlta)
	if err != nil {
		return nil, err
	}
	output["FechaBaja"], err = json.Marshal(r.FechaBaja)
	if err != nil {
		return nil, err
	}
	output["Estado"], err = json.Marshal(r.Estado)
	if err != nil {
		return nil, err
	}
	output["AntigPSueldo"], err = json.Marshal(r.AntigPSueldo)
	if err != nil {
		return nil, err
	}
	output["AntigPVacaciones"], err = json.Marshal(r.AntigPVacaciones)
	if err != nil {
		return nil, err
	}
	output["AntigPIndemnizacion"], err = json.Marshal(r.AntigPIndemnizacion)
	if err != nil {
		return nil, err
	}
	output["AntigPReal"], err = json.Marshal(r.AntigPReal)
	if err != nil {
		return nil, err
	}
	output["FechaAltaReconocida"], err = json.Marshal(r.FechaAltaReconocida)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Interface640Data) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Legajo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Legajo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Legajo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CausaBaja"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CausaBaja); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CausaBaja")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaAlta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaAlta); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FechaAlta")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaBaja"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaBaja); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FechaBaja")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Estado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estado); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Estado")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AntigPSueldo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AntigPSueldo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AntigPSueldo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AntigPVacaciones"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AntigPVacaciones); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AntigPVacaciones")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AntigPIndemnizacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AntigPIndemnizacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AntigPIndemnizacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AntigPReal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AntigPReal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AntigPReal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaAltaReconocida"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaAltaReconocida); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FechaAltaReconocida")
	}
	return nil
}
