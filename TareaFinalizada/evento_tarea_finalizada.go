// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EventoTareaFinalizada.avsc
 */
package TareaFinalizadaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EventoTareaFinalizada struct {
	Cabecera Cabecera `json:"Cabecera"`

	Detalles []Detalle `json:"Detalles"`
}

const EventoTareaFinalizadaAvroCRC64Fingerprint = "\x90\x97\x14\x1b\x83\x99\xc6*"

func NewEventoTareaFinalizada() EventoTareaFinalizada {
	r := EventoTareaFinalizada{}
	r.Cabecera = NewCabecera()

	r.Detalles = make([]Detalle, 0)

	return r
}

func DeserializeEventoTareaFinalizada(r io.Reader) (EventoTareaFinalizada, error) {
	t := NewEventoTareaFinalizada()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEventoTareaFinalizadaFromSchema(r io.Reader, schema string) (EventoTareaFinalizada, error) {
	t := NewEventoTareaFinalizada()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEventoTareaFinalizada(r EventoTareaFinalizada, w io.Writer) error {
	var err error
	err = writeCabecera(r.Cabecera, w)
	if err != nil {
		return err
	}
	err = writeArrayDetalle(r.Detalles, w)
	if err != nil {
		return err
	}
	return err
}

func (r EventoTareaFinalizada) Serialize(w io.Writer) error {
	return writeEventoTareaFinalizada(r, w)
}

func (r EventoTareaFinalizada) Schema() string {
	return "{\"fields\":[{\"name\":\"Cabecera\",\"type\":{\"fields\":[{\"name\":\"NumeroInternoWMS\",\"type\":\"string\"},{\"name\":\"Remito\",\"type\":\"string\"},{\"name\":\"Propietario\",\"type\":\"string\"},{\"name\":\"Almacen\",\"type\":\"string\"},{\"name\":\"Instancia\",\"type\":\"string\"},{\"name\":\"IdTipo\",\"type\":\"int\"}],\"name\":\"Cabecera\",\"namespace\":\"Andreani.TareaFinalizada.Events.Common\",\"type\":\"record\"}},{\"name\":\"Detalles\",\"type\":{\"items\":{\"fields\":[{\"name\":\"NumeroLinea\",\"type\":\"string\"},{\"name\":\"LPN\",\"type\":\"string\"}],\"name\":\"Detalle\",\"namespace\":\"Andreani.TareaFinalizada.Events.Common\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Andreani.TareaFinalizada.Events.Record.EventoTareaFinalizada\",\"type\":\"record\"}"
}

func (r EventoTareaFinalizada) SchemaName() string {
	return "Andreani.TareaFinalizada.Events.Record.EventoTareaFinalizada"
}

func (_ EventoTareaFinalizada) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EventoTareaFinalizada) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EventoTareaFinalizada) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EventoTareaFinalizada) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EventoTareaFinalizada) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EventoTareaFinalizada) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EventoTareaFinalizada) SetString(v string)   { panic("Unsupported operation") }
func (_ EventoTareaFinalizada) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EventoTareaFinalizada) Get(i int) types.Field {
	switch i {
	case 0:
		r.Cabecera = NewCabecera()

		w := types.Record{Target: &r.Cabecera}

		return w

	case 1:
		r.Detalles = make([]Detalle, 0)

		w := ArrayDetalleWrapper{Target: &r.Detalles}

		return w

	}
	panic("Unknown field index")
}

func (r *EventoTareaFinalizada) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *EventoTareaFinalizada) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ EventoTareaFinalizada) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EventoTareaFinalizada) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EventoTareaFinalizada) HintSize(int)                     { panic("Unsupported operation") }
func (_ EventoTareaFinalizada) Finalize()                        {}

func (_ EventoTareaFinalizada) AvroCRC64Fingerprint() []byte {
	return []byte(EventoTareaFinalizadaAvroCRC64Fingerprint)
}

func (r EventoTareaFinalizada) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Cabecera"], err = json.Marshal(r.Cabecera)
	if err != nil {
		return nil, err
	}
	output["Detalles"], err = json.Marshal(r.Detalles)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EventoTareaFinalizada) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Cabecera"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cabecera); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Cabecera")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Detalles"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Detalles); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Detalles")
	}
	return nil
}
