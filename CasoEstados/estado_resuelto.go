// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     EstadoResuelto.avsc
 */
package CasoEstadosEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EstadoResuelto struct {
	Ticketnumber string `json:"Ticketnumber"`

	Subjectid string `json:"Subjectid"`

	And_numerodeenvio *UnionNullString `json:"And_numerodeenvio"`

	Title string `json:"Title"`

	Description *UnionNullString `json:"Description"`

	Createdon string `json:"Createdon"`

	Cac_numerodeenvioincorrecto *UnionNullString `json:"Cac_numerodeenvioincorrecto"`

	Customername string `json:"Customername"`

	Cac_areainterna *UnionNullString `json:"Cac_areainterna"`

	StatusCodeName string `json:"StatusCodeName"`

	Modifiedon string `json:"Modifiedon"`

	IncidentId *UnionNullString `json:"IncidentId"`

	Origen *UnionNullString `json:"Origen"`

	Cac_comentarioresolucion *UnionNullString `json:"cac_comentarioresolucion"`

	CorreoRemitente *UnionNullString `json:"CorreoRemitente"`

	CorreoDestinatario *UnionNullString `json:"CorreoDestinatario"`
}

const EstadoResueltoAvroCRC64Fingerprint = "\xf6\xe0\x19\x9b\x1e\x19\"\xf6"

func NewEstadoResuelto() EstadoResuelto {
	r := EstadoResuelto{}
	return r
}

func DeserializeEstadoResuelto(r io.Reader) (EstadoResuelto, error) {
	t := NewEstadoResuelto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEstadoResueltoFromSchema(r io.Reader, schema string) (EstadoResuelto, error) {
	t := NewEstadoResuelto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEstadoResuelto(r EstadoResuelto, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Ticketnumber, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Subjectid, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.And_numerodeenvio, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Title, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Description, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Createdon, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Cac_numerodeenvioincorrecto, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Customername, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Cac_areainterna, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.StatusCodeName, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Modifiedon, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.IncidentId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Origen, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Cac_comentarioresolucion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CorreoRemitente, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CorreoDestinatario, w)
	if err != nil {
		return err
	}
	return err
}

func (r EstadoResuelto) Serialize(w io.Writer) error {
	return writeEstadoResuelto(r, w)
}

func (r EstadoResuelto) Schema() string {
	return "{\"fields\":[{\"name\":\"Ticketnumber\",\"type\":\"string\"},{\"name\":\"Subjectid\",\"type\":\"string\"},{\"name\":\"And_numerodeenvio\",\"type\":[\"null\",\"string\"]},{\"name\":\"Title\",\"type\":\"string\"},{\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"name\":\"Createdon\",\"type\":\"string\"},{\"name\":\"Cac_numerodeenvioincorrecto\",\"type\":[\"null\",\"string\"]},{\"name\":\"Customername\",\"type\":\"string\"},{\"name\":\"Cac_areainterna\",\"type\":[\"null\",\"string\"]},{\"name\":\"StatusCodeName\",\"type\":\"string\"},{\"name\":\"Modifiedon\",\"type\":\"string\"},{\"name\":\"IncidentId\",\"type\":[\"null\",\"string\"]},{\"name\":\"Origen\",\"type\":[\"null\",\"string\"]},{\"name\":\"cac_comentarioresolucion\",\"type\":[\"null\",\"string\"]},{\"name\":\"CorreoRemitente\",\"type\":[\"null\",\"string\"]},{\"name\":\"CorreoDestinatario\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.CasoEstados.Events.Record.EstadoResuelto\",\"type\":\"record\"}"
}

func (r EstadoResuelto) SchemaName() string {
	return "Andreani.CasoEstados.Events.Record.EstadoResuelto"
}

func (_ EstadoResuelto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EstadoResuelto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EstadoResuelto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EstadoResuelto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EstadoResuelto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EstadoResuelto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EstadoResuelto) SetString(v string)   { panic("Unsupported operation") }
func (_ EstadoResuelto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EstadoResuelto) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Ticketnumber}

		return w

	case 1:
		w := types.String{Target: &r.Subjectid}

		return w

	case 2:
		r.And_numerodeenvio = NewUnionNullString()

		return r.And_numerodeenvio
	case 3:
		w := types.String{Target: &r.Title}

		return w

	case 4:
		r.Description = NewUnionNullString()

		return r.Description
	case 5:
		w := types.String{Target: &r.Createdon}

		return w

	case 6:
		r.Cac_numerodeenvioincorrecto = NewUnionNullString()

		return r.Cac_numerodeenvioincorrecto
	case 7:
		w := types.String{Target: &r.Customername}

		return w

	case 8:
		r.Cac_areainterna = NewUnionNullString()

		return r.Cac_areainterna
	case 9:
		w := types.String{Target: &r.StatusCodeName}

		return w

	case 10:
		w := types.String{Target: &r.Modifiedon}

		return w

	case 11:
		r.IncidentId = NewUnionNullString()

		return r.IncidentId
	case 12:
		r.Origen = NewUnionNullString()

		return r.Origen
	case 13:
		r.Cac_comentarioresolucion = NewUnionNullString()

		return r.Cac_comentarioresolucion
	case 14:
		r.CorreoRemitente = NewUnionNullString()

		return r.CorreoRemitente
	case 15:
		r.CorreoDestinatario = NewUnionNullString()

		return r.CorreoDestinatario
	}
	panic("Unknown field index")
}

func (r *EstadoResuelto) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *EstadoResuelto) NullField(i int) {
	switch i {
	case 2:
		r.And_numerodeenvio = nil
		return
	case 4:
		r.Description = nil
		return
	case 6:
		r.Cac_numerodeenvioincorrecto = nil
		return
	case 8:
		r.Cac_areainterna = nil
		return
	case 11:
		r.IncidentId = nil
		return
	case 12:
		r.Origen = nil
		return
	case 13:
		r.Cac_comentarioresolucion = nil
		return
	case 14:
		r.CorreoRemitente = nil
		return
	case 15:
		r.CorreoDestinatario = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ EstadoResuelto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EstadoResuelto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EstadoResuelto) HintSize(int)                     { panic("Unsupported operation") }
func (_ EstadoResuelto) Finalize()                        {}

func (_ EstadoResuelto) AvroCRC64Fingerprint() []byte {
	return []byte(EstadoResueltoAvroCRC64Fingerprint)
}

func (r EstadoResuelto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Ticketnumber"], err = json.Marshal(r.Ticketnumber)
	if err != nil {
		return nil, err
	}
	output["Subjectid"], err = json.Marshal(r.Subjectid)
	if err != nil {
		return nil, err
	}
	output["And_numerodeenvio"], err = json.Marshal(r.And_numerodeenvio)
	if err != nil {
		return nil, err
	}
	output["Title"], err = json.Marshal(r.Title)
	if err != nil {
		return nil, err
	}
	output["Description"], err = json.Marshal(r.Description)
	if err != nil {
		return nil, err
	}
	output["Createdon"], err = json.Marshal(r.Createdon)
	if err != nil {
		return nil, err
	}
	output["Cac_numerodeenvioincorrecto"], err = json.Marshal(r.Cac_numerodeenvioincorrecto)
	if err != nil {
		return nil, err
	}
	output["Customername"], err = json.Marshal(r.Customername)
	if err != nil {
		return nil, err
	}
	output["Cac_areainterna"], err = json.Marshal(r.Cac_areainterna)
	if err != nil {
		return nil, err
	}
	output["StatusCodeName"], err = json.Marshal(r.StatusCodeName)
	if err != nil {
		return nil, err
	}
	output["Modifiedon"], err = json.Marshal(r.Modifiedon)
	if err != nil {
		return nil, err
	}
	output["IncidentId"], err = json.Marshal(r.IncidentId)
	if err != nil {
		return nil, err
	}
	output["Origen"], err = json.Marshal(r.Origen)
	if err != nil {
		return nil, err
	}
	output["cac_comentarioresolucion"], err = json.Marshal(r.Cac_comentarioresolucion)
	if err != nil {
		return nil, err
	}
	output["CorreoRemitente"], err = json.Marshal(r.CorreoRemitente)
	if err != nil {
		return nil, err
	}
	output["CorreoDestinatario"], err = json.Marshal(r.CorreoDestinatario)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EstadoResuelto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Ticketnumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ticketnumber); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Ticketnumber")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Subjectid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Subjectid); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Subjectid")
	}
	val = func() json.RawMessage {
		if v, ok := fields["And_numerodeenvio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.And_numerodeenvio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for And_numerodeenvio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Title"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Title); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Title")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Description"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Description); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Description")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Createdon"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Createdon); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Createdon")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Cac_numerodeenvioincorrecto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cac_numerodeenvioincorrecto); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Cac_numerodeenvioincorrecto")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Customername"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Customername); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Customername")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Cac_areainterna"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cac_areainterna); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Cac_areainterna")
	}
	val = func() json.RawMessage {
		if v, ok := fields["StatusCodeName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StatusCodeName); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for StatusCodeName")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Modifiedon"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Modifiedon); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Modifiedon")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IncidentId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IncidentId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IncidentId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Origen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Origen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Origen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["cac_comentarioresolucion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cac_comentarioresolucion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for cac_comentarioresolucion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CorreoRemitente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CorreoRemitente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CorreoRemitente")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CorreoDestinatario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CorreoDestinatario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CorreoDestinatario")
	}
	return nil
}
