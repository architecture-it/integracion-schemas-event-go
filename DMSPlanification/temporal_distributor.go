// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     TemporalDistributor.avsc
 */
package DMSPlanificationEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TemporalDistributor struct {
	Id *UnionNullString `json:"Id"`

	Name *UnionNullString `json:"Name"`

	Dni *UnionNullString `json:"Dni"`

	IsActive *UnionNullBool `json:"IsActive"`

	OperativeUnit *UnionNullString `json:"OperativeUnit"`

	CreatedDate *UnionNullLong `json:"CreatedDate"`

	UpdatedDate *UnionNullLong `json:"UpdatedDate"`

	CreatedBy *UnionNullString `json:"CreatedBy"`

	UpdatedBy *UnionNullString `json:"UpdatedBy"`

	EventId *UnionNullString `json:"EventId"`

	EventType *UnionNullString `json:"EventType"`

	EventTimestamp *UnionNullLong `json:"EventTimestamp"`

	SourceSystem *UnionNullString `json:"SourceSystem"`
}

const TemporalDistributorAvroCRC64Fingerprint = ":\x9eI@>\x8fu`"

func NewTemporalDistributor() TemporalDistributor {
	r := TemporalDistributor{}
	r.Id = nil
	r.Name = nil
	r.Dni = nil
	r.IsActive = nil
	r.OperativeUnit = nil
	r.CreatedDate = nil
	r.UpdatedDate = nil
	r.CreatedBy = nil
	r.UpdatedBy = nil
	r.EventId = nil
	r.EventType = nil
	r.EventTimestamp = nil
	r.SourceSystem = nil
	return r
}

func DeserializeTemporalDistributor(r io.Reader) (TemporalDistributor, error) {
	t := NewTemporalDistributor()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTemporalDistributorFromSchema(r io.Reader, schema string) (TemporalDistributor, error) {
	t := NewTemporalDistributor()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTemporalDistributor(r TemporalDistributor, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Name, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Dni, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.IsActive, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.OperativeUnit, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.CreatedDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.UpdatedDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CreatedBy, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.UpdatedBy, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EventId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EventType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.EventTimestamp, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SourceSystem, w)
	if err != nil {
		return err
	}
	return err
}

func (r TemporalDistributor) Serialize(w io.Writer) error {
	return writeTemporalDistributor(r, w)
}

func (r TemporalDistributor) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Dni\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"IsActive\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"OperativeUnit\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CreatedDate\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"UpdatedDate\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"CreatedBy\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"UpdatedBy\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EventId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EventType\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EventTimestamp\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"SourceSystem\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.Planification.Events.TemporalDistributor\",\"type\":\"record\"}"
}

func (r TemporalDistributor) SchemaName() string {
	return "Andreani.Planification.Events.TemporalDistributor"
}

func (_ TemporalDistributor) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TemporalDistributor) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TemporalDistributor) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TemporalDistributor) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TemporalDistributor) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TemporalDistributor) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TemporalDistributor) SetString(v string)   { panic("Unsupported operation") }
func (_ TemporalDistributor) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TemporalDistributor) Get(i int) types.Field {
	switch i {
	case 0:
		r.Id = NewUnionNullString()

		return r.Id
	case 1:
		r.Name = NewUnionNullString()

		return r.Name
	case 2:
		r.Dni = NewUnionNullString()

		return r.Dni
	case 3:
		r.IsActive = NewUnionNullBool()

		return r.IsActive
	case 4:
		r.OperativeUnit = NewUnionNullString()

		return r.OperativeUnit
	case 5:
		r.CreatedDate = NewUnionNullLong()

		return r.CreatedDate
	case 6:
		r.UpdatedDate = NewUnionNullLong()

		return r.UpdatedDate
	case 7:
		r.CreatedBy = NewUnionNullString()

		return r.CreatedBy
	case 8:
		r.UpdatedBy = NewUnionNullString()

		return r.UpdatedBy
	case 9:
		r.EventId = NewUnionNullString()

		return r.EventId
	case 10:
		r.EventType = NewUnionNullString()

		return r.EventType
	case 11:
		r.EventTimestamp = NewUnionNullLong()

		return r.EventTimestamp
	case 12:
		r.SourceSystem = NewUnionNullString()

		return r.SourceSystem
	}
	panic("Unknown field index")
}

func (r *TemporalDistributor) SetDefault(i int) {
	switch i {
	case 0:
		r.Id = nil
		return
	case 1:
		r.Name = nil
		return
	case 2:
		r.Dni = nil
		return
	case 3:
		r.IsActive = nil
		return
	case 4:
		r.OperativeUnit = nil
		return
	case 5:
		r.CreatedDate = nil
		return
	case 6:
		r.UpdatedDate = nil
		return
	case 7:
		r.CreatedBy = nil
		return
	case 8:
		r.UpdatedBy = nil
		return
	case 9:
		r.EventId = nil
		return
	case 10:
		r.EventType = nil
		return
	case 11:
		r.EventTimestamp = nil
		return
	case 12:
		r.SourceSystem = nil
		return
	}
	panic("Unknown field index")
}

func (r *TemporalDistributor) NullField(i int) {
	switch i {
	case 0:
		r.Id = nil
		return
	case 1:
		r.Name = nil
		return
	case 2:
		r.Dni = nil
		return
	case 3:
		r.IsActive = nil
		return
	case 4:
		r.OperativeUnit = nil
		return
	case 5:
		r.CreatedDate = nil
		return
	case 6:
		r.UpdatedDate = nil
		return
	case 7:
		r.CreatedBy = nil
		return
	case 8:
		r.UpdatedBy = nil
		return
	case 9:
		r.EventId = nil
		return
	case 10:
		r.EventType = nil
		return
	case 11:
		r.EventTimestamp = nil
		return
	case 12:
		r.SourceSystem = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ TemporalDistributor) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TemporalDistributor) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TemporalDistributor) HintSize(int)                     { panic("Unsupported operation") }
func (_ TemporalDistributor) Finalize()                        {}

func (_ TemporalDistributor) AvroCRC64Fingerprint() []byte {
	return []byte(TemporalDistributorAvroCRC64Fingerprint)
}

func (r TemporalDistributor) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["Name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["Dni"], err = json.Marshal(r.Dni)
	if err != nil {
		return nil, err
	}
	output["IsActive"], err = json.Marshal(r.IsActive)
	if err != nil {
		return nil, err
	}
	output["OperativeUnit"], err = json.Marshal(r.OperativeUnit)
	if err != nil {
		return nil, err
	}
	output["CreatedDate"], err = json.Marshal(r.CreatedDate)
	if err != nil {
		return nil, err
	}
	output["UpdatedDate"], err = json.Marshal(r.UpdatedDate)
	if err != nil {
		return nil, err
	}
	output["CreatedBy"], err = json.Marshal(r.CreatedBy)
	if err != nil {
		return nil, err
	}
	output["UpdatedBy"], err = json.Marshal(r.UpdatedBy)
	if err != nil {
		return nil, err
	}
	output["EventId"], err = json.Marshal(r.EventId)
	if err != nil {
		return nil, err
	}
	output["EventType"], err = json.Marshal(r.EventType)
	if err != nil {
		return nil, err
	}
	output["EventTimestamp"], err = json.Marshal(r.EventTimestamp)
	if err != nil {
		return nil, err
	}
	output["SourceSystem"], err = json.Marshal(r.SourceSystem)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TemporalDistributor) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		r.Id = NewUnionNullString()

		r.Id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		r.Name = NewUnionNullString()

		r.Name = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Dni"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Dni); err != nil {
			return err
		}
	} else {
		r.Dni = NewUnionNullString()

		r.Dni = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["IsActive"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IsActive); err != nil {
			return err
		}
	} else {
		r.IsActive = NewUnionNullBool()

		r.IsActive = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["OperativeUnit"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OperativeUnit); err != nil {
			return err
		}
	} else {
		r.OperativeUnit = NewUnionNullString()

		r.OperativeUnit = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CreatedDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreatedDate); err != nil {
			return err
		}
	} else {
		r.CreatedDate = NewUnionNullLong()

		r.CreatedDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["UpdatedDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UpdatedDate); err != nil {
			return err
		}
	} else {
		r.UpdatedDate = NewUnionNullLong()

		r.UpdatedDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CreatedBy"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreatedBy); err != nil {
			return err
		}
	} else {
		r.CreatedBy = NewUnionNullString()

		r.CreatedBy = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["UpdatedBy"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UpdatedBy); err != nil {
			return err
		}
	} else {
		r.UpdatedBy = NewUnionNullString()

		r.UpdatedBy = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EventId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EventId); err != nil {
			return err
		}
	} else {
		r.EventId = NewUnionNullString()

		r.EventId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EventType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EventType); err != nil {
			return err
		}
	} else {
		r.EventType = NewUnionNullString()

		r.EventType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EventTimestamp"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EventTimestamp); err != nil {
			return err
		}
	} else {
		r.EventTimestamp = NewUnionNullLong()

		r.EventTimestamp = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SourceSystem"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SourceSystem); err != nil {
			return err
		}
	} else {
		r.SourceSystem = NewUnionNullString()

		r.SourceSystem = nil
	}
	return nil
}
