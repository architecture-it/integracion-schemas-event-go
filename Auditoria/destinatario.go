// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Destinatario.avsc
 */
package AuditoriaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Destinatario struct {
	Localidad *UnionNullString `json:"Localidad"`

	CodigoPostal *UnionNullString `json:"CodigoPostal"`

	Provincia *UnionNullString `json:"Provincia"`

	NombreDestinatario *UnionNullString `json:"NombreDestinatario"`
}

const DestinatarioAvroCRC64Fingerprint = "\x9d\xe0\xa0\x10\xe6r«Ä"

func NewDestinatario() Destinatario {
	r := Destinatario{}
	r.Localidad = nil
	r.CodigoPostal = nil
	r.Provincia = nil
	r.NombreDestinatario = nil
	return r
}

func DeserializeDestinatario(r io.Reader) (Destinatario, error) {
	t := NewDestinatario()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDestinatarioFromSchema(r io.Reader, schema string) (Destinatario, error) {
	t := NewDestinatario()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDestinatario(r Destinatario, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Localidad, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CodigoPostal, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Provincia, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NombreDestinatario, w)
	if err != nil {
		return err
	}
	return err
}

func (r Destinatario) Serialize(w io.Writer) error {
	return writeDestinatario(r, w)
}

func (r Destinatario) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Localidad\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CodigoPostal\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Provincia\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NombreDestinatario\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.Auditoria.Events.Common.Destinatario\",\"type\":\"record\"}"
}

func (r Destinatario) SchemaName() string {
	return "Andreani.Auditoria.Events.Common.Destinatario"
}

func (_ Destinatario) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Destinatario) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Destinatario) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Destinatario) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Destinatario) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Destinatario) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Destinatario) SetString(v string)   { panic("Unsupported operation") }
func (_ Destinatario) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Destinatario) Get(i int) types.Field {
	switch i {
	case 0:
		r.Localidad = NewUnionNullString()

		return r.Localidad
	case 1:
		r.CodigoPostal = NewUnionNullString()

		return r.CodigoPostal
	case 2:
		r.Provincia = NewUnionNullString()

		return r.Provincia
	case 3:
		r.NombreDestinatario = NewUnionNullString()

		return r.NombreDestinatario
	}
	panic("Unknown field index")
}

func (r *Destinatario) SetDefault(i int) {
	switch i {
	case 0:
		r.Localidad = nil
		return
	case 1:
		r.CodigoPostal = nil
		return
	case 2:
		r.Provincia = nil
		return
	case 3:
		r.NombreDestinatario = nil
		return
	}
	panic("Unknown field index")
}

func (r *Destinatario) NullField(i int) {
	switch i {
	case 0:
		r.Localidad = nil
		return
	case 1:
		r.CodigoPostal = nil
		return
	case 2:
		r.Provincia = nil
		return
	case 3:
		r.NombreDestinatario = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Destinatario) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Destinatario) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Destinatario) HintSize(int)                     { panic("Unsupported operation") }
func (_ Destinatario) Finalize()                        {}

func (_ Destinatario) AvroCRC64Fingerprint() []byte {
	return []byte(DestinatarioAvroCRC64Fingerprint)
}

func (r Destinatario) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Localidad"], err = json.Marshal(r.Localidad)
	if err != nil {
		return nil, err
	}
	output["CodigoPostal"], err = json.Marshal(r.CodigoPostal)
	if err != nil {
		return nil, err
	}
	output["Provincia"], err = json.Marshal(r.Provincia)
	if err != nil {
		return nil, err
	}
	output["NombreDestinatario"], err = json.Marshal(r.NombreDestinatario)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Destinatario) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Localidad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Localidad); err != nil {
			return err
		}
	} else {
		r.Localidad = NewUnionNullString()

		r.Localidad = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoPostal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoPostal); err != nil {
			return err
		}
	} else {
		r.CodigoPostal = NewUnionNullString()

		r.CodigoPostal = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Provincia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Provincia); err != nil {
			return err
		}
	} else {
		r.Provincia = NewUnionNullString()

		r.Provincia = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NombreDestinatario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NombreDestinatario); err != nil {
			return err
		}
	} else {
		r.NombreDestinatario = NewUnionNullString()

		r.NombreDestinatario = nil
	}
	return nil
}
