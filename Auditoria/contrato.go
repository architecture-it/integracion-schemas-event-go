// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Contrato.avsc
 */
package AuditoriaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Contrato struct {
	NumeroContrato string `json:"NumeroContrato"`

	Caracteristicas []string `json:"Caracteristicas"`
}

const ContratoAvroCRC64Fingerprint = "È§\x8b\xdeeE3m"

func NewContrato() Contrato {
	r := Contrato{}
	r.Caracteristicas = make([]string, 0)

	return r
}

func DeserializeContrato(r io.Reader) (Contrato, error) {
	t := NewContrato()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeContratoFromSchema(r io.Reader, schema string) (Contrato, error) {
	t := NewContrato()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeContrato(r Contrato, w io.Writer) error {
	var err error
	err = vm.WriteString(r.NumeroContrato, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.Caracteristicas, w)
	if err != nil {
		return err
	}
	return err
}

func (r Contrato) Serialize(w io.Writer) error {
	return writeContrato(r, w)
}

func (r Contrato) Schema() string {
	return "{\"fields\":[{\"name\":\"NumeroContrato\",\"type\":\"string\"},{\"name\":\"Caracteristicas\",\"type\":{\"items\":\"string\",\"type\":\"array\"}}],\"name\":\"Andreani.Auditoria.Events.Common.Contrato\",\"type\":\"record\"}"
}

func (r Contrato) SchemaName() string {
	return "Andreani.Auditoria.Events.Common.Contrato"
}

func (_ Contrato) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Contrato) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Contrato) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Contrato) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Contrato) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Contrato) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Contrato) SetString(v string)   { panic("Unsupported operation") }
func (_ Contrato) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Contrato) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.NumeroContrato}

		return w

	case 1:
		r.Caracteristicas = make([]string, 0)

		w := ArrayStringWrapper{Target: &r.Caracteristicas}

		return w

	}
	panic("Unknown field index")
}

func (r *Contrato) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Contrato) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Contrato) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Contrato) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Contrato) HintSize(int)                     { panic("Unsupported operation") }
func (_ Contrato) Finalize()                        {}

func (_ Contrato) AvroCRC64Fingerprint() []byte {
	return []byte(ContratoAvroCRC64Fingerprint)
}

func (r Contrato) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["NumeroContrato"], err = json.Marshal(r.NumeroContrato)
	if err != nil {
		return nil, err
	}
	output["Caracteristicas"], err = json.Marshal(r.Caracteristicas)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Contrato) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["NumeroContrato"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NumeroContrato); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NumeroContrato")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Caracteristicas"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Caracteristicas); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Caracteristicas")
	}
	return nil
}
