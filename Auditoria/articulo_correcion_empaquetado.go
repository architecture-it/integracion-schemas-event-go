// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ArticuloCorrecionEmpaquetado.avsc
 */
package AuditoriaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ArticuloCorrecionEmpaquetado struct {
	Ean *UnionNullString `json:"Ean"`

	Sku string `json:"Sku"`

	Descripcion string `json:"Descripcion"`

	CantidadEmpacada int32 `json:"CantidadEmpacada"`
}

const ArticuloCorrecionEmpaquetadoAvroCRC64Fingerprint = "S\x16)\x96È€]r"

func NewArticuloCorrecionEmpaquetado() ArticuloCorrecionEmpaquetado {
	r := ArticuloCorrecionEmpaquetado{}
	r.Ean = nil
	return r
}

func DeserializeArticuloCorrecionEmpaquetado(r io.Reader) (ArticuloCorrecionEmpaquetado, error) {
	t := NewArticuloCorrecionEmpaquetado()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeArticuloCorrecionEmpaquetadoFromSchema(r io.Reader, schema string) (ArticuloCorrecionEmpaquetado, error) {
	t := NewArticuloCorrecionEmpaquetado()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeArticuloCorrecionEmpaquetado(r ArticuloCorrecionEmpaquetado, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Ean, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Sku, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Descripcion, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.CantidadEmpacada, w)
	if err != nil {
		return err
	}
	return err
}

func (r ArticuloCorrecionEmpaquetado) Serialize(w io.Writer) error {
	return writeArticuloCorrecionEmpaquetado(r, w)
}

func (r ArticuloCorrecionEmpaquetado) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Ean\",\"type\":[\"null\",\"string\"]},{\"name\":\"Sku\",\"type\":\"string\"},{\"name\":\"Descripcion\",\"type\":\"string\"},{\"name\":\"CantidadEmpacada\",\"type\":\"int\"}],\"name\":\"Andreani.Auditoria.Events.Common.ArticuloCorrecionEmpaquetado\",\"type\":\"record\"}"
}

func (r ArticuloCorrecionEmpaquetado) SchemaName() string {
	return "Andreani.Auditoria.Events.Common.ArticuloCorrecionEmpaquetado"
}

func (_ ArticuloCorrecionEmpaquetado) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ArticuloCorrecionEmpaquetado) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ArticuloCorrecionEmpaquetado) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ArticuloCorrecionEmpaquetado) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ArticuloCorrecionEmpaquetado) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ArticuloCorrecionEmpaquetado) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ArticuloCorrecionEmpaquetado) SetString(v string)   { panic("Unsupported operation") }
func (_ ArticuloCorrecionEmpaquetado) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ArticuloCorrecionEmpaquetado) Get(i int) types.Field {
	switch i {
	case 0:
		r.Ean = NewUnionNullString()

		return r.Ean
	case 1:
		w := types.String{Target: &r.Sku}

		return w

	case 2:
		w := types.String{Target: &r.Descripcion}

		return w

	case 3:
		w := types.Int{Target: &r.CantidadEmpacada}

		return w

	}
	panic("Unknown field index")
}

func (r *ArticuloCorrecionEmpaquetado) SetDefault(i int) {
	switch i {
	case 0:
		r.Ean = nil
		return
	}
	panic("Unknown field index")
}

func (r *ArticuloCorrecionEmpaquetado) NullField(i int) {
	switch i {
	case 0:
		r.Ean = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ArticuloCorrecionEmpaquetado) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ ArticuloCorrecionEmpaquetado) AppendArray() types.Field { panic("Unsupported operation") }
func (_ ArticuloCorrecionEmpaquetado) HintSize(int)             { panic("Unsupported operation") }
func (_ ArticuloCorrecionEmpaquetado) Finalize()                {}

func (_ ArticuloCorrecionEmpaquetado) AvroCRC64Fingerprint() []byte {
	return []byte(ArticuloCorrecionEmpaquetadoAvroCRC64Fingerprint)
}

func (r ArticuloCorrecionEmpaquetado) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Ean"], err = json.Marshal(r.Ean)
	if err != nil {
		return nil, err
	}
	output["Sku"], err = json.Marshal(r.Sku)
	if err != nil {
		return nil, err
	}
	output["Descripcion"], err = json.Marshal(r.Descripcion)
	if err != nil {
		return nil, err
	}
	output["CantidadEmpacada"], err = json.Marshal(r.CantidadEmpacada)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ArticuloCorrecionEmpaquetado) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Ean"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ean); err != nil {
			return err
		}
	} else {
		r.Ean = NewUnionNullString()

		r.Ean = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Sku"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sku); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Sku")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Descripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Descripcion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Descripcion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CantidadEmpacada"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CantidadEmpacada); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CantidadEmpacada")
	}
	return nil
}
