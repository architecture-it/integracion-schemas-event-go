// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     BultoValidar.avsc
 */
package AuditoriaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Bulto struct {
	CodigoEmbalaje string `json:"CodigoEmbalaje"`

	Contenedor Contenedor `json:"Contenedor"`
}

const BultoAvroCRC64Fingerprint = "\x000\xac\xa2-\xcc\xf7\xb7"

func NewBulto() Bulto {
	r := Bulto{}
	r.Contenedor = NewContenedor()

	return r
}

func DeserializeBulto(r io.Reader) (Bulto, error) {
	t := NewBulto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeBultoFromSchema(r io.Reader, schema string) (Bulto, error) {
	t := NewBulto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeBulto(r Bulto, w io.Writer) error {
	var err error
	err = vm.WriteString(r.CodigoEmbalaje, w)
	if err != nil {
		return err
	}
	err = writeContenedor(r.Contenedor, w)
	if err != nil {
		return err
	}
	return err
}

func (r Bulto) Serialize(w io.Writer) error {
	return writeBulto(r, w)
}

func (r Bulto) Schema() string {
	return "{\"fields\":[{\"name\":\"CodigoEmbalaje\",\"type\":\"string\"},{\"name\":\"Contenedor\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"string\"},{\"name\":\"Descripcion\",\"type\":\"string\"}],\"name\":\"Contenedor\",\"namespace\":\"Andreani.Auditoria.Events.Common\",\"type\":\"record\"}}],\"name\":\"Andreani.Auditoria.Events.Common.Bulto\",\"type\":\"record\"}"
}

func (r Bulto) SchemaName() string {
	return "Andreani.Auditoria.Events.Common.Bulto"
}

func (_ Bulto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Bulto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Bulto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Bulto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Bulto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Bulto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Bulto) SetString(v string)   { panic("Unsupported operation") }
func (_ Bulto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Bulto) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.CodigoEmbalaje}

		return w

	case 1:
		r.Contenedor = NewContenedor()

		w := types.Record{Target: &r.Contenedor}

		return w

	}
	panic("Unknown field index")
}

func (r *Bulto) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Bulto) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Bulto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Bulto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Bulto) HintSize(int)                     { panic("Unsupported operation") }
func (_ Bulto) Finalize()                        {}

func (_ Bulto) AvroCRC64Fingerprint() []byte {
	return []byte(BultoAvroCRC64Fingerprint)
}

func (r Bulto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CodigoEmbalaje"], err = json.Marshal(r.CodigoEmbalaje)
	if err != nil {
		return nil, err
	}
	output["Contenedor"], err = json.Marshal(r.Contenedor)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Bulto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CodigoEmbalaje"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoEmbalaje); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoEmbalaje")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Contenedor"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contenedor); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Contenedor")
	}
	return nil
}
