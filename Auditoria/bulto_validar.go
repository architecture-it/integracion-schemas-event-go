// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     BultoValidar.avsc
 */
package AuditoriaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type BultoValidar struct {
	Identificacion Identificacion `json:"Identificacion"`

	CodigoEmbalaje string `json:"CodigoEmbalaje"`

	OrdenWh string `json:"OrdenWh"`

	OrdenCliente string `json:"OrdenCliente"`

	ValorDeclarado *UnionNullString `json:"ValorDeclarado"`

	Mesa *UnionNullString `json:"Mesa"`

	Calle *UnionNullString `json:"Calle"`

	FechaExpedicion *UnionNullLong `json:"FechaExpedicion"`

	Contenedor Contenedor `json:"Contenedor"`

	CantidadPedidosDelDia int32 `json:"CantidadPedidosDelDia"`

	Destinatario Destinatario `json:"Destinatario"`

	OtrosBultosDelPedido *UnionNullArrayBulto `json:"OtrosBultosDelPedido"`

	ContenedoresRelacionados *UnionNullArrayString `json:"ContenedoresRelacionados"`

	Contrato Contrato `json:"Contrato"`

	Articulos []Articulo `json:"Articulos"`
}

const BultoValidarAvroCRC64Fingerprint = "O\v\x90\f\x81y\xf5\x80"

func NewBultoValidar() BultoValidar {
	r := BultoValidar{}
	r.Identificacion = NewIdentificacion()

	r.ValorDeclarado = nil
	r.Mesa = nil
	r.Calle = nil
	r.FechaExpedicion = nil
	r.Contenedor = NewContenedor()

	r.Destinatario = NewDestinatario()

	r.OtrosBultosDelPedido = nil
	r.ContenedoresRelacionados = nil
	r.Contrato = NewContrato()

	r.Articulos = make([]Articulo, 0)

	return r
}

func DeserializeBultoValidar(r io.Reader) (BultoValidar, error) {
	t := NewBultoValidar()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeBultoValidarFromSchema(r io.Reader, schema string) (BultoValidar, error) {
	t := NewBultoValidar()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeBultoValidar(r BultoValidar, w io.Writer) error {
	var err error
	err = writeIdentificacion(r.Identificacion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodigoEmbalaje, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OrdenWh, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OrdenCliente, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ValorDeclarado, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Mesa, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Calle, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FechaExpedicion, w)
	if err != nil {
		return err
	}
	err = writeContenedor(r.Contenedor, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.CantidadPedidosDelDia, w)
	if err != nil {
		return err
	}
	err = writeDestinatario(r.Destinatario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayBulto(r.OtrosBultosDelPedido, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayString(r.ContenedoresRelacionados, w)
	if err != nil {
		return err
	}
	err = writeContrato(r.Contrato, w)
	if err != nil {
		return err
	}
	err = writeArrayArticulo(r.Articulos, w)
	if err != nil {
		return err
	}
	return err
}

func (r BultoValidar) Serialize(w io.Writer) error {
	return writeBultoValidar(r, w)
}

func (r BultoValidar) Schema() string {
	return "{\"fields\":[{\"name\":\"Identificacion\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"string\"},{\"name\":\"Evento\",\"type\":\"string\"},{\"name\":\"Nombre\",\"type\":\"string\"},{\"name\":\"Proceso\",\"type\":\"string\"},{\"name\":\"FechaHoraGeneracion\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"SistemaOrigen\",\"type\":\"string\"},{\"name\":\"Almacen\",\"type\":\"string\"},{\"name\":\"Propietario\",\"type\":\"string\"},{\"name\":\"Instancia\",\"type\":\"string\"},{\"default\":null,\"name\":\"PlantaOperacionId\",\"type\":[\"null\",\"int\"]}],\"name\":\"Identificacion\",\"namespace\":\"Andreani.Auditoria.Events.Common\",\"type\":\"record\"}},{\"name\":\"CodigoEmbalaje\",\"type\":\"string\"},{\"name\":\"OrdenWh\",\"type\":\"string\"},{\"name\":\"OrdenCliente\",\"type\":\"string\"},{\"default\":null,\"name\":\"ValorDeclarado\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Mesa\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Calle\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FechaExpedicion\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"Contenedor\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"string\"},{\"name\":\"Descripcion\",\"type\":\"string\"}],\"name\":\"Contenedor\",\"namespace\":\"Andreani.Auditoria.Events.Common\",\"type\":\"record\"}},{\"name\":\"CantidadPedidosDelDia\",\"type\":\"int\"},{\"name\":\"Destinatario\",\"type\":{\"fields\":[{\"default\":null,\"name\":\"Localidad\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CodigoPostal\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Provincia\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NombreDestinatario\",\"type\":[\"null\",\"string\"]}],\"name\":\"Destinatario\",\"namespace\":\"Andreani.Auditoria.Events.Common\",\"type\":\"record\"}},{\"default\":null,\"name\":\"OtrosBultosDelPedido\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"name\":\"CodigoEmbalaje\",\"type\":\"string\"},{\"name\":\"Contenedor\",\"type\":\"Andreani.Auditoria.Events.Common.Contenedor\"}],\"name\":\"Bulto\",\"namespace\":\"Andreani.Auditoria.Events.Common\",\"type\":\"record\"},\"type\":\"array\"}]},{\"default\":null,\"name\":\"ContenedoresRelacionados\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]},{\"name\":\"Contrato\",\"type\":{\"fields\":[{\"name\":\"NumeroContrato\",\"type\":\"string\"},{\"name\":\"Caracteristicas\",\"type\":{\"items\":\"string\",\"type\":\"array\"}}],\"name\":\"Contrato\",\"namespace\":\"Andreani.Auditoria.Events.Common\",\"type\":\"record\"}},{\"name\":\"Articulos\",\"type\":{\"items\":{\"fields\":[{\"name\":\"SKU\",\"type\":\"string\"},{\"name\":\"CodigoCliente\",\"type\":\"string\"},{\"name\":\"Descripcion\",\"type\":\"string\"},{\"name\":\"CantidadControlada\",\"type\":\"int\"},{\"default\":null,\"name\":\"ValorUnitario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Picker\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Packer\",\"type\":[\"null\",\"string\"]}],\"name\":\"Articulo\",\"namespace\":\"Andreani.Auditoria.Events.Common\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Andreani.Auditoria.Events.Record.BultoValidar\",\"type\":\"record\"}"
}

func (r BultoValidar) SchemaName() string {
	return "Andreani.Auditoria.Events.Record.BultoValidar"
}

func (_ BultoValidar) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ BultoValidar) SetInt(v int32)       { panic("Unsupported operation") }
func (_ BultoValidar) SetLong(v int64)      { panic("Unsupported operation") }
func (_ BultoValidar) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ BultoValidar) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ BultoValidar) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ BultoValidar) SetString(v string)   { panic("Unsupported operation") }
func (_ BultoValidar) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *BultoValidar) Get(i int) types.Field {
	switch i {
	case 0:
		r.Identificacion = NewIdentificacion()

		w := types.Record{Target: &r.Identificacion}

		return w

	case 1:
		w := types.String{Target: &r.CodigoEmbalaje}

		return w

	case 2:
		w := types.String{Target: &r.OrdenWh}

		return w

	case 3:
		w := types.String{Target: &r.OrdenCliente}

		return w

	case 4:
		r.ValorDeclarado = NewUnionNullString()

		return r.ValorDeclarado
	case 5:
		r.Mesa = NewUnionNullString()

		return r.Mesa
	case 6:
		r.Calle = NewUnionNullString()

		return r.Calle
	case 7:
		r.FechaExpedicion = NewUnionNullLong()

		return r.FechaExpedicion
	case 8:
		r.Contenedor = NewContenedor()

		w := types.Record{Target: &r.Contenedor}

		return w

	case 9:
		w := types.Int{Target: &r.CantidadPedidosDelDia}

		return w

	case 10:
		r.Destinatario = NewDestinatario()

		w := types.Record{Target: &r.Destinatario}

		return w

	case 11:
		r.OtrosBultosDelPedido = NewUnionNullArrayBulto()

		return r.OtrosBultosDelPedido
	case 12:
		r.ContenedoresRelacionados = NewUnionNullArrayString()

		return r.ContenedoresRelacionados
	case 13:
		r.Contrato = NewContrato()

		w := types.Record{Target: &r.Contrato}

		return w

	case 14:
		r.Articulos = make([]Articulo, 0)

		w := ArrayArticuloWrapper{Target: &r.Articulos}

		return w

	}
	panic("Unknown field index")
}

func (r *BultoValidar) SetDefault(i int) {
	switch i {
	case 4:
		r.ValorDeclarado = nil
		return
	case 5:
		r.Mesa = nil
		return
	case 6:
		r.Calle = nil
		return
	case 7:
		r.FechaExpedicion = nil
		return
	case 11:
		r.OtrosBultosDelPedido = nil
		return
	case 12:
		r.ContenedoresRelacionados = nil
		return
	}
	panic("Unknown field index")
}

func (r *BultoValidar) NullField(i int) {
	switch i {
	case 4:
		r.ValorDeclarado = nil
		return
	case 5:
		r.Mesa = nil
		return
	case 6:
		r.Calle = nil
		return
	case 7:
		r.FechaExpedicion = nil
		return
	case 11:
		r.OtrosBultosDelPedido = nil
		return
	case 12:
		r.ContenedoresRelacionados = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ BultoValidar) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ BultoValidar) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ BultoValidar) HintSize(int)                     { panic("Unsupported operation") }
func (_ BultoValidar) Finalize()                        {}

func (_ BultoValidar) AvroCRC64Fingerprint() []byte {
	return []byte(BultoValidarAvroCRC64Fingerprint)
}

func (r BultoValidar) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Identificacion"], err = json.Marshal(r.Identificacion)
	if err != nil {
		return nil, err
	}
	output["CodigoEmbalaje"], err = json.Marshal(r.CodigoEmbalaje)
	if err != nil {
		return nil, err
	}
	output["OrdenWh"], err = json.Marshal(r.OrdenWh)
	if err != nil {
		return nil, err
	}
	output["OrdenCliente"], err = json.Marshal(r.OrdenCliente)
	if err != nil {
		return nil, err
	}
	output["ValorDeclarado"], err = json.Marshal(r.ValorDeclarado)
	if err != nil {
		return nil, err
	}
	output["Mesa"], err = json.Marshal(r.Mesa)
	if err != nil {
		return nil, err
	}
	output["Calle"], err = json.Marshal(r.Calle)
	if err != nil {
		return nil, err
	}
	output["FechaExpedicion"], err = json.Marshal(r.FechaExpedicion)
	if err != nil {
		return nil, err
	}
	output["Contenedor"], err = json.Marshal(r.Contenedor)
	if err != nil {
		return nil, err
	}
	output["CantidadPedidosDelDia"], err = json.Marshal(r.CantidadPedidosDelDia)
	if err != nil {
		return nil, err
	}
	output["Destinatario"], err = json.Marshal(r.Destinatario)
	if err != nil {
		return nil, err
	}
	output["OtrosBultosDelPedido"], err = json.Marshal(r.OtrosBultosDelPedido)
	if err != nil {
		return nil, err
	}
	output["ContenedoresRelacionados"], err = json.Marshal(r.ContenedoresRelacionados)
	if err != nil {
		return nil, err
	}
	output["Contrato"], err = json.Marshal(r.Contrato)
	if err != nil {
		return nil, err
	}
	output["Articulos"], err = json.Marshal(r.Articulos)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *BultoValidar) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Identificacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Identificacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Identificacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoEmbalaje"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoEmbalaje); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoEmbalaje")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OrdenWh"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrdenWh); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OrdenWh")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OrdenCliente"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrdenCliente); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OrdenCliente")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValorDeclarado"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValorDeclarado); err != nil {
			return err
		}
	} else {
		r.ValorDeclarado = NewUnionNullString()

		r.ValorDeclarado = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Mesa"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Mesa); err != nil {
			return err
		}
	} else {
		r.Mesa = NewUnionNullString()

		r.Mesa = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Calle"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Calle); err != nil {
			return err
		}
	} else {
		r.Calle = NewUnionNullString()

		r.Calle = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaExpedicion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaExpedicion); err != nil {
			return err
		}
	} else {
		r.FechaExpedicion = NewUnionNullLong()

		r.FechaExpedicion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Contenedor"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contenedor); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Contenedor")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CantidadPedidosDelDia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CantidadPedidosDelDia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CantidadPedidosDelDia")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Destinatario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Destinatario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Destinatario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OtrosBultosDelPedido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OtrosBultosDelPedido); err != nil {
			return err
		}
	} else {
		r.OtrosBultosDelPedido = NewUnionNullArrayBulto()

		r.OtrosBultosDelPedido = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ContenedoresRelacionados"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ContenedoresRelacionados); err != nil {
			return err
		}
	} else {
		r.ContenedoresRelacionados = NewUnionNullArrayString()

		r.ContenedoresRelacionados = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Contrato"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contrato); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Contrato")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Articulos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Articulos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Articulos")
	}
	return nil
}
