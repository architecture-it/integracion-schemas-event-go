// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     BultoValidar.avsc
 */
package AuditoriaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayBultoTypeEnum int

const (
	UnionNullArrayBultoTypeEnumArrayBulto UnionNullArrayBultoTypeEnum = 1
)

type UnionNullArrayBulto struct {
	Null       *types.NullVal
	ArrayBulto []Bulto
	UnionType  UnionNullArrayBultoTypeEnum
}

func writeUnionNullArrayBulto(r *UnionNullArrayBulto, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayBultoTypeEnumArrayBulto:
		return writeArrayBulto(r.ArrayBulto, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayBulto")
}

func NewUnionNullArrayBulto() *UnionNullArrayBulto {
	return &UnionNullArrayBulto{}
}

func (r *UnionNullArrayBulto) Serialize(w io.Writer) error {
	return writeUnionNullArrayBulto(r, w)
}

func DeserializeUnionNullArrayBulto(r io.Reader) (*UnionNullArrayBulto, error) {
	t := NewUnionNullArrayBulto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayBultoFromSchema(r io.Reader, schema string) (*UnionNullArrayBulto, error) {
	t := NewUnionNullArrayBulto()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayBulto) Schema() string {
	return "[\"null\",{\"items\":{\"fields\":[{\"name\":\"CodigoEmbalaje\",\"type\":\"string\"},{\"name\":\"Contenedor\",\"type\":{\"fields\":[{\"name\":\"Id\",\"type\":\"string\"},{\"name\":\"Descripcion\",\"type\":\"string\"}],\"name\":\"Contenedor\",\"namespace\":\"Andreani.Auditoria.Events.Common\",\"type\":\"record\"}}],\"name\":\"Bulto\",\"namespace\":\"Andreani.Auditoria.Events.Common\",\"type\":\"record\"},\"type\":\"array\"}]"
}

func (_ *UnionNullArrayBulto) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullArrayBulto) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullArrayBulto) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullArrayBulto) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullArrayBulto) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullArrayBulto) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullArrayBulto) SetLong(v int64) {

	r.UnionType = (UnionNullArrayBultoTypeEnum)(v)
}

func (r *UnionNullArrayBulto) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayBulto = make([]Bulto, 0)
		return &ArrayBultoWrapper{Target: (&r.ArrayBulto)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayBulto) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionNullArrayBulto) HintSize(i int)                   { panic("Unsupported operation") }
func (_ *UnionNullArrayBulto) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionNullArrayBulto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullArrayBulto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionNullArrayBulto) Finalize()                        {}

func (r *UnionNullArrayBulto) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayBultoTypeEnumArrayBulto:
		return json.Marshal(map[string]interface{}{"array": r.ArrayBulto})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayBulto")
}

func (r *UnionNullArrayBulto) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayBulto)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayBulto")
}
