// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ReglaAplicada.avsc
 */
package AuditoriaEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ReglaAplicada struct {
	Id string `json:"Id"`

	Descripcion string `json:"Descripcion"`

	Configuracion string `json:"Configuracion"`
}

const ReglaAplicadaAvroCRC64Fingerprint = "\xbbF\xb0\xde\x15\xdeq\xf0"

func NewReglaAplicada() ReglaAplicada {
	r := ReglaAplicada{}
	return r
}

func DeserializeReglaAplicada(r io.Reader) (ReglaAplicada, error) {
	t := NewReglaAplicada()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeReglaAplicadaFromSchema(r io.Reader, schema string) (ReglaAplicada, error) {
	t := NewReglaAplicada()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeReglaAplicada(r ReglaAplicada, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Descripcion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Configuracion, w)
	if err != nil {
		return err
	}
	return err
}

func (r ReglaAplicada) Serialize(w io.Writer) error {
	return writeReglaAplicada(r, w)
}

func (r ReglaAplicada) Schema() string {
	return "{\"fields\":[{\"name\":\"Id\",\"type\":\"string\"},{\"name\":\"Descripcion\",\"type\":\"string\"},{\"name\":\"Configuracion\",\"type\":\"string\"}],\"name\":\"Andreani.Auditoria.Events.Common.ReglaAplicada\",\"type\":\"record\"}"
}

func (r ReglaAplicada) SchemaName() string {
	return "Andreani.Auditoria.Events.Common.ReglaAplicada"
}

func (_ ReglaAplicada) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ReglaAplicada) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ReglaAplicada) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ReglaAplicada) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ReglaAplicada) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ReglaAplicada) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ReglaAplicada) SetString(v string)   { panic("Unsupported operation") }
func (_ ReglaAplicada) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ReglaAplicada) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.Descripcion}

		return w

	case 2:
		w := types.String{Target: &r.Configuracion}

		return w

	}
	panic("Unknown field index")
}

func (r *ReglaAplicada) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ReglaAplicada) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ ReglaAplicada) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ReglaAplicada) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ReglaAplicada) HintSize(int)                     { panic("Unsupported operation") }
func (_ ReglaAplicada) Finalize()                        {}

func (_ ReglaAplicada) AvroCRC64Fingerprint() []byte {
	return []byte(ReglaAplicadaAvroCRC64Fingerprint)
}

func (r ReglaAplicada) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["Descripcion"], err = json.Marshal(r.Descripcion)
	if err != nil {
		return nil, err
	}
	output["Configuracion"], err = json.Marshal(r.Configuracion)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ReglaAplicada) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Descripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Descripcion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Descripcion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Configuracion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Configuracion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Configuracion")
	}
	return nil
}
