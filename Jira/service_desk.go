// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ServiceDesk.avsc
 */
package JiraEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ServiceDesk struct {
	Ticket Ticket `json:"Ticket"`
}

const ServiceDeskAvroCRC64Fingerprint = "\x95k\v\xe6\xf8\\`["

func NewServiceDesk() ServiceDesk {
	r := ServiceDesk{}
	r.Ticket = NewTicket()

	return r
}

func DeserializeServiceDesk(r io.Reader) (ServiceDesk, error) {
	t := NewServiceDesk()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeServiceDeskFromSchema(r io.Reader, schema string) (ServiceDesk, error) {
	t := NewServiceDesk()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeServiceDesk(r ServiceDesk, w io.Writer) error {
	var err error
	err = writeTicket(r.Ticket, w)
	if err != nil {
		return err
	}
	return err
}

func (r ServiceDesk) Serialize(w io.Writer) error {
	return writeServiceDesk(r, w)
}

func (r ServiceDesk) Schema() string {
	return "{\"fields\":[{\"name\":\"Ticket\",\"type\":{\"fields\":[{\"default\":null,\"name\":\"IdTicket\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"Asunto\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Descripcion\",\"type\":[\"null\",\"string\"]}],\"name\":\"Ticket\",\"namespace\":\"Andreani.Jira.Events.ServiceDesk\",\"type\":\"record\"}}],\"name\":\"Andreani.Jira.Events.Record.ServiceDesk\",\"type\":\"record\"}"
}

func (r ServiceDesk) SchemaName() string {
	return "Andreani.Jira.Events.Record.ServiceDesk"
}

func (_ ServiceDesk) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ServiceDesk) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ServiceDesk) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ServiceDesk) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ServiceDesk) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ServiceDesk) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ServiceDesk) SetString(v string)   { panic("Unsupported operation") }
func (_ ServiceDesk) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ServiceDesk) Get(i int) types.Field {
	switch i {
	case 0:
		r.Ticket = NewTicket()

		w := types.Record{Target: &r.Ticket}

		return w

	}
	panic("Unknown field index")
}

func (r *ServiceDesk) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ServiceDesk) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ ServiceDesk) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ServiceDesk) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ServiceDesk) HintSize(int)                     { panic("Unsupported operation") }
func (_ ServiceDesk) Finalize()                        {}

func (_ ServiceDesk) AvroCRC64Fingerprint() []byte {
	return []byte(ServiceDeskAvroCRC64Fingerprint)
}

func (r ServiceDesk) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Ticket"], err = json.Marshal(r.Ticket)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ServiceDesk) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Ticket"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ticket); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Ticket")
	}
	return nil
}
