// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Persona.avsc
 */
package pruebaPublicadorCFOEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Persona struct {
	Nombre string `json:"nombre"`

	Apellido string `json:"apellido"`

	Edad int32 `json:"Edad"`
}

const PersonaAvroCRC64Fingerprint = "\b\xd5)\r\x81y\x87\xcf"

func NewPersona() Persona {
	r := Persona{}
	return r
}

func DeserializePersona(r io.Reader) (Persona, error) {
	t := NewPersona()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePersonaFromSchema(r io.Reader, schema string) (Persona, error) {
	t := NewPersona()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePersona(r Persona, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Nombre, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Apellido, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Edad, w)
	if err != nil {
		return err
	}
	return err
}

func (r Persona) Serialize(w io.Writer) error {
	return writePersona(r, w)
}

func (r Persona) Schema() string {
	return "{\"fields\":[{\"name\":\"nombre\",\"type\":\"string\"},{\"name\":\"apellido\",\"type\":\"string\"},{\"name\":\"Edad\",\"type\":\"int\"}],\"name\":\"Andreani.pruebaPublicadorCFO.Events.Record.Persona\",\"type\":\"record\"}"
}

func (r Persona) SchemaName() string {
	return "Andreani.pruebaPublicadorCFO.Events.Record.Persona"
}

func (_ Persona) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Persona) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Persona) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Persona) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Persona) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Persona) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Persona) SetString(v string)   { panic("Unsupported operation") }
func (_ Persona) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Persona) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Nombre}

		return w

	case 1:
		w := types.String{Target: &r.Apellido}

		return w

	case 2:
		w := types.Int{Target: &r.Edad}

		return w

	}
	panic("Unknown field index")
}

func (r *Persona) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Persona) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Persona) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Persona) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Persona) HintSize(int)                     { panic("Unsupported operation") }
func (_ Persona) Finalize()                        {}

func (_ Persona) AvroCRC64Fingerprint() []byte {
	return []byte(PersonaAvroCRC64Fingerprint)
}

func (r Persona) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["nombre"], err = json.Marshal(r.Nombre)
	if err != nil {
		return nil, err
	}
	output["apellido"], err = json.Marshal(r.Apellido)
	if err != nil {
		return nil, err
	}
	output["Edad"], err = json.Marshal(r.Edad)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Persona) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["nombre"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nombre); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for nombre")
	}
	val = func() json.RawMessage {
		if v, ok := fields["apellido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Apellido); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for apellido")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Edad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Edad); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Edad")
	}
	return nil
}
