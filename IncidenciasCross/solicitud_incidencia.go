// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     SolicitudIncidencia.avsc
 */
package IncidenciasCrossEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SolicitudIncidencia struct {
	Id int32 `json:"id"`

	Prioridad *UnionNullPrioridad `json:"prioridad"`
}

const SolicitudIncidenciaAvroCRC64Fingerprint = "\xbek\x9e\xab\xb7\xb4eE"

func NewSolicitudIncidencia() SolicitudIncidencia {
	r := SolicitudIncidencia{}
	r.Prioridad = nil
	return r
}

func DeserializeSolicitudIncidencia(r io.Reader) (SolicitudIncidencia, error) {
	t := NewSolicitudIncidencia()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSolicitudIncidenciaFromSchema(r io.Reader, schema string) (SolicitudIncidencia, error) {
	t := NewSolicitudIncidencia()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSolicitudIncidencia(r SolicitudIncidencia, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullPrioridad(r.Prioridad, w)
	if err != nil {
		return err
	}
	return err
}

func (r SolicitudIncidencia) Serialize(w io.Writer) error {
	return writeSolicitudIncidencia(r, w)
}

func (r SolicitudIncidencia) Schema() string {
	return "{\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"default\":null,\"name\":\"prioridad\",\"type\":[\"null\",{\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"default\":null,\"name\":\"nombre\",\"type\":[\"null\",\"string\"]}],\"name\":\"Prioridad\",\"type\":\"record\"}]}],\"name\":\"Andreani.IncidenciasCross.Events.Common.SolicitudIncidencia\",\"type\":\"record\"}"
}

func (r SolicitudIncidencia) SchemaName() string {
	return "Andreani.IncidenciasCross.Events.Common.SolicitudIncidencia"
}

func (_ SolicitudIncidencia) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ SolicitudIncidencia) SetInt(v int32)       { panic("Unsupported operation") }
func (_ SolicitudIncidencia) SetLong(v int64)      { panic("Unsupported operation") }
func (_ SolicitudIncidencia) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ SolicitudIncidencia) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ SolicitudIncidencia) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ SolicitudIncidencia) SetString(v string)   { panic("Unsupported operation") }
func (_ SolicitudIncidencia) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SolicitudIncidencia) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.Id}

		return w

	case 1:
		r.Prioridad = NewUnionNullPrioridad()

		return r.Prioridad
	}
	panic("Unknown field index")
}

func (r *SolicitudIncidencia) SetDefault(i int) {
	switch i {
	case 1:
		r.Prioridad = nil
		return
	}
	panic("Unknown field index")
}

func (r *SolicitudIncidencia) NullField(i int) {
	switch i {
	case 1:
		r.Prioridad = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ SolicitudIncidencia) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ SolicitudIncidencia) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ SolicitudIncidencia) HintSize(int)                     { panic("Unsupported operation") }
func (_ SolicitudIncidencia) Finalize()                        {}

func (_ SolicitudIncidencia) AvroCRC64Fingerprint() []byte {
	return []byte(SolicitudIncidenciaAvroCRC64Fingerprint)
}

func (r SolicitudIncidencia) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["prioridad"], err = json.Marshal(r.Prioridad)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *SolicitudIncidencia) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["prioridad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Prioridad); err != nil {
			return err
		}
	} else {
		r.Prioridad = NewUnionNullPrioridad()

		r.Prioridad = nil
	}
	return nil
}
