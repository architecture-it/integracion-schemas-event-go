// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     SolicitudAltaIncidencia.avsc
 */
package IncidenciasCrossEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullStringIntLongDoubleBoolArrayStringTypeEnum int

const (
	UnionNullStringIntLongDoubleBoolArrayStringTypeEnumString UnionNullStringIntLongDoubleBoolArrayStringTypeEnum = 1

	UnionNullStringIntLongDoubleBoolArrayStringTypeEnumInt UnionNullStringIntLongDoubleBoolArrayStringTypeEnum = 2

	UnionNullStringIntLongDoubleBoolArrayStringTypeEnumLong UnionNullStringIntLongDoubleBoolArrayStringTypeEnum = 3

	UnionNullStringIntLongDoubleBoolArrayStringTypeEnumDouble UnionNullStringIntLongDoubleBoolArrayStringTypeEnum = 4

	UnionNullStringIntLongDoubleBoolArrayStringTypeEnumBool UnionNullStringIntLongDoubleBoolArrayStringTypeEnum = 5

	UnionNullStringIntLongDoubleBoolArrayStringTypeEnumArrayString UnionNullStringIntLongDoubleBoolArrayStringTypeEnum = 6
)

type UnionNullStringIntLongDoubleBoolArrayString struct {
	Null        *types.NullVal
	String      string
	Int         int32
	Long        int64
	Double      float64
	Bool        bool
	ArrayString []string
	UnionType   UnionNullStringIntLongDoubleBoolArrayStringTypeEnum
}

func writeUnionNullStringIntLongDoubleBoolArrayString(r *UnionNullStringIntLongDoubleBoolArrayString, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullStringIntLongDoubleBoolArrayStringTypeEnumString:
		return vm.WriteString(r.String, w)
	case UnionNullStringIntLongDoubleBoolArrayStringTypeEnumInt:
		return vm.WriteInt(r.Int, w)
	case UnionNullStringIntLongDoubleBoolArrayStringTypeEnumLong:
		return vm.WriteLong(r.Long, w)
	case UnionNullStringIntLongDoubleBoolArrayStringTypeEnumDouble:
		return vm.WriteDouble(r.Double, w)
	case UnionNullStringIntLongDoubleBoolArrayStringTypeEnumBool:
		return vm.WriteBool(r.Bool, w)
	case UnionNullStringIntLongDoubleBoolArrayStringTypeEnumArrayString:
		return writeArrayString(r.ArrayString, w)
	}
	return fmt.Errorf("invalid value for *UnionNullStringIntLongDoubleBoolArrayString")
}

func NewUnionNullStringIntLongDoubleBoolArrayString() *UnionNullStringIntLongDoubleBoolArrayString {
	return &UnionNullStringIntLongDoubleBoolArrayString{}
}

func (r *UnionNullStringIntLongDoubleBoolArrayString) Serialize(w io.Writer) error {
	return writeUnionNullStringIntLongDoubleBoolArrayString(r, w)
}

func DeserializeUnionNullStringIntLongDoubleBoolArrayString(r io.Reader) (*UnionNullStringIntLongDoubleBoolArrayString, error) {
	t := NewUnionNullStringIntLongDoubleBoolArrayString()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullStringIntLongDoubleBoolArrayStringFromSchema(r io.Reader, schema string) (*UnionNullStringIntLongDoubleBoolArrayString, error) {
	t := NewUnionNullStringIntLongDoubleBoolArrayString()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullStringIntLongDoubleBoolArrayString) Schema() string {
	return "[\"null\",\"string\",\"int\",\"long\",\"double\",\"boolean\",{\"items\":\"string\",\"type\":\"array\"}]"
}

func (_ *UnionNullStringIntLongDoubleBoolArrayString) SetBoolean(v bool) {
	panic("Unsupported operation")
}
func (_ *UnionNullStringIntLongDoubleBoolArrayString) SetInt(v int32) { panic("Unsupported operation") }
func (_ *UnionNullStringIntLongDoubleBoolArrayString) SetFloat(v float32) {
	panic("Unsupported operation")
}
func (_ *UnionNullStringIntLongDoubleBoolArrayString) SetDouble(v float64) {
	panic("Unsupported operation")
}
func (_ *UnionNullStringIntLongDoubleBoolArrayString) SetBytes(v []byte) {
	panic("Unsupported operation")
}
func (_ *UnionNullStringIntLongDoubleBoolArrayString) SetString(v string) {
	panic("Unsupported operation")
}

func (r *UnionNullStringIntLongDoubleBoolArrayString) SetLong(v int64) {

	r.UnionType = (UnionNullStringIntLongDoubleBoolArrayStringTypeEnum)(v)
}

func (r *UnionNullStringIntLongDoubleBoolArrayString) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		return &types.String{Target: (&r.String)}
	case 2:
		return &types.Int{Target: (&r.Int)}
	case 3:
		return &types.Long{Target: (&r.Long)}
	case 4:
		return &types.Double{Target: (&r.Double)}
	case 5:
		return &types.Boolean{Target: (&r.Bool)}
	case 6:
		r.ArrayString = make([]string, 0)
		return &ArrayStringWrapper{Target: (&r.ArrayString)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullStringIntLongDoubleBoolArrayString) NullField(i int) {
	panic("Unsupported operation")
}
func (_ *UnionNullStringIntLongDoubleBoolArrayString) HintSize(i int) { panic("Unsupported operation") }
func (_ *UnionNullStringIntLongDoubleBoolArrayString) SetDefault(i int) {
	panic("Unsupported operation")
}
func (_ *UnionNullStringIntLongDoubleBoolArrayString) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullStringIntLongDoubleBoolArrayString) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullStringIntLongDoubleBoolArrayString) Finalize() {}

func (r *UnionNullStringIntLongDoubleBoolArrayString) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullStringIntLongDoubleBoolArrayStringTypeEnumString:
		return json.Marshal(map[string]interface{}{"string": r.String})
	case UnionNullStringIntLongDoubleBoolArrayStringTypeEnumInt:
		return json.Marshal(map[string]interface{}{"int": r.Int})
	case UnionNullStringIntLongDoubleBoolArrayStringTypeEnumLong:
		return json.Marshal(map[string]interface{}{"long": r.Long})
	case UnionNullStringIntLongDoubleBoolArrayStringTypeEnumDouble:
		return json.Marshal(map[string]interface{}{"double": r.Double})
	case UnionNullStringIntLongDoubleBoolArrayStringTypeEnumBool:
		return json.Marshal(map[string]interface{}{"boolean": r.Bool})
	case UnionNullStringIntLongDoubleBoolArrayStringTypeEnumArrayString:
		return json.Marshal(map[string]interface{}{"array": r.ArrayString})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullStringIntLongDoubleBoolArrayString")
}

func (r *UnionNullStringIntLongDoubleBoolArrayString) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["string"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.String)
	}
	if value, ok := fields["int"]; ok {
		r.UnionType = 2
		return json.Unmarshal([]byte(value), &r.Int)
	}
	if value, ok := fields["long"]; ok {
		r.UnionType = 3
		return json.Unmarshal([]byte(value), &r.Long)
	}
	if value, ok := fields["double"]; ok {
		r.UnionType = 4
		return json.Unmarshal([]byte(value), &r.Double)
	}
	if value, ok := fields["boolean"]; ok {
		r.UnionType = 5
		return json.Unmarshal([]byte(value), &r.Bool)
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 6
		return json.Unmarshal([]byte(value), &r.ArrayString)
	}
	return fmt.Errorf("invalid value for *UnionNullStringIntLongDoubleBoolArrayString")
}
