// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     SolicitudAltaIncidencia.avsc
 */
package IncidenciasCrossEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Atributo struct {
	AtributoId int32 `json:"atributoId"`

	Nombre string `json:"nombre"`

	Valor *UnionNullStringIntLongDoubleBoolArrayString `json:"valor"`
}

const AtributoAvroCRC64Fingerprint = "\xcd\xcc\uf4car{n"

func NewAtributo() Atributo {
	r := Atributo{}
	r.Valor = nil
	return r
}

func DeserializeAtributo(r io.Reader) (Atributo, error) {
	t := NewAtributo()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAtributoFromSchema(r io.Reader, schema string) (Atributo, error) {
	t := NewAtributo()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAtributo(r Atributo, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.AtributoId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Nombre, w)
	if err != nil {
		return err
	}
	err = writeUnionNullStringIntLongDoubleBoolArrayString(r.Valor, w)
	if err != nil {
		return err
	}
	return err
}

func (r Atributo) Serialize(w io.Writer) error {
	return writeAtributo(r, w)
}

func (r Atributo) Schema() string {
	return "{\"fields\":[{\"name\":\"atributoId\",\"type\":\"int\"},{\"name\":\"nombre\",\"type\":\"string\"},{\"default\":null,\"name\":\"valor\",\"type\":[\"null\",\"string\",\"int\",\"long\",\"double\",\"boolean\",{\"items\":\"string\",\"type\":\"array\"}]}],\"name\":\"Andreani.IncidenciasCross.Events.Common.Atributo\",\"type\":\"record\"}"
}

func (r Atributo) SchemaName() string {
	return "Andreani.IncidenciasCross.Events.Common.Atributo"
}

func (_ Atributo) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Atributo) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Atributo) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Atributo) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Atributo) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Atributo) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Atributo) SetString(v string)   { panic("Unsupported operation") }
func (_ Atributo) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Atributo) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.AtributoId}

		return w

	case 1:
		w := types.String{Target: &r.Nombre}

		return w

	case 2:
		r.Valor = NewUnionNullStringIntLongDoubleBoolArrayString()

		return r.Valor
	}
	panic("Unknown field index")
}

func (r *Atributo) SetDefault(i int) {
	switch i {
	case 2:
		r.Valor = nil
		return
	}
	panic("Unknown field index")
}

func (r *Atributo) NullField(i int) {
	switch i {
	case 2:
		r.Valor = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Atributo) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Atributo) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Atributo) HintSize(int)                     { panic("Unsupported operation") }
func (_ Atributo) Finalize()                        {}

func (_ Atributo) AvroCRC64Fingerprint() []byte {
	return []byte(AtributoAvroCRC64Fingerprint)
}

func (r Atributo) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["atributoId"], err = json.Marshal(r.AtributoId)
	if err != nil {
		return nil, err
	}
	output["nombre"], err = json.Marshal(r.Nombre)
	if err != nil {
		return nil, err
	}
	output["valor"], err = json.Marshal(r.Valor)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Atributo) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["atributoId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AtributoId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for atributoId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["nombre"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nombre); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for nombre")
	}
	val = func() json.RawMessage {
		if v, ok := fields["valor"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Valor); err != nil {
			return err
		}
	} else {
		r.Valor = NewUnionNullStringIntLongDoubleBoolArrayString()

		r.Valor = nil
	}
	return nil
}
