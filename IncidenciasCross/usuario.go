// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Usuario.avsc
 */
package IncidenciasCrossEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Usuario struct {
	UsuarioId *UnionNullString `json:"usuarioId"`

	Email *UnionNullString `json:"email"`

	Nombre *UnionNullString `json:"nombre"`
}

const UsuarioAvroCRC64Fingerprint = "\x93lp\x9a\xf7\r\xd9\xcc"

func NewUsuario() Usuario {
	r := Usuario{}
	r.UsuarioId = nil
	r.Email = nil
	r.Nombre = nil
	return r
}

func DeserializeUsuario(r io.Reader) (Usuario, error) {
	t := NewUsuario()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeUsuarioFromSchema(r io.Reader, schema string) (Usuario, error) {
	t := NewUsuario()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeUsuario(r Usuario, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.UsuarioId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Email, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Nombre, w)
	if err != nil {
		return err
	}
	return err
}

func (r Usuario) Serialize(w io.Writer) error {
	return writeUsuario(r, w)
}

func (r Usuario) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"usuarioId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"email\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"nombre\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.Incidencias.Events.Common.Usuario\",\"type\":\"record\"}"
}

func (r Usuario) SchemaName() string {
	return "Andreani.Incidencias.Events.Common.Usuario"
}

func (_ Usuario) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Usuario) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Usuario) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Usuario) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Usuario) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Usuario) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Usuario) SetString(v string)   { panic("Unsupported operation") }
func (_ Usuario) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Usuario) Get(i int) types.Field {
	switch i {
	case 0:
		r.UsuarioId = NewUnionNullString()

		return r.UsuarioId
	case 1:
		r.Email = NewUnionNullString()

		return r.Email
	case 2:
		r.Nombre = NewUnionNullString()

		return r.Nombre
	}
	panic("Unknown field index")
}

func (r *Usuario) SetDefault(i int) {
	switch i {
	case 0:
		r.UsuarioId = nil
		return
	case 1:
		r.Email = nil
		return
	case 2:
		r.Nombre = nil
		return
	}
	panic("Unknown field index")
}

func (r *Usuario) NullField(i int) {
	switch i {
	case 0:
		r.UsuarioId = nil
		return
	case 1:
		r.Email = nil
		return
	case 2:
		r.Nombre = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Usuario) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Usuario) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Usuario) HintSize(int)                     { panic("Unsupported operation") }
func (_ Usuario) Finalize()                        {}

func (_ Usuario) AvroCRC64Fingerprint() []byte {
	return []byte(UsuarioAvroCRC64Fingerprint)
}

func (r Usuario) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["usuarioId"], err = json.Marshal(r.UsuarioId)
	if err != nil {
		return nil, err
	}
	output["email"], err = json.Marshal(r.Email)
	if err != nil {
		return nil, err
	}
	output["nombre"], err = json.Marshal(r.Nombre)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Usuario) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["usuarioId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UsuarioId); err != nil {
			return err
		}
	} else {
		r.UsuarioId = NewUnionNullString()

		r.UsuarioId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["email"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Email); err != nil {
			return err
		}
	} else {
		r.Email = NewUnionNullString()

		r.Email = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["nombre"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nombre); err != nil {
			return err
		}
	} else {
		r.Nombre = NewUnionNullString()

		r.Nombre = nil
	}
	return nil
}
