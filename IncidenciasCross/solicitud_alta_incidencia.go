// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     SolicitudAltaIncidencia.avsc
 */
package IncidenciasCrossEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SolicitudAltaIncidencia struct {
	Incidencia SolicitudIncidencia `json:"incidencia"`

	Propietario Propietario `json:"propietario"`

	Denunciante Usuario `json:"denunciante"`

	EntidadIncidentada EntidadIncidentada `json:"entidadIncidentada"`

	AtributosDeAlta []Atributo `json:"atributosDeAlta"`

	CorrelationId *UnionNullString `json:"correlationId"`
}

const SolicitudAltaIncidenciaAvroCRC64Fingerprint = "\xbe\xe6\xbd9vk\x89}"

func NewSolicitudAltaIncidencia() SolicitudAltaIncidencia {
	r := SolicitudAltaIncidencia{}
	r.Incidencia = NewSolicitudIncidencia()

	r.Propietario = NewPropietario()

	r.Denunciante = NewUsuario()

	r.EntidadIncidentada = NewEntidadIncidentada()

	r.AtributosDeAlta = make([]Atributo, 0)

	r.CorrelationId = nil
	return r
}

func DeserializeSolicitudAltaIncidencia(r io.Reader) (SolicitudAltaIncidencia, error) {
	t := NewSolicitudAltaIncidencia()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSolicitudAltaIncidenciaFromSchema(r io.Reader, schema string) (SolicitudAltaIncidencia, error) {
	t := NewSolicitudAltaIncidencia()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSolicitudAltaIncidencia(r SolicitudAltaIncidencia, w io.Writer) error {
	var err error
	err = writeSolicitudIncidencia(r.Incidencia, w)
	if err != nil {
		return err
	}
	err = writePropietario(r.Propietario, w)
	if err != nil {
		return err
	}
	err = writeUsuario(r.Denunciante, w)
	if err != nil {
		return err
	}
	err = writeEntidadIncidentada(r.EntidadIncidentada, w)
	if err != nil {
		return err
	}
	err = writeArrayAtributo(r.AtributosDeAlta, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CorrelationId, w)
	if err != nil {
		return err
	}
	return err
}

func (r SolicitudAltaIncidencia) Serialize(w io.Writer) error {
	return writeSolicitudAltaIncidencia(r, w)
}

func (r SolicitudAltaIncidencia) Schema() string {
	return "{\"fields\":[{\"name\":\"incidencia\",\"type\":{\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"default\":null,\"name\":\"prioridad\",\"type\":[\"null\",{\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"default\":null,\"name\":\"nombre\",\"type\":[\"null\",\"string\"]}],\"name\":\"Prioridad\",\"type\":\"record\"}]}],\"name\":\"SolicitudIncidencia\",\"namespace\":\"Andreani.IncidenciasCross.Events.Common\",\"type\":\"record\"}},{\"name\":\"propietario\",\"type\":{\"fields\":[{\"name\":\"nombre\",\"type\":\"string\"},{\"default\":null,\"name\":\"id\",\"type\":[\"null\",\"int\"]}],\"name\":\"Propietario\",\"namespace\":\"Andreani.IncidenciasCross.Events.Common\",\"type\":\"record\"}},{\"name\":\"denunciante\",\"type\":{\"fields\":[{\"default\":null,\"name\":\"usuarioId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"email\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"nombre\",\"type\":[\"null\",\"string\"]}],\"name\":\"Usuario\",\"namespace\":\"Andreani.IncidenciasCross.Events.Common\",\"type\":\"record\"}},{\"name\":\"entidadIncidentada\",\"type\":{\"fields\":[{\"name\":\"tipo\",\"type\":\"string\"},{\"name\":\"identificador\",\"type\":\"string\"},{\"default\":null,\"name\":\"subentidades\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]}],\"name\":\"EntidadIncidentada\",\"namespace\":\"Andreani.IncidenciasCross.Events.Common\",\"type\":\"record\"}},{\"name\":\"atributosDeAlta\",\"type\":{\"items\":{\"fields\":[{\"name\":\"atributoId\",\"type\":\"int\"},{\"name\":\"nombre\",\"type\":\"string\"},{\"default\":null,\"name\":\"valor\",\"type\":[\"null\",\"string\"]}],\"name\":\"Atributo\",\"namespace\":\"Andreani.IncidenciasCross.Events.Common\",\"type\":\"record\"},\"type\":\"array\"}},{\"default\":null,\"name\":\"correlationId\",\"type\":[\"null\",\"string\"]}],\"name\":\"Andreani.IncidenciasCross.Events.SolicitudAltaIncidencia\",\"type\":\"record\"}"
}

func (r SolicitudAltaIncidencia) SchemaName() string {
	return "Andreani.IncidenciasCross.Events.SolicitudAltaIncidencia"
}

func (_ SolicitudAltaIncidencia) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ SolicitudAltaIncidencia) SetInt(v int32)       { panic("Unsupported operation") }
func (_ SolicitudAltaIncidencia) SetLong(v int64)      { panic("Unsupported operation") }
func (_ SolicitudAltaIncidencia) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ SolicitudAltaIncidencia) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ SolicitudAltaIncidencia) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ SolicitudAltaIncidencia) SetString(v string)   { panic("Unsupported operation") }
func (_ SolicitudAltaIncidencia) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SolicitudAltaIncidencia) Get(i int) types.Field {
	switch i {
	case 0:
		r.Incidencia = NewSolicitudIncidencia()

		w := types.Record{Target: &r.Incidencia}

		return w

	case 1:
		r.Propietario = NewPropietario()

		w := types.Record{Target: &r.Propietario}

		return w

	case 2:
		r.Denunciante = NewUsuario()

		w := types.Record{Target: &r.Denunciante}

		return w

	case 3:
		r.EntidadIncidentada = NewEntidadIncidentada()

		w := types.Record{Target: &r.EntidadIncidentada}

		return w

	case 4:
		r.AtributosDeAlta = make([]Atributo, 0)

		w := ArrayAtributoWrapper{Target: &r.AtributosDeAlta}

		return w

	case 5:
		r.CorrelationId = NewUnionNullString()

		return r.CorrelationId
	}
	panic("Unknown field index")
}

func (r *SolicitudAltaIncidencia) SetDefault(i int) {
	switch i {
	case 5:
		r.CorrelationId = nil
		return
	}
	panic("Unknown field index")
}

func (r *SolicitudAltaIncidencia) NullField(i int) {
	switch i {
	case 5:
		r.CorrelationId = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ SolicitudAltaIncidencia) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ SolicitudAltaIncidencia) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ SolicitudAltaIncidencia) HintSize(int)                     { panic("Unsupported operation") }
func (_ SolicitudAltaIncidencia) Finalize()                        {}

func (_ SolicitudAltaIncidencia) AvroCRC64Fingerprint() []byte {
	return []byte(SolicitudAltaIncidenciaAvroCRC64Fingerprint)
}

func (r SolicitudAltaIncidencia) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["incidencia"], err = json.Marshal(r.Incidencia)
	if err != nil {
		return nil, err
	}
	output["propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["denunciante"], err = json.Marshal(r.Denunciante)
	if err != nil {
		return nil, err
	}
	output["entidadIncidentada"], err = json.Marshal(r.EntidadIncidentada)
	if err != nil {
		return nil, err
	}
	output["atributosDeAlta"], err = json.Marshal(r.AtributosDeAlta)
	if err != nil {
		return nil, err
	}
	output["correlationId"], err = json.Marshal(r.CorrelationId)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *SolicitudAltaIncidencia) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["incidencia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Incidencia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for incidencia")
	}
	val = func() json.RawMessage {
		if v, ok := fields["propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for propietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["denunciante"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Denunciante); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for denunciante")
	}
	val = func() json.RawMessage {
		if v, ok := fields["entidadIncidentada"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EntidadIncidentada); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for entidadIncidentada")
	}
	val = func() json.RawMessage {
		if v, ok := fields["atributosDeAlta"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AtributosDeAlta); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for atributosDeAlta")
	}
	val = func() json.RawMessage {
		if v, ok := fields["correlationId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CorrelationId); err != nil {
			return err
		}
	} else {
		r.CorrelationId = NewUnionNullString()

		r.CorrelationId = nil
	}
	return nil
}
