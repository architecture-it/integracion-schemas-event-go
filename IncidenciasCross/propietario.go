// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     SolicitudAltaIncidencia.avsc
 */
package IncidenciasCrossEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Propietario struct {
	Nombre string `json:"nombre"`

	Id *UnionNullInt `json:"id"`
}

const PropietarioAvroCRC64Fingerprint = "\xb4\x8eb\\\x03\xfd\xda3"

func NewPropietario() Propietario {
	r := Propietario{}
	r.Id = nil
	return r
}

func DeserializePropietario(r io.Reader) (Propietario, error) {
	t := NewPropietario()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePropietarioFromSchema(r io.Reader, schema string) (Propietario, error) {
	t := NewPropietario()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePropietario(r Propietario, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Nombre, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.Id, w)
	if err != nil {
		return err
	}
	return err
}

func (r Propietario) Serialize(w io.Writer) error {
	return writePropietario(r, w)
}

func (r Propietario) Schema() string {
	return "{\"fields\":[{\"name\":\"nombre\",\"type\":\"string\"},{\"default\":null,\"name\":\"id\",\"type\":[\"null\",\"int\"]}],\"name\":\"Andreani.Incidencias.Events.Common.Propietario\",\"type\":\"record\"}"
}

func (r Propietario) SchemaName() string {
	return "Andreani.Incidencias.Events.Common.Propietario"
}

func (_ Propietario) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Propietario) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Propietario) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Propietario) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Propietario) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Propietario) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Propietario) SetString(v string)   { panic("Unsupported operation") }
func (_ Propietario) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Propietario) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Nombre}

		return w

	case 1:
		r.Id = NewUnionNullInt()

		return r.Id
	}
	panic("Unknown field index")
}

func (r *Propietario) SetDefault(i int) {
	switch i {
	case 1:
		r.Id = nil
		return
	}
	panic("Unknown field index")
}

func (r *Propietario) NullField(i int) {
	switch i {
	case 1:
		r.Id = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Propietario) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Propietario) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Propietario) HintSize(int)                     { panic("Unsupported operation") }
func (_ Propietario) Finalize()                        {}

func (_ Propietario) AvroCRC64Fingerprint() []byte {
	return []byte(PropietarioAvroCRC64Fingerprint)
}

func (r Propietario) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["nombre"], err = json.Marshal(r.Nombre)
	if err != nil {
		return nil, err
	}
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Propietario) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["nombre"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nombre); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for nombre")
	}
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		r.Id = NewUnionNullInt()

		r.Id = nil
	}
	return nil
}
