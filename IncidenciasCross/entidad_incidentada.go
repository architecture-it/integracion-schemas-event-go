// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     SolicitudAltaIncidencia.avsc
 */
package IncidenciasCrossEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EntidadIncidentada struct {
	Tipo string `json:"tipo"`

	Identificador string `json:"identificador"`

	Subentidades *UnionNullArrayString `json:"subentidades"`
}

const EntidadIncidentadaAvroCRC64Fingerprint = "\xa6GF\xc5-\x8a\xec\xac"

func NewEntidadIncidentada() EntidadIncidentada {
	r := EntidadIncidentada{}
	r.Subentidades = nil
	return r
}

func DeserializeEntidadIncidentada(r io.Reader) (EntidadIncidentada, error) {
	t := NewEntidadIncidentada()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEntidadIncidentadaFromSchema(r io.Reader, schema string) (EntidadIncidentada, error) {
	t := NewEntidadIncidentada()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEntidadIncidentada(r EntidadIncidentada, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Tipo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Identificador, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayString(r.Subentidades, w)
	if err != nil {
		return err
	}
	return err
}

func (r EntidadIncidentada) Serialize(w io.Writer) error {
	return writeEntidadIncidentada(r, w)
}

func (r EntidadIncidentada) Schema() string {
	return "{\"fields\":[{\"name\":\"tipo\",\"type\":\"string\"},{\"name\":\"identificador\",\"type\":\"string\"},{\"default\":null,\"name\":\"subentidades\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]}],\"name\":\"Andreani.Incidencias.Events.Common.EntidadIncidentada\",\"type\":\"record\"}"
}

func (r EntidadIncidentada) SchemaName() string {
	return "Andreani.Incidencias.Events.Common.EntidadIncidentada"
}

func (_ EntidadIncidentada) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EntidadIncidentada) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EntidadIncidentada) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EntidadIncidentada) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EntidadIncidentada) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EntidadIncidentada) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EntidadIncidentada) SetString(v string)   { panic("Unsupported operation") }
func (_ EntidadIncidentada) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EntidadIncidentada) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Tipo}

		return w

	case 1:
		w := types.String{Target: &r.Identificador}

		return w

	case 2:
		r.Subentidades = NewUnionNullArrayString()

		return r.Subentidades
	}
	panic("Unknown field index")
}

func (r *EntidadIncidentada) SetDefault(i int) {
	switch i {
	case 2:
		r.Subentidades = nil
		return
	}
	panic("Unknown field index")
}

func (r *EntidadIncidentada) NullField(i int) {
	switch i {
	case 2:
		r.Subentidades = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ EntidadIncidentada) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EntidadIncidentada) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EntidadIncidentada) HintSize(int)                     { panic("Unsupported operation") }
func (_ EntidadIncidentada) Finalize()                        {}

func (_ EntidadIncidentada) AvroCRC64Fingerprint() []byte {
	return []byte(EntidadIncidentadaAvroCRC64Fingerprint)
}

func (r EntidadIncidentada) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["tipo"], err = json.Marshal(r.Tipo)
	if err != nil {
		return nil, err
	}
	output["identificador"], err = json.Marshal(r.Identificador)
	if err != nil {
		return nil, err
	}
	output["subentidades"], err = json.Marshal(r.Subentidades)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EntidadIncidentada) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["tipo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Tipo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for tipo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["identificador"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Identificador); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for identificador")
	}
	val = func() json.RawMessage {
		if v, ok := fields["subentidades"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Subentidades); err != nil {
			return err
		}
	} else {
		r.Subentidades = NewUnionNullArrayString()

		r.Subentidades = nil
	}
	return nil
}
