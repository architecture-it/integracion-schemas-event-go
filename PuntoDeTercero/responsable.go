// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Responsable.avsc
 */
package PuntoDeTerceroEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Responsable struct {
	Nombre string `json:"nombre"`

	Apellido *UnionNullString `json:"apellido"`

	Mail string `json:"mail"`
}

const ResponsableAvroCRC64Fingerprint = "çŠ–po\x1d\x04\x81"

func NewResponsable() Responsable {
	r := Responsable{}
	return r
}

func DeserializeResponsable(r io.Reader) (Responsable, error) {
	t := NewResponsable()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeResponsableFromSchema(r io.Reader, schema string) (Responsable, error) {
	t := NewResponsable()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeResponsable(r Responsable, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Nombre, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Apellido, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Mail, w)
	if err != nil {
		return err
	}
	return err
}

func (r Responsable) Serialize(w io.Writer) error {
	return writeResponsable(r, w)
}

func (r Responsable) Schema() string {
	return "{\"fields\":[{\"name\":\"nombre\",\"type\":\"string\"},{\"name\":\"apellido\",\"type\":[\"null\",\"string\"]},{\"name\":\"mail\",\"type\":\"string\"}],\"name\":\"Andreani.PuntoDeTercero.Events.Common.Responsable\",\"type\":\"record\"}"
}

func (r Responsable) SchemaName() string {
	return "Andreani.PuntoDeTercero.Events.Common.Responsable"
}

func (_ Responsable) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Responsable) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Responsable) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Responsable) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Responsable) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Responsable) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Responsable) SetString(v string)   { panic("Unsupported operation") }
func (_ Responsable) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Responsable) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Nombre}

		return w

	case 1:
		r.Apellido = NewUnionNullString()

		return r.Apellido
	case 2:
		w := types.String{Target: &r.Mail}

		return w

	}
	panic("Unknown field index")
}

func (r *Responsable) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Responsable) NullField(i int) {
	switch i {
	case 1:
		r.Apellido = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Responsable) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Responsable) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Responsable) HintSize(int)                     { panic("Unsupported operation") }
func (_ Responsable) Finalize()                        {}

func (_ Responsable) AvroCRC64Fingerprint() []byte {
	return []byte(ResponsableAvroCRC64Fingerprint)
}

func (r Responsable) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["nombre"], err = json.Marshal(r.Nombre)
	if err != nil {
		return nil, err
	}
	output["apellido"], err = json.Marshal(r.Apellido)
	if err != nil {
		return nil, err
	}
	output["mail"], err = json.Marshal(r.Mail)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Responsable) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["nombre"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nombre); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for nombre")
	}
	val = func() json.RawMessage {
		if v, ok := fields["apellido"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Apellido); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for apellido")
	}
	val = func() json.RawMessage {
		if v, ok := fields["mail"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Mail); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for mail")
	}
	return nil
}
