// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ListMessages.avsc
 */
package MessagesEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ListMessages struct {
	Messages []Message `json:"messages"`
}

const ListMessagesAvroCRC64Fingerprint = "<G\x97\xdd8L3\xb3"

func NewListMessages() ListMessages {
	r := ListMessages{}
	r.Messages = make([]Message, 0)

	return r
}

func DeserializeListMessages(r io.Reader) (ListMessages, error) {
	t := NewListMessages()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeListMessagesFromSchema(r io.Reader, schema string) (ListMessages, error) {
	t := NewListMessages()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeListMessages(r ListMessages, w io.Writer) error {
	var err error
	err = writeArrayMessage(r.Messages, w)
	if err != nil {
		return err
	}
	return err
}

func (r ListMessages) Serialize(w io.Writer) error {
	return writeListMessages(r, w)
}

func (r ListMessages) Schema() string {
	return "{\"fields\":[{\"name\":\"messages\",\"type\":{\"items\":{\"fields\":[{\"default\":null,\"name\":\"Subject\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Body\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"From\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"To\",\"type\":[\"null\",\"string\"]}],\"name\":\"Message\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Andreani.Messages.Events.Record.ListMessages\",\"type\":\"record\"}"
}

func (r ListMessages) SchemaName() string {
	return "Andreani.Messages.Events.Record.ListMessages"
}

func (_ ListMessages) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ListMessages) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ListMessages) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ListMessages) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ListMessages) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ListMessages) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ListMessages) SetString(v string)   { panic("Unsupported operation") }
func (_ ListMessages) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ListMessages) Get(i int) types.Field {
	switch i {
	case 0:
		r.Messages = make([]Message, 0)

		w := ArrayMessageWrapper{Target: &r.Messages}

		return w

	}
	panic("Unknown field index")
}

func (r *ListMessages) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ListMessages) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ ListMessages) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ListMessages) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ListMessages) HintSize(int)                     { panic("Unsupported operation") }
func (_ ListMessages) Finalize()                        {}

func (_ ListMessages) AvroCRC64Fingerprint() []byte {
	return []byte(ListMessagesAvroCRC64Fingerprint)
}

func (r ListMessages) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["messages"], err = json.Marshal(r.Messages)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ListMessages) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["messages"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Messages); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for messages")
	}
	return nil
}
