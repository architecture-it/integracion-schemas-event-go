// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     ListaEnviosANumerar.avsc
 */
package AdmicionEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ListaEnviosANumerar struct {
	EnviosANumerar *UnionNullArrayEnvioANumerar `json:"EnviosANumerar"`
}

const ListaEnviosANumerarAvroCRC64Fingerprint = "€ê\xfe\x99\x8f\x1d\xca\xd2"

func NewListaEnviosANumerar() ListaEnviosANumerar {
	r := ListaEnviosANumerar{}
	r.EnviosANumerar = nil
	return r
}

func DeserializeListaEnviosANumerar(r io.Reader) (ListaEnviosANumerar, error) {
	t := NewListaEnviosANumerar()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeListaEnviosANumerarFromSchema(r io.Reader, schema string) (ListaEnviosANumerar, error) {
	t := NewListaEnviosANumerar()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeListaEnviosANumerar(r ListaEnviosANumerar, w io.Writer) error {
	var err error
	err = writeUnionNullArrayEnvioANumerar(r.EnviosANumerar, w)
	if err != nil {
		return err
	}
	return err
}

func (r ListaEnviosANumerar) Serialize(w io.Writer) error {
	return writeListaEnviosANumerar(r, w)
}

func (r ListaEnviosANumerar) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"EnviosANumerar\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"name\":\"PrePieceHeader\",\"type\":\"long\"},{\"name\":\"PrePiece\",\"type\":\"int\"},{\"default\":null,\"name\":\"PostalStampNumber\",\"type\":[\"null\",\"string\"]},{\"name\":\"internalContrac\",\"type\":\"string\"},{\"name\":\"branchID\",\"type\":\"int\"},{\"name\":\"OperatorId\",\"type\":\"int\"},{\"name\":\"Published\",\"type\":\"boolean\"}],\"name\":\"EnvioANumerar\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"Andreani.Admicion.Events.Record.ListaEnviosANumerar\",\"type\":\"record\"}"
}

func (r ListaEnviosANumerar) SchemaName() string {
	return "Andreani.Admicion.Events.Record.ListaEnviosANumerar"
}

func (_ ListaEnviosANumerar) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ListaEnviosANumerar) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ListaEnviosANumerar) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ListaEnviosANumerar) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ListaEnviosANumerar) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ListaEnviosANumerar) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ListaEnviosANumerar) SetString(v string)   { panic("Unsupported operation") }
func (_ ListaEnviosANumerar) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ListaEnviosANumerar) Get(i int) types.Field {
	switch i {
	case 0:
		r.EnviosANumerar = NewUnionNullArrayEnvioANumerar()

		return r.EnviosANumerar
	}
	panic("Unknown field index")
}

func (r *ListaEnviosANumerar) SetDefault(i int) {
	switch i {
	case 0:
		r.EnviosANumerar = nil
		return
	}
	panic("Unknown field index")
}

func (r *ListaEnviosANumerar) NullField(i int) {
	switch i {
	case 0:
		r.EnviosANumerar = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ListaEnviosANumerar) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ListaEnviosANumerar) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ListaEnviosANumerar) HintSize(int)                     { panic("Unsupported operation") }
func (_ ListaEnviosANumerar) Finalize()                        {}

func (_ ListaEnviosANumerar) AvroCRC64Fingerprint() []byte {
	return []byte(ListaEnviosANumerarAvroCRC64Fingerprint)
}

func (r ListaEnviosANumerar) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["EnviosANumerar"], err = json.Marshal(r.EnviosANumerar)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ListaEnviosANumerar) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["EnviosANumerar"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EnviosANumerar); err != nil {
			return err
		}
	} else {
		r.EnviosANumerar = NewUnionNullArrayEnvioANumerar()

		r.EnviosANumerar = nil
	}
	return nil
}
