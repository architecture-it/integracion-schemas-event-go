// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     CeToUpload.avsc
 */
package ConstanciasElectronicasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CeToUpload struct {
	Contrato Contrato `json:"contrato"`

	Constancia Constancia `json:"constancia"`
}

const CeToUploadAvroCRC64Fingerprint = "\tS\x1d\xcb\xe5LB\xb6"

func NewCeToUpload() CeToUpload {
	r := CeToUpload{}
	r.Contrato = NewContrato()

	r.Constancia = NewConstancia()

	return r
}

func DeserializeCeToUpload(r io.Reader) (CeToUpload, error) {
	t := NewCeToUpload()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCeToUploadFromSchema(r io.Reader, schema string) (CeToUpload, error) {
	t := NewCeToUpload()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCeToUpload(r CeToUpload, w io.Writer) error {
	var err error
	err = writeContrato(r.Contrato, w)
	if err != nil {
		return err
	}
	err = writeConstancia(r.Constancia, w)
	if err != nil {
		return err
	}
	return err
}

func (r CeToUpload) Serialize(w io.Writer) error {
	return writeCeToUpload(r, w)
}

func (r CeToUpload) Schema() string {
	return "{\"fields\":[{\"name\":\"contrato\",\"type\":{\"fields\":[{\"name\":\"codigoDeContratoInterno\",\"type\":\"string\"},{\"name\":\"codigoDeClienteInterno\",\"type\":\"string\"},{\"name\":\"status\",\"type\":{\"name\":\"EntityStatus\",\"symbols\":[\"Inactive\",\"Active\",\"Expired\",\"Deleted\"],\"type\":\"enum\"}}],\"name\":\"Contrato\",\"namespace\":\"Andreani.ConstanciasElectronicas.Common\",\"type\":\"record\"}},{\"name\":\"constancia\",\"type\":{\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"guid\",\"type\":\"string\"},{\"name\":\"attemps\",\"type\":\"int\"}],\"name\":\"Constancia\",\"namespace\":\"Andreani.ConstanciasElectronicas.Common\",\"type\":\"record\"}}],\"name\":\"Andreani.ConstanciasElectronicas.CeToUpload\",\"type\":\"record\"}"
}

func (r CeToUpload) SchemaName() string {
	return "Andreani.ConstanciasElectronicas.CeToUpload"
}

func (_ CeToUpload) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CeToUpload) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CeToUpload) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CeToUpload) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CeToUpload) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CeToUpload) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CeToUpload) SetString(v string)   { panic("Unsupported operation") }
func (_ CeToUpload) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CeToUpload) Get(i int) types.Field {
	switch i {
	case 0:
		r.Contrato = NewContrato()

		w := types.Record{Target: &r.Contrato}

		return w

	case 1:
		r.Constancia = NewConstancia()

		w := types.Record{Target: &r.Constancia}

		return w

	}
	panic("Unknown field index")
}

func (r *CeToUpload) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *CeToUpload) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ CeToUpload) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CeToUpload) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CeToUpload) HintSize(int)                     { panic("Unsupported operation") }
func (_ CeToUpload) Finalize()                        {}

func (_ CeToUpload) AvroCRC64Fingerprint() []byte {
	return []byte(CeToUploadAvroCRC64Fingerprint)
}

func (r CeToUpload) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["contrato"], err = json.Marshal(r.Contrato)
	if err != nil {
		return nil, err
	}
	output["constancia"], err = json.Marshal(r.Constancia)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CeToUpload) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["contrato"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contrato); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for contrato")
	}
	val = func() json.RawMessage {
		if v, ok := fields["constancia"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Constancia); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for constancia")
	}
	return nil
}
