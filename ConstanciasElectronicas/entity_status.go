// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Template.avsc
 */
package ConstanciasElectronicasEvents

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EntityStatus int32

const (
	EntityStatusInactive EntityStatus = 0
	EntityStatusActive   EntityStatus = 1
	EntityStatusExpired  EntityStatus = 2
	EntityStatusDeleted  EntityStatus = 3
)

func (e EntityStatus) String() string {
	switch e {
	case EntityStatusInactive:
		return "Inactive"
	case EntityStatusActive:
		return "Active"
	case EntityStatusExpired:
		return "Expired"
	case EntityStatusDeleted:
		return "Deleted"
	}
	return "unknown"
}

func writeEntityStatus(r EntityStatus, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewEntityStatusValue(raw string) (r EntityStatus, err error) {
	switch raw {
	case "Inactive":
		return EntityStatusInactive, nil
	case "Active":
		return EntityStatusActive, nil
	case "Expired":
		return EntityStatusExpired, nil
	case "Deleted":
		return EntityStatusDeleted, nil
	}

	return -1, fmt.Errorf("invalid value for EntityStatus: '%s'", raw)

}

func (b EntityStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *EntityStatus) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewEntityStatusValue(stringVal)
	*b = val
	return err
}

type EntityStatusWrapper struct {
	Target *EntityStatus
}

func (b EntityStatusWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b EntityStatusWrapper) SetInt(v int32) {
	*(b.Target) = EntityStatus(v)
}

func (b EntityStatusWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b EntityStatusWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b EntityStatusWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b EntityStatusWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b EntityStatusWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b EntityStatusWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b EntityStatusWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b EntityStatusWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b EntityStatusWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b EntityStatusWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b EntityStatusWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b EntityStatusWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b EntityStatusWrapper) Finalize() {}
